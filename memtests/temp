circuit sram6t :
  extmodule mem_EXT :
    output T_3_data : UInt<32>
    input T_3_addr : UInt<7>
    input T_3_en : UInt<1>
    input T_3_clk : Clock
    input T_5_data : UInt<32>
    input T_5_mask : UInt<1>
    input T_5_addr : UInt<7>
    input T_5_en : UInt<1>
    input T_5_clk : Clock
  

  module mem :
    output T_3_data : UInt<32>
    input T_3_addr : UInt<7>
    input T_3_en : UInt<1>
    input T_3_clk : Clock
    input T_5_data : UInt<32>
    input T_5_mask : UInt<1>
    input T_5_addr : UInt<7>
    input T_5_en : UInt<1>
    input T_5_clk : Clock
  
    inst mem_EXT of mem_EXT

    T_3_data <= mem_EXT.T_3_data
    mem_EXT.T_3_addr <= T_3_addr
    mem_EXT.T_3_en <= T_3_en
    mem_EXT.T_3_clk <= T_3_clk
    mem_EXT.T_5_data  <= T_5_data
    mem_EXT.T_5_mask  <= T_5_mask
    mem_EXT.T_5_addr <= T_5_addr
    mem_EXT.T_5_en <= T_5_en
    mem_EXT.T_5_clk <= T_5_clk


  module sram6t :
    input clk : Clock
    input reset : UInt<1>
    input io_en : UInt<1>
    input io_wen : UInt<1>
    input io_waddr : UInt<8>
    input io_wdata : UInt<32>
    input io_raddr : UInt<8>
    output io_rdata : UInt<32>
  
    inst mem of mem
    node T_0 = eq(io_wen, UInt<1>("h0"))
    node T_1 = and(io_en, T_0)
    wire T_2 : UInt<8>
    node GEN_0 = validif(T_1, io_raddr)
    node GEN_1 = mux(T_1, UInt<1>("h1"), UInt<1>("h0"))
    node T_4 = and(io_en, io_wen)
    node GEN_2 = validif(T_4, io_waddr)
    node GEN_3 = validif(T_4, clk)
    node GEN_4 = mux(T_4, UInt<1>("h1"), UInt<1>("h0"))
    node GEN_5 = validif(T_4, io_wdata)
    node GEN_6 = mux(T_4, UInt<1>("h1"), UInt<1>("h0"))
    io_rdata <= mem.T_3_data
    mem.T_3_addr <= bits(T_2, 6, 0)
    mem.T_3_clk <= clk
    mem.T_3_en <= GEN_1
    mem.T_5_addr <= bits(GEN_2, 6, 0)
    mem.T_5_clk <= GEN_3
    mem.T_5_en <= GEN_4
    mem.T_5_data <= GEN_5
    mem.T_5_mask <= GEN_6
    T_2 <= GEN_0