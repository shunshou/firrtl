circuit Top : 
  module RVCExpander : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<32>, out : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>}, rvc : UInt<1>}
    
    io is invalid
    node T_8 = bits(io.in, 1, 0) @[rvc.scala 159:20] 
    node T_10 = neq(T_8, UInt<2>("h03")) @[rvc.scala 159:26] 
    io.rvc <= T_10 @[rvc.scala 159:12] 
    node T_11 = bits(io.in, 12, 5) @[rvc.scala 50:22] 
    node T_13 = neq(T_11, UInt<1>("h00")) @[rvc.scala 50:29] 
    node T_16 = mux(T_13, UInt<7>("h013"), UInt<7>("h01f")) @[rvc.scala 50:20] 
    node T_17 = bits(io.in, 10, 7) @[rvc.scala 31:26] 
    node T_18 = bits(io.in, 12, 11) @[rvc.scala 31:35] 
    node T_19 = bits(io.in, 5, 5) @[rvc.scala 31:45] 
    node T_20 = bits(io.in, 6, 6) @[rvc.scala 31:51] 
    node T_22 = cat(T_20, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_23 = cat(T_17, T_18) @[Cat.scala 20:58] 
    node T_24 = cat(T_23, T_19) @[Cat.scala 20:58] 
    node T_25 = cat(T_24, T_22) @[Cat.scala 20:58] 
    node T_29 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_30 = cat(UInt<2>("h01"), T_29) @[Cat.scala 20:58] 
    node T_31 = cat(T_30, T_16) @[Cat.scala 20:58] 
    node T_32 = cat(T_25, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_33 = cat(T_32, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_34 = cat(T_33, T_31) @[Cat.scala 20:58] 
    node T_36 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_37 = cat(UInt<2>("h01"), T_36) @[Cat.scala 20:58] 
    node T_40 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_41 = cat(UInt<2>("h01"), T_40) @[Cat.scala 20:58] 
    node T_42 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_49 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_49 is invalid @[rvc.scala 18:19] 
    T_49.bits <= T_34 @[rvc.scala 19:14] 
    T_49.rd <= T_37 @[rvc.scala 20:12] 
    T_49.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_49.rs2 <= T_41 @[rvc.scala 22:13] 
    T_49.rs3 <= T_42 @[rvc.scala 23:13] 
    node T_55 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_56 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_58 = cat(T_55, T_56) @[Cat.scala 20:58] 
    node T_59 = cat(T_58, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_61 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_62 = cat(UInt<2>("h01"), T_61) @[Cat.scala 20:58] 
    node T_65 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_66 = cat(UInt<2>("h01"), T_65) @[Cat.scala 20:58] 
    node T_68 = cat(T_66, UInt<7>("h07")) @[Cat.scala 20:58] 
    node T_69 = cat(T_59, T_62) @[Cat.scala 20:58] 
    node T_70 = cat(T_69, UInt<3>("h03")) @[Cat.scala 20:58] 
    node T_71 = cat(T_70, T_68) @[Cat.scala 20:58] 
    node T_73 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_74 = cat(UInt<2>("h01"), T_73) @[Cat.scala 20:58] 
    node T_76 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_77 = cat(UInt<2>("h01"), T_76) @[Cat.scala 20:58] 
    node T_79 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_80 = cat(UInt<2>("h01"), T_79) @[Cat.scala 20:58] 
    node T_81 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_88 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_88 is invalid @[rvc.scala 18:19] 
    T_88.bits <= T_71 @[rvc.scala 19:14] 
    T_88.rd <= T_74 @[rvc.scala 20:12] 
    T_88.rs1 <= T_77 @[rvc.scala 21:13] 
    T_88.rs2 <= T_80 @[rvc.scala 22:13] 
    T_88.rs3 <= T_81 @[rvc.scala 23:13] 
    node T_94 = bits(io.in, 5, 5) @[rvc.scala 32:20] 
    node T_95 = bits(io.in, 12, 10) @[rvc.scala 32:26] 
    node T_96 = bits(io.in, 6, 6) @[rvc.scala 32:36] 
    node T_98 = cat(T_96, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_99 = cat(T_94, T_95) @[Cat.scala 20:58] 
    node T_100 = cat(T_99, T_98) @[Cat.scala 20:58] 
    node T_102 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_103 = cat(UInt<2>("h01"), T_102) @[Cat.scala 20:58] 
    node T_106 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_107 = cat(UInt<2>("h01"), T_106) @[Cat.scala 20:58] 
    node T_109 = cat(T_107, UInt<7>("h03")) @[Cat.scala 20:58] 
    node T_110 = cat(T_100, T_103) @[Cat.scala 20:58] 
    node T_111 = cat(T_110, UInt<3>("h02")) @[Cat.scala 20:58] 
    node T_112 = cat(T_111, T_109) @[Cat.scala 20:58] 
    node T_114 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_115 = cat(UInt<2>("h01"), T_114) @[Cat.scala 20:58] 
    node T_117 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_118 = cat(UInt<2>("h01"), T_117) @[Cat.scala 20:58] 
    node T_120 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_121 = cat(UInt<2>("h01"), T_120) @[Cat.scala 20:58] 
    node T_122 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_129 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_129 is invalid @[rvc.scala 18:19] 
    T_129.bits <= T_112 @[rvc.scala 19:14] 
    T_129.rd <= T_115 @[rvc.scala 20:12] 
    T_129.rs1 <= T_118 @[rvc.scala 21:13] 
    T_129.rs2 <= T_121 @[rvc.scala 22:13] 
    T_129.rs3 <= T_122 @[rvc.scala 23:13] 
    node T_135 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_136 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_138 = cat(T_135, T_136) @[Cat.scala 20:58] 
    node T_139 = cat(T_138, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_141 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_142 = cat(UInt<2>("h01"), T_141) @[Cat.scala 20:58] 
    node T_145 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_146 = cat(UInt<2>("h01"), T_145) @[Cat.scala 20:58] 
    node T_148 = cat(T_146, UInt<7>("h03")) @[Cat.scala 20:58] 
    node T_149 = cat(T_139, T_142) @[Cat.scala 20:58] 
    node T_150 = cat(T_149, UInt<3>("h03")) @[Cat.scala 20:58] 
    node T_151 = cat(T_150, T_148) @[Cat.scala 20:58] 
    node T_153 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_154 = cat(UInt<2>("h01"), T_153) @[Cat.scala 20:58] 
    node T_156 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_157 = cat(UInt<2>("h01"), T_156) @[Cat.scala 20:58] 
    node T_159 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_160 = cat(UInt<2>("h01"), T_159) @[Cat.scala 20:58] 
    node T_161 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_168 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_168 is invalid @[rvc.scala 18:19] 
    T_168.bits <= T_151 @[rvc.scala 19:14] 
    T_168.rd <= T_154 @[rvc.scala 20:12] 
    T_168.rs1 <= T_157 @[rvc.scala 21:13] 
    T_168.rs2 <= T_160 @[rvc.scala 22:13] 
    T_168.rs3 <= T_161 @[rvc.scala 23:13] 
    node T_174 = bits(io.in, 5, 5) @[rvc.scala 32:20] 
    node T_175 = bits(io.in, 12, 10) @[rvc.scala 32:26] 
    node T_176 = bits(io.in, 6, 6) @[rvc.scala 32:36] 
    node T_178 = cat(T_176, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_179 = cat(T_174, T_175) @[Cat.scala 20:58] 
    node T_180 = cat(T_179, T_178) @[Cat.scala 20:58] 
    node T_181 = shr(T_180, 5) @[rvc.scala 60:32] 
    node T_183 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_184 = cat(UInt<2>("h01"), T_183) @[Cat.scala 20:58] 
    node T_186 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_187 = cat(UInt<2>("h01"), T_186) @[Cat.scala 20:58] 
    node T_189 = bits(io.in, 5, 5) @[rvc.scala 32:20] 
    node T_190 = bits(io.in, 12, 10) @[rvc.scala 32:26] 
    node T_191 = bits(io.in, 6, 6) @[rvc.scala 32:36] 
    node T_193 = cat(T_191, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_194 = cat(T_189, T_190) @[Cat.scala 20:58] 
    node T_195 = cat(T_194, T_193) @[Cat.scala 20:58] 
    node T_196 = bits(T_195, 4, 0) @[rvc.scala 60:66] 
    node T_198 = cat(UInt<3>("h02"), T_196) @[Cat.scala 20:58] 
    node T_199 = cat(T_198, UInt<7>("h02f")) @[Cat.scala 20:58] 
    node T_200 = cat(T_181, T_184) @[Cat.scala 20:58] 
    node T_201 = cat(T_200, T_187) @[Cat.scala 20:58] 
    node T_202 = cat(T_201, T_199) @[Cat.scala 20:58] 
    node T_204 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_205 = cat(UInt<2>("h01"), T_204) @[Cat.scala 20:58] 
    node T_207 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_208 = cat(UInt<2>("h01"), T_207) @[Cat.scala 20:58] 
    node T_210 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_211 = cat(UInt<2>("h01"), T_210) @[Cat.scala 20:58] 
    node T_212 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_219 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_219 is invalid @[rvc.scala 18:19] 
    T_219.bits <= T_202 @[rvc.scala 19:14] 
    T_219.rd <= T_205 @[rvc.scala 20:12] 
    T_219.rs1 <= T_208 @[rvc.scala 21:13] 
    T_219.rs2 <= T_211 @[rvc.scala 22:13] 
    T_219.rs3 <= T_212 @[rvc.scala 23:13] 
    node T_225 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_226 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_228 = cat(T_225, T_226) @[Cat.scala 20:58] 
    node T_229 = cat(T_228, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_230 = shr(T_229, 5) @[rvc.scala 63:30] 
    node T_232 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_233 = cat(UInt<2>("h01"), T_232) @[Cat.scala 20:58] 
    node T_235 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_236 = cat(UInt<2>("h01"), T_235) @[Cat.scala 20:58] 
    node T_238 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_239 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_241 = cat(T_238, T_239) @[Cat.scala 20:58] 
    node T_242 = cat(T_241, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_243 = bits(T_242, 4, 0) @[rvc.scala 63:64] 
    node T_245 = cat(UInt<3>("h03"), T_243) @[Cat.scala 20:58] 
    node T_246 = cat(T_245, UInt<7>("h027")) @[Cat.scala 20:58] 
    node T_247 = cat(T_230, T_233) @[Cat.scala 20:58] 
    node T_248 = cat(T_247, T_236) @[Cat.scala 20:58] 
    node T_249 = cat(T_248, T_246) @[Cat.scala 20:58] 
    node T_251 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_252 = cat(UInt<2>("h01"), T_251) @[Cat.scala 20:58] 
    node T_254 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_255 = cat(UInt<2>("h01"), T_254) @[Cat.scala 20:58] 
    node T_257 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_258 = cat(UInt<2>("h01"), T_257) @[Cat.scala 20:58] 
    node T_259 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_266 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_266 is invalid @[rvc.scala 18:19] 
    T_266.bits <= T_249 @[rvc.scala 19:14] 
    T_266.rd <= T_252 @[rvc.scala 20:12] 
    T_266.rs1 <= T_255 @[rvc.scala 21:13] 
    T_266.rs2 <= T_258 @[rvc.scala 22:13] 
    T_266.rs3 <= T_259 @[rvc.scala 23:13] 
    node T_272 = bits(io.in, 5, 5) @[rvc.scala 32:20] 
    node T_273 = bits(io.in, 12, 10) @[rvc.scala 32:26] 
    node T_274 = bits(io.in, 6, 6) @[rvc.scala 32:36] 
    node T_276 = cat(T_274, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_277 = cat(T_272, T_273) @[Cat.scala 20:58] 
    node T_278 = cat(T_277, T_276) @[Cat.scala 20:58] 
    node T_279 = shr(T_278, 5) @[rvc.scala 62:29] 
    node T_281 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_282 = cat(UInt<2>("h01"), T_281) @[Cat.scala 20:58] 
    node T_284 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_285 = cat(UInt<2>("h01"), T_284) @[Cat.scala 20:58] 
    node T_287 = bits(io.in, 5, 5) @[rvc.scala 32:20] 
    node T_288 = bits(io.in, 12, 10) @[rvc.scala 32:26] 
    node T_289 = bits(io.in, 6, 6) @[rvc.scala 32:36] 
    node T_291 = cat(T_289, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_292 = cat(T_287, T_288) @[Cat.scala 20:58] 
    node T_293 = cat(T_292, T_291) @[Cat.scala 20:58] 
    node T_294 = bits(T_293, 4, 0) @[rvc.scala 62:63] 
    node T_296 = cat(UInt<3>("h02"), T_294) @[Cat.scala 20:58] 
    node T_297 = cat(T_296, UInt<7>("h023")) @[Cat.scala 20:58] 
    node T_298 = cat(T_279, T_282) @[Cat.scala 20:58] 
    node T_299 = cat(T_298, T_285) @[Cat.scala 20:58] 
    node T_300 = cat(T_299, T_297) @[Cat.scala 20:58] 
    node T_302 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_303 = cat(UInt<2>("h01"), T_302) @[Cat.scala 20:58] 
    node T_305 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_306 = cat(UInt<2>("h01"), T_305) @[Cat.scala 20:58] 
    node T_308 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_309 = cat(UInt<2>("h01"), T_308) @[Cat.scala 20:58] 
    node T_310 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_317 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_317 is invalid @[rvc.scala 18:19] 
    T_317.bits <= T_300 @[rvc.scala 19:14] 
    T_317.rd <= T_303 @[rvc.scala 20:12] 
    T_317.rs1 <= T_306 @[rvc.scala 21:13] 
    T_317.rs2 <= T_309 @[rvc.scala 22:13] 
    T_317.rs3 <= T_310 @[rvc.scala 23:13] 
    node T_323 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_324 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_326 = cat(T_323, T_324) @[Cat.scala 20:58] 
    node T_327 = cat(T_326, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_328 = shr(T_327, 5) @[rvc.scala 61:29] 
    node T_330 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_331 = cat(UInt<2>("h01"), T_330) @[Cat.scala 20:58] 
    node T_333 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_334 = cat(UInt<2>("h01"), T_333) @[Cat.scala 20:58] 
    node T_336 = bits(io.in, 6, 5) @[rvc.scala 33:20] 
    node T_337 = bits(io.in, 12, 10) @[rvc.scala 33:28] 
    node T_339 = cat(T_336, T_337) @[Cat.scala 20:58] 
    node T_340 = cat(T_339, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_341 = bits(T_340, 4, 0) @[rvc.scala 61:63] 
    node T_343 = cat(UInt<3>("h03"), T_341) @[Cat.scala 20:58] 
    node T_344 = cat(T_343, UInt<7>("h023")) @[Cat.scala 20:58] 
    node T_345 = cat(T_328, T_331) @[Cat.scala 20:58] 
    node T_346 = cat(T_345, T_334) @[Cat.scala 20:58] 
    node T_347 = cat(T_346, T_344) @[Cat.scala 20:58] 
    node T_349 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_350 = cat(UInt<2>("h01"), T_349) @[Cat.scala 20:58] 
    node T_352 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_353 = cat(UInt<2>("h01"), T_352) @[Cat.scala 20:58] 
    node T_355 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_356 = cat(UInt<2>("h01"), T_355) @[Cat.scala 20:58] 
    node T_357 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_364 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_364 is invalid @[rvc.scala 18:19] 
    T_364.bits <= T_347 @[rvc.scala 19:14] 
    T_364.rd <= T_350 @[rvc.scala 20:12] 
    T_364.rs1 <= T_353 @[rvc.scala 21:13] 
    T_364.rs2 <= T_356 @[rvc.scala 22:13] 
    T_364.rs3 <= T_357 @[rvc.scala 23:13] 
    node T_370 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_371 = bits(T_370, 0, 0) @[Bitwise.scala 33:15] 
    node T_374 = mux(T_371, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_375 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_376 = cat(T_374, T_375) @[Cat.scala 20:58] 
    node T_377 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_379 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_381 = cat(T_379, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_382 = cat(T_376, T_377) @[Cat.scala 20:58] 
    node T_383 = cat(T_382, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_384 = cat(T_383, T_381) @[Cat.scala 20:58] 
    node T_385 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_386 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_388 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_389 = cat(UInt<2>("h01"), T_388) @[Cat.scala 20:58] 
    node T_390 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_397 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_397 is invalid @[rvc.scala 18:19] 
    T_397.bits <= T_384 @[rvc.scala 19:14] 
    T_397.rd <= T_385 @[rvc.scala 20:12] 
    T_397.rs1 <= T_386 @[rvc.scala 21:13] 
    T_397.rs2 <= T_389 @[rvc.scala 22:13] 
    T_397.rs3 <= T_390 @[rvc.scala 23:13] 
    node T_403 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_405 = neq(T_403, UInt<1>("h00")) @[rvc.scala 74:24] 
    node T_408 = mux(T_405, UInt<7>("h01b"), UInt<7>("h01f")) @[rvc.scala 74:20] 
    node T_409 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_410 = bits(T_409, 0, 0) @[Bitwise.scala 33:15] 
    node T_413 = mux(T_410, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_414 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_415 = cat(T_413, T_414) @[Cat.scala 20:58] 
    node T_416 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_418 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_419 = cat(T_418, T_408) @[Cat.scala 20:58] 
    node T_420 = cat(T_415, T_416) @[Cat.scala 20:58] 
    node T_421 = cat(T_420, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_422 = cat(T_421, T_419) @[Cat.scala 20:58] 
    node T_423 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_424 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_426 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_427 = cat(UInt<2>("h01"), T_426) @[Cat.scala 20:58] 
    node T_428 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_435 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_435 is invalid @[rvc.scala 18:19] 
    T_435.bits <= T_422 @[rvc.scala 19:14] 
    T_435.rd <= T_423 @[rvc.scala 20:12] 
    T_435.rs1 <= T_424 @[rvc.scala 21:13] 
    T_435.rs2 <= T_427 @[rvc.scala 22:13] 
    T_435.rs3 <= T_428 @[rvc.scala 23:13] 
    node T_441 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_442 = bits(T_441, 0, 0) @[Bitwise.scala 33:15] 
    node T_445 = mux(T_442, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_446 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_447 = cat(T_445, T_446) @[Cat.scala 20:58] 
    node T_450 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_452 = cat(T_450, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_453 = cat(T_447, UInt<5>("h00")) @[Cat.scala 20:58] 
    node T_454 = cat(T_453, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_455 = cat(T_454, T_452) @[Cat.scala 20:58] 
    node T_456 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_459 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_460 = cat(UInt<2>("h01"), T_459) @[Cat.scala 20:58] 
    node T_461 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_468 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_468 is invalid @[rvc.scala 18:19] 
    T_468.bits <= T_455 @[rvc.scala 19:14] 
    T_468.rd <= T_456 @[rvc.scala 20:12] 
    T_468.rs1 <= UInt<5>("h00") @[rvc.scala 21:13] 
    T_468.rs2 <= T_460 @[rvc.scala 22:13] 
    T_468.rs3 <= T_461 @[rvc.scala 23:13] 
    node T_474 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_475 = bits(T_474, 0, 0) @[Bitwise.scala 33:15] 
    node T_478 = mux(T_475, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_479 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_480 = cat(T_478, T_479) @[Cat.scala 20:58] 
    node T_482 = neq(T_480, UInt<1>("h00")) @[rvc.scala 87:29] 
    node T_485 = mux(T_482, UInt<7>("h037"), UInt<7>("h03f")) @[rvc.scala 87:20] 
    node T_486 = bits(io.in, 12, 12) @[rvc.scala 38:30] 
    node T_487 = bits(T_486, 0, 0) @[Bitwise.scala 33:15] 
    node T_490 = mux(T_487, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 33:12] 
    node T_491 = bits(io.in, 6, 2) @[rvc.scala 38:38] 
    node T_493 = cat(T_490, T_491) @[Cat.scala 20:58] 
    node T_494 = cat(T_493, UInt<12>("h00")) @[Cat.scala 20:58] 
    node T_495 = bits(T_494, 31, 12) @[rvc.scala 88:31] 
    node T_496 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_497 = cat(T_495, T_496) @[Cat.scala 20:58] 
    node T_498 = cat(T_497, T_485) @[Cat.scala 20:58] 
    node T_499 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_500 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_502 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_503 = cat(UInt<2>("h01"), T_502) @[Cat.scala 20:58] 
    node T_504 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_511 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_511 is invalid @[rvc.scala 18:19] 
    T_511.bits <= T_498 @[rvc.scala 19:14] 
    T_511.rd <= T_499 @[rvc.scala 20:12] 
    T_511.rs1 <= T_500 @[rvc.scala 21:13] 
    T_511.rs2 <= T_503 @[rvc.scala 22:13] 
    T_511.rs3 <= T_504 @[rvc.scala 23:13] 
    node T_517 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_519 = eq(T_517, UInt<5>("h00")) @[rvc.scala 89:14] 
    node T_520 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_522 = eq(T_520, UInt<5>("h02")) @[rvc.scala 89:27] 
    node T_523 = or(T_519, T_522) @[rvc.scala 89:21] 
    node T_524 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_525 = bits(T_524, 0, 0) @[Bitwise.scala 33:15] 
    node T_528 = mux(T_525, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_529 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_530 = cat(T_528, T_529) @[Cat.scala 20:58] 
    node T_532 = neq(T_530, UInt<1>("h00")) @[rvc.scala 83:29] 
    node T_535 = mux(T_532, UInt<7>("h013"), UInt<7>("h01f")) @[rvc.scala 83:20] 
    node T_536 = bits(io.in, 12, 12) @[rvc.scala 39:34] 
    node T_537 = bits(T_536, 0, 0) @[Bitwise.scala 33:15] 
    node T_540 = mux(T_537, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_541 = bits(io.in, 4, 3) @[rvc.scala 39:42] 
    node T_542 = bits(io.in, 5, 5) @[rvc.scala 39:50] 
    node T_543 = bits(io.in, 2, 2) @[rvc.scala 39:56] 
    node T_544 = bits(io.in, 6, 6) @[rvc.scala 39:62] 
    node T_546 = cat(T_543, T_544) @[Cat.scala 20:58] 
    node T_547 = cat(T_546, UInt<4>("h00")) @[Cat.scala 20:58] 
    node T_548 = cat(T_540, T_541) @[Cat.scala 20:58] 
    node T_549 = cat(T_548, T_542) @[Cat.scala 20:58] 
    node T_550 = cat(T_549, T_547) @[Cat.scala 20:58] 
    node T_551 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_553 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_554 = cat(T_553, T_535) @[Cat.scala 20:58] 
    node T_555 = cat(T_550, T_551) @[Cat.scala 20:58] 
    node T_556 = cat(T_555, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_557 = cat(T_556, T_554) @[Cat.scala 20:58] 
    node T_558 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_559 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_561 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_562 = cat(UInt<2>("h01"), T_561) @[Cat.scala 20:58] 
    node T_563 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_570 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_570 is invalid @[rvc.scala 18:19] 
    T_570.bits <= T_557 @[rvc.scala 19:14] 
    T_570.rd <= T_558 @[rvc.scala 20:12] 
    T_570.rs1 <= T_559 @[rvc.scala 21:13] 
    T_570.rs2 <= T_562 @[rvc.scala 22:13] 
    T_570.rs3 <= T_563 @[rvc.scala 23:13] 
    node T_576 = mux(T_523, T_570, T_511) @[rvc.scala 89:10] 
    node T_582 = bits(io.in, 12, 12) @[rvc.scala 43:20] 
    node T_583 = bits(io.in, 6, 2) @[rvc.scala 43:27] 
    node T_584 = cat(T_582, T_583) @[Cat.scala 20:58] 
    node T_586 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_587 = cat(UInt<2>("h01"), T_586) @[Cat.scala 20:58] 
    node T_590 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_591 = cat(UInt<2>("h01"), T_590) @[Cat.scala 20:58] 
    node T_593 = cat(T_591, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_594 = cat(T_584, T_587) @[Cat.scala 20:58] 
    node T_595 = cat(T_594, UInt<3>("h05")) @[Cat.scala 20:58] 
    node T_596 = cat(T_595, T_593) @[Cat.scala 20:58] 
    node T_597 = bits(io.in, 12, 12) @[rvc.scala 43:20] 
    node T_598 = bits(io.in, 6, 2) @[rvc.scala 43:27] 
    node T_599 = cat(T_597, T_598) @[Cat.scala 20:58] 
    node T_601 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_602 = cat(UInt<2>("h01"), T_601) @[Cat.scala 20:58] 
    node T_605 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_606 = cat(UInt<2>("h01"), T_605) @[Cat.scala 20:58] 
    node T_608 = cat(T_606, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_609 = cat(T_599, T_602) @[Cat.scala 20:58] 
    node T_610 = cat(T_609, UInt<3>("h05")) @[Cat.scala 20:58] 
    node T_611 = cat(T_610, T_608) @[Cat.scala 20:58] 
    node T_613 = or(T_611, UInt<31>("h040000000")) @[rvc.scala 96:23] 
    node T_614 = bits(io.in, 12, 12) @[rvc.scala 40:30] 
    node T_615 = bits(T_614, 0, 0) @[Bitwise.scala 33:15] 
    node T_618 = mux(T_615, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_619 = bits(io.in, 6, 2) @[rvc.scala 40:38] 
    node T_620 = cat(T_618, T_619) @[Cat.scala 20:58] 
    node T_622 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_623 = cat(UInt<2>("h01"), T_622) @[Cat.scala 20:58] 
    node T_626 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_627 = cat(UInt<2>("h01"), T_626) @[Cat.scala 20:58] 
    node T_629 = cat(T_627, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_630 = cat(T_620, T_623) @[Cat.scala 20:58] 
    node T_631 = cat(T_630, UInt<3>("h07")) @[Cat.scala 20:58] 
    node T_632 = cat(T_631, T_629) @[Cat.scala 20:58] 
    node T_641 = bits(io.in, 12, 12) @[rvc.scala 99:70] 
    node T_642 = bits(io.in, 6, 5) @[rvc.scala 99:77] 
    node T_643 = cat(T_641, T_642) @[Cat.scala 20:58] 
    node T_645 = and(T_643, UInt<2>("h03")) @[util.scala 39:26] 
    node T_647 = geq(T_643, UInt<3>("h04")) @[util.scala 40:17] 
    node T_649 = and(T_645, UInt<1>("h01")) @[util.scala 39:26] 
    node T_651 = geq(T_645, UInt<2>("h02")) @[util.scala 40:17] 
    node T_653 = and(T_649, UInt<1>("h00")) @[util.scala 39:26] 
    node T_655 = geq(T_649, UInt<1>("h01")) @[util.scala 40:17] 
    node T_656 = mux(T_655, UInt<2>("h03"), UInt<2>("h02")) @[util.scala 40:12] 
    node T_658 = and(T_649, UInt<1>("h00")) @[util.scala 39:26] 
    node T_660 = geq(T_649, UInt<1>("h01")) @[util.scala 40:17] 
    node T_661 = mux(T_660, UInt<1>("h00"), UInt<1>("h00")) @[util.scala 40:12] 
    node T_662 = mux(T_651, T_656, T_661) @[util.scala 40:12] 
    node T_664 = and(T_645, UInt<1>("h01")) @[util.scala 39:26] 
    node T_666 = geq(T_645, UInt<2>("h02")) @[util.scala 40:17] 
    node T_668 = and(T_664, UInt<1>("h00")) @[util.scala 39:26] 
    node T_670 = geq(T_664, UInt<1>("h01")) @[util.scala 40:17] 
    node T_671 = mux(T_670, UInt<3>("h07"), UInt<3>("h06")) @[util.scala 40:12] 
    node T_673 = and(T_664, UInt<1>("h00")) @[util.scala 39:26] 
    node T_675 = geq(T_664, UInt<1>("h01")) @[util.scala 40:17] 
    node T_676 = mux(T_675, UInt<3>("h04"), UInt<1>("h00")) @[util.scala 40:12] 
    node T_677 = mux(T_666, T_671, T_676) @[util.scala 40:12] 
    node T_678 = mux(T_647, T_662, T_677) @[util.scala 40:12] 
    node T_679 = bits(io.in, 6, 5) @[rvc.scala 100:24] 
    node T_681 = eq(T_679, UInt<1>("h00")) @[rvc.scala 100:30] 
    node T_684 = mux(T_681, UInt<31>("h040000000"), UInt<1>("h00")) @[rvc.scala 100:22] 
    node T_685 = bits(io.in, 12, 12) @[rvc.scala 101:24] 
    node T_688 = mux(T_685, UInt<7>("h03b"), UInt<7>("h033")) @[rvc.scala 101:22] 
    node T_690 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_691 = cat(UInt<2>("h01"), T_690) @[Cat.scala 20:58] 
    node T_693 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_694 = cat(UInt<2>("h01"), T_693) @[Cat.scala 20:58] 
    node T_696 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_697 = cat(UInt<2>("h01"), T_696) @[Cat.scala 20:58] 
    node T_698 = cat(T_697, T_688) @[Cat.scala 20:58] 
    node T_699 = cat(T_691, T_694) @[Cat.scala 20:58] 
    node T_700 = cat(T_699, T_678) @[Cat.scala 20:58] 
    node T_701 = cat(T_700, T_698) @[Cat.scala 20:58] 
    node T_702 = or(T_701, T_684) @[rvc.scala 102:43] 
    node T_703 = bits(io.in, 11, 10) @[rvc.scala 104:42] 
    node T_705 = and(T_703, UInt<1>("h01")) @[util.scala 39:26] 
    node T_707 = geq(T_703, UInt<2>("h02")) @[util.scala 40:17] 
    node T_709 = and(T_705, UInt<1>("h00")) @[util.scala 39:26] 
    node T_711 = geq(T_705, UInt<1>("h01")) @[util.scala 40:17] 
    node T_712 = mux(T_711, T_702, T_632) @[util.scala 40:12] 
    node T_714 = and(T_705, UInt<1>("h00")) @[util.scala 39:26] 
    node T_716 = geq(T_705, UInt<1>("h01")) @[util.scala 40:17] 
    node T_717 = mux(T_716, T_613, T_596) @[util.scala 40:12] 
    node T_718 = mux(T_707, T_712, T_717) @[util.scala 40:12] 
    node T_720 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_721 = cat(UInt<2>("h01"), T_720) @[Cat.scala 20:58] 
    node T_723 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_724 = cat(UInt<2>("h01"), T_723) @[Cat.scala 20:58] 
    node T_726 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_727 = cat(UInt<2>("h01"), T_726) @[Cat.scala 20:58] 
    node T_728 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_735 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_735 is invalid @[rvc.scala 18:19] 
    T_735.bits <= T_718 @[rvc.scala 19:14] 
    T_735.rd <= T_721 @[rvc.scala 20:12] 
    T_735.rs1 <= T_724 @[rvc.scala 21:13] 
    T_735.rs2 <= T_727 @[rvc.scala 22:13] 
    T_735.rs3 <= T_728 @[rvc.scala 23:13] 
    node T_741 = bits(io.in, 12, 12) @[rvc.scala 41:28] 
    node T_742 = bits(T_741, 0, 0) @[Bitwise.scala 33:15] 
    node T_745 = mux(T_742, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12] 
    node T_746 = bits(io.in, 8, 8) @[rvc.scala 41:36] 
    node T_747 = bits(io.in, 10, 9) @[rvc.scala 41:42] 
    node T_748 = bits(io.in, 6, 6) @[rvc.scala 41:51] 
    node T_749 = bits(io.in, 7, 7) @[rvc.scala 41:57] 
    node T_750 = bits(io.in, 2, 2) @[rvc.scala 41:63] 
    node T_751 = bits(io.in, 11, 11) @[rvc.scala 41:69] 
    node T_752 = bits(io.in, 5, 3) @[rvc.scala 41:76] 
    node T_754 = cat(T_752, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_755 = cat(T_750, T_751) @[Cat.scala 20:58] 
    node T_756 = cat(T_755, T_754) @[Cat.scala 20:58] 
    node T_757 = cat(T_748, T_749) @[Cat.scala 20:58] 
    node T_758 = cat(T_745, T_746) @[Cat.scala 20:58] 
    node T_759 = cat(T_758, T_747) @[Cat.scala 20:58] 
    node T_760 = cat(T_759, T_757) @[Cat.scala 20:58] 
    node T_761 = cat(T_760, T_756) @[Cat.scala 20:58] 
    node T_762 = bits(T_761, 20, 20) @[rvc.scala 91:26] 
    node T_763 = bits(io.in, 12, 12) @[rvc.scala 41:28] 
    node T_764 = bits(T_763, 0, 0) @[Bitwise.scala 33:15] 
    node T_767 = mux(T_764, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12] 
    node T_768 = bits(io.in, 8, 8) @[rvc.scala 41:36] 
    node T_769 = bits(io.in, 10, 9) @[rvc.scala 41:42] 
    node T_770 = bits(io.in, 6, 6) @[rvc.scala 41:51] 
    node T_771 = bits(io.in, 7, 7) @[rvc.scala 41:57] 
    node T_772 = bits(io.in, 2, 2) @[rvc.scala 41:63] 
    node T_773 = bits(io.in, 11, 11) @[rvc.scala 41:69] 
    node T_774 = bits(io.in, 5, 3) @[rvc.scala 41:76] 
    node T_776 = cat(T_774, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_777 = cat(T_772, T_773) @[Cat.scala 20:58] 
    node T_778 = cat(T_777, T_776) @[Cat.scala 20:58] 
    node T_779 = cat(T_770, T_771) @[Cat.scala 20:58] 
    node T_780 = cat(T_767, T_768) @[Cat.scala 20:58] 
    node T_781 = cat(T_780, T_769) @[Cat.scala 20:58] 
    node T_782 = cat(T_781, T_779) @[Cat.scala 20:58] 
    node T_783 = cat(T_782, T_778) @[Cat.scala 20:58] 
    node T_784 = bits(T_783, 10, 1) @[rvc.scala 91:36] 
    node T_785 = bits(io.in, 12, 12) @[rvc.scala 41:28] 
    node T_786 = bits(T_785, 0, 0) @[Bitwise.scala 33:15] 
    node T_789 = mux(T_786, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12] 
    node T_790 = bits(io.in, 8, 8) @[rvc.scala 41:36] 
    node T_791 = bits(io.in, 10, 9) @[rvc.scala 41:42] 
    node T_792 = bits(io.in, 6, 6) @[rvc.scala 41:51] 
    node T_793 = bits(io.in, 7, 7) @[rvc.scala 41:57] 
    node T_794 = bits(io.in, 2, 2) @[rvc.scala 41:63] 
    node T_795 = bits(io.in, 11, 11) @[rvc.scala 41:69] 
    node T_796 = bits(io.in, 5, 3) @[rvc.scala 41:76] 
    node T_798 = cat(T_796, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_799 = cat(T_794, T_795) @[Cat.scala 20:58] 
    node T_800 = cat(T_799, T_798) @[Cat.scala 20:58] 
    node T_801 = cat(T_792, T_793) @[Cat.scala 20:58] 
    node T_802 = cat(T_789, T_790) @[Cat.scala 20:58] 
    node T_803 = cat(T_802, T_791) @[Cat.scala 20:58] 
    node T_804 = cat(T_803, T_801) @[Cat.scala 20:58] 
    node T_805 = cat(T_804, T_800) @[Cat.scala 20:58] 
    node T_806 = bits(T_805, 11, 11) @[rvc.scala 91:48] 
    node T_807 = bits(io.in, 12, 12) @[rvc.scala 41:28] 
    node T_808 = bits(T_807, 0, 0) @[Bitwise.scala 33:15] 
    node T_811 = mux(T_808, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12] 
    node T_812 = bits(io.in, 8, 8) @[rvc.scala 41:36] 
    node T_813 = bits(io.in, 10, 9) @[rvc.scala 41:42] 
    node T_814 = bits(io.in, 6, 6) @[rvc.scala 41:51] 
    node T_815 = bits(io.in, 7, 7) @[rvc.scala 41:57] 
    node T_816 = bits(io.in, 2, 2) @[rvc.scala 41:63] 
    node T_817 = bits(io.in, 11, 11) @[rvc.scala 41:69] 
    node T_818 = bits(io.in, 5, 3) @[rvc.scala 41:76] 
    node T_820 = cat(T_818, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_821 = cat(T_816, T_817) @[Cat.scala 20:58] 
    node T_822 = cat(T_821, T_820) @[Cat.scala 20:58] 
    node T_823 = cat(T_814, T_815) @[Cat.scala 20:58] 
    node T_824 = cat(T_811, T_812) @[Cat.scala 20:58] 
    node T_825 = cat(T_824, T_813) @[Cat.scala 20:58] 
    node T_826 = cat(T_825, T_823) @[Cat.scala 20:58] 
    node T_827 = cat(T_826, T_822) @[Cat.scala 20:58] 
    node T_828 = bits(T_827, 19, 12) @[rvc.scala 91:58] 
    node T_831 = cat(T_828, UInt<5>("h00")) @[Cat.scala 20:58] 
    node T_832 = cat(T_831, UInt<7>("h06f")) @[Cat.scala 20:58] 
    node T_833 = cat(T_762, T_784) @[Cat.scala 20:58] 
    node T_834 = cat(T_833, T_806) @[Cat.scala 20:58] 
    node T_835 = cat(T_834, T_832) @[Cat.scala 20:58] 
    node T_838 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_839 = cat(UInt<2>("h01"), T_838) @[Cat.scala 20:58] 
    node T_841 = bits(io.in, 4, 2) @[rvc.scala 28:30] 
    node T_842 = cat(UInt<2>("h01"), T_841) @[Cat.scala 20:58] 
    node T_843 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_850 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_850 is invalid @[rvc.scala 18:19] 
    T_850.bits <= T_835 @[rvc.scala 19:14] 
    T_850.rd <= UInt<5>("h00") @[rvc.scala 20:12] 
    T_850.rs1 <= T_839 @[rvc.scala 21:13] 
    T_850.rs2 <= T_842 @[rvc.scala 22:13] 
    T_850.rs3 <= T_843 @[rvc.scala 23:13] 
    node T_856 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_857 = bits(T_856, 0, 0) @[Bitwise.scala 33:15] 
    node T_860 = mux(T_857, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_861 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_862 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_863 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_864 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_866 = cat(T_863, T_864) @[Cat.scala 20:58] 
    node T_867 = cat(T_866, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_868 = cat(T_860, T_861) @[Cat.scala 20:58] 
    node T_869 = cat(T_868, T_862) @[Cat.scala 20:58] 
    node T_870 = cat(T_869, T_867) @[Cat.scala 20:58] 
    node T_871 = bits(T_870, 12, 12) @[rvc.scala 92:29] 
    node T_872 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_873 = bits(T_872, 0, 0) @[Bitwise.scala 33:15] 
    node T_876 = mux(T_873, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_877 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_878 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_879 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_880 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_882 = cat(T_879, T_880) @[Cat.scala 20:58] 
    node T_883 = cat(T_882, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_884 = cat(T_876, T_877) @[Cat.scala 20:58] 
    node T_885 = cat(T_884, T_878) @[Cat.scala 20:58] 
    node T_886 = cat(T_885, T_883) @[Cat.scala 20:58] 
    node T_887 = bits(T_886, 10, 5) @[rvc.scala 92:39] 
    node T_890 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_891 = cat(UInt<2>("h01"), T_890) @[Cat.scala 20:58] 
    node T_893 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_894 = bits(T_893, 0, 0) @[Bitwise.scala 33:15] 
    node T_897 = mux(T_894, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_898 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_899 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_900 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_901 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_903 = cat(T_900, T_901) @[Cat.scala 20:58] 
    node T_904 = cat(T_903, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_905 = cat(T_897, T_898) @[Cat.scala 20:58] 
    node T_906 = cat(T_905, T_899) @[Cat.scala 20:58] 
    node T_907 = cat(T_906, T_904) @[Cat.scala 20:58] 
    node T_908 = bits(T_907, 4, 1) @[rvc.scala 92:72] 
    node T_909 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_910 = bits(T_909, 0, 0) @[Bitwise.scala 33:15] 
    node T_913 = mux(T_910, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_914 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_915 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_916 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_917 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_919 = cat(T_916, T_917) @[Cat.scala 20:58] 
    node T_920 = cat(T_919, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_921 = cat(T_913, T_914) @[Cat.scala 20:58] 
    node T_922 = cat(T_921, T_915) @[Cat.scala 20:58] 
    node T_923 = cat(T_922, T_920) @[Cat.scala 20:58] 
    node T_924 = bits(T_923, 11, 11) @[rvc.scala 92:83] 
    node T_926 = cat(T_924, UInt<7>("h063")) @[Cat.scala 20:58] 
    node T_927 = cat(UInt<3>("h00"), T_908) @[Cat.scala 20:58] 
    node T_928 = cat(T_927, T_926) @[Cat.scala 20:58] 
    node T_929 = cat(UInt<5>("h00"), T_891) @[Cat.scala 20:58] 
    node T_930 = cat(T_871, T_887) @[Cat.scala 20:58] 
    node T_931 = cat(T_930, T_929) @[Cat.scala 20:58] 
    node T_932 = cat(T_931, T_928) @[Cat.scala 20:58] 
    node T_934 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_935 = cat(UInt<2>("h01"), T_934) @[Cat.scala 20:58] 
    node T_937 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_938 = cat(UInt<2>("h01"), T_937) @[Cat.scala 20:58] 
    node T_940 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_947 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_947 is invalid @[rvc.scala 18:19] 
    T_947.bits <= T_932 @[rvc.scala 19:14] 
    T_947.rd <= T_935 @[rvc.scala 20:12] 
    T_947.rs1 <= T_938 @[rvc.scala 21:13] 
    T_947.rs2 <= UInt<5>("h00") @[rvc.scala 22:13] 
    T_947.rs3 <= T_940 @[rvc.scala 23:13] 
    node T_953 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_954 = bits(T_953, 0, 0) @[Bitwise.scala 33:15] 
    node T_957 = mux(T_954, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_958 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_959 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_960 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_961 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_963 = cat(T_960, T_961) @[Cat.scala 20:58] 
    node T_964 = cat(T_963, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_965 = cat(T_957, T_958) @[Cat.scala 20:58] 
    node T_966 = cat(T_965, T_959) @[Cat.scala 20:58] 
    node T_967 = cat(T_966, T_964) @[Cat.scala 20:58] 
    node T_968 = bits(T_967, 12, 12) @[rvc.scala 93:29] 
    node T_969 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_970 = bits(T_969, 0, 0) @[Bitwise.scala 33:15] 
    node T_973 = mux(T_970, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_974 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_975 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_976 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_977 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_979 = cat(T_976, T_977) @[Cat.scala 20:58] 
    node T_980 = cat(T_979, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_981 = cat(T_973, T_974) @[Cat.scala 20:58] 
    node T_982 = cat(T_981, T_975) @[Cat.scala 20:58] 
    node T_983 = cat(T_982, T_980) @[Cat.scala 20:58] 
    node T_984 = bits(T_983, 10, 5) @[rvc.scala 93:39] 
    node T_987 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_988 = cat(UInt<2>("h01"), T_987) @[Cat.scala 20:58] 
    node T_990 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_991 = bits(T_990, 0, 0) @[Bitwise.scala 33:15] 
    node T_994 = mux(T_991, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_995 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_996 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_997 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_998 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_1000 = cat(T_997, T_998) @[Cat.scala 20:58] 
    node T_1001 = cat(T_1000, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_1002 = cat(T_994, T_995) @[Cat.scala 20:58] 
    node T_1003 = cat(T_1002, T_996) @[Cat.scala 20:58] 
    node T_1004 = cat(T_1003, T_1001) @[Cat.scala 20:58] 
    node T_1005 = bits(T_1004, 4, 1) @[rvc.scala 93:72] 
    node T_1006 = bits(io.in, 12, 12) @[rvc.scala 42:27] 
    node T_1007 = bits(T_1006, 0, 0) @[Bitwise.scala 33:15] 
    node T_1010 = mux(T_1007, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 33:12] 
    node T_1011 = bits(io.in, 6, 5) @[rvc.scala 42:35] 
    node T_1012 = bits(io.in, 2, 2) @[rvc.scala 42:43] 
    node T_1013 = bits(io.in, 11, 10) @[rvc.scala 42:49] 
    node T_1014 = bits(io.in, 4, 3) @[rvc.scala 42:59] 
    node T_1016 = cat(T_1013, T_1014) @[Cat.scala 20:58] 
    node T_1017 = cat(T_1016, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_1018 = cat(T_1010, T_1011) @[Cat.scala 20:58] 
    node T_1019 = cat(T_1018, T_1012) @[Cat.scala 20:58] 
    node T_1020 = cat(T_1019, T_1017) @[Cat.scala 20:58] 
    node T_1021 = bits(T_1020, 11, 11) @[rvc.scala 93:83] 
    node T_1023 = cat(T_1021, UInt<7>("h063")) @[Cat.scala 20:58] 
    node T_1024 = cat(UInt<3>("h01"), T_1005) @[Cat.scala 20:58] 
    node T_1025 = cat(T_1024, T_1023) @[Cat.scala 20:58] 
    node T_1026 = cat(UInt<5>("h00"), T_988) @[Cat.scala 20:58] 
    node T_1027 = cat(T_968, T_984) @[Cat.scala 20:58] 
    node T_1028 = cat(T_1027, T_1026) @[Cat.scala 20:58] 
    node T_1029 = cat(T_1028, T_1025) @[Cat.scala 20:58] 
    node T_1032 = bits(io.in, 9, 7) @[rvc.scala 27:30] 
    node T_1033 = cat(UInt<2>("h01"), T_1032) @[Cat.scala 20:58] 
    node T_1035 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1042 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1042 is invalid @[rvc.scala 18:19] 
    T_1042.bits <= T_1029 @[rvc.scala 19:14] 
    T_1042.rd <= UInt<5>("h00") @[rvc.scala 20:12] 
    T_1042.rs1 <= T_1033 @[rvc.scala 21:13] 
    T_1042.rs2 <= UInt<5>("h00") @[rvc.scala 22:13] 
    T_1042.rs3 <= T_1035 @[rvc.scala 23:13] 
    node T_1048 = bits(io.in, 12, 12) @[rvc.scala 43:20] 
    node T_1049 = bits(io.in, 6, 2) @[rvc.scala 43:27] 
    node T_1050 = cat(T_1048, T_1049) @[Cat.scala 20:58] 
    node T_1051 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1053 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1055 = cat(T_1053, UInt<7>("h013")) @[Cat.scala 20:58] 
    node T_1056 = cat(T_1050, T_1051) @[Cat.scala 20:58] 
    node T_1057 = cat(T_1056, UInt<3>("h01")) @[Cat.scala 20:58] 
    node T_1058 = cat(T_1057, T_1055) @[Cat.scala 20:58] 
    node T_1059 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1060 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1061 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1062 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1069 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1069 is invalid @[rvc.scala 18:19] 
    T_1069.bits <= T_1058 @[rvc.scala 19:14] 
    T_1069.rd <= T_1059 @[rvc.scala 20:12] 
    T_1069.rs1 <= T_1060 @[rvc.scala 21:13] 
    T_1069.rs2 <= T_1061 @[rvc.scala 22:13] 
    T_1069.rs3 <= T_1062 @[rvc.scala 23:13] 
    node T_1075 = bits(io.in, 4, 2) @[rvc.scala 35:22] 
    node T_1076 = bits(io.in, 12, 12) @[rvc.scala 35:30] 
    node T_1077 = bits(io.in, 6, 5) @[rvc.scala 35:37] 
    node T_1079 = cat(T_1077, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1080 = cat(T_1075, T_1076) @[Cat.scala 20:58] 
    node T_1081 = cat(T_1080, T_1079) @[Cat.scala 20:58] 
    node T_1084 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1086 = cat(T_1084, UInt<7>("h07")) @[Cat.scala 20:58] 
    node T_1087 = cat(T_1081, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1088 = cat(T_1087, UInt<3>("h03")) @[Cat.scala 20:58] 
    node T_1089 = cat(T_1088, T_1086) @[Cat.scala 20:58] 
    node T_1090 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1092 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1093 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1100 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1100 is invalid @[rvc.scala 18:19] 
    T_1100.bits <= T_1089 @[rvc.scala 19:14] 
    T_1100.rd <= T_1090 @[rvc.scala 20:12] 
    T_1100.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1100.rs2 <= T_1092 @[rvc.scala 22:13] 
    T_1100.rs3 <= T_1093 @[rvc.scala 23:13] 
    node T_1106 = bits(io.in, 3, 2) @[rvc.scala 34:22] 
    node T_1107 = bits(io.in, 12, 12) @[rvc.scala 34:30] 
    node T_1108 = bits(io.in, 6, 4) @[rvc.scala 34:37] 
    node T_1110 = cat(T_1108, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_1111 = cat(T_1106, T_1107) @[Cat.scala 20:58] 
    node T_1112 = cat(T_1111, T_1110) @[Cat.scala 20:58] 
    node T_1115 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1117 = cat(T_1115, UInt<7>("h03")) @[Cat.scala 20:58] 
    node T_1118 = cat(T_1112, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1119 = cat(T_1118, UInt<3>("h02")) @[Cat.scala 20:58] 
    node T_1120 = cat(T_1119, T_1117) @[Cat.scala 20:58] 
    node T_1121 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1123 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1124 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1131 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1131 is invalid @[rvc.scala 18:19] 
    T_1131.bits <= T_1120 @[rvc.scala 19:14] 
    T_1131.rd <= T_1121 @[rvc.scala 20:12] 
    T_1131.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1131.rs2 <= T_1123 @[rvc.scala 22:13] 
    T_1131.rs3 <= T_1124 @[rvc.scala 23:13] 
    node T_1137 = bits(io.in, 4, 2) @[rvc.scala 35:22] 
    node T_1138 = bits(io.in, 12, 12) @[rvc.scala 35:30] 
    node T_1139 = bits(io.in, 6, 5) @[rvc.scala 35:37] 
    node T_1141 = cat(T_1139, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1142 = cat(T_1137, T_1138) @[Cat.scala 20:58] 
    node T_1143 = cat(T_1142, T_1141) @[Cat.scala 20:58] 
    node T_1146 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1148 = cat(T_1146, UInt<7>("h03")) @[Cat.scala 20:58] 
    node T_1149 = cat(T_1143, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1150 = cat(T_1149, UInt<3>("h03")) @[Cat.scala 20:58] 
    node T_1151 = cat(T_1150, T_1148) @[Cat.scala 20:58] 
    node T_1152 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1154 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1155 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1162 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1162 is invalid @[rvc.scala 18:19] 
    T_1162.bits <= T_1151 @[rvc.scala 19:14] 
    T_1162.rd <= T_1152 @[rvc.scala 20:12] 
    T_1162.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1162.rs2 <= T_1154 @[rvc.scala 22:13] 
    T_1162.rs3 <= T_1155 @[rvc.scala 23:13] 
    node T_1168 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1171 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1173 = cat(T_1171, UInt<7>("h033")) @[Cat.scala 20:58] 
    node T_1174 = cat(T_1168, UInt<5>("h00")) @[Cat.scala 20:58] 
    node T_1175 = cat(T_1174, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1176 = cat(T_1175, T_1173) @[Cat.scala 20:58] 
    node T_1177 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1179 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1180 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1187 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1187 is invalid @[rvc.scala 18:19] 
    T_1187.bits <= T_1176 @[rvc.scala 19:14] 
    T_1187.rd <= T_1177 @[rvc.scala 20:12] 
    T_1187.rs1 <= UInt<5>("h00") @[rvc.scala 21:13] 
    T_1187.rs2 <= T_1179 @[rvc.scala 22:13] 
    T_1187.rs3 <= T_1180 @[rvc.scala 23:13] 
    node T_1193 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1194 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1196 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1198 = cat(T_1196, UInt<7>("h033")) @[Cat.scala 20:58] 
    node T_1199 = cat(T_1193, T_1194) @[Cat.scala 20:58] 
    node T_1200 = cat(T_1199, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1201 = cat(T_1200, T_1198) @[Cat.scala 20:58] 
    node T_1202 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1203 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1204 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1205 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1212 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1212 is invalid @[rvc.scala 18:19] 
    T_1212.bits <= T_1201 @[rvc.scala 19:14] 
    T_1212.rd <= T_1202 @[rvc.scala 20:12] 
    T_1212.rs1 <= T_1203 @[rvc.scala 21:13] 
    T_1212.rs2 <= T_1204 @[rvc.scala 22:13] 
    T_1212.rs3 <= T_1205 @[rvc.scala 23:13] 
    node T_1218 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1219 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1223 = cat(UInt<5>("h00"), UInt<7>("h067")) @[Cat.scala 20:58] 
    node T_1224 = cat(T_1218, T_1219) @[Cat.scala 20:58] 
    node T_1225 = cat(T_1224, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1226 = cat(T_1225, T_1223) @[Cat.scala 20:58] 
    node T_1227 = shr(T_1226, 7) @[rvc.scala 129:29] 
    node T_1229 = cat(T_1227, UInt<7>("h01f")) @[Cat.scala 20:58] 
    node T_1230 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1232 = neq(T_1230, UInt<1>("h00")) @[rvc.scala 130:37] 
    node T_1233 = mux(T_1232, T_1226, T_1229) @[rvc.scala 130:33] 
    node T_1235 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1236 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1237 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1244 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1244 is invalid @[rvc.scala 18:19] 
    T_1244.bits <= T_1233 @[rvc.scala 19:14] 
    T_1244.rd <= UInt<5>("h00") @[rvc.scala 20:12] 
    T_1244.rs1 <= T_1235 @[rvc.scala 21:13] 
    T_1244.rs2 <= T_1236 @[rvc.scala 22:13] 
    T_1244.rs3 <= T_1237 @[rvc.scala 23:13] 
    node T_1250 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1252 = neq(T_1250, UInt<1>("h00")) @[rvc.scala 131:27] 
    node T_1253 = mux(T_1252, T_1187, T_1244) @[rvc.scala 131:22] 
    node T_1259 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1260 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1264 = cat(UInt<5>("h01"), UInt<7>("h067")) @[Cat.scala 20:58] 
    node T_1265 = cat(T_1259, T_1260) @[Cat.scala 20:58] 
    node T_1266 = cat(T_1265, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1267 = cat(T_1266, T_1264) @[Cat.scala 20:58] 
    node T_1268 = shr(T_1226, 7) @[rvc.scala 133:27] 
    node T_1270 = cat(T_1268, UInt<7>("h073")) @[Cat.scala 20:58] 
    node T_1272 = or(T_1270, UInt<21>("h0100000")) @[rvc.scala 133:47] 
    node T_1273 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1275 = neq(T_1273, UInt<1>("h00")) @[rvc.scala 134:37] 
    node T_1276 = mux(T_1275, T_1267, T_1272) @[rvc.scala 134:33] 
    node T_1278 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1279 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1280 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1287 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1287 is invalid @[rvc.scala 18:19] 
    T_1287.bits <= T_1276 @[rvc.scala 19:14] 
    T_1287.rd <= UInt<5>("h01") @[rvc.scala 20:12] 
    T_1287.rs1 <= T_1278 @[rvc.scala 21:13] 
    T_1287.rs2 <= T_1279 @[rvc.scala 22:13] 
    T_1287.rs3 <= T_1280 @[rvc.scala 23:13] 
    node T_1293 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1295 = neq(T_1293, UInt<1>("h00")) @[rvc.scala 135:30] 
    node T_1296 = mux(T_1295, T_1212, T_1287) @[rvc.scala 135:25] 
    node T_1302 = bits(io.in, 12, 12) @[rvc.scala 136:12] 
    node T_1303 = mux(T_1302, T_1296, T_1253) @[rvc.scala 136:10] 
    node T_1309 = bits(io.in, 9, 7) @[rvc.scala 37:22] 
    node T_1310 = bits(io.in, 12, 10) @[rvc.scala 37:30] 
    node T_1312 = cat(T_1309, T_1310) @[Cat.scala 20:58] 
    node T_1313 = cat(T_1312, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1314 = shr(T_1313, 5) @[rvc.scala 120:34] 
    node T_1315 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1318 = bits(io.in, 9, 7) @[rvc.scala 37:22] 
    node T_1319 = bits(io.in, 12, 10) @[rvc.scala 37:30] 
    node T_1321 = cat(T_1318, T_1319) @[Cat.scala 20:58] 
    node T_1322 = cat(T_1321, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1323 = bits(T_1322, 4, 0) @[rvc.scala 120:67] 
    node T_1325 = cat(UInt<3>("h03"), T_1323) @[Cat.scala 20:58] 
    node T_1326 = cat(T_1325, UInt<7>("h027")) @[Cat.scala 20:58] 
    node T_1327 = cat(T_1314, T_1315) @[Cat.scala 20:58] 
    node T_1328 = cat(T_1327, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1329 = cat(T_1328, T_1326) @[Cat.scala 20:58] 
    node T_1330 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1332 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1333 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1340 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1340 is invalid @[rvc.scala 18:19] 
    T_1340.bits <= T_1329 @[rvc.scala 19:14] 
    T_1340.rd <= T_1330 @[rvc.scala 20:12] 
    T_1340.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1340.rs2 <= T_1332 @[rvc.scala 22:13] 
    T_1340.rs3 <= T_1333 @[rvc.scala 23:13] 
    node T_1346 = bits(io.in, 8, 7) @[rvc.scala 36:22] 
    node T_1347 = bits(io.in, 12, 9) @[rvc.scala 36:30] 
    node T_1349 = cat(T_1346, T_1347) @[Cat.scala 20:58] 
    node T_1350 = cat(T_1349, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_1351 = shr(T_1350, 5) @[rvc.scala 119:33] 
    node T_1352 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1355 = bits(io.in, 8, 7) @[rvc.scala 36:22] 
    node T_1356 = bits(io.in, 12, 9) @[rvc.scala 36:30] 
    node T_1358 = cat(T_1355, T_1356) @[Cat.scala 20:58] 
    node T_1359 = cat(T_1358, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_1360 = bits(T_1359, 4, 0) @[rvc.scala 119:66] 
    node T_1362 = cat(UInt<3>("h02"), T_1360) @[Cat.scala 20:58] 
    node T_1363 = cat(T_1362, UInt<7>("h023")) @[Cat.scala 20:58] 
    node T_1364 = cat(T_1351, T_1352) @[Cat.scala 20:58] 
    node T_1365 = cat(T_1364, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1366 = cat(T_1365, T_1363) @[Cat.scala 20:58] 
    node T_1367 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1369 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1370 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1377 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1377 is invalid @[rvc.scala 18:19] 
    T_1377.bits <= T_1366 @[rvc.scala 19:14] 
    T_1377.rd <= T_1367 @[rvc.scala 20:12] 
    T_1377.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1377.rs2 <= T_1369 @[rvc.scala 22:13] 
    T_1377.rs3 <= T_1370 @[rvc.scala 23:13] 
    node T_1383 = bits(io.in, 9, 7) @[rvc.scala 37:22] 
    node T_1384 = bits(io.in, 12, 10) @[rvc.scala 37:30] 
    node T_1386 = cat(T_1383, T_1384) @[Cat.scala 20:58] 
    node T_1387 = cat(T_1386, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1388 = shr(T_1387, 5) @[rvc.scala 118:33] 
    node T_1389 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1392 = bits(io.in, 9, 7) @[rvc.scala 37:22] 
    node T_1393 = bits(io.in, 12, 10) @[rvc.scala 37:30] 
    node T_1395 = cat(T_1392, T_1393) @[Cat.scala 20:58] 
    node T_1396 = cat(T_1395, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_1397 = bits(T_1396, 4, 0) @[rvc.scala 118:66] 
    node T_1399 = cat(UInt<3>("h03"), T_1397) @[Cat.scala 20:58] 
    node T_1400 = cat(T_1399, UInt<7>("h023")) @[Cat.scala 20:58] 
    node T_1401 = cat(T_1388, T_1389) @[Cat.scala 20:58] 
    node T_1402 = cat(T_1401, UInt<5>("h02")) @[Cat.scala 20:58] 
    node T_1403 = cat(T_1402, T_1400) @[Cat.scala 20:58] 
    node T_1404 = bits(io.in, 11, 7) @[rvc.scala 30:13] 
    node T_1406 = bits(io.in, 6, 2) @[rvc.scala 29:14] 
    node T_1407 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1414 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1414 is invalid @[rvc.scala 18:19] 
    T_1414.bits <= T_1403 @[rvc.scala 19:14] 
    T_1414.rd <= T_1404 @[rvc.scala 20:12] 
    T_1414.rs1 <= UInt<5>("h02") @[rvc.scala 21:13] 
    T_1414.rs2 <= T_1406 @[rvc.scala 22:13] 
    T_1414.rs3 <= T_1407 @[rvc.scala 23:13] 
    node T_1420 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1421 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1422 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1423 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1430 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1430 is invalid @[rvc.scala 18:19] 
    T_1430.bits <= io.in @[rvc.scala 19:14] 
    T_1430.rd <= T_1420 @[rvc.scala 20:12] 
    T_1430.rs1 <= T_1421 @[rvc.scala 21:13] 
    T_1430.rs2 <= T_1422 @[rvc.scala 22:13] 
    T_1430.rs3 <= T_1423 @[rvc.scala 23:13] 
    node T_1436 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1437 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1438 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1439 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1446 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1446 is invalid @[rvc.scala 18:19] 
    T_1446.bits <= io.in @[rvc.scala 19:14] 
    T_1446.rd <= T_1436 @[rvc.scala 20:12] 
    T_1446.rs1 <= T_1437 @[rvc.scala 21:13] 
    T_1446.rs2 <= T_1438 @[rvc.scala 22:13] 
    T_1446.rs3 <= T_1439 @[rvc.scala 23:13] 
    node T_1452 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1453 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1454 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1455 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1462 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1462 is invalid @[rvc.scala 18:19] 
    T_1462.bits <= io.in @[rvc.scala 19:14] 
    T_1462.rd <= T_1452 @[rvc.scala 20:12] 
    T_1462.rs1 <= T_1453 @[rvc.scala 21:13] 
    T_1462.rs2 <= T_1454 @[rvc.scala 22:13] 
    T_1462.rs3 <= T_1455 @[rvc.scala 23:13] 
    node T_1468 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1469 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1470 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1471 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1478 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1478 is invalid @[rvc.scala 18:19] 
    T_1478.bits <= io.in @[rvc.scala 19:14] 
    T_1478.rd <= T_1468 @[rvc.scala 20:12] 
    T_1478.rs1 <= T_1469 @[rvc.scala 21:13] 
    T_1478.rs2 <= T_1470 @[rvc.scala 22:13] 
    T_1478.rs3 <= T_1471 @[rvc.scala 23:13] 
    node T_1484 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1485 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1486 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1487 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1494 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1494 is invalid @[rvc.scala 18:19] 
    T_1494.bits <= io.in @[rvc.scala 19:14] 
    T_1494.rd <= T_1484 @[rvc.scala 20:12] 
    T_1494.rs1 <= T_1485 @[rvc.scala 21:13] 
    T_1494.rs2 <= T_1486 @[rvc.scala 22:13] 
    T_1494.rs3 <= T_1487 @[rvc.scala 23:13] 
    node T_1500 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1501 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1502 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1503 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1510 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1510 is invalid @[rvc.scala 18:19] 
    T_1510.bits <= io.in @[rvc.scala 19:14] 
    T_1510.rd <= T_1500 @[rvc.scala 20:12] 
    T_1510.rs1 <= T_1501 @[rvc.scala 21:13] 
    T_1510.rs2 <= T_1502 @[rvc.scala 22:13] 
    T_1510.rs3 <= T_1503 @[rvc.scala 23:13] 
    node T_1516 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1517 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1518 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1519 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1526 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1526 is invalid @[rvc.scala 18:19] 
    T_1526.bits <= io.in @[rvc.scala 19:14] 
    T_1526.rd <= T_1516 @[rvc.scala 20:12] 
    T_1526.rs1 <= T_1517 @[rvc.scala 21:13] 
    T_1526.rs2 <= T_1518 @[rvc.scala 22:13] 
    T_1526.rs3 <= T_1519 @[rvc.scala 23:13] 
    node T_1532 = bits(io.in, 11, 7) @[rvc.scala 17:36] 
    node T_1533 = bits(io.in, 19, 15) @[rvc.scala 17:57] 
    node T_1534 = bits(io.in, 24, 20) @[rvc.scala 17:79] 
    node T_1535 = bits(io.in, 31, 27) @[rvc.scala 17:101] 
    wire T_1542 : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>} @[rvc.scala 18:19] 
    T_1542 is invalid @[rvc.scala 18:19] 
    T_1542.bits <= io.in @[rvc.scala 19:14] 
    T_1542.rd <= T_1532 @[rvc.scala 20:12] 
    T_1542.rs1 <= T_1533 @[rvc.scala 21:13] 
    T_1542.rs2 <= T_1534 @[rvc.scala 22:13] 
    T_1542.rs3 <= T_1535 @[rvc.scala 23:13] 
    node T_1548 = bits(io.in, 1, 0) @[rvc.scala 147:12] 
    node T_1549 = bits(io.in, 15, 13) @[rvc.scala 147:20] 
    node T_1550 = cat(T_1548, T_1549) @[Cat.scala 20:58] 
    node T_1552 = and(T_1550, UInt<4>("h0f")) @[util.scala 39:26] 
    node T_1554 = geq(T_1550, UInt<5>("h010")) @[util.scala 40:17] 
    node T_1556 = and(T_1552, UInt<3>("h07")) @[util.scala 39:26] 
    node T_1558 = geq(T_1552, UInt<4>("h08")) @[util.scala 40:17] 
    node T_1560 = and(T_1556, UInt<2>("h03")) @[util.scala 39:26] 
    node T_1562 = geq(T_1556, UInt<3>("h04")) @[util.scala 40:17] 
    node T_1564 = and(T_1560, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1566 = geq(T_1560, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1568 = and(T_1564, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1570 = geq(T_1564, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1571 = mux(T_1570, T_1542, T_1526) @[util.scala 40:12] 
    node T_1578 = and(T_1564, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1580 = geq(T_1564, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1581 = mux(T_1580, T_1510, T_1494) @[util.scala 40:12] 
    node T_1587 = mux(T_1566, T_1571, T_1581) @[util.scala 40:12] 
    node T_1594 = and(T_1560, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1596 = geq(T_1560, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1598 = and(T_1594, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1600 = geq(T_1594, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1601 = mux(T_1600, T_1478, T_1462) @[util.scala 40:12] 
    node T_1608 = and(T_1594, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1610 = geq(T_1594, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1611 = mux(T_1610, T_1446, T_1430) @[util.scala 40:12] 
    node T_1617 = mux(T_1596, T_1601, T_1611) @[util.scala 40:12] 
    node T_1623 = mux(T_1562, T_1587, T_1617) @[util.scala 40:12] 
    node T_1630 = and(T_1556, UInt<2>("h03")) @[util.scala 39:26] 
    node T_1632 = geq(T_1556, UInt<3>("h04")) @[util.scala 40:17] 
    node T_1634 = and(T_1630, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1636 = geq(T_1630, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1638 = and(T_1634, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1640 = geq(T_1634, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1641 = mux(T_1640, T_1414, T_1377) @[util.scala 40:12] 
    node T_1648 = and(T_1634, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1650 = geq(T_1634, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1651 = mux(T_1650, T_1340, T_1303) @[util.scala 40:12] 
    node T_1657 = mux(T_1636, T_1641, T_1651) @[util.scala 40:12] 
    node T_1664 = and(T_1630, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1666 = geq(T_1630, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1668 = and(T_1664, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1670 = geq(T_1664, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1671 = mux(T_1670, T_1162, T_1131) @[util.scala 40:12] 
    node T_1678 = and(T_1664, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1680 = geq(T_1664, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1681 = mux(T_1680, T_1100, T_1069) @[util.scala 40:12] 
    node T_1687 = mux(T_1666, T_1671, T_1681) @[util.scala 40:12] 
    node T_1693 = mux(T_1632, T_1657, T_1687) @[util.scala 40:12] 
    node T_1699 = mux(T_1558, T_1623, T_1693) @[util.scala 40:12] 
    node T_1706 = and(T_1552, UInt<3>("h07")) @[util.scala 39:26] 
    node T_1708 = geq(T_1552, UInt<4>("h08")) @[util.scala 40:17] 
    node T_1710 = and(T_1706, UInt<2>("h03")) @[util.scala 39:26] 
    node T_1712 = geq(T_1706, UInt<3>("h04")) @[util.scala 40:17] 
    node T_1714 = and(T_1710, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1716 = geq(T_1710, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1718 = and(T_1714, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1720 = geq(T_1714, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1721 = mux(T_1720, T_1042, T_947) @[util.scala 40:12] 
    node T_1728 = and(T_1714, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1730 = geq(T_1714, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1731 = mux(T_1730, T_850, T_735) @[util.scala 40:12] 
    node T_1737 = mux(T_1716, T_1721, T_1731) @[util.scala 40:12] 
    node T_1744 = and(T_1710, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1746 = geq(T_1710, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1748 = and(T_1744, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1750 = geq(T_1744, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1751 = mux(T_1750, T_576, T_468) @[util.scala 40:12] 
    node T_1758 = and(T_1744, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1760 = geq(T_1744, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1761 = mux(T_1760, T_435, T_397) @[util.scala 40:12] 
    node T_1767 = mux(T_1746, T_1751, T_1761) @[util.scala 40:12] 
    node T_1773 = mux(T_1712, T_1737, T_1767) @[util.scala 40:12] 
    node T_1780 = and(T_1706, UInt<2>("h03")) @[util.scala 39:26] 
    node T_1782 = geq(T_1706, UInt<3>("h04")) @[util.scala 40:17] 
    node T_1784 = and(T_1780, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1786 = geq(T_1780, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1788 = and(T_1784, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1790 = geq(T_1784, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1791 = mux(T_1790, T_364, T_317) @[util.scala 40:12] 
    node T_1798 = and(T_1784, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1800 = geq(T_1784, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1801 = mux(T_1800, T_266, T_219) @[util.scala 40:12] 
    node T_1807 = mux(T_1786, T_1791, T_1801) @[util.scala 40:12] 
    node T_1814 = and(T_1780, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1816 = geq(T_1780, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1818 = and(T_1814, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1820 = geq(T_1814, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1821 = mux(T_1820, T_168, T_129) @[util.scala 40:12] 
    node T_1828 = and(T_1814, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1830 = geq(T_1814, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1831 = mux(T_1830, T_88, T_49) @[util.scala 40:12] 
    node T_1837 = mux(T_1816, T_1821, T_1831) @[util.scala 40:12] 
    node T_1843 = mux(T_1782, T_1807, T_1837) @[util.scala 40:12] 
    node T_1849 = mux(T_1708, T_1773, T_1843) @[util.scala 40:12] 
    node T_1855 = mux(T_1554, T_1699, T_1849) @[util.scala 40:12] 
    io.out <- T_1855 @[rvc.scala 160:12] 
    
  module IBuf : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip imem : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, flip kill : UInt<1>, pc : UInt<40>, btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, inst : {flip ready : UInt<1>, valid : UInt<1>, bits : {pf0 : UInt<1>, pf1 : UInt<1>, replay : UInt<1>, btb_hit : UInt<1>, rvc : UInt<1>, inst : {bits : UInt<32>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, rs3 : UInt<5>}}}[1]}
    
    io is invalid
    reg nBufValid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg buf : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}, clk
    reg ibufBTBHit : UInt<1>, clk
    reg ibufBTBResp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    node pcWordBits = bits(io.imem.bits.pc, 1, 1) @[util.scala 25:13] 
    wire nReady : UInt<2>
    nReady is invalid
    nReady <= UInt<2>("h00")
    node T_375 = and(io.imem.bits.btb.valid, io.imem.bits.btb.bits.taken) @[ibuf.scala 41:40] 
    node T_377 = add(io.imem.bits.btb.bits.bridx, UInt<1>("h01")) @[ibuf.scala 41:100] 
    node T_379 = mux(T_375, T_377, UInt<2>("h02")) @[ibuf.scala 41:16] 
    node T_380 = sub(T_379, pcWordBits) @[ibuf.scala 41:124] 
    node nIC = tail(T_380, 1) @[ibuf.scala 41:124] 
    node T_381 = sub(nReady, nBufValid) @[ibuf.scala 42:25] 
    node nICReady = tail(T_381, 1) @[ibuf.scala 42:25] 
    node T_383 = mux(io.imem.valid, nIC, UInt<1>("h00")) @[ibuf.scala 43:19] 
    node T_384 = add(T_383, nBufValid) @[ibuf.scala 43:49] 
    node nValid = tail(T_384, 1) @[ibuf.scala 43:49] 
    node T_385 = geq(nReady, nBufValid) @[ibuf.scala 44:27] 
    node T_386 = geq(nICReady, nIC) @[ibuf.scala 44:53] 
    node T_388 = sub(nIC, nICReady) @[ibuf.scala 44:72] 
    node T_389 = tail(T_388, 1) @[ibuf.scala 44:72] 
    node T_390 = geq(UInt<1>("h01"), T_389) @[ibuf.scala 44:65] 
    node T_391 = or(T_386, T_390) @[ibuf.scala 44:60] 
    node T_392 = and(T_385, T_391) @[ibuf.scala 44:40] 
    io.imem.ready <= T_392 @[ibuf.scala 44:17] 
    node T_393 = geq(nReady, nBufValid) @[ibuf.scala 47:29] 
    node T_395 = sub(nBufValid, nReady) @[ibuf.scala 47:62] 
    node T_396 = tail(T_395, 1) @[ibuf.scala 47:62] 
    node T_397 = mux(T_393, UInt<1>("h00"), T_396) @[ibuf.scala 47:21] 
    nBufValid <= T_397 @[ibuf.scala 47:15] 
    node T_398 = geq(nReady, nBufValid) @[ibuf.scala 54:35] 
    node T_399 = and(io.imem.valid, T_398) @[ibuf.scala 54:25] 
    node T_400 = lt(nICReady, nIC) @[ibuf.scala 54:60] 
    node T_401 = and(T_399, T_400) @[ibuf.scala 54:48] 
    node T_403 = sub(nIC, nICReady) @[ibuf.scala 54:78] 
    node T_404 = tail(T_403, 1) @[ibuf.scala 54:78] 
    node T_405 = geq(UInt<1>("h01"), T_404) @[ibuf.scala 54:71] 
    node T_406 = and(T_401, T_405) @[ibuf.scala 54:66] 
    when T_406 : @[ibuf.scala 54:90] 
      node T_407 = add(pcWordBits, nICReady) @[ibuf.scala 55:30] 
      node T_408 = tail(T_407, 1) @[ibuf.scala 55:30] 
      node T_409 = sub(nIC, nICReady) @[ibuf.scala 56:24] 
      node T_410 = tail(T_409, 1) @[ibuf.scala 56:24] 
      nBufValid <= T_410 @[ibuf.scala 56:17] 
      buf <- io.imem.bits @[ibuf.scala 57:11] 
      node T_411 = shr(io.imem.bits.data, 16) @[ibuf.scala 130:58] 
      node T_412 = cat(T_411, T_411) @[Cat.scala 20:58] 
      node T_413 = cat(T_412, io.imem.bits.data) @[Cat.scala 20:58] 
      node T_414 = shl(T_408, 4) @[ibuf.scala 131:19] 
      node T_415 = dshr(T_413, T_414) @[ibuf.scala 131:10] 
      node T_416 = bits(T_415, 15, 0) @[ibuf.scala 58:59] 
      buf.data <= T_416 @[ibuf.scala 58:16] 
      node T_417 = not(UInt<40>("h03")) @[ibuf.scala 59:35] 
      node T_418 = and(io.imem.bits.pc, T_417) @[ibuf.scala 59:33] 
      node T_419 = shl(nICReady, 1) @[ibuf.scala 59:78] 
      node T_420 = add(io.imem.bits.pc, T_419) @[ibuf.scala 59:66] 
      node T_421 = tail(T_420, 1) @[ibuf.scala 59:66] 
      node T_422 = and(T_421, UInt<40>("h03")) @[ibuf.scala 59:107] 
      node T_423 = or(T_418, T_422) @[ibuf.scala 59:47] 
      buf.pc <= T_423 @[ibuf.scala 59:14] 
      ibufBTBHit <= io.imem.bits.btb.valid @[ibuf.scala 60:18] 
      when io.imem.bits.btb.valid : @[ibuf.scala 61:37] 
        ibufBTBResp <- io.imem.bits.btb.bits @[ibuf.scala 62:21] 
        node T_424 = add(io.imem.bits.btb.bits.bridx, nICReady) @[ibuf.scala 63:58] 
        node T_425 = tail(T_424, 1) @[ibuf.scala 63:58] 
        ibufBTBResp.bridx <= T_425 @[ibuf.scala 63:27] 
        skip @[ibuf.scala 61:37] 
      skip @[ibuf.scala 54:90] 
    when io.kill : @[ibuf.scala 66:20] 
      nBufValid <= UInt<1>("h00") @[ibuf.scala 67:17] 
      skip @[ibuf.scala 66:20] 
    node T_428 = add(UInt<2>("h02"), nBufValid) @[ibuf.scala 71:32] 
    node T_429 = tail(T_428, 1) @[ibuf.scala 71:32] 
    node T_430 = sub(T_429, pcWordBits) @[ibuf.scala 71:44] 
    node T_431 = tail(T_430, 1) @[ibuf.scala 71:44] 
    node icShiftAmt = bits(T_431, 1, 0) @[ibuf.scala 71:57] 
    node T_432 = bits(io.imem.bits.data, 15, 0) @[ibuf.scala 72:87] 
    node T_433 = cat(T_432, T_432) @[Cat.scala 20:58] 
    node T_434 = cat(io.imem.bits.data, T_433) @[Cat.scala 20:58] 
    node T_435 = shr(T_434, 48) @[ibuf.scala 123:58] 
    node T_436 = cat(T_435, T_435) @[Cat.scala 20:58] 
    node T_437 = cat(T_436, T_436) @[Cat.scala 20:58] 
    node T_438 = cat(T_437, T_434) @[Cat.scala 20:58] 
    node T_439 = shl(icShiftAmt, 4) @[ibuf.scala 124:19] 
    node T_440 = dshl(T_438, T_439) @[ibuf.scala 124:10] 
    node icData = bits(T_440, 95, 64) @[util.scala 25:13] 
    node T_442 = not(UInt<32>("h00")) @[ibuf.scala 74:17] 
    node T_443 = shl(nBufValid, 4) @[ibuf.scala 74:65] 
    node T_444 = dshl(T_442, T_443) @[ibuf.scala 74:51] 
    node icMask = bits(T_444, 31, 0) @[ibuf.scala 74:92] 
    node T_445 = and(icData, icMask) @[ibuf.scala 75:21] 
    node T_446 = not(icMask) @[ibuf.scala 75:43] 
    node T_447 = and(buf.data, T_446) @[ibuf.scala 75:41] 
    node inst = or(T_445, T_447) @[ibuf.scala 75:30] 
    node T_449 = dshl(UInt<1>("h01"), nValid) @[OneHot.scala 44:15] 
    node T_451 = sub(T_449, UInt<1>("h01")) @[ibuf.scala 77:33] 
    node T_452 = tail(T_451, 1) @[ibuf.scala 77:33] 
    node valid = bits(T_452, 1, 0) @[ibuf.scala 77:37] 
    node T_454 = dshl(UInt<1>("h01"), nBufValid) @[OneHot.scala 44:15] 
    node T_456 = sub(T_454, UInt<1>("h01")) @[ibuf.scala 78:37] 
    node bufMask = tail(T_456, 1) @[ibuf.scala 78:37] 
    node T_458 = mux(buf.xcpt_if, bufMask, UInt<1>("h00")) @[ibuf.scala 79:29] 
    node T_459 = not(bufMask) @[ibuf.scala 79:89] 
    node T_461 = mux(io.imem.bits.xcpt_if, T_459, UInt<1>("h00")) @[ibuf.scala 79:66] 
    node T_462 = or(T_458, T_461) @[ibuf.scala 79:61] 
    node xcpt_if = and(valid, T_462) @[ibuf.scala 79:23] 
    node T_464 = mux(buf.replay, bufMask, UInt<1>("h00")) @[ibuf.scala 80:31] 
    node T_465 = not(bufMask) @[ibuf.scala 80:89] 
    node T_467 = mux(io.imem.bits.replay, T_465, UInt<1>("h00")) @[ibuf.scala 80:67] 
    node T_468 = or(T_464, T_467) @[ibuf.scala 80:62] 
    node ic_replay = and(valid, T_468) @[ibuf.scala 80:25] 
    node T_469 = bits(inst, 1, 0) @[ibuf.scala 135:54] 
    node boundaries_0 = neq(T_469, UInt<2>("h03")) @[ibuf.scala 135:60] 
    node T_472 = eq(boundaries_0, UInt<1>("h00")) @[ibuf.scala 138:14] 
    node T_473 = bits(inst, 17, 16) @[ibuf.scala 138:38] 
    node T_474 = bits(T_473, 1, 0) @[ibuf.scala 135:54] 
    node T_476 = neq(T_474, UInt<2>("h03")) @[ibuf.scala 135:60] 
    node boundaries_1 = or(T_472, T_476) @[ibuf.scala 138:24] 
    node T_478 = dshl(UInt<1>("h01"), ibufBTBResp.bridx) @[OneHot.scala 44:15] 
    node ibufBTBHitMask = mux(ibufBTBHit, T_478, UInt<1>("h00")) @[ibuf.scala 82:27] 
    node T_480 = add(io.imem.bits.btb.bits.bridx, nBufValid) @[ibuf.scala 83:87] 
    node T_481 = sub(T_480, pcWordBits) @[ibuf.scala 83:100] 
    node T_482 = tail(T_481, 1) @[ibuf.scala 83:100] 
    node T_484 = dshl(UInt<1>("h01"), T_482) @[OneHot.scala 44:15] 
    node icBTBHitMask = mux(io.imem.bits.btb.valid, T_484, UInt<1>("h00")) @[ibuf.scala 83:25] 
    node T_486 = and(ibufBTBHitMask, bufMask) @[ibuf.scala 84:35] 
    node T_487 = not(bufMask) @[ibuf.scala 84:62] 
    node T_488 = and(icBTBHitMask, T_487) @[ibuf.scala 84:60] 
    node btbHitMask = or(T_486, T_488) @[ibuf.scala 84:45] 
    node T_489 = and(ibufBTBHitMask, bufMask) @[ibuf.scala 86:38] 
    node T_491 = neq(T_489, UInt<1>("h00")) @[ibuf.scala 86:49] 
    node T_492 = mux(T_491, ibufBTBResp, io.imem.bits.btb.bits) @[ibuf.scala 86:21] 
    io.btb_resp <- T_492 @[ibuf.scala 86:15] 
    node T_502 = gt(nBufValid, UInt<1>("h00")) @[ibuf.scala 87:26] 
    node T_503 = mux(T_502, buf.pc, io.imem.bits.pc) @[ibuf.scala 87:15] 
    io.pc <= T_503 @[ibuf.scala 87:9] 
    inst RVCExpander_1 of RVCExpander @[ibuf.scala 91:21] 
    RVCExpander_1.io is invalid
    RVCExpander_1.clk <= clk
    RVCExpander_1.reset <= reset
    RVCExpander_1.io.in <= inst @[ibuf.scala 92:15] 
    io.inst[0].bits.inst <- RVCExpander_1.io.out @[ibuf.scala 93:26] 
    node T_505 = dshr(ic_replay, UInt<1>("h00")) @[ibuf.scala 96:29] 
    node T_506 = bits(T_505, 0, 0) @[ibuf.scala 96:29] 
    node T_508 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 96:37] 
    node T_509 = dshr(btbHitMask, UInt<1>("h00")) @[ibuf.scala 96:63] 
    node T_510 = bits(T_509, 0, 0) @[ibuf.scala 96:63] 
    node T_512 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 96:81] 
    node T_513 = tail(T_512, 1) @[ibuf.scala 96:81] 
    node T_514 = dshr(ic_replay, T_513) @[ibuf.scala 96:79] 
    node T_515 = bits(T_514, 0, 0) @[ibuf.scala 96:79] 
    node T_516 = or(T_510, T_515) @[ibuf.scala 96:67] 
    node T_517 = and(T_508, T_516) @[ibuf.scala 96:49] 
    node T_518 = or(T_506, T_517) @[ibuf.scala 96:33] 
    node T_519 = dshr(valid, UInt<1>("h00")) @[ibuf.scala 97:32] 
    node T_520 = bits(T_519, 0, 0) @[ibuf.scala 97:32] 
    node T_522 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 97:61] 
    node T_523 = tail(T_522, 1) @[ibuf.scala 97:61] 
    node T_524 = dshr(valid, T_523) @[ibuf.scala 97:59] 
    node T_525 = bits(T_524, 0, 0) @[ibuf.scala 97:59] 
    node T_526 = or(RVCExpander_1.io.rvc, T_525) @[ibuf.scala 97:51] 
    node T_528 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 97:77] 
    node T_529 = tail(T_528, 1) @[ibuf.scala 97:77] 
    node T_530 = dshr(xcpt_if, T_529) @[ibuf.scala 97:75] 
    node T_531 = bits(T_530, 0, 0) @[ibuf.scala 97:75] 
    node T_532 = or(T_526, T_531) @[ibuf.scala 97:65] 
    node T_533 = or(T_532, T_518) @[ibuf.scala 97:81] 
    node T_534 = and(T_520, T_533) @[ibuf.scala 97:36] 
    io.inst[0].valid <= T_534 @[ibuf.scala 97:24] 
    node T_535 = dshr(xcpt_if, UInt<1>("h00")) @[ibuf.scala 98:37] 
    node T_536 = bits(T_535, 0, 0) @[ibuf.scala 98:37] 
    io.inst[0].bits.pf0 <= T_536 @[ibuf.scala 98:27] 
    node T_538 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 99:30] 
    node T_540 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 99:54] 
    node T_541 = tail(T_540, 1) @[ibuf.scala 99:54] 
    node T_542 = dshr(xcpt_if, T_541) @[ibuf.scala 99:52] 
    node T_543 = bits(T_542, 0, 0) @[ibuf.scala 99:52] 
    node T_544 = and(T_538, T_543) @[ibuf.scala 99:42] 
    io.inst[0].bits.pf1 <= T_544 @[ibuf.scala 99:27] 
    io.inst[0].bits.replay <= T_518 @[ibuf.scala 100:30] 
    node T_545 = dshr(btbHitMask, UInt<1>("h00")) @[ibuf.scala 101:44] 
    node T_546 = bits(T_545, 0, 0) @[ibuf.scala 101:44] 
    node T_548 = eq(RVCExpander_1.io.rvc, UInt<1>("h00")) @[ibuf.scala 101:52] 
    node T_550 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 101:79] 
    node T_551 = tail(T_550, 1) @[ibuf.scala 101:79] 
    node T_552 = dshr(btbHitMask, T_551) @[ibuf.scala 101:77] 
    node T_553 = bits(T_552, 0, 0) @[ibuf.scala 101:77] 
    node T_554 = and(T_548, T_553) @[ibuf.scala 101:64] 
    node T_555 = or(T_546, T_554) @[ibuf.scala 101:48] 
    io.inst[0].bits.btb_hit <= T_555 @[ibuf.scala 101:31] 
    io.inst[0].bits.rvc <= RVCExpander_1.io.rvc @[ibuf.scala 102:27] 
    node T_556 = and(io.inst[0].ready, io.inst[0].valid) @[Decoupled.scala 16:42] 
    when T_556 : @[ibuf.scala 104:32] 
      node T_558 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 104:61] 
      node T_559 = tail(T_558, 1) @[ibuf.scala 104:61] 
      node T_561 = add(UInt<1>("h00"), UInt<2>("h02")) @[ibuf.scala 104:66] 
      node T_562 = tail(T_561, 1) @[ibuf.scala 104:66] 
      node T_563 = mux(RVCExpander_1.io.rvc, T_559, T_562) @[ibuf.scala 104:47] 
      nReady <= T_563 @[ibuf.scala 104:41] 
      skip @[ibuf.scala 104:32] 
    node T_565 = add(UInt<1>("h00"), UInt<1>("h01")) @[ibuf.scala 106:36] 
    node T_566 = tail(T_565, 1) @[ibuf.scala 106:36] 
    node T_568 = add(UInt<1>("h00"), UInt<2>("h02")) @[ibuf.scala 106:41] 
    node T_569 = tail(T_568, 1) @[ibuf.scala 106:41] 
    node T_570 = mux(RVCExpander_1.io.rvc, T_566, T_569) @[ibuf.scala 106:22] 
    node T_571 = shr(inst, 16) @[ibuf.scala 106:70] 
    node T_572 = shr(inst, 32) @[ibuf.scala 106:85] 
    node T_573 = mux(RVCExpander_1.io.rvc, T_571, T_572) @[ibuf.scala 106:49] 
    
  module CSRFile : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip prci : {reset : UInt<1>, id : UInt<1>, interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>}}, rw : {flip addr : UInt<12>, flip cmd : UInt<3>, rdata : UInt<64>, flip wdata : UInt<64>}, csr_stall : UInt<1>, csr_xcpt : UInt<1>, eret : UInt<1>, singleStep : UInt<1>, status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, ptbr : {asid : UInt<7>, ppn : UInt<38>}, evec : UInt<40>, flip exception : UInt<1>, flip retire : UInt<1>, flip custom_mrw_csrs : UInt<64>[0], flip cause : UInt<64>, flip pc : UInt<40>, flip badaddr : UInt<40>, fatc : UInt<1>, time : UInt<64>, fcsr_rm : UInt<3>, flip fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, flip rocc : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {inst : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, data : UInt<64>}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, busy : UInt<1>, interrupt : UInt<1>, autl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, utl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[0], fpu_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, flip fpu_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip exception : UInt<1>, flip csr : {flip rdata : UInt<64>[0], waddr : UInt<12>, wdata : UInt<64>, wen : UInt<1>}, flip host_id : UInt<1>}, interrupt : UInt<1>, interrupt_cause : UInt<64>, bp : {control : {tdrtype : UInt<4>, bpamaskmax : UInt<5>, reserved : UInt<36>, bpaction : UInt<8>, bpmatch : UInt<4>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, r : UInt<1>, w : UInt<1>, x : UInt<1>}, address : UInt<39>}[1]}
    
    io is invalid
    wire T_4984 : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 142:55] 
    T_4984 is invalid @[csr.scala 142:55] 
    wire T_5010 : UInt<67>
    T_5010 is invalid
    T_5010 <= UInt<1>("h00")
    node T_5011 = bits(T_5010, 0, 0) @[csr.scala 142:55] 
    T_4984.uie <= T_5011 @[csr.scala 142:55] 
    node T_5012 = bits(T_5010, 1, 1) @[csr.scala 142:55] 
    T_4984.sie <= T_5012 @[csr.scala 142:55] 
    node T_5013 = bits(T_5010, 2, 2) @[csr.scala 142:55] 
    T_4984.hie <= T_5013 @[csr.scala 142:55] 
    node T_5014 = bits(T_5010, 3, 3) @[csr.scala 142:55] 
    T_4984.mie <= T_5014 @[csr.scala 142:55] 
    node T_5015 = bits(T_5010, 4, 4) @[csr.scala 142:55] 
    T_4984.upie <= T_5015 @[csr.scala 142:55] 
    node T_5016 = bits(T_5010, 5, 5) @[csr.scala 142:55] 
    T_4984.spie <= T_5016 @[csr.scala 142:55] 
    node T_5017 = bits(T_5010, 6, 6) @[csr.scala 142:55] 
    T_4984.hpie <= T_5017 @[csr.scala 142:55] 
    node T_5018 = bits(T_5010, 7, 7) @[csr.scala 142:55] 
    T_4984.mpie <= T_5018 @[csr.scala 142:55] 
    node T_5019 = bits(T_5010, 8, 8) @[csr.scala 142:55] 
    T_4984.spp <= T_5019 @[csr.scala 142:55] 
    node T_5020 = bits(T_5010, 10, 9) @[csr.scala 142:55] 
    T_4984.hpp <= T_5020 @[csr.scala 142:55] 
    node T_5021 = bits(T_5010, 12, 11) @[csr.scala 142:55] 
    T_4984.mpp <= T_5021 @[csr.scala 142:55] 
    node T_5022 = bits(T_5010, 14, 13) @[csr.scala 142:55] 
    T_4984.fs <= T_5022 @[csr.scala 142:55] 
    node T_5023 = bits(T_5010, 16, 15) @[csr.scala 142:55] 
    T_4984.xs <= T_5023 @[csr.scala 142:55] 
    node T_5024 = bits(T_5010, 17, 17) @[csr.scala 142:55] 
    T_4984.mprv <= T_5024 @[csr.scala 142:55] 
    node T_5025 = bits(T_5010, 18, 18) @[csr.scala 142:55] 
    T_4984.pum <= T_5025 @[csr.scala 142:55] 
    node T_5026 = bits(T_5010, 19, 19) @[csr.scala 142:55] 
    T_4984.mxr <= T_5026 @[csr.scala 142:55] 
    node T_5027 = bits(T_5010, 23, 20) @[csr.scala 142:55] 
    T_4984.zero1 <= T_5027 @[csr.scala 142:55] 
    node T_5028 = bits(T_5010, 28, 24) @[csr.scala 142:55] 
    T_4984.vm <= T_5028 @[csr.scala 142:55] 
    node T_5029 = bits(T_5010, 30, 29) @[csr.scala 142:55] 
    T_4984.zero2 <= T_5029 @[csr.scala 142:55] 
    node T_5030 = bits(T_5010, 31, 31) @[csr.scala 142:55] 
    T_4984.sd_rv32 <= T_5030 @[csr.scala 142:55] 
    node T_5031 = bits(T_5010, 62, 32) @[csr.scala 142:55] 
    T_4984.zero3 <= T_5031 @[csr.scala 142:55] 
    node T_5032 = bits(T_5010, 63, 63) @[csr.scala 142:55] 
    T_4984.sd <= T_5032 @[csr.scala 142:55] 
    node T_5033 = bits(T_5010, 65, 64) @[csr.scala 142:55] 
    T_4984.prv <= T_5033 @[csr.scala 142:55] 
    node T_5034 = bits(T_5010, 66, 66) @[csr.scala 142:55] 
    T_4984.debug <= T_5034 @[csr.scala 142:55] 
    wire reset_mstatus : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}
    reset_mstatus is invalid
    reset_mstatus <- T_4984
    reset_mstatus.mpp <= UInt<2>("h03") @[csr.scala 143:21] 
    reset_mstatus.prv <= UInt<2>("h03") @[csr.scala 144:21] 
    reg reg_mstatus : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, clk with : (reset => (reset, reset_mstatus))
    wire T_5122 : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, hwbpcount : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>} @[csr.scala 147:49] 
    T_5122 is invalid @[csr.scala 147:49] 
    wire T_5141 : UInt<32>
    T_5141 is invalid
    T_5141 <= UInt<1>("h00")
    node T_5142 = bits(T_5141, 1, 0) @[csr.scala 147:49] 
    T_5122.prv <= T_5142 @[csr.scala 147:49] 
    node T_5143 = bits(T_5141, 2, 2) @[csr.scala 147:49] 
    T_5122.step <= T_5143 @[csr.scala 147:49] 
    node T_5144 = bits(T_5141, 3, 3) @[csr.scala 147:49] 
    T_5122.halt <= T_5144 @[csr.scala 147:49] 
    node T_5145 = bits(T_5141, 4, 4) @[csr.scala 147:49] 
    T_5122.zero1 <= T_5145 @[csr.scala 147:49] 
    node T_5146 = bits(T_5141, 5, 5) @[csr.scala 147:49] 
    T_5122.debugint <= T_5146 @[csr.scala 147:49] 
    node T_5147 = bits(T_5141, 8, 6) @[csr.scala 147:49] 
    T_5122.cause <= T_5147 @[csr.scala 147:49] 
    node T_5148 = bits(T_5141, 9, 9) @[csr.scala 147:49] 
    T_5122.stoptime <= T_5148 @[csr.scala 147:49] 
    node T_5149 = bits(T_5141, 10, 10) @[csr.scala 147:49] 
    T_5122.stopcycle <= T_5149 @[csr.scala 147:49] 
    node T_5150 = bits(T_5141, 11, 11) @[csr.scala 147:49] 
    T_5122.zero2 <= T_5150 @[csr.scala 147:49] 
    node T_5151 = bits(T_5141, 12, 12) @[csr.scala 147:49] 
    T_5122.ebreaku <= T_5151 @[csr.scala 147:49] 
    node T_5152 = bits(T_5141, 13, 13) @[csr.scala 147:49] 
    T_5122.ebreaks <= T_5152 @[csr.scala 147:49] 
    node T_5153 = bits(T_5141, 14, 14) @[csr.scala 147:49] 
    T_5122.ebreakh <= T_5153 @[csr.scala 147:49] 
    node T_5154 = bits(T_5141, 15, 15) @[csr.scala 147:49] 
    T_5122.ebreakm <= T_5154 @[csr.scala 147:49] 
    node T_5155 = bits(T_5141, 27, 16) @[csr.scala 147:49] 
    T_5122.hwbpcount <= T_5155 @[csr.scala 147:49] 
    node T_5156 = bits(T_5141, 28, 28) @[csr.scala 147:49] 
    T_5122.fullreset <= T_5156 @[csr.scala 147:49] 
    node T_5157 = bits(T_5141, 29, 29) @[csr.scala 147:49] 
    T_5122.ndreset <= T_5157 @[csr.scala 147:49] 
    node T_5158 = bits(T_5141, 31, 30) @[csr.scala 147:49] 
    T_5122.xdebugver <= T_5158 @[csr.scala 147:49] 
    wire reset_dcsr : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, hwbpcount : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>}
    reset_dcsr is invalid
    reset_dcsr <- T_5122
    reset_dcsr.xdebugver <= UInt<1>("h01") @[csr.scala 148:24] 
    reset_dcsr.prv <= UInt<2>("h03") @[csr.scala 149:18] 
    reg reg_dcsr : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, hwbpcount : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>}, clk with : (reset => (reset, reset_dcsr))
    wire T_5224 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 153:43] 
    T_5224 is invalid @[csr.scala 153:43] 
    wire T_5239 : UInt<13>
    T_5239 is invalid
    T_5239 <= UInt<1>("h00")
    node T_5240 = bits(T_5239, 0, 0) @[csr.scala 153:43] 
    T_5224.usip <= T_5240 @[csr.scala 153:43] 
    node T_5241 = bits(T_5239, 1, 1) @[csr.scala 153:43] 
    T_5224.ssip <= T_5241 @[csr.scala 153:43] 
    node T_5242 = bits(T_5239, 2, 2) @[csr.scala 153:43] 
    T_5224.hsip <= T_5242 @[csr.scala 153:43] 
    node T_5243 = bits(T_5239, 3, 3) @[csr.scala 153:43] 
    T_5224.msip <= T_5243 @[csr.scala 153:43] 
    node T_5244 = bits(T_5239, 4, 4) @[csr.scala 153:43] 
    T_5224.utip <= T_5244 @[csr.scala 153:43] 
    node T_5245 = bits(T_5239, 5, 5) @[csr.scala 153:43] 
    T_5224.stip <= T_5245 @[csr.scala 153:43] 
    node T_5246 = bits(T_5239, 6, 6) @[csr.scala 153:43] 
    T_5224.htip <= T_5246 @[csr.scala 153:43] 
    node T_5247 = bits(T_5239, 7, 7) @[csr.scala 153:43] 
    T_5224.mtip <= T_5247 @[csr.scala 153:43] 
    node T_5248 = bits(T_5239, 8, 8) @[csr.scala 153:43] 
    T_5224.ueip <= T_5248 @[csr.scala 153:43] 
    node T_5249 = bits(T_5239, 9, 9) @[csr.scala 153:43] 
    T_5224.seip <= T_5249 @[csr.scala 153:43] 
    node T_5250 = bits(T_5239, 10, 10) @[csr.scala 153:43] 
    T_5224.heip <= T_5250 @[csr.scala 153:43] 
    node T_5251 = bits(T_5239, 11, 11) @[csr.scala 153:43] 
    T_5224.meip <= T_5251 @[csr.scala 153:43] 
    node T_5252 = bits(T_5239, 12, 12) @[csr.scala 153:43] 
    T_5224.rocc <= T_5252 @[csr.scala 153:43] 
    wire T_5253 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    T_5253 is invalid
    T_5253 <- T_5224
    T_5253.ssip <= UInt<1>("h01") @[csr.scala 154:14] 
    T_5253.msip <= UInt<1>("h01") @[csr.scala 155:14] 
    T_5253.stip <= UInt<1>("h01") @[csr.scala 156:14] 
    T_5253.mtip <= UInt<1>("h01") @[csr.scala 157:14] 
    T_5253.meip <= UInt<1>("h01") @[csr.scala 158:14] 
    T_5253.seip <= UInt<1>("h01") @[csr.scala 159:14] 
    T_5253.rocc <= UInt<1>("h00") @[csr.scala 160:14] 
    wire T_5274 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    T_5274 is invalid
    T_5274 <- T_5253
    T_5274.msip <= UInt<1>("h00") @[csr.scala 163:14] 
    T_5274.mtip <= UInt<1>("h00") @[csr.scala 164:14] 
    T_5274.meip <= UInt<1>("h00") @[csr.scala 165:14] 
    node T_5291 = cat(T_5253.hsip, T_5253.ssip) @[csr.scala 167:10] 
    node T_5292 = cat(T_5291, T_5253.usip) @[csr.scala 167:10] 
    node T_5293 = cat(T_5253.stip, T_5253.utip) @[csr.scala 167:10] 
    node T_5294 = cat(T_5293, T_5253.msip) @[csr.scala 167:10] 
    node T_5295 = cat(T_5294, T_5292) @[csr.scala 167:10] 
    node T_5296 = cat(T_5253.ueip, T_5253.mtip) @[csr.scala 167:10] 
    node T_5297 = cat(T_5296, T_5253.htip) @[csr.scala 167:10] 
    node T_5298 = cat(T_5253.heip, T_5253.seip) @[csr.scala 167:10] 
    node T_5299 = cat(T_5253.rocc, T_5253.meip) @[csr.scala 167:10] 
    node T_5300 = cat(T_5299, T_5298) @[csr.scala 167:10] 
    node T_5301 = cat(T_5300, T_5297) @[csr.scala 167:10] 
    node supported_interrupts = cat(T_5301, T_5295) @[csr.scala 167:10] 
    node T_5302 = cat(T_5274.hsip, T_5274.ssip) @[csr.scala 167:22] 
    node T_5303 = cat(T_5302, T_5274.usip) @[csr.scala 167:22] 
    node T_5304 = cat(T_5274.stip, T_5274.utip) @[csr.scala 167:22] 
    node T_5305 = cat(T_5304, T_5274.msip) @[csr.scala 167:22] 
    node T_5306 = cat(T_5305, T_5303) @[csr.scala 167:22] 
    node T_5307 = cat(T_5274.ueip, T_5274.mtip) @[csr.scala 167:22] 
    node T_5308 = cat(T_5307, T_5274.htip) @[csr.scala 167:22] 
    node T_5309 = cat(T_5274.heip, T_5274.seip) @[csr.scala 167:22] 
    node T_5310 = cat(T_5274.rocc, T_5274.meip) @[csr.scala 167:22] 
    node T_5311 = cat(T_5310, T_5309) @[csr.scala 167:22] 
    node T_5312 = cat(T_5311, T_5308) @[csr.scala 167:22] 
    node delegable_interrupts = cat(T_5312, T_5306) @[csr.scala 167:22] 
    node exception = or(io.exception, io.csr_xcpt) @[csr.scala 177:32] 
    reg reg_debug : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg reg_dpc : UInt<40>, clk
    reg reg_dscratch : UInt<64>, clk
    reg reg_singleStepped : UInt<1>, clk
    node T_5317 = bits(io.retire, 0, 0) @[csr.scala 183:18] 
    node T_5318 = or(T_5317, exception) @[csr.scala 183:22] 
    when T_5318 : @[csr.scala 183:36] 
      reg_singleStepped <= UInt<1>("h01") @[csr.scala 183:56] 
      skip @[csr.scala 183:36] 
    node T_5321 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 184:9] 
    when T_5321 : @[csr.scala 184:25] 
      reg_singleStepped <= UInt<1>("h00") @[csr.scala 184:45] 
      skip @[csr.scala 184:25] 
    node T_5324 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 185:10] 
    node T_5326 = leq(io.retire, UInt<1>("h01")) @[csr.scala 185:38] 
    node T_5327 = or(T_5324, T_5326) @[csr.scala 185:25] 
    node T_5328 = or(T_5327, reset) @[csr.scala 185:9] 
    node T_5330 = eq(T_5328, UInt<1>("h00")) @[csr.scala 185:9] 
    when T_5330 : @[csr.scala 185:9] 
      printf(clk, UInt<1>(1), "Assertion failed\n    at csr.scala:185 assert(!io.singleStep || io.retire <= UInt(1))\n") @[csr.scala 185:9] 
      stop(clk, UInt<1>(1), 1) @[csr.scala 185:9] 
      skip @[csr.scala 185:9] 
    node T_5332 = eq(reg_singleStepped, UInt<1>("h00")) @[csr.scala 186:10] 
    node T_5334 = eq(io.retire, UInt<1>("h00")) @[csr.scala 186:42] 
    node T_5335 = or(T_5332, T_5334) @[csr.scala 186:29] 
    node T_5336 = or(T_5335, reset) @[csr.scala 186:9] 
    node T_5338 = eq(T_5336, UInt<1>("h00")) @[csr.scala 186:9] 
    when T_5338 : @[csr.scala 186:9] 
      printf(clk, UInt<1>(1), "Assertion failed\n    at csr.scala:186 assert(!reg_singleStepped || io.retire === UInt(0))\n") @[csr.scala 186:9] 
      stop(clk, UInt<1>(1), 1) @[csr.scala 186:9] 
      skip @[csr.scala 186:9] 
    reg reg_tdrselect : {tdrmode : UInt<1>, reserved : UInt<62>, tdrindex : UInt<1>}, clk
    reg reg_bp : {control : {tdrtype : UInt<4>, bpamaskmax : UInt<5>, reserved : UInt<36>, bpaction : UInt<8>, bpmatch : UInt<4>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, r : UInt<1>, w : UInt<1>, x : UInt<1>}, address : UInt<39>}[2], clk
    reg reg_mie : UInt<64>, clk with : (reset => (reset, UInt<64>("h00")))
    reg reg_mideleg : UInt<64>, clk with : (reset => (reset, UInt<64>("h00")))
    reg reg_medeleg : UInt<64>, clk with : (reset => (reset, UInt<64>("h00")))
    reg reg_mip : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}, clk
    reg reg_mepc : UInt<40>, clk
    reg reg_mcause : UInt<64>, clk
    reg reg_mbadaddr : UInt<40>, clk
    reg reg_mscratch : UInt<64>, clk
    reg reg_mtvec : UInt<32>, clk with : (reset => (reset, UInt<32>("h01010")))
    reg reg_sepc : UInt<40>, clk
    reg reg_scause : UInt<64>, clk
    reg reg_sbadaddr : UInt<40>, clk
    reg reg_sscratch : UInt<64>, clk
    reg reg_stvec : UInt<39>, clk
    reg reg_sptbr : {asid : UInt<7>, ppn : UInt<38>}, clk
    reg reg_wfi : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg reg_fflags : UInt<5>, clk
    reg reg_frm : UInt<3>, clk
    reg T_5542 : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_5543 = add(T_5542, io.retire) @[util.scala 144:33] 
    T_5542 <= T_5543 @[util.scala 145:9] 
    reg T_5545 : UInt<58>, clk with : (reset => (reset, UInt<58>("h00")))
    node T_5546 = bits(T_5543, 6, 6) @[util.scala 149:20] 
    when T_5546 : @[util.scala 149:34] 
      node T_5548 = add(T_5545, UInt<1>("h01")) @[util.scala 149:43] 
      node T_5549 = tail(T_5548, 1) @[util.scala 149:43] 
      T_5545 <= T_5549 @[util.scala 149:38] 
      skip @[util.scala 149:34] 
    node T_5550 = cat(T_5545, T_5542) @[Cat.scala 20:58] 
    reg T_5553 : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_5554 = add(T_5553, UInt<1>("h01")) @[util.scala 144:33] 
    T_5553 <= T_5554 @[util.scala 145:9] 
    reg T_5556 : UInt<58>, clk with : (reset => (reset, UInt<58>("h00")))
    node T_5557 = bits(T_5554, 6, 6) @[util.scala 149:20] 
    when T_5557 : @[util.scala 149:34] 
      node T_5559 = add(T_5556, UInt<1>("h01")) @[util.scala 149:43] 
      node T_5560 = tail(T_5559, 1) @[util.scala 149:43] 
      T_5556 <= T_5560 @[util.scala 149:38] 
      skip @[util.scala 149:34] 
    node reg_cycle = cat(T_5556, T_5553) @[Cat.scala 20:58] 
    wire mip : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>}
    mip is invalid
    mip <- reg_mip
    mip.rocc <= io.rocc.interrupt @[csr.scala 216:12] 
    node T_5574 = cat(mip.hsip, mip.ssip) @[csr.scala 217:22] 
    node T_5575 = cat(T_5574, mip.usip) @[csr.scala 217:22] 
    node T_5576 = cat(mip.stip, mip.utip) @[csr.scala 217:22] 
    node T_5577 = cat(T_5576, mip.msip) @[csr.scala 217:22] 
    node T_5578 = cat(T_5577, T_5575) @[csr.scala 217:22] 
    node T_5579 = cat(mip.ueip, mip.mtip) @[csr.scala 217:22] 
    node T_5580 = cat(T_5579, mip.htip) @[csr.scala 217:22] 
    node T_5581 = cat(mip.heip, mip.seip) @[csr.scala 217:22] 
    node T_5582 = cat(mip.rocc, mip.meip) @[csr.scala 217:22] 
    node T_5583 = cat(T_5582, T_5581) @[csr.scala 217:22] 
    node T_5584 = cat(T_5583, T_5580) @[csr.scala 217:22] 
    node T_5585 = cat(T_5584, T_5578) @[csr.scala 217:22] 
    node read_mip = and(T_5585, supported_interrupts) @[csr.scala 217:29] 
    node pending_interrupts = and(read_mip, reg_mie) @[csr.scala 219:37] 
    node T_5587 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 220:26] 
    node T_5589 = lt(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 220:57] 
    node T_5591 = eq(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 220:85] 
    node T_5592 = and(T_5591, reg_mstatus.mie) @[csr.scala 220:95] 
    node T_5593 = or(T_5589, T_5592) @[csr.scala 220:65] 
    node T_5594 = and(T_5587, T_5593) @[csr.scala 220:37] 
    node T_5595 = not(reg_mideleg) @[csr.scala 220:138] 
    node T_5596 = and(pending_interrupts, T_5595) @[csr.scala 220:136] 
    node m_interrupts = mux(T_5594, T_5596, UInt<1>("h00")) @[csr.scala 220:25] 
    node T_5599 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 221:26] 
    node T_5601 = lt(reg_mstatus.prv, UInt<1>("h01")) @[csr.scala 221:57] 
    node T_5603 = eq(reg_mstatus.prv, UInt<1>("h01")) @[csr.scala 221:85] 
    node T_5604 = and(T_5603, reg_mstatus.sie) @[csr.scala 221:95] 
    node T_5605 = or(T_5601, T_5604) @[csr.scala 221:65] 
    node T_5606 = and(T_5599, T_5605) @[csr.scala 221:37] 
    node T_5607 = and(pending_interrupts, reg_mideleg) @[csr.scala 221:136] 
    node s_interrupts = mux(T_5606, T_5607, UInt<1>("h00")) @[csr.scala 221:25] 
    node all_interrupts = or(m_interrupts, s_interrupts) @[csr.scala 222:37] 
    node T_5610 = bits(all_interrupts, 0, 0) @[OneHot.scala 35:40] 
    node T_5611 = bits(all_interrupts, 1, 1) @[OneHot.scala 35:40] 
    node T_5612 = bits(all_interrupts, 2, 2) @[OneHot.scala 35:40] 
    node T_5613 = bits(all_interrupts, 3, 3) @[OneHot.scala 35:40] 
    node T_5614 = bits(all_interrupts, 4, 4) @[OneHot.scala 35:40] 
    node T_5615 = bits(all_interrupts, 5, 5) @[OneHot.scala 35:40] 
    node T_5616 = bits(all_interrupts, 6, 6) @[OneHot.scala 35:40] 
    node T_5617 = bits(all_interrupts, 7, 7) @[OneHot.scala 35:40] 
    node T_5618 = bits(all_interrupts, 8, 8) @[OneHot.scala 35:40] 
    node T_5619 = bits(all_interrupts, 9, 9) @[OneHot.scala 35:40] 
    node T_5620 = bits(all_interrupts, 10, 10) @[OneHot.scala 35:40] 
    node T_5621 = bits(all_interrupts, 11, 11) @[OneHot.scala 35:40] 
    node T_5622 = bits(all_interrupts, 12, 12) @[OneHot.scala 35:40] 
    node T_5623 = bits(all_interrupts, 13, 13) @[OneHot.scala 35:40] 
    node T_5624 = bits(all_interrupts, 14, 14) @[OneHot.scala 35:40] 
    node T_5625 = bits(all_interrupts, 15, 15) @[OneHot.scala 35:40] 
    node T_5626 = bits(all_interrupts, 16, 16) @[OneHot.scala 35:40] 
    node T_5627 = bits(all_interrupts, 17, 17) @[OneHot.scala 35:40] 
    node T_5628 = bits(all_interrupts, 18, 18) @[OneHot.scala 35:40] 
    node T_5629 = bits(all_interrupts, 19, 19) @[OneHot.scala 35:40] 
    node T_5630 = bits(all_interrupts, 20, 20) @[OneHot.scala 35:40] 
    node T_5631 = bits(all_interrupts, 21, 21) @[OneHot.scala 35:40] 
    node T_5632 = bits(all_interrupts, 22, 22) @[OneHot.scala 35:40] 
    node T_5633 = bits(all_interrupts, 23, 23) @[OneHot.scala 35:40] 
    node T_5634 = bits(all_interrupts, 24, 24) @[OneHot.scala 35:40] 
    node T_5635 = bits(all_interrupts, 25, 25) @[OneHot.scala 35:40] 
    node T_5636 = bits(all_interrupts, 26, 26) @[OneHot.scala 35:40] 
    node T_5637 = bits(all_interrupts, 27, 27) @[OneHot.scala 35:40] 
    node T_5638 = bits(all_interrupts, 28, 28) @[OneHot.scala 35:40] 
    node T_5639 = bits(all_interrupts, 29, 29) @[OneHot.scala 35:40] 
    node T_5640 = bits(all_interrupts, 30, 30) @[OneHot.scala 35:40] 
    node T_5641 = bits(all_interrupts, 31, 31) @[OneHot.scala 35:40] 
    node T_5642 = bits(all_interrupts, 32, 32) @[OneHot.scala 35:40] 
    node T_5643 = bits(all_interrupts, 33, 33) @[OneHot.scala 35:40] 
    node T_5644 = bits(all_interrupts, 34, 34) @[OneHot.scala 35:40] 
    node T_5645 = bits(all_interrupts, 35, 35) @[OneHot.scala 35:40] 
    node T_5646 = bits(all_interrupts, 36, 36) @[OneHot.scala 35:40] 
    node T_5647 = bits(all_interrupts, 37, 37) @[OneHot.scala 35:40] 
    node T_5648 = bits(all_interrupts, 38, 38) @[OneHot.scala 35:40] 
    node T_5649 = bits(all_interrupts, 39, 39) @[OneHot.scala 35:40] 
    node T_5650 = bits(all_interrupts, 40, 40) @[OneHot.scala 35:40] 
    node T_5651 = bits(all_interrupts, 41, 41) @[OneHot.scala 35:40] 
    node T_5652 = bits(all_interrupts, 42, 42) @[OneHot.scala 35:40] 
    node T_5653 = bits(all_interrupts, 43, 43) @[OneHot.scala 35:40] 
    node T_5654 = bits(all_interrupts, 44, 44) @[OneHot.scala 35:40] 
    node T_5655 = bits(all_interrupts, 45, 45) @[OneHot.scala 35:40] 
    node T_5656 = bits(all_interrupts, 46, 46) @[OneHot.scala 35:40] 
    node T_5657 = bits(all_interrupts, 47, 47) @[OneHot.scala 35:40] 
    node T_5658 = bits(all_interrupts, 48, 48) @[OneHot.scala 35:40] 
    node T_5659 = bits(all_interrupts, 49, 49) @[OneHot.scala 35:40] 
    node T_5660 = bits(all_interrupts, 50, 50) @[OneHot.scala 35:40] 
    node T_5661 = bits(all_interrupts, 51, 51) @[OneHot.scala 35:40] 
    node T_5662 = bits(all_interrupts, 52, 52) @[OneHot.scala 35:40] 
    node T_5663 = bits(all_interrupts, 53, 53) @[OneHot.scala 35:40] 
    node T_5664 = bits(all_interrupts, 54, 54) @[OneHot.scala 35:40] 
    node T_5665 = bits(all_interrupts, 55, 55) @[OneHot.scala 35:40] 
    node T_5666 = bits(all_interrupts, 56, 56) @[OneHot.scala 35:40] 
    node T_5667 = bits(all_interrupts, 57, 57) @[OneHot.scala 35:40] 
    node T_5668 = bits(all_interrupts, 58, 58) @[OneHot.scala 35:40] 
    node T_5669 = bits(all_interrupts, 59, 59) @[OneHot.scala 35:40] 
    node T_5670 = bits(all_interrupts, 60, 60) @[OneHot.scala 35:40] 
    node T_5671 = bits(all_interrupts, 61, 61) @[OneHot.scala 35:40] 
    node T_5672 = bits(all_interrupts, 62, 62) @[OneHot.scala 35:40] 
    node T_5673 = bits(all_interrupts, 63, 63) @[OneHot.scala 35:40] 
    node T_5738 = mux(T_5672, UInt<6>("h03e"), UInt<6>("h03f")) @[Mux.scala 31:69] 
    node T_5739 = mux(T_5671, UInt<6>("h03d"), T_5738) @[Mux.scala 31:69] 
    node T_5740 = mux(T_5670, UInt<6>("h03c"), T_5739) @[Mux.scala 31:69] 
    node T_5741 = mux(T_5669, UInt<6>("h03b"), T_5740) @[Mux.scala 31:69] 
    node T_5742 = mux(T_5668, UInt<6>("h03a"), T_5741) @[Mux.scala 31:69] 
    node T_5743 = mux(T_5667, UInt<6>("h039"), T_5742) @[Mux.scala 31:69] 
    node T_5744 = mux(T_5666, UInt<6>("h038"), T_5743) @[Mux.scala 31:69] 
    node T_5745 = mux(T_5665, UInt<6>("h037"), T_5744) @[Mux.scala 31:69] 
    node T_5746 = mux(T_5664, UInt<6>("h036"), T_5745) @[Mux.scala 31:69] 
    node T_5747 = mux(T_5663, UInt<6>("h035"), T_5746) @[Mux.scala 31:69] 
    node T_5748 = mux(T_5662, UInt<6>("h034"), T_5747) @[Mux.scala 31:69] 
    node T_5749 = mux(T_5661, UInt<6>("h033"), T_5748) @[Mux.scala 31:69] 
    node T_5750 = mux(T_5660, UInt<6>("h032"), T_5749) @[Mux.scala 31:69] 
    node T_5751 = mux(T_5659, UInt<6>("h031"), T_5750) @[Mux.scala 31:69] 
    node T_5752 = mux(T_5658, UInt<6>("h030"), T_5751) @[Mux.scala 31:69] 
    node T_5753 = mux(T_5657, UInt<6>("h02f"), T_5752) @[Mux.scala 31:69] 
    node T_5754 = mux(T_5656, UInt<6>("h02e"), T_5753) @[Mux.scala 31:69] 
    node T_5755 = mux(T_5655, UInt<6>("h02d"), T_5754) @[Mux.scala 31:69] 
    node T_5756 = mux(T_5654, UInt<6>("h02c"), T_5755) @[Mux.scala 31:69] 
    node T_5757 = mux(T_5653, UInt<6>("h02b"), T_5756) @[Mux.scala 31:69] 
    node T_5758 = mux(T_5652, UInt<6>("h02a"), T_5757) @[Mux.scala 31:69] 
    node T_5759 = mux(T_5651, UInt<6>("h029"), T_5758) @[Mux.scala 31:69] 
    node T_5760 = mux(T_5650, UInt<6>("h028"), T_5759) @[Mux.scala 31:69] 
    node T_5761 = mux(T_5649, UInt<6>("h027"), T_5760) @[Mux.scala 31:69] 
    node T_5762 = mux(T_5648, UInt<6>("h026"), T_5761) @[Mux.scala 31:69] 
    node T_5763 = mux(T_5647, UInt<6>("h025"), T_5762) @[Mux.scala 31:69] 
    node T_5764 = mux(T_5646, UInt<6>("h024"), T_5763) @[Mux.scala 31:69] 
    node T_5765 = mux(T_5645, UInt<6>("h023"), T_5764) @[Mux.scala 31:69] 
    node T_5766 = mux(T_5644, UInt<6>("h022"), T_5765) @[Mux.scala 31:69] 
    node T_5767 = mux(T_5643, UInt<6>("h021"), T_5766) @[Mux.scala 31:69] 
    node T_5768 = mux(T_5642, UInt<6>("h020"), T_5767) @[Mux.scala 31:69] 
    node T_5769 = mux(T_5641, UInt<5>("h01f"), T_5768) @[Mux.scala 31:69] 
    node T_5770 = mux(T_5640, UInt<5>("h01e"), T_5769) @[Mux.scala 31:69] 
    node T_5771 = mux(T_5639, UInt<5>("h01d"), T_5770) @[Mux.scala 31:69] 
    node T_5772 = mux(T_5638, UInt<5>("h01c"), T_5771) @[Mux.scala 31:69] 
    node T_5773 = mux(T_5637, UInt<5>("h01b"), T_5772) @[Mux.scala 31:69] 
    node T_5774 = mux(T_5636, UInt<5>("h01a"), T_5773) @[Mux.scala 31:69] 
    node T_5775 = mux(T_5635, UInt<5>("h019"), T_5774) @[Mux.scala 31:69] 
    node T_5776 = mux(T_5634, UInt<5>("h018"), T_5775) @[Mux.scala 31:69] 
    node T_5777 = mux(T_5633, UInt<5>("h017"), T_5776) @[Mux.scala 31:69] 
    node T_5778 = mux(T_5632, UInt<5>("h016"), T_5777) @[Mux.scala 31:69] 
    node T_5779 = mux(T_5631, UInt<5>("h015"), T_5778) @[Mux.scala 31:69] 
    node T_5780 = mux(T_5630, UInt<5>("h014"), T_5779) @[Mux.scala 31:69] 
    node T_5781 = mux(T_5629, UInt<5>("h013"), T_5780) @[Mux.scala 31:69] 
    node T_5782 = mux(T_5628, UInt<5>("h012"), T_5781) @[Mux.scala 31:69] 
    node T_5783 = mux(T_5627, UInt<5>("h011"), T_5782) @[Mux.scala 31:69] 
    node T_5784 = mux(T_5626, UInt<5>("h010"), T_5783) @[Mux.scala 31:69] 
    node T_5785 = mux(T_5625, UInt<4>("h0f"), T_5784) @[Mux.scala 31:69] 
    node T_5786 = mux(T_5624, UInt<4>("h0e"), T_5785) @[Mux.scala 31:69] 
    node T_5787 = mux(T_5623, UInt<4>("h0d"), T_5786) @[Mux.scala 31:69] 
    node T_5788 = mux(T_5622, UInt<4>("h0c"), T_5787) @[Mux.scala 31:69] 
    node T_5789 = mux(T_5621, UInt<4>("h0b"), T_5788) @[Mux.scala 31:69] 
    node T_5790 = mux(T_5620, UInt<4>("h0a"), T_5789) @[Mux.scala 31:69] 
    node T_5791 = mux(T_5619, UInt<4>("h09"), T_5790) @[Mux.scala 31:69] 
    node T_5792 = mux(T_5618, UInt<4>("h08"), T_5791) @[Mux.scala 31:69] 
    node T_5793 = mux(T_5617, UInt<3>("h07"), T_5792) @[Mux.scala 31:69] 
    node T_5794 = mux(T_5616, UInt<3>("h06"), T_5793) @[Mux.scala 31:69] 
    node T_5795 = mux(T_5615, UInt<3>("h05"), T_5794) @[Mux.scala 31:69] 
    node T_5796 = mux(T_5614, UInt<3>("h04"), T_5795) @[Mux.scala 31:69] 
    node T_5797 = mux(T_5613, UInt<2>("h03"), T_5796) @[Mux.scala 31:69] 
    node T_5798 = mux(T_5612, UInt<2>("h02"), T_5797) @[Mux.scala 31:69] 
    node T_5799 = mux(T_5611, UInt<1>("h01"), T_5798) @[Mux.scala 31:69] 
    node T_5800 = mux(T_5610, UInt<1>("h00"), T_5799) @[Mux.scala 31:69] 
    node T_5801 = add(UInt<64>("h08000000000000000"), T_5800) @[csr.scala 224:37] 
    node interruptCause = tail(T_5801, 1) @[csr.scala 224:37] 
    node T_5803 = neq(all_interrupts, UInt<1>("h00")) @[csr.scala 225:34] 
    node T_5805 = eq(io.singleStep, UInt<1>("h00")) @[csr.scala 225:41] 
    node T_5806 = and(T_5803, T_5805) @[csr.scala 225:38] 
    node T_5807 = or(T_5806, reg_singleStepped) @[csr.scala 225:56] 
    io.interrupt <= T_5807 @[csr.scala 225:16] 
    io.interrupt_cause <= interruptCause @[csr.scala 226:22] 
    io.bp[0] <- reg_bp[0] @[csr.scala 227:9] 
    node T_5809 = and(UInt<1>("h01"), reg_dcsr.debugint) @[csr.scala 231:26] 
    node T_5811 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 231:50] 
    node T_5812 = and(T_5809, T_5811) @[csr.scala 231:47] 
    when T_5812 : @[csr.scala 231:62] 
      io.interrupt <= UInt<1>("h01") @[csr.scala 232:18] 
      io.interrupt_cause <= UInt<64>("h0800000000000000d") @[csr.scala 233:24] 
      skip @[csr.scala 231:62] 
    node system_insn = eq(io.rw.cmd, UInt<3>("h04")) @[csr.scala 236:31] 
    node T_5815 = neq(io.rw.cmd, UInt<3>("h00")) @[csr.scala 237:27] 
    node T_5817 = eq(system_insn, UInt<1>("h00")) @[csr.scala 237:40] 
    node cpu_ren = and(T_5815, T_5817) @[csr.scala 237:37] 
    node T_5818 = cat(io.status.hie, io.status.sie) @[csr.scala 247:38] 
    node T_5819 = cat(T_5818, io.status.uie) @[csr.scala 247:38] 
    node T_5820 = cat(io.status.spie, io.status.upie) @[csr.scala 247:38] 
    node T_5821 = cat(T_5820, io.status.mie) @[csr.scala 247:38] 
    node T_5822 = cat(T_5821, T_5819) @[csr.scala 247:38] 
    node T_5823 = cat(io.status.spp, io.status.mpie) @[csr.scala 247:38] 
    node T_5824 = cat(T_5823, io.status.hpie) @[csr.scala 247:38] 
    node T_5825 = cat(io.status.fs, io.status.mpp) @[csr.scala 247:38] 
    node T_5826 = cat(T_5825, io.status.hpp) @[csr.scala 247:38] 
    node T_5827 = cat(T_5826, T_5824) @[csr.scala 247:38] 
    node T_5828 = cat(T_5827, T_5822) @[csr.scala 247:38] 
    node T_5829 = cat(io.status.pum, io.status.mprv) @[csr.scala 247:38] 
    node T_5830 = cat(T_5829, io.status.xs) @[csr.scala 247:38] 
    node T_5831 = cat(io.status.vm, io.status.zero1) @[csr.scala 247:38] 
    node T_5832 = cat(T_5831, io.status.mxr) @[csr.scala 247:38] 
    node T_5833 = cat(T_5832, T_5830) @[csr.scala 247:38] 
    node T_5834 = cat(io.status.zero3, io.status.sd_rv32) @[csr.scala 247:38] 
    node T_5835 = cat(T_5834, io.status.zero2) @[csr.scala 247:38] 
    node T_5836 = cat(io.status.debug, io.status.prv) @[csr.scala 247:38] 
    node T_5837 = cat(T_5836, io.status.sd) @[csr.scala 247:38] 
    node T_5838 = cat(T_5837, T_5835) @[csr.scala 247:38] 
    node T_5839 = cat(T_5838, T_5833) @[csr.scala 247:38] 
    node T_5840 = cat(T_5839, T_5828) @[csr.scala 247:38] 
    node read_mstatus = bits(T_5840, 63, 0) @[csr.scala 247:40] 
    node T_5841 = cat(reg_tdrselect.tdrmode, reg_tdrselect.reserved) @[csr.scala 250:37] 
    node T_5842 = cat(T_5841, reg_tdrselect.tdrindex) @[csr.scala 250:37] 
    node T_5857 = cat(reg_bp[reg_tdrselect.tdrindex].control.r, reg_bp[reg_tdrselect.tdrindex].control.w) @[csr.scala 251:61] 
    node T_5858 = cat(T_5857, reg_bp[reg_tdrselect.tdrindex].control.x) @[csr.scala 251:61] 
    node T_5859 = cat(reg_bp[reg_tdrselect.tdrindex].control.h, reg_bp[reg_tdrselect.tdrindex].control.s) @[csr.scala 251:61] 
    node T_5860 = cat(T_5859, reg_bp[reg_tdrselect.tdrindex].control.u) @[csr.scala 251:61] 
    node T_5861 = cat(T_5860, T_5858) @[csr.scala 251:61] 
    node T_5862 = cat(reg_bp[reg_tdrselect.tdrindex].control.bpaction, reg_bp[reg_tdrselect.tdrindex].control.bpmatch) @[csr.scala 251:61] 
    node T_5863 = cat(T_5862, reg_bp[reg_tdrselect.tdrindex].control.m) @[csr.scala 251:61] 
    node T_5864 = cat(reg_bp[reg_tdrselect.tdrindex].control.tdrtype, reg_bp[reg_tdrselect.tdrindex].control.bpamaskmax) @[csr.scala 251:61] 
    node T_5865 = cat(T_5864, reg_bp[reg_tdrselect.tdrindex].control.reserved) @[csr.scala 251:61] 
    node T_5866 = cat(T_5865, T_5863) @[csr.scala 251:61] 
    node T_5867 = cat(T_5866, T_5861) @[csr.scala 251:61] 
    node T_5890 = bits(reg_mepc, 39, 39) @[util.scala 21:38] 
    node T_5891 = bits(T_5890, 0, 0) @[Bitwise.scala 33:15] 
    node T_5894 = mux(T_5891, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12] 
    node T_5895 = cat(T_5894, reg_mepc) @[Cat.scala 20:58] 
    node T_5896 = bits(reg_mbadaddr, 39, 39) @[util.scala 21:38] 
    node T_5897 = bits(T_5896, 0, 0) @[Bitwise.scala 33:15] 
    node T_5900 = mux(T_5897, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12] 
    node T_5901 = cat(T_5900, reg_mbadaddr) @[Cat.scala 20:58] 
    node T_5902 = cat(reg_dcsr.step, reg_dcsr.prv) @[csr.scala 276:43] 
    node T_5903 = cat(reg_dcsr.zero1, reg_dcsr.halt) @[csr.scala 276:43] 
    node T_5904 = cat(T_5903, T_5902) @[csr.scala 276:43] 
    node T_5905 = cat(reg_dcsr.cause, reg_dcsr.debugint) @[csr.scala 276:43] 
    node T_5906 = cat(reg_dcsr.stopcycle, reg_dcsr.stoptime) @[csr.scala 276:43] 
    node T_5907 = cat(T_5906, T_5905) @[csr.scala 276:43] 
    node T_5908 = cat(T_5907, T_5904) @[csr.scala 276:43] 
    node T_5909 = cat(reg_dcsr.ebreaku, reg_dcsr.zero2) @[csr.scala 276:43] 
    node T_5910 = cat(reg_dcsr.ebreakh, reg_dcsr.ebreaks) @[csr.scala 276:43] 
    node T_5911 = cat(T_5910, T_5909) @[csr.scala 276:43] 
    node T_5912 = cat(reg_dcsr.hwbpcount, reg_dcsr.ebreakm) @[csr.scala 276:43] 
    node T_5913 = cat(reg_dcsr.xdebugver, reg_dcsr.ndreset) @[csr.scala 276:43] 
    node T_5914 = cat(T_5913, reg_dcsr.fullreset) @[csr.scala 276:43] 
    node T_5915 = cat(T_5914, T_5912) @[csr.scala 276:43] 
    node T_5916 = cat(T_5915, T_5911) @[csr.scala 276:43] 
    node T_5917 = cat(T_5916, T_5908) @[csr.scala 276:43] 
    node T_5918 = cat(reg_frm, reg_fflags) @[Cat.scala 20:58] 
    node T_5919 = and(reg_mie, reg_mideleg) @[csr.scala 288:28] 
    node T_5920 = and(read_mip, reg_mideleg) @[csr.scala 289:29] 
    wire T_5921 : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}
    T_5921 is invalid
    T_5921 <- io.status
    T_5921.vm <= UInt<1>("h00") @[csr.scala 291:21] 
    T_5921.mprv <= UInt<1>("h00") @[csr.scala 292:23] 
    T_5921.mpp <= UInt<1>("h00") @[csr.scala 293:22] 
    T_5921.hpp <= UInt<1>("h00") @[csr.scala 294:22] 
    T_5921.mpie <= UInt<1>("h00") @[csr.scala 295:23] 
    T_5921.hpie <= UInt<1>("h00") @[csr.scala 296:23] 
    T_5921.mie <= UInt<1>("h00") @[csr.scala 297:22] 
    T_5921.hie <= UInt<1>("h00") @[csr.scala 298:22] 
    node T_5954 = cat(T_5921.hie, T_5921.sie) @[csr.scala 300:57] 
    node T_5955 = cat(T_5954, T_5921.uie) @[csr.scala 300:57] 
    node T_5956 = cat(T_5921.spie, T_5921.upie) @[csr.scala 300:57] 
    node T_5957 = cat(T_5956, T_5921.mie) @[csr.scala 300:57] 
    node T_5958 = cat(T_5957, T_5955) @[csr.scala 300:57] 
    node T_5959 = cat(T_5921.spp, T_5921.mpie) @[csr.scala 300:57] 
    node T_5960 = cat(T_5959, T_5921.hpie) @[csr.scala 300:57] 
    node T_5961 = cat(T_5921.fs, T_5921.mpp) @[csr.scala 300:57] 
    node T_5962 = cat(T_5961, T_5921.hpp) @[csr.scala 300:57] 
    node T_5963 = cat(T_5962, T_5960) @[csr.scala 300:57] 
    node T_5964 = cat(T_5963, T_5958) @[csr.scala 300:57] 
    node T_5965 = cat(T_5921.pum, T_5921.mprv) @[csr.scala 300:57] 
    node T_5966 = cat(T_5965, T_5921.xs) @[csr.scala 300:57] 
    node T_5967 = cat(T_5921.vm, T_5921.zero1) @[csr.scala 300:57] 
    node T_5968 = cat(T_5967, T_5921.mxr) @[csr.scala 300:57] 
    node T_5969 = cat(T_5968, T_5966) @[csr.scala 300:57] 
    node T_5970 = cat(T_5921.zero3, T_5921.sd_rv32) @[csr.scala 300:57] 
    node T_5971 = cat(T_5970, T_5921.zero2) @[csr.scala 300:57] 
    node T_5972 = cat(T_5921.debug, T_5921.prv) @[csr.scala 300:57] 
    node T_5973 = cat(T_5972, T_5921.sd) @[csr.scala 300:57] 
    node T_5974 = cat(T_5973, T_5971) @[csr.scala 300:57] 
    node T_5975 = cat(T_5974, T_5969) @[csr.scala 300:57] 
    node T_5976 = cat(T_5975, T_5964) @[csr.scala 300:57] 
    node T_5977 = bits(T_5976, 63, 0) @[csr.scala 300:60] 
    node T_5978 = bits(reg_sbadaddr, 39, 39) @[util.scala 21:38] 
    node T_5979 = bits(T_5978, 0, 0) @[Bitwise.scala 33:15] 
    node T_5982 = mux(T_5979, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12] 
    node T_5983 = cat(T_5982, reg_sbadaddr) @[Cat.scala 20:58] 
    node T_5984 = cat(reg_sptbr.asid, reg_sptbr.ppn) @[csr.scala 306:45] 
    node T_5985 = bits(reg_sepc, 39, 39) @[util.scala 21:38] 
    node T_5986 = bits(T_5985, 0, 0) @[Bitwise.scala 33:15] 
    node T_5989 = mux(T_5986, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 33:12] 
    node T_5990 = cat(T_5989, reg_sepc) @[Cat.scala 20:58] 
    node T_5991 = bits(reg_stvec, 38, 38) @[util.scala 21:38] 
    node T_5992 = bits(T_5991, 0, 0) @[Bitwise.scala 33:15] 
    node T_5995 = mux(T_5992, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 33:12] 
    node T_5996 = cat(T_5995, reg_stvec) @[Cat.scala 20:58] 
    node T_6002 = eq(io.rw.addr, UInt<11>("h07a0")) @[csr.scala 340:73] 
    node T_6004 = eq(io.rw.addr, UInt<11>("h07a1")) @[csr.scala 340:73] 
    node T_6006 = eq(io.rw.addr, UInt<11>("h07a2")) @[csr.scala 340:73] 
    node T_6008 = eq(io.rw.addr, UInt<12>("h0f13")) @[csr.scala 340:73] 
    node T_6010 = eq(io.rw.addr, UInt<12>("h0f12")) @[csr.scala 340:73] 
    node T_6012 = eq(io.rw.addr, UInt<12>("h0f11")) @[csr.scala 340:73] 
    node T_6014 = eq(io.rw.addr, UInt<12>("h0f00")) @[csr.scala 340:73] 
    node T_6016 = eq(io.rw.addr, UInt<12>("h0f02")) @[csr.scala 340:73] 
    node T_6018 = eq(io.rw.addr, UInt<10>("h0310")) @[csr.scala 340:73] 
    node T_6020 = eq(io.rw.addr, UInt<11>("h0701")) @[csr.scala 340:73] 
    node T_6022 = eq(io.rw.addr, UInt<11>("h0700")) @[csr.scala 340:73] 
    node T_6024 = eq(io.rw.addr, UInt<11>("h0702")) @[csr.scala 340:73] 
    node T_6026 = eq(io.rw.addr, UInt<12>("h0f10")) @[csr.scala 340:73] 
    node T_6028 = eq(io.rw.addr, UInt<10>("h0300")) @[csr.scala 340:73] 
    node T_6030 = eq(io.rw.addr, UInt<10>("h0305")) @[csr.scala 340:73] 
    node T_6032 = eq(io.rw.addr, UInt<10>("h0344")) @[csr.scala 340:73] 
    node T_6034 = eq(io.rw.addr, UInt<10>("h0304")) @[csr.scala 340:73] 
    node T_6036 = eq(io.rw.addr, UInt<10>("h0303")) @[csr.scala 340:73] 
    node T_6038 = eq(io.rw.addr, UInt<10>("h0302")) @[csr.scala 340:73] 
    node T_6040 = eq(io.rw.addr, UInt<10>("h0340")) @[csr.scala 340:73] 
    node T_6042 = eq(io.rw.addr, UInt<10>("h0341")) @[csr.scala 340:73] 
    node T_6044 = eq(io.rw.addr, UInt<10>("h0343")) @[csr.scala 340:73] 
    node T_6046 = eq(io.rw.addr, UInt<10>("h0342")) @[csr.scala 340:73] 
    node T_6048 = eq(io.rw.addr, UInt<12>("h0f14")) @[csr.scala 340:73] 
    node T_6050 = eq(io.rw.addr, UInt<11>("h07b0")) @[csr.scala 340:73] 
    node T_6052 = eq(io.rw.addr, UInt<11>("h07b1")) @[csr.scala 340:73] 
    node T_6054 = eq(io.rw.addr, UInt<11>("h07b2")) @[csr.scala 340:73] 
    node T_6056 = eq(io.rw.addr, UInt<1>("h01")) @[csr.scala 340:73] 
    node T_6058 = eq(io.rw.addr, UInt<2>("h02")) @[csr.scala 340:73] 
    node T_6060 = eq(io.rw.addr, UInt<2>("h03")) @[csr.scala 340:73] 
    node T_6062 = eq(io.rw.addr, UInt<9>("h0100")) @[csr.scala 340:73] 
    node T_6064 = eq(io.rw.addr, UInt<9>("h0144")) @[csr.scala 340:73] 
    node T_6066 = eq(io.rw.addr, UInt<9>("h0104")) @[csr.scala 340:73] 
    node T_6068 = eq(io.rw.addr, UInt<9>("h0140")) @[csr.scala 340:73] 
    node T_6070 = eq(io.rw.addr, UInt<9>("h0142")) @[csr.scala 340:73] 
    node T_6072 = eq(io.rw.addr, UInt<9>("h0143")) @[csr.scala 340:73] 
    node T_6074 = eq(io.rw.addr, UInt<9>("h0180")) @[csr.scala 340:73] 
    node T_6076 = eq(io.rw.addr, UInt<9>("h0141")) @[csr.scala 340:73] 
    node T_6078 = eq(io.rw.addr, UInt<9>("h0105")) @[csr.scala 340:73] 
    node T_6080 = eq(io.rw.addr, UInt<10>("h0311")) @[csr.scala 340:73] 
    node T_6082 = eq(io.rw.addr, UInt<11>("h0705")) @[csr.scala 340:73] 
    node T_6084 = eq(io.rw.addr, UInt<11>("h0704")) @[csr.scala 340:73] 
    node T_6086 = eq(io.rw.addr, UInt<11>("h0706")) @[csr.scala 340:73] 
    node T_6087 = or(T_6002, T_6004) @[csr.scala 342:48] 
    node T_6088 = or(T_6087, T_6006) @[csr.scala 342:48] 
    node T_6089 = or(T_6088, T_6008) @[csr.scala 342:48] 
    node T_6090 = or(T_6089, T_6010) @[csr.scala 342:48] 
    node T_6091 = or(T_6090, T_6012) @[csr.scala 342:48] 
    node T_6092 = or(T_6091, T_6014) @[csr.scala 342:48] 
    node T_6093 = or(T_6092, T_6016) @[csr.scala 342:48] 
    node T_6094 = or(T_6093, T_6018) @[csr.scala 342:48] 
    node T_6095 = or(T_6094, T_6020) @[csr.scala 342:48] 
    node T_6096 = or(T_6095, T_6022) @[csr.scala 342:48] 
    node T_6097 = or(T_6096, T_6024) @[csr.scala 342:48] 
    node T_6098 = or(T_6097, T_6026) @[csr.scala 342:48] 
    node T_6099 = or(T_6098, T_6028) @[csr.scala 342:48] 
    node T_6100 = or(T_6099, T_6030) @[csr.scala 342:48] 
    node T_6101 = or(T_6100, T_6032) @[csr.scala 342:48] 
    node T_6102 = or(T_6101, T_6034) @[csr.scala 342:48] 
    node T_6103 = or(T_6102, T_6036) @[csr.scala 342:48] 
    node T_6104 = or(T_6103, T_6038) @[csr.scala 342:48] 
    node T_6105 = or(T_6104, T_6040) @[csr.scala 342:48] 
    node T_6106 = or(T_6105, T_6042) @[csr.scala 342:48] 
    node T_6107 = or(T_6106, T_6044) @[csr.scala 342:48] 
    node T_6108 = or(T_6107, T_6046) @[csr.scala 342:48] 
    node T_6109 = or(T_6108, T_6048) @[csr.scala 342:48] 
    node T_6110 = or(T_6109, T_6050) @[csr.scala 342:48] 
    node T_6111 = or(T_6110, T_6052) @[csr.scala 342:48] 
    node T_6112 = or(T_6111, T_6054) @[csr.scala 342:48] 
    node T_6113 = or(T_6112, T_6056) @[csr.scala 342:48] 
    node T_6114 = or(T_6113, T_6058) @[csr.scala 342:48] 
    node T_6115 = or(T_6114, T_6060) @[csr.scala 342:48] 
    node T_6116 = or(T_6115, T_6062) @[csr.scala 342:48] 
    node T_6117 = or(T_6116, T_6064) @[csr.scala 342:48] 
    node T_6118 = or(T_6117, T_6066) @[csr.scala 342:48] 
    node T_6119 = or(T_6118, T_6068) @[csr.scala 342:48] 
    node T_6120 = or(T_6119, T_6070) @[csr.scala 342:48] 
    node T_6121 = or(T_6120, T_6072) @[csr.scala 342:48] 
    node T_6122 = or(T_6121, T_6074) @[csr.scala 342:48] 
    node T_6123 = or(T_6122, T_6076) @[csr.scala 342:48] 
    node T_6124 = or(T_6123, T_6078) @[csr.scala 342:48] 
    node T_6125 = or(T_6124, T_6080) @[csr.scala 342:48] 
    node T_6126 = or(T_6125, T_6082) @[csr.scala 342:48] 
    node T_6127 = or(T_6126, T_6084) @[csr.scala 342:48] 
    node addr_valid = or(T_6127, T_6086) @[csr.scala 342:48] 
    node T_6128 = or(T_6056, T_6058) @[csr.scala 344:45] 
    node fp_csr = or(T_6128, T_6060) @[csr.scala 344:71] 
    node T_6130 = bits(io.rw.addr, 5, 5) @[csr.scala 346:49] 
    node csr_debug = and(UInt<1>("h01"), T_6130) @[csr.scala 346:36] 
    node T_6131 = bits(io.rw.addr, 6, 5) @[csr.scala 347:37] 
    node T_6132 = not(T_6131) @[csr.scala 347:43] 
    node T_6134 = eq(T_6132, UInt<1>("h00")) @[csr.scala 347:43] 
    node T_6135 = bits(io.rw.addr, 9, 8) @[csr.scala 347:59] 
    node csr_addr_priv = cat(T_6134, T_6135) @[Cat.scala 20:58] 
    node T_6136 = cat(reg_debug, reg_mstatus.prv) @[Cat.scala 20:58] 
    node priv_sufficient = geq(T_6136, csr_addr_priv) @[csr.scala 348:57] 
    node T_6137 = bits(io.rw.addr, 11, 10) @[csr.scala 349:29] 
    node T_6138 = not(T_6137) @[csr.scala 349:37] 
    node read_only = eq(T_6138, UInt<1>("h00")) @[csr.scala 349:37] 
    node T_6140 = neq(io.rw.cmd, UInt<3>("h05")) @[csr.scala 350:38] 
    node T_6141 = and(cpu_ren, T_6140) @[csr.scala 350:25] 
    node cpu_wen = and(T_6141, priv_sufficient) @[csr.scala 350:48] 
    node T_6143 = eq(read_only, UInt<1>("h00")) @[csr.scala 351:24] 
    node wen = and(cpu_wen, T_6143) @[csr.scala 351:21] 
    node T_6144 = eq(io.rw.cmd, UInt<3>("h02")) @[csr.scala 353:31] 
    node T_6145 = eq(io.rw.cmd, UInt<3>("h03")) @[csr.scala 353:54] 
    node T_6146 = or(T_6144, T_6145) @[csr.scala 353:41] 
    node T_6148 = mux(T_6146, io.rw.rdata, UInt<1>("h00")) @[csr.scala 353:19] 
    node T_6149 = neq(io.rw.cmd, UInt<3>("h03")) @[csr.scala 354:30] 
    node T_6151 = mux(T_6149, io.rw.wdata, UInt<1>("h00")) @[csr.scala 354:19] 
    node T_6152 = or(T_6148, T_6151) @[csr.scala 353:88] 
    node T_6153 = eq(io.rw.cmd, UInt<3>("h03")) @[csr.scala 355:30] 
    node T_6155 = mux(T_6153, io.rw.wdata, UInt<1>("h00")) @[csr.scala 355:19] 
    node T_6156 = not(T_6155) @[csr.scala 355:15] 
    node wdata = and(T_6152, T_6156) @[csr.scala 354:64] 
    node do_system_insn = and(priv_sufficient, system_insn) @[csr.scala 357:40] 
    node T_6158 = bits(io.rw.addr, 2, 0) @[csr.scala 358:37] 
    node opcode = dshl(UInt<1>("h01"), T_6158) @[csr.scala 358:24] 
    node T_6159 = bits(opcode, 0, 0) @[csr.scala 359:43] 
    node insn_call = and(do_system_insn, T_6159) @[csr.scala 359:34] 
    node T_6160 = bits(opcode, 1, 1) @[csr.scala 360:44] 
    node insn_break = and(do_system_insn, T_6160) @[csr.scala 360:35] 
    node T_6161 = bits(opcode, 2, 2) @[csr.scala 361:42] 
    node insn_ret = and(do_system_insn, T_6161) @[csr.scala 361:33] 
    node T_6162 = bits(opcode, 4, 4) @[csr.scala 362:48] 
    node insn_sfence_vm = and(do_system_insn, T_6162) @[csr.scala 362:39] 
    node T_6163 = bits(opcode, 5, 5) @[csr.scala 363:42] 
    node insn_wfi = and(do_system_insn, T_6163) @[csr.scala 363:33] 
    node T_6164 = and(cpu_wen, read_only) @[csr.scala 365:27] 
    node T_6166 = eq(priv_sufficient, UInt<1>("h00")) @[csr.scala 366:18] 
    node T_6168 = eq(addr_valid, UInt<1>("h00")) @[csr.scala 366:38] 
    node T_6169 = or(T_6166, T_6168) @[csr.scala 366:35] 
    node T_6171 = neq(io.status.fs, UInt<1>("h00")) @[csr.scala 366:77] 
    node T_6173 = eq(T_6171, UInt<1>("h00")) @[csr.scala 366:63] 
    node T_6174 = and(fp_csr, T_6173) @[csr.scala 366:60] 
    node T_6175 = or(T_6169, T_6174) @[csr.scala 366:50] 
    node T_6176 = and(cpu_ren, T_6175) @[csr.scala 366:14] 
    node T_6177 = or(T_6164, T_6176) @[csr.scala 365:41] 
    node T_6179 = eq(priv_sufficient, UInt<1>("h00")) @[csr.scala 367:21] 
    node T_6180 = and(system_insn, T_6179) @[csr.scala 367:18] 
    node T_6181 = or(T_6177, T_6180) @[csr.scala 366:83] 
    node T_6182 = or(T_6181, insn_call) @[csr.scala 367:39] 
    node T_6183 = or(T_6182, insn_break) @[csr.scala 368:15] 
    io.csr_xcpt <= T_6183 @[csr.scala 365:15] 
    when insn_wfi : @[csr.scala 370:19] 
      reg_wfi <= UInt<1>("h01") @[csr.scala 370:29] 
      skip @[csr.scala 370:19] 
    node T_6186 = neq(pending_interrupts, UInt<1>("h00")) @[csr.scala 371:28] 
    when T_6186 : @[csr.scala 371:33] 
      reg_wfi <= UInt<1>("h00") @[csr.scala 371:43] 
      skip @[csr.scala 371:33] 
    node T_6189 = eq(io.csr_xcpt, UInt<1>("h00")) @[csr.scala 374:9] 
    node T_6191 = add(reg_mstatus.prv, UInt<4>("h08")) @[csr.scala 375:36] 
    node T_6192 = tail(T_6191, 1) @[csr.scala 375:36] 
    node T_6195 = mux(insn_break, UInt<2>("h03"), UInt<2>("h02")) @[csr.scala 376:14] 
    node T_6196 = mux(insn_call, T_6192, T_6195) @[csr.scala 375:8] 
    node cause = mux(T_6189, io.cause, T_6196) @[csr.scala 374:8] 
    node cause_lsbs = bits(cause, 5, 0) @[csr.scala 377:25] 
    node T_6197 = bits(cause, 63, 63) @[csr.scala 378:30] 
    node T_6199 = eq(cause_lsbs, UInt<4>("h0d")) @[csr.scala 378:53] 
    node causeIsDebugInt = and(T_6197, T_6199) @[csr.scala 378:39] 
    node T_6201 = eq(cause, UInt<2>("h03")) @[csr.scala 379:33] 
    node T_6202 = cat(reg_dcsr.ebreaks, reg_dcsr.ebreaku) @[Cat.scala 20:58] 
    node T_6203 = cat(reg_dcsr.ebreakm, reg_dcsr.ebreakh) @[Cat.scala 20:58] 
    node T_6204 = cat(T_6203, T_6202) @[Cat.scala 20:58] 
    node T_6205 = dshr(T_6204, reg_mstatus.prv) @[csr.scala 379:133] 
    node T_6206 = bits(T_6205, 0, 0) @[csr.scala 379:133] 
    node causeIsDebugBreak = and(T_6201, T_6206) @[csr.scala 379:55] 
    node T_6208 = or(reg_singleStepped, causeIsDebugInt) @[csr.scala 380:60] 
    node T_6209 = or(T_6208, causeIsDebugBreak) @[csr.scala 380:79] 
    node T_6210 = or(T_6209, reg_debug) @[csr.scala 380:100] 
    node trapToDebug = and(UInt<1>("h01"), T_6210) @[csr.scala 380:38] 
    node T_6213 = lt(reg_mstatus.prv, UInt<2>("h03")) @[csr.scala 381:52] 
    node T_6214 = and(UInt<1>("h01"), T_6213) @[csr.scala 381:33] 
    node T_6215 = bits(cause, 63, 63) @[csr.scala 381:72] 
    node T_6216 = dshr(reg_mideleg, cause_lsbs) @[csr.scala 381:93] 
    node T_6217 = bits(T_6216, 0, 0) @[csr.scala 381:93] 
    node T_6218 = dshr(reg_medeleg, cause_lsbs) @[csr.scala 381:118] 
    node T_6219 = bits(T_6218, 0, 0) @[csr.scala 381:118] 
    node T_6220 = mux(T_6215, T_6217, T_6219) @[csr.scala 381:66] 
    node delegate = and(T_6214, T_6220) @[csr.scala 381:60] 
    node debugTVec = mux(reg_debug, UInt<12>("h0808"), UInt<12>("h0800")) @[csr.scala 382:22] 
    node T_6223 = bits(reg_stvec, 38, 38) @[util.scala 21:38] 
    node T_6224 = cat(T_6223, reg_stvec) @[Cat.scala 20:58] 
    node T_6225 = mux(delegate, T_6224, reg_mtvec) @[csr.scala 383:45] 
    node tvec = mux(trapToDebug, debugTVec, T_6225) @[csr.scala 383:17] 
    node T_6227 = bits(csr_addr_priv, 1, 1) @[csr.scala 384:73] 
    node T_6229 = eq(T_6227, UInt<1>("h00")) @[csr.scala 384:59] 
    node T_6230 = and(UInt<1>("h01"), T_6229) @[csr.scala 384:56] 
    node T_6231 = mux(T_6230, reg_sepc, reg_mepc) @[csr.scala 384:40] 
    node epc = mux(csr_debug, reg_dpc, T_6231) @[csr.scala 384:16] 
    io.fatc <= insn_sfence_vm @[csr.scala 385:11] 
    node T_6232 = mux(exception, tvec, epc) @[csr.scala 386:17] 
    io.evec <= T_6232 @[csr.scala 386:11] 
    io.ptbr <- reg_sptbr @[csr.scala 387:11] 
    io.eret <= insn_ret @[csr.scala 388:11] 
    node T_6234 = eq(reg_debug, UInt<1>("h00")) @[csr.scala 389:37] 
    node T_6235 = and(reg_dcsr.step, T_6234) @[csr.scala 389:34] 
    io.singleStep <= T_6235 @[csr.scala 389:17] 
    io.status <- reg_mstatus @[csr.scala 390:13] 
    node T_6236 = not(io.status.fs) @[csr.scala 391:32] 
    node T_6238 = eq(T_6236, UInt<1>("h00")) @[csr.scala 391:32] 
    node T_6239 = not(io.status.xs) @[csr.scala 391:53] 
    node T_6241 = eq(T_6239, UInt<1>("h00")) @[csr.scala 391:53] 
    node T_6242 = or(T_6238, T_6241) @[csr.scala 391:37] 
    io.status.sd <= T_6242 @[csr.scala 391:16] 
    io.status.debug <= reg_debug @[csr.scala 392:19] 
    when exception : @[csr.scala 396:20] 
      node T_6243 = not(io.pc) @[csr.scala 397:17] 
      node T_6245 = or(T_6243, UInt<1>("h01")) @[csr.scala 397:24] 
      node T_6246 = not(T_6245) @[csr.scala 397:15] 
      node T_6247 = dshr(read_mstatus, reg_mstatus.prv) @[csr.scala 398:27] 
      node T_6248 = bits(T_6247, 0, 0) @[csr.scala 398:27] 
      node T_6256 = eq(cause, UInt<2>("h03")) @[util.scala 48:47] 
      node T_6257 = eq(cause, UInt<3>("h04")) @[util.scala 48:47] 
      node T_6258 = eq(cause, UInt<3>("h06")) @[util.scala 48:47] 
      node T_6259 = eq(cause, UInt<1>("h00")) @[util.scala 48:47] 
      node T_6260 = eq(cause, UInt<3>("h05")) @[util.scala 48:47] 
      node T_6261 = eq(cause, UInt<3>("h07")) @[util.scala 48:47] 
      node T_6262 = eq(cause, UInt<1>("h01")) @[util.scala 48:47] 
      node T_6263 = or(T_6256, T_6257) @[util.scala 48:62] 
      node T_6264 = or(T_6263, T_6258) @[util.scala 48:62] 
      node T_6265 = or(T_6264, T_6259) @[util.scala 48:62] 
      node T_6266 = or(T_6265, T_6260) @[util.scala 48:62] 
      node T_6267 = or(T_6266, T_6261) @[util.scala 48:62] 
      node T_6268 = or(T_6267, T_6262) @[util.scala 48:62] 
      when trapToDebug : @[csr.scala 404:24] 
        reg_debug <= UInt<1>("h01") @[csr.scala 405:17] 
        reg_dpc <= T_6246 @[csr.scala 406:15] 
        node T_6273 = mux(causeIsDebugInt, UInt<2>("h03"), UInt<1>("h01")) @[csr.scala 407:60] 
        node T_6274 = mux(reg_singleStepped, UInt<3>("h04"), T_6273) @[csr.scala 407:28] 
        reg_dcsr.cause <= T_6274 @[csr.scala 407:22] 
        reg_dcsr.prv <= reg_mstatus.prv @[csr.scala 408:20] 
        skip @[csr.scala 404:24] 
      node T_6276 = eq(trapToDebug, UInt<1>("h00")) @[csr.scala 404:24] 
      node T_6277 = and(T_6276, delegate) @[csr.scala 409:27] 
      when T_6277 : @[csr.scala 409:27] 
        reg_sepc <= T_6246 @[csr.scala 410:16] 
        reg_scause <= cause @[csr.scala 411:18] 
        when T_6268 : @[csr.scala 412:28] 
          reg_sbadaddr <= io.badaddr @[csr.scala 412:43] 
          skip @[csr.scala 412:28] 
        reg_mstatus.spie <= T_6248 @[csr.scala 413:24] 
        reg_mstatus.spp <= reg_mstatus.prv @[csr.scala 414:23] 
        reg_mstatus.sie <= UInt<1>("h00") @[csr.scala 415:23] 
        reg_mstatus.prv <= UInt<1>("h01") @[csr.scala 416:23] 
        skip @[csr.scala 409:27] 
      node T_6281 = eq(trapToDebug, UInt<1>("h00")) @[csr.scala 404:24] 
      node T_6283 = eq(delegate, UInt<1>("h00")) @[csr.scala 409:27] 
      node T_6284 = and(T_6281, T_6283) @[csr.scala 409:27] 
      when T_6284 : @[csr.scala 417:17] 
        reg_mepc <= T_6246 @[csr.scala 418:16] 
        reg_mcause <= cause @[csr.scala 419:18] 
        when T_6268 : @[csr.scala 420:28] 
          reg_mbadaddr <= io.badaddr @[csr.scala 420:43] 
          skip @[csr.scala 420:28] 
        reg_mstatus.mpie <= T_6248 @[csr.scala 421:24] 
        reg_mstatus.mpp <= reg_mstatus.prv @[csr.scala 422:23] 
        reg_mstatus.mie <= UInt<1>("h00") @[csr.scala 423:23] 
        reg_mstatus.prv <= UInt<2>("h03") @[csr.scala 424:23] 
        skip @[csr.scala 417:17] 
      skip @[csr.scala 396:20] 
    when insn_ret : @[csr.scala 428:19] 
      node T_6288 = bits(csr_addr_priv, 1, 1) @[csr.scala 429:43] 
      node T_6290 = eq(T_6288, UInt<1>("h00")) @[csr.scala 429:29] 
      node T_6291 = and(UInt<1>("h01"), T_6290) @[csr.scala 429:26] 
      when T_6291 : @[csr.scala 429:48] 
        node T_6292 = bits(reg_mstatus.spp, 0, 0) @[csr.scala 430:29] 
        when T_6292 : @[csr.scala 430:37] 
          reg_mstatus.sie <= reg_mstatus.spie @[csr.scala 430:55] 
          skip @[csr.scala 430:37] 
        reg_mstatus.spie <= UInt<1>("h00") @[csr.scala 431:24] 
        reg_mstatus.spp <= UInt<1>("h00") @[csr.scala 432:23] 
        reg_mstatus.prv <= reg_mstatus.spp @[csr.scala 433:23] 
        skip @[csr.scala 429:48] 
      node T_6296 = eq(T_6291, UInt<1>("h00")) @[csr.scala 429:48] 
      node T_6297 = and(T_6296, csr_debug) @[csr.scala 434:28] 
      when T_6297 : @[csr.scala 434:28] 
        reg_mstatus.prv <= reg_dcsr.prv @[csr.scala 435:23] 
        reg_debug <= UInt<1>("h00") @[csr.scala 436:17] 
        skip @[csr.scala 434:28] 
      node T_6300 = eq(T_6291, UInt<1>("h00")) @[csr.scala 429:48] 
      node T_6302 = eq(csr_debug, UInt<1>("h00")) @[csr.scala 434:28] 
      node T_6303 = and(T_6300, T_6302) @[csr.scala 434:28] 
      when T_6303 : @[csr.scala 437:17] 
        node T_6304 = bits(reg_mstatus.mpp, 1, 1) @[csr.scala 438:28] 
        when T_6304 : @[csr.scala 438:33] 
          reg_mstatus.mie <= reg_mstatus.mpie @[csr.scala 438:51] 
          skip @[csr.scala 438:33] 
        node T_6306 = bits(reg_mstatus.mpp, 0, 0) @[csr.scala 439:50] 
        node T_6307 = and(UInt<1>("h01"), T_6306) @[csr.scala 439:32] 
        node T_6309 = eq(T_6304, UInt<1>("h00")) @[csr.scala 438:33] 
        node T_6310 = and(T_6309, T_6307) @[csr.scala 439:55] 
        when T_6310 : @[csr.scala 439:55] 
          reg_mstatus.sie <= reg_mstatus.mpie @[csr.scala 439:73] 
          skip @[csr.scala 439:55] 
        reg_mstatus.mpie <= UInt<1>("h00") @[csr.scala 440:24] 
        reg_mstatus.mpp <= UInt<1>("h00") @[csr.scala 441:23] 
        reg_mstatus.prv <= reg_mstatus.mpp @[csr.scala 442:23] 
        skip @[csr.scala 437:17] 
      skip @[csr.scala 428:19] 
    node T_6313 = add(io.exception, io.csr_xcpt) @[Bitwise.scala 21:55] 
    node T_6314 = add(insn_ret, T_6313) @[Bitwise.scala 21:55] 
    node T_6316 = leq(T_6314, UInt<1>("h01")) @[csr.scala 446:67] 
    node T_6317 = or(T_6316, reset) @[csr.scala 446:9] 
    node T_6319 = eq(T_6317, UInt<1>("h00")) @[csr.scala 446:9] 
    when T_6319 : @[csr.scala 446:9] 
      printf(clk, UInt<1>(1), "Assertion failed: these conditions must be mutually exclusive\n    at csr.scala:446 assert(PopCount(insn_ret :: io.exception :: io.csr_xcpt :: Nil) <= 1, \"these conditions must be mutually exclusive\")\n") @[csr.scala 446:9] 
      stop(clk, UInt<1>(1), 1) @[csr.scala 446:9] 
      skip @[csr.scala 446:9] 
    io.time <= reg_cycle @[csr.scala 448:11] 
    io.csr_stall <= reg_wfi @[csr.scala 449:16] 
    node T_6321 = mux(T_6002, T_5842, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6323 = mux(T_6004, T_5867, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6325 = mux(T_6006, reg_bp[reg_tdrselect.tdrindex].address, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6327 = mux(T_6008, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6329 = mux(T_6010, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6331 = mux(T_6012, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6333 = mux(T_6014, reg_cycle, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6335 = mux(T_6016, T_5550, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6337 = mux(T_6018, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6339 = mux(T_6020, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6341 = mux(T_6022, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6343 = mux(T_6024, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6345 = mux(T_6026, UInt<64>("h08000000000141129"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6347 = mux(T_6028, read_mstatus, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6349 = mux(T_6030, reg_mtvec, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6351 = mux(T_6032, read_mip, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6353 = mux(T_6034, reg_mie, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6355 = mux(T_6036, reg_mideleg, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6357 = mux(T_6038, reg_medeleg, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6359 = mux(T_6040, reg_mscratch, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6361 = mux(T_6042, T_5895, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6363 = mux(T_6044, T_5901, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6365 = mux(T_6046, reg_mcause, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6367 = mux(T_6048, io.prci.id, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6369 = mux(T_6050, T_5917, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6371 = mux(T_6052, reg_dpc, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6373 = mux(T_6054, reg_dscratch, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6375 = mux(T_6056, reg_fflags, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6377 = mux(T_6058, reg_frm, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6379 = mux(T_6060, T_5918, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6381 = mux(T_6062, T_5977, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6383 = mux(T_6064, T_5920, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6385 = mux(T_6066, T_5919, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6387 = mux(T_6068, reg_sscratch, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6389 = mux(T_6070, reg_scause, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6391 = mux(T_6072, T_5983, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6393 = mux(T_6074, T_5984, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6395 = mux(T_6076, T_5990, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6397 = mux(T_6078, T_5996, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6399 = mux(T_6080, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6401 = mux(T_6082, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6403 = mux(T_6084, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6405 = mux(T_6086, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_6407 = or(T_6321, T_6323) @[Mux.scala 18:72] 
    node T_6408 = or(T_6407, T_6325) @[Mux.scala 18:72] 
    node T_6409 = or(T_6408, T_6327) @[Mux.scala 18:72] 
    node T_6410 = or(T_6409, T_6329) @[Mux.scala 18:72] 
    node T_6411 = or(T_6410, T_6331) @[Mux.scala 18:72] 
    node T_6412 = or(T_6411, T_6333) @[Mux.scala 18:72] 
    node T_6413 = or(T_6412, T_6335) @[Mux.scala 18:72] 
    node T_6414 = or(T_6413, T_6337) @[Mux.scala 18:72] 
    node T_6415 = or(T_6414, T_6339) @[Mux.scala 18:72] 
    node T_6416 = or(T_6415, T_6341) @[Mux.scala 18:72] 
    node T_6417 = or(T_6416, T_6343) @[Mux.scala 18:72] 
    node T_6418 = or(T_6417, T_6345) @[Mux.scala 18:72] 
    node T_6419 = or(T_6418, T_6347) @[Mux.scala 18:72] 
    node T_6420 = or(T_6419, T_6349) @[Mux.scala 18:72] 
    node T_6421 = or(T_6420, T_6351) @[Mux.scala 18:72] 
    node T_6422 = or(T_6421, T_6353) @[Mux.scala 18:72] 
    node T_6423 = or(T_6422, T_6355) @[Mux.scala 18:72] 
    node T_6424 = or(T_6423, T_6357) @[Mux.scala 18:72] 
    node T_6425 = or(T_6424, T_6359) @[Mux.scala 18:72] 
    node T_6426 = or(T_6425, T_6361) @[Mux.scala 18:72] 
    node T_6427 = or(T_6426, T_6363) @[Mux.scala 18:72] 
    node T_6428 = or(T_6427, T_6365) @[Mux.scala 18:72] 
    node T_6429 = or(T_6428, T_6367) @[Mux.scala 18:72] 
    node T_6430 = or(T_6429, T_6369) @[Mux.scala 18:72] 
    node T_6431 = or(T_6430, T_6371) @[Mux.scala 18:72] 
    node T_6432 = or(T_6431, T_6373) @[Mux.scala 18:72] 
    node T_6433 = or(T_6432, T_6375) @[Mux.scala 18:72] 
    node T_6434 = or(T_6433, T_6377) @[Mux.scala 18:72] 
    node T_6435 = or(T_6434, T_6379) @[Mux.scala 18:72] 
    node T_6436 = or(T_6435, T_6381) @[Mux.scala 18:72] 
    node T_6437 = or(T_6436, T_6383) @[Mux.scala 18:72] 
    node T_6438 = or(T_6437, T_6385) @[Mux.scala 18:72] 
    node T_6439 = or(T_6438, T_6387) @[Mux.scala 18:72] 
    node T_6440 = or(T_6439, T_6389) @[Mux.scala 18:72] 
    node T_6441 = or(T_6440, T_6391) @[Mux.scala 18:72] 
    node T_6442 = or(T_6441, T_6393) @[Mux.scala 18:72] 
    node T_6443 = or(T_6442, T_6395) @[Mux.scala 18:72] 
    node T_6444 = or(T_6443, T_6397) @[Mux.scala 18:72] 
    node T_6445 = or(T_6444, T_6399) @[Mux.scala 18:72] 
    node T_6446 = or(T_6445, T_6401) @[Mux.scala 18:72] 
    node T_6447 = or(T_6446, T_6403) @[Mux.scala 18:72] 
    node T_6448 = or(T_6447, T_6405) @[Mux.scala 18:72] 
    wire T_6449 : UInt<64>
    T_6449 is invalid
    T_6449 <= T_6448 @[Mux.scala 18:72] 
    io.rw.rdata <= T_6449 @[csr.scala 451:15] 
    io.fcsr_rm <= reg_frm @[csr.scala 453:14] 
    when io.fcsr_flags.valid : @[csr.scala 454:30] 
      node T_6450 = or(reg_fflags, io.fcsr_flags.bits) @[csr.scala 455:30] 
      reg_fflags <= T_6450 @[csr.scala 455:16] 
      skip @[csr.scala 454:30] 
    wire supportedModes : UInt<2>[3] @[csr.scala 458:27] 
    supportedModes is invalid @[csr.scala 458:27] 
    supportedModes[0] <= UInt<2>("h03") @[csr.scala 458:27] 
    supportedModes[1] <= UInt<1>("h00") @[csr.scala 458:27] 
    supportedModes[2] <= UInt<1>("h01") @[csr.scala 458:27] 
    when wen : @[csr.scala 460:14] 
      when T_6028 : @[csr.scala 461:39] 
        wire T_6510 : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 462:47] 
        T_6510 is invalid @[csr.scala 462:47] 
        wire T_6536 : UInt<67>
        T_6536 is invalid
        T_6536 <= wdata
        node T_6537 = bits(T_6536, 0, 0) @[csr.scala 462:47] 
        T_6510.uie <= T_6537 @[csr.scala 462:47] 
        node T_6538 = bits(T_6536, 1, 1) @[csr.scala 462:47] 
        T_6510.sie <= T_6538 @[csr.scala 462:47] 
        node T_6539 = bits(T_6536, 2, 2) @[csr.scala 462:47] 
        T_6510.hie <= T_6539 @[csr.scala 462:47] 
        node T_6540 = bits(T_6536, 3, 3) @[csr.scala 462:47] 
        T_6510.mie <= T_6540 @[csr.scala 462:47] 
        node T_6541 = bits(T_6536, 4, 4) @[csr.scala 462:47] 
        T_6510.upie <= T_6541 @[csr.scala 462:47] 
        node T_6542 = bits(T_6536, 5, 5) @[csr.scala 462:47] 
        T_6510.spie <= T_6542 @[csr.scala 462:47] 
        node T_6543 = bits(T_6536, 6, 6) @[csr.scala 462:47] 
        T_6510.hpie <= T_6543 @[csr.scala 462:47] 
        node T_6544 = bits(T_6536, 7, 7) @[csr.scala 462:47] 
        T_6510.mpie <= T_6544 @[csr.scala 462:47] 
        node T_6545 = bits(T_6536, 8, 8) @[csr.scala 462:47] 
        T_6510.spp <= T_6545 @[csr.scala 462:47] 
        node T_6546 = bits(T_6536, 10, 9) @[csr.scala 462:47] 
        T_6510.hpp <= T_6546 @[csr.scala 462:47] 
        node T_6547 = bits(T_6536, 12, 11) @[csr.scala 462:47] 
        T_6510.mpp <= T_6547 @[csr.scala 462:47] 
        node T_6548 = bits(T_6536, 14, 13) @[csr.scala 462:47] 
        T_6510.fs <= T_6548 @[csr.scala 462:47] 
        node T_6549 = bits(T_6536, 16, 15) @[csr.scala 462:47] 
        T_6510.xs <= T_6549 @[csr.scala 462:47] 
        node T_6550 = bits(T_6536, 17, 17) @[csr.scala 462:47] 
        T_6510.mprv <= T_6550 @[csr.scala 462:47] 
        node T_6551 = bits(T_6536, 18, 18) @[csr.scala 462:47] 
        T_6510.pum <= T_6551 @[csr.scala 462:47] 
        node T_6552 = bits(T_6536, 19, 19) @[csr.scala 462:47] 
        T_6510.mxr <= T_6552 @[csr.scala 462:47] 
        node T_6553 = bits(T_6536, 23, 20) @[csr.scala 462:47] 
        T_6510.zero1 <= T_6553 @[csr.scala 462:47] 
        node T_6554 = bits(T_6536, 28, 24) @[csr.scala 462:47] 
        T_6510.vm <= T_6554 @[csr.scala 462:47] 
        node T_6555 = bits(T_6536, 30, 29) @[csr.scala 462:47] 
        T_6510.zero2 <= T_6555 @[csr.scala 462:47] 
        node T_6556 = bits(T_6536, 31, 31) @[csr.scala 462:47] 
        T_6510.sd_rv32 <= T_6556 @[csr.scala 462:47] 
        node T_6557 = bits(T_6536, 62, 32) @[csr.scala 462:47] 
        T_6510.zero3 <= T_6557 @[csr.scala 462:47] 
        node T_6558 = bits(T_6536, 63, 63) @[csr.scala 462:47] 
        T_6510.sd <= T_6558 @[csr.scala 462:47] 
        node T_6559 = bits(T_6536, 65, 64) @[csr.scala 462:47] 
        T_6510.prv <= T_6559 @[csr.scala 462:47] 
        node T_6560 = bits(T_6536, 66, 66) @[csr.scala 462:47] 
        T_6510.debug <= T_6560 @[csr.scala 462:47] 
        reg_mstatus.mie <= T_6510.mie @[csr.scala 463:23] 
        reg_mstatus.mpie <= T_6510.mpie @[csr.scala 464:24] 
        reg_mstatus.mprv <= T_6510.mprv @[csr.scala 467:26] 
        node T_6561 = eq(supportedModes[0], T_6510.mpp) @[csr.scala 468:30] 
        node T_6562 = eq(supportedModes[1], T_6510.mpp) @[csr.scala 468:30] 
        node T_6563 = eq(supportedModes[2], T_6510.mpp) @[csr.scala 468:30] 
        node T_6565 = or(UInt<1>("h00"), T_6561) @[csr.scala 468:30] 
        node T_6566 = or(T_6565, T_6562) @[csr.scala 468:30] 
        node T_6567 = or(T_6566, T_6563) @[csr.scala 468:30] 
        when T_6567 : @[csr.scala 468:56] 
          reg_mstatus.mpp <= T_6510.mpp @[csr.scala 468:74] 
          skip @[csr.scala 468:56] 
        reg_mstatus.mxr <= T_6510.mxr @[csr.scala 470:27] 
        reg_mstatus.pum <= T_6510.pum @[csr.scala 471:27] 
        reg_mstatus.spp <= T_6510.spp @[csr.scala 472:27] 
        reg_mstatus.spie <= T_6510.spie @[csr.scala 473:28] 
        reg_mstatus.sie <= T_6510.sie @[csr.scala 474:27] 
        node T_6569 = eq(T_6510.vm, UInt<1>("h00")) @[csr.scala 481:30] 
        when T_6569 : @[csr.scala 481:37] 
          reg_mstatus.vm <= UInt<1>("h00") @[csr.scala 481:54] 
          skip @[csr.scala 481:37] 
        node T_6572 = eq(T_6510.vm, UInt<4>("h09")) @[csr.scala 482:30] 
        when T_6572 : @[csr.scala 482:41] 
          reg_mstatus.vm <= UInt<4>("h09") @[csr.scala 482:58] 
          skip @[csr.scala 482:41] 
        node T_6575 = neq(T_6510.fs, UInt<1>("h00")) @[csr.scala 484:73] 
        node T_6576 = bits(T_6575, 0, 0) @[Bitwise.scala 33:15] 
        node T_6579 = mux(T_6576, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 33:12] 
        reg_mstatus.fs <= T_6579 @[csr.scala 484:47] 
        skip @[csr.scala 461:39] 
      when T_6032 : @[csr.scala 487:35] 
        wire T_6608 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 488:39] 
        T_6608 is invalid @[csr.scala 488:39] 
        node T_6622 = bits(wdata, 0, 0) @[csr.scala 488:39] 
        T_6608.usip <= T_6622 @[csr.scala 488:39] 
        node T_6623 = bits(wdata, 1, 1) @[csr.scala 488:39] 
        T_6608.ssip <= T_6623 @[csr.scala 488:39] 
        node T_6624 = bits(wdata, 2, 2) @[csr.scala 488:39] 
        T_6608.hsip <= T_6624 @[csr.scala 488:39] 
        node T_6625 = bits(wdata, 3, 3) @[csr.scala 488:39] 
        T_6608.msip <= T_6625 @[csr.scala 488:39] 
        node T_6626 = bits(wdata, 4, 4) @[csr.scala 488:39] 
        T_6608.utip <= T_6626 @[csr.scala 488:39] 
        node T_6627 = bits(wdata, 5, 5) @[csr.scala 488:39] 
        T_6608.stip <= T_6627 @[csr.scala 488:39] 
        node T_6628 = bits(wdata, 6, 6) @[csr.scala 488:39] 
        T_6608.htip <= T_6628 @[csr.scala 488:39] 
        node T_6629 = bits(wdata, 7, 7) @[csr.scala 488:39] 
        T_6608.mtip <= T_6629 @[csr.scala 488:39] 
        node T_6630 = bits(wdata, 8, 8) @[csr.scala 488:39] 
        T_6608.ueip <= T_6630 @[csr.scala 488:39] 
        node T_6631 = bits(wdata, 9, 9) @[csr.scala 488:39] 
        T_6608.seip <= T_6631 @[csr.scala 488:39] 
        node T_6632 = bits(wdata, 10, 10) @[csr.scala 488:39] 
        T_6608.heip <= T_6632 @[csr.scala 488:39] 
        node T_6633 = bits(wdata, 11, 11) @[csr.scala 488:39] 
        T_6608.meip <= T_6633 @[csr.scala 488:39] 
        node T_6634 = bits(wdata, 12, 12) @[csr.scala 488:39] 
        T_6608.rocc <= T_6634 @[csr.scala 488:39] 
        reg_mip.ssip <= T_6608.ssip @[csr.scala 490:22] 
        reg_mip.stip <= T_6608.stip @[csr.scala 491:22] 
        skip @[csr.scala 487:35] 
      when T_6034 : @[csr.scala 494:40] 
        node T_6635 = and(wdata, supported_interrupts) @[csr.scala 494:59] 
        reg_mie <= T_6635 @[csr.scala 494:50] 
        skip @[csr.scala 494:40] 
      when T_6042 : @[csr.scala 495:40] 
        node T_6636 = not(wdata) @[csr.scala 495:56] 
        node T_6638 = or(T_6636, UInt<1>("h01")) @[csr.scala 495:63] 
        node T_6639 = not(T_6638) @[csr.scala 495:54] 
        reg_mepc <= T_6639 @[csr.scala 495:51] 
        skip @[csr.scala 495:40] 
      when T_6040 : @[csr.scala 496:40] 
        reg_mscratch <= wdata @[csr.scala 496:55] 
        skip @[csr.scala 496:40] 
      when T_6030 : @[csr.scala 498:40] 
        node T_6640 = shr(wdata, 2) @[csr.scala 498:61] 
        node T_6641 = shl(T_6640, 2) @[csr.scala 498:66] 
        reg_mtvec <= T_6641 @[csr.scala 498:52] 
        skip @[csr.scala 498:40] 
      when T_6046 : @[csr.scala 499:40] 
        node T_6643 = and(wdata, UInt<64>("h0800000000000001f")) @[csr.scala 499:62] 
        reg_mcause <= T_6643 @[csr.scala 499:53] 
        skip @[csr.scala 499:40] 
      when T_6044 : @[csr.scala 500:40] 
        node T_6644 = bits(wdata, 39, 0) @[csr.scala 500:63] 
        reg_mbadaddr <= T_6644 @[csr.scala 500:55] 
        skip @[csr.scala 500:40] 
      when T_6056 : @[csr.scala 502:40] 
        reg_fflags <= wdata @[csr.scala 502:53] 
        skip @[csr.scala 502:40] 
      when T_6058 : @[csr.scala 503:40] 
        reg_frm <= wdata @[csr.scala 503:50] 
        skip @[csr.scala 503:40] 
      when T_6060 : @[csr.scala 504:40] 
        reg_fflags <= wdata @[csr.scala 504:53] 
        node T_6645 = shr(wdata, 5) @[csr.scala 504:80] 
        reg_frm <= T_6645 @[csr.scala 504:71] 
        skip @[csr.scala 504:40] 
      when T_6050 : @[csr.scala 507:38] 
        wire T_6682 : {xdebugver : UInt<2>, ndreset : UInt<1>, fullreset : UInt<1>, hwbpcount : UInt<12>, ebreakm : UInt<1>, ebreakh : UInt<1>, ebreaks : UInt<1>, ebreaku : UInt<1>, zero2 : UInt<1>, stopcycle : UInt<1>, stoptime : UInt<1>, cause : UInt<3>, debugint : UInt<1>, zero1 : UInt<1>, halt : UInt<1>, step : UInt<1>, prv : UInt<2>} @[csr.scala 508:43] 
        T_6682 is invalid @[csr.scala 508:43] 
        node T_6700 = bits(wdata, 1, 0) @[csr.scala 508:43] 
        T_6682.prv <= T_6700 @[csr.scala 508:43] 
        node T_6701 = bits(wdata, 2, 2) @[csr.scala 508:43] 
        T_6682.step <= T_6701 @[csr.scala 508:43] 
        node T_6702 = bits(wdata, 3, 3) @[csr.scala 508:43] 
        T_6682.halt <= T_6702 @[csr.scala 508:43] 
        node T_6703 = bits(wdata, 4, 4) @[csr.scala 508:43] 
        T_6682.zero1 <= T_6703 @[csr.scala 508:43] 
        node T_6704 = bits(wdata, 5, 5) @[csr.scala 508:43] 
        T_6682.debugint <= T_6704 @[csr.scala 508:43] 
        node T_6705 = bits(wdata, 8, 6) @[csr.scala 508:43] 
        T_6682.cause <= T_6705 @[csr.scala 508:43] 
        node T_6706 = bits(wdata, 9, 9) @[csr.scala 508:43] 
        T_6682.stoptime <= T_6706 @[csr.scala 508:43] 
        node T_6707 = bits(wdata, 10, 10) @[csr.scala 508:43] 
        T_6682.stopcycle <= T_6707 @[csr.scala 508:43] 
        node T_6708 = bits(wdata, 11, 11) @[csr.scala 508:43] 
        T_6682.zero2 <= T_6708 @[csr.scala 508:43] 
        node T_6709 = bits(wdata, 12, 12) @[csr.scala 508:43] 
        T_6682.ebreaku <= T_6709 @[csr.scala 508:43] 
        node T_6710 = bits(wdata, 13, 13) @[csr.scala 508:43] 
        T_6682.ebreaks <= T_6710 @[csr.scala 508:43] 
        node T_6711 = bits(wdata, 14, 14) @[csr.scala 508:43] 
        T_6682.ebreakh <= T_6711 @[csr.scala 508:43] 
        node T_6712 = bits(wdata, 15, 15) @[csr.scala 508:43] 
        T_6682.ebreakm <= T_6712 @[csr.scala 508:43] 
        node T_6713 = bits(wdata, 27, 16) @[csr.scala 508:43] 
        T_6682.hwbpcount <= T_6713 @[csr.scala 508:43] 
        node T_6714 = bits(wdata, 28, 28) @[csr.scala 508:43] 
        T_6682.fullreset <= T_6714 @[csr.scala 508:43] 
        node T_6715 = bits(wdata, 29, 29) @[csr.scala 508:43] 
        T_6682.ndreset <= T_6715 @[csr.scala 508:43] 
        node T_6716 = bits(wdata, 31, 30) @[csr.scala 508:43] 
        T_6682.xdebugver <= T_6716 @[csr.scala 508:43] 
        reg_dcsr.halt <= T_6682.halt @[csr.scala 509:23] 
        reg_dcsr.step <= T_6682.step @[csr.scala 510:23] 
        reg_dcsr.ebreakm <= T_6682.ebreakm @[csr.scala 511:26] 
        reg_dcsr.ebreaks <= T_6682.ebreaks @[csr.scala 512:39] 
        reg_dcsr.ebreaku <= T_6682.ebreaku @[csr.scala 513:41] 
        reg_dcsr.prv <= T_6682.prv @[csr.scala 514:51] 
        skip @[csr.scala 507:38] 
      when T_6052 : @[csr.scala 516:42] 
        node T_6717 = not(wdata) @[csr.scala 516:57] 
        node T_6719 = or(T_6717, UInt<1>("h01")) @[csr.scala 516:64] 
        node T_6720 = not(T_6719) @[csr.scala 516:55] 
        reg_dpc <= T_6720 @[csr.scala 516:52] 
        skip @[csr.scala 516:42] 
      when T_6054 : @[csr.scala 517:42] 
        reg_dscratch <= wdata @[csr.scala 517:57] 
        skip @[csr.scala 517:42] 
      when T_6062 : @[csr.scala 520:41] 
        wire T_6771 : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[csr.scala 521:49] 
        T_6771 is invalid @[csr.scala 521:49] 
        wire T_6797 : UInt<67>
        T_6797 is invalid
        T_6797 <= wdata
        node T_6798 = bits(T_6797, 0, 0) @[csr.scala 521:49] 
        T_6771.uie <= T_6798 @[csr.scala 521:49] 
        node T_6799 = bits(T_6797, 1, 1) @[csr.scala 521:49] 
        T_6771.sie <= T_6799 @[csr.scala 521:49] 
        node T_6800 = bits(T_6797, 2, 2) @[csr.scala 521:49] 
        T_6771.hie <= T_6800 @[csr.scala 521:49] 
        node T_6801 = bits(T_6797, 3, 3) @[csr.scala 521:49] 
        T_6771.mie <= T_6801 @[csr.scala 521:49] 
        node T_6802 = bits(T_6797, 4, 4) @[csr.scala 521:49] 
        T_6771.upie <= T_6802 @[csr.scala 521:49] 
        node T_6803 = bits(T_6797, 5, 5) @[csr.scala 521:49] 
        T_6771.spie <= T_6803 @[csr.scala 521:49] 
        node T_6804 = bits(T_6797, 6, 6) @[csr.scala 521:49] 
        T_6771.hpie <= T_6804 @[csr.scala 521:49] 
        node T_6805 = bits(T_6797, 7, 7) @[csr.scala 521:49] 
        T_6771.mpie <= T_6805 @[csr.scala 521:49] 
        node T_6806 = bits(T_6797, 8, 8) @[csr.scala 521:49] 
        T_6771.spp <= T_6806 @[csr.scala 521:49] 
        node T_6807 = bits(T_6797, 10, 9) @[csr.scala 521:49] 
        T_6771.hpp <= T_6807 @[csr.scala 521:49] 
        node T_6808 = bits(T_6797, 12, 11) @[csr.scala 521:49] 
        T_6771.mpp <= T_6808 @[csr.scala 521:49] 
        node T_6809 = bits(T_6797, 14, 13) @[csr.scala 521:49] 
        T_6771.fs <= T_6809 @[csr.scala 521:49] 
        node T_6810 = bits(T_6797, 16, 15) @[csr.scala 521:49] 
        T_6771.xs <= T_6810 @[csr.scala 521:49] 
        node T_6811 = bits(T_6797, 17, 17) @[csr.scala 521:49] 
        T_6771.mprv <= T_6811 @[csr.scala 521:49] 
        node T_6812 = bits(T_6797, 18, 18) @[csr.scala 521:49] 
        T_6771.pum <= T_6812 @[csr.scala 521:49] 
        node T_6813 = bits(T_6797, 19, 19) @[csr.scala 521:49] 
        T_6771.mxr <= T_6813 @[csr.scala 521:49] 
        node T_6814 = bits(T_6797, 23, 20) @[csr.scala 521:49] 
        T_6771.zero1 <= T_6814 @[csr.scala 521:49] 
        node T_6815 = bits(T_6797, 28, 24) @[csr.scala 521:49] 
        T_6771.vm <= T_6815 @[csr.scala 521:49] 
        node T_6816 = bits(T_6797, 30, 29) @[csr.scala 521:49] 
        T_6771.zero2 <= T_6816 @[csr.scala 521:49] 
        node T_6817 = bits(T_6797, 31, 31) @[csr.scala 521:49] 
        T_6771.sd_rv32 <= T_6817 @[csr.scala 521:49] 
        node T_6818 = bits(T_6797, 62, 32) @[csr.scala 521:49] 
        T_6771.zero3 <= T_6818 @[csr.scala 521:49] 
        node T_6819 = bits(T_6797, 63, 63) @[csr.scala 521:49] 
        T_6771.sd <= T_6819 @[csr.scala 521:49] 
        node T_6820 = bits(T_6797, 65, 64) @[csr.scala 521:49] 
        T_6771.prv <= T_6820 @[csr.scala 521:49] 
        node T_6821 = bits(T_6797, 66, 66) @[csr.scala 521:49] 
        T_6771.debug <= T_6821 @[csr.scala 521:49] 
        reg_mstatus.sie <= T_6771.sie @[csr.scala 522:25] 
        reg_mstatus.spie <= T_6771.spie @[csr.scala 523:26] 
        reg_mstatus.spp <= T_6771.spp @[csr.scala 524:25] 
        reg_mstatus.pum <= T_6771.pum @[csr.scala 525:25] 
        node T_6823 = neq(T_6771.fs, UInt<1>("h00")) @[csr.scala 526:50] 
        node T_6824 = bits(T_6823, 0, 0) @[Bitwise.scala 33:15] 
        node T_6827 = mux(T_6824, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 33:12] 
        reg_mstatus.fs <= T_6827 @[csr.scala 526:24] 
        skip @[csr.scala 520:41] 
      when T_6064 : @[csr.scala 529:37] 
        wire T_6856 : {rocc : UInt<1>, meip : UInt<1>, heip : UInt<1>, seip : UInt<1>, ueip : UInt<1>, mtip : UInt<1>, htip : UInt<1>, stip : UInt<1>, utip : UInt<1>, msip : UInt<1>, hsip : UInt<1>, ssip : UInt<1>, usip : UInt<1>} @[csr.scala 530:41] 
        T_6856 is invalid @[csr.scala 530:41] 
        node T_6870 = bits(wdata, 0, 0) @[csr.scala 530:41] 
        T_6856.usip <= T_6870 @[csr.scala 530:41] 
        node T_6871 = bits(wdata, 1, 1) @[csr.scala 530:41] 
        T_6856.ssip <= T_6871 @[csr.scala 530:41] 
        node T_6872 = bits(wdata, 2, 2) @[csr.scala 530:41] 
        T_6856.hsip <= T_6872 @[csr.scala 530:41] 
        node T_6873 = bits(wdata, 3, 3) @[csr.scala 530:41] 
        T_6856.msip <= T_6873 @[csr.scala 530:41] 
        node T_6874 = bits(wdata, 4, 4) @[csr.scala 530:41] 
        T_6856.utip <= T_6874 @[csr.scala 530:41] 
        node T_6875 = bits(wdata, 5, 5) @[csr.scala 530:41] 
        T_6856.stip <= T_6875 @[csr.scala 530:41] 
        node T_6876 = bits(wdata, 6, 6) @[csr.scala 530:41] 
        T_6856.htip <= T_6876 @[csr.scala 530:41] 
        node T_6877 = bits(wdata, 7, 7) @[csr.scala 530:41] 
        T_6856.mtip <= T_6877 @[csr.scala 530:41] 
        node T_6878 = bits(wdata, 8, 8) @[csr.scala 530:41] 
        T_6856.ueip <= T_6878 @[csr.scala 530:41] 
        node T_6879 = bits(wdata, 9, 9) @[csr.scala 530:41] 
        T_6856.seip <= T_6879 @[csr.scala 530:41] 
        node T_6880 = bits(wdata, 10, 10) @[csr.scala 530:41] 
        T_6856.heip <= T_6880 @[csr.scala 530:41] 
        node T_6881 = bits(wdata, 11, 11) @[csr.scala 530:41] 
        T_6856.meip <= T_6881 @[csr.scala 530:41] 
        node T_6882 = bits(wdata, 12, 12) @[csr.scala 530:41] 
        T_6856.rocc <= T_6882 @[csr.scala 530:41] 
        reg_mip.ssip <= T_6856.ssip @[csr.scala 531:22] 
        skip @[csr.scala 529:37] 
      when T_6066 : @[csr.scala 533:42] 
        node T_6883 = not(reg_mideleg) @[csr.scala 533:66] 
        node T_6884 = and(reg_mie, T_6883) @[csr.scala 533:64] 
        node T_6885 = and(wdata, reg_mideleg) @[csr.scala 533:89] 
        node T_6886 = or(T_6884, T_6885) @[csr.scala 533:80] 
        reg_mie <= T_6886 @[csr.scala 533:52] 
        skip @[csr.scala 533:42] 
      when T_6068 : @[csr.scala 534:42] 
        reg_sscratch <= wdata @[csr.scala 534:57] 
        skip @[csr.scala 534:42] 
      when T_6074 : @[csr.scala 535:42] 
        node T_6887 = bits(wdata, 19, 0) @[csr.scala 535:66] 
        reg_sptbr.ppn <= T_6887 @[csr.scala 535:58] 
        skip @[csr.scala 535:42] 
      when T_6076 : @[csr.scala 536:42] 
        node T_6888 = not(wdata) @[csr.scala 536:58] 
        node T_6890 = or(T_6888, UInt<1>("h01")) @[csr.scala 536:65] 
        node T_6891 = not(T_6890) @[csr.scala 536:56] 
        reg_sepc <= T_6891 @[csr.scala 536:53] 
        skip @[csr.scala 536:42] 
      when T_6078 : @[csr.scala 537:42] 
        node T_6892 = shr(wdata, 2) @[csr.scala 537:63] 
        node T_6893 = shl(T_6892, 2) @[csr.scala 537:68] 
        reg_stvec <= T_6893 @[csr.scala 537:54] 
        skip @[csr.scala 537:42] 
      when T_6070 : @[csr.scala 538:42] 
        node T_6895 = and(wdata, UInt<64>("h0800000000000001f")) @[csr.scala 538:64] 
        reg_scause <= T_6895 @[csr.scala 538:55] 
        skip @[csr.scala 538:42] 
      when T_6072 : @[csr.scala 539:42] 
        node T_6896 = bits(wdata, 39, 0) @[csr.scala 539:65] 
        reg_sbadaddr <= T_6896 @[csr.scala 539:57] 
        skip @[csr.scala 539:42] 
      when T_6036 : @[csr.scala 540:42] 
        node T_6897 = and(wdata, delegable_interrupts) @[csr.scala 540:65] 
        reg_mideleg <= T_6897 @[csr.scala 540:56] 
        skip @[csr.scala 540:42] 
      when T_6038 : @[csr.scala 541:42] 
        node T_6898 = and(wdata, UInt<9>("h01ab")) @[csr.scala 541:65] 
        reg_medeleg <= T_6898 @[csr.scala 541:56] 
        skip @[csr.scala 541:42] 
      wire T_6907 : {tdrmode : UInt<1>, reserved : UInt<62>, tdrindex : UInt<1>} @[csr.scala 544:44] 
      T_6907 is invalid @[csr.scala 544:44] 
      node T_6911 = bits(wdata, 0, 0) @[csr.scala 544:44] 
      T_6907.tdrindex <= T_6911 @[csr.scala 544:44] 
      node T_6912 = bits(wdata, 62, 1) @[csr.scala 544:44] 
      T_6907.reserved <= T_6912 @[csr.scala 544:44] 
      node T_6913 = bits(wdata, 63, 63) @[csr.scala 544:44] 
      T_6907.tdrmode <= T_6913 @[csr.scala 544:44] 
      when T_6002 : @[csr.scala 545:43] 
        reg_tdrselect.tdrindex <= T_6907.tdrindex @[csr.scala 545:68] 
        skip @[csr.scala 545:43] 
      node T_6914 = or(reg_tdrselect.tdrmode, reg_debug) @[csr.scala 547:35] 
      when T_6914 : @[csr.scala 547:49] 
        when T_6004 : @[csr.scala 548:44] 
          wire T_6941 : {tdrtype : UInt<4>, bpamaskmax : UInt<5>, reserved : UInt<36>, bpaction : UInt<8>, bpmatch : UInt<4>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, r : UInt<1>, w : UInt<1>, x : UInt<1>} @[csr.scala 549:48] 
          T_6941 is invalid @[csr.scala 549:48] 
          node T_6954 = bits(wdata, 0, 0) @[csr.scala 549:48] 
          T_6941.x <= T_6954 @[csr.scala 549:48] 
          node T_6955 = bits(wdata, 1, 1) @[csr.scala 549:48] 
          T_6941.w <= T_6955 @[csr.scala 549:48] 
          node T_6956 = bits(wdata, 2, 2) @[csr.scala 549:48] 
          T_6941.r <= T_6956 @[csr.scala 549:48] 
          node T_6957 = bits(wdata, 3, 3) @[csr.scala 549:48] 
          T_6941.u <= T_6957 @[csr.scala 549:48] 
          node T_6958 = bits(wdata, 4, 4) @[csr.scala 549:48] 
          T_6941.s <= T_6958 @[csr.scala 549:48] 
          node T_6959 = bits(wdata, 5, 5) @[csr.scala 549:48] 
          T_6941.h <= T_6959 @[csr.scala 549:48] 
          node T_6960 = bits(wdata, 6, 6) @[csr.scala 549:48] 
          T_6941.m <= T_6960 @[csr.scala 549:48] 
          node T_6961 = bits(wdata, 10, 7) @[csr.scala 549:48] 
          T_6941.bpmatch <= T_6961 @[csr.scala 549:48] 
          node T_6962 = bits(wdata, 18, 11) @[csr.scala 549:48] 
          T_6941.bpaction <= T_6962 @[csr.scala 549:48] 
          node T_6963 = bits(wdata, 54, 19) @[csr.scala 549:48] 
          T_6941.reserved <= T_6963 @[csr.scala 549:48] 
          node T_6964 = bits(wdata, 59, 55) @[csr.scala 549:48] 
          T_6941.bpamaskmax <= T_6964 @[csr.scala 549:48] 
          node T_6965 = bits(wdata, 63, 60) @[csr.scala 549:48] 
          T_6941.tdrtype <= T_6965 @[csr.scala 549:48] 
          reg_bp[reg_tdrselect.tdrindex].control <- T_6941 @[csr.scala 550:50] 
          node T_6995 = and(T_6941.bpmatch, UInt<2>("h02")) @[csr.scala 551:76] 
          reg_bp[reg_tdrselect.tdrindex].control.bpmatch <= T_6995 @[csr.scala 551:58] 
          skip @[csr.scala 548:44] 
        when T_6006 : @[csr.scala 553:44] 
          reg_bp[reg_tdrselect.tdrindex].address <= wdata @[csr.scala 553:85] 
          skip @[csr.scala 553:44] 
        skip @[csr.scala 547:49] 
      skip @[csr.scala 460:14] 
    reg_mip <- io.prci.interrupts @[csr.scala 558:11] 
    reg_dcsr.debugint <= io.prci.interrupts.debug @[csr.scala 559:21] 
    reg_dcsr.hwbpcount <= UInt<1>("h01") @[csr.scala 560:22] 
    io.rocc.csr.waddr <= io.rw.addr @[csr.scala 562:21] 
    io.rocc.csr.wdata <= wdata @[csr.scala 563:21] 
    io.rocc.csr.wen <= wen @[csr.scala 564:19] 
    reg_sptbr.asid <= UInt<1>("h00") @[csr.scala 572:18] 
    reg_tdrselect.reserved <= UInt<1>("h00") @[csr.scala 573:26] 
    reg_tdrselect.tdrmode <= UInt<1>("h01") @[csr.scala 574:25] 
    reg_bp[0].control.tdrtype <= UInt<1>("h01") @[csr.scala 577:17] 
    reg_bp[0].control.bpamaskmax <= UInt<3>("h04") @[csr.scala 578:20] 
    reg_bp[0].control.reserved <= UInt<1>("h00") @[csr.scala 579:18] 
    reg_bp[0].control.bpaction <= UInt<1>("h00") @[csr.scala 580:18] 
    reg_bp[0].control.h <= UInt<1>("h00") @[csr.scala 581:11] 
    when reset : @[csr.scala 585:18] 
      reg_bp[0].control.r <= UInt<1>("h00") @[csr.scala 586:13] 
      reg_bp[0].control.w <= UInt<1>("h00") @[csr.scala 587:13] 
      reg_bp[0].control.x <= UInt<1>("h00") @[csr.scala 588:13] 
      skip @[csr.scala 585:18] 
    reg_bp[1].control.tdrtype <= UInt<1>("h01") @[csr.scala 577:17] 
    reg_bp[1].control.bpamaskmax <= UInt<3>("h04") @[csr.scala 578:20] 
    reg_bp[1].control.reserved <= UInt<1>("h00") @[csr.scala 579:18] 
    reg_bp[1].control.bpaction <= UInt<1>("h00") @[csr.scala 580:18] 
    reg_bp[1].control.h <= UInt<1>("h00") @[csr.scala 581:11] 
    when reset : @[csr.scala 585:18] 
      reg_bp[1].control.r <= UInt<1>("h00") @[csr.scala 586:13] 
      reg_bp[1].control.w <= UInt<1>("h00") @[csr.scala 587:13] 
      reg_bp[1].control.x <= UInt<1>("h00") @[csr.scala 588:13] 
      skip @[csr.scala 585:18] 
    wire T_7061 : {control : {tdrtype : UInt<4>, bpamaskmax : UInt<5>, reserved : UInt<36>, bpaction : UInt<8>, bpmatch : UInt<4>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, r : UInt<1>, w : UInt<1>, x : UInt<1>}, address : UInt<39>} @[csr.scala 592:28] 
    T_7061 is invalid @[csr.scala 592:28] 
    wire T_7077 : UInt<103>
    T_7077 is invalid
    T_7077 <= UInt<1>("h00")
    node T_7078 = bits(T_7077, 38, 0) @[csr.scala 592:28] 
    T_7061.address <= T_7078 @[csr.scala 592:28] 
    node T_7079 = bits(T_7077, 39, 39) @[csr.scala 592:28] 
    T_7061.control.x <= T_7079 @[csr.scala 592:28] 
    node T_7080 = bits(T_7077, 40, 40) @[csr.scala 592:28] 
    T_7061.control.w <= T_7080 @[csr.scala 592:28] 
    node T_7081 = bits(T_7077, 41, 41) @[csr.scala 592:28] 
    T_7061.control.r <= T_7081 @[csr.scala 592:28] 
    node T_7082 = bits(T_7077, 42, 42) @[csr.scala 592:28] 
    T_7061.control.u <= T_7082 @[csr.scala 592:28] 
    node T_7083 = bits(T_7077, 43, 43) @[csr.scala 592:28] 
    T_7061.control.s <= T_7083 @[csr.scala 592:28] 
    node T_7084 = bits(T_7077, 44, 44) @[csr.scala 592:28] 
    T_7061.control.h <= T_7084 @[csr.scala 592:28] 
    node T_7085 = bits(T_7077, 45, 45) @[csr.scala 592:28] 
    T_7061.control.m <= T_7085 @[csr.scala 592:28] 
    node T_7086 = bits(T_7077, 49, 46) @[csr.scala 592:28] 
    T_7061.control.bpmatch <= T_7086 @[csr.scala 592:28] 
    node T_7087 = bits(T_7077, 57, 50) @[csr.scala 592:28] 
    T_7061.control.bpaction <= T_7087 @[csr.scala 592:28] 
    node T_7088 = bits(T_7077, 93, 58) @[csr.scala 592:28] 
    T_7061.control.reserved <= T_7088 @[csr.scala 592:28] 
    node T_7089 = bits(T_7077, 98, 94) @[csr.scala 592:28] 
    T_7061.control.bpamaskmax <= T_7089 @[csr.scala 592:28] 
    node T_7090 = bits(T_7077, 102, 99) @[csr.scala 592:28] 
    T_7061.control.tdrtype <= T_7090 @[csr.scala 592:28] 
    reg_bp[1] <- T_7061 @[csr.scala 592:8] 
    
  module BreakpointUnit : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, flip bp : {control : {tdrtype : UInt<4>, bpamaskmax : UInt<5>, reserved : UInt<36>, bpaction : UInt<8>, bpmatch : UInt<4>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, r : UInt<1>, w : UInt<1>, x : UInt<1>}, address : UInt<39>}[1], flip pc : UInt<39>, flip ea : UInt<39>, xcpt_if : UInt<1>, xcpt_ld : UInt<1>, xcpt_st : UInt<1>}
    
    io is invalid
    io.xcpt_if <= UInt<1>("h00") @[breakpoint.scala 62:14] 
    io.xcpt_ld <= UInt<1>("h00") @[breakpoint.scala 63:14] 
    io.xcpt_st <= UInt<1>("h00") @[breakpoint.scala 64:14] 
    node T_178 = cat(io.bp[0].control.s, io.bp[0].control.u) @[Cat.scala 20:58] 
    node T_179 = cat(io.bp[0].control.m, io.bp[0].control.h) @[Cat.scala 20:58] 
    node T_180 = cat(T_179, T_178) @[Cat.scala 20:58] 
    node T_181 = dshr(T_180, io.status.prv) @[breakpoint.scala 33:50] 
    node T_182 = bits(T_181, 0, 0) @[breakpoint.scala 33:50] 
    when T_182 : @[breakpoint.scala 67:42] 
      node T_183 = not(io.pc) @[breakpoint.scala 48:6] 
      node T_184 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_185 = bits(T_184, 0, 0) @[breakpoint.scala 43:22] 
      node T_186 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_187 = and(T_185, T_186) @[breakpoint.scala 43:28] 
      node T_188 = cat(T_187, T_184) @[Cat.scala 20:58] 
      node T_189 = bits(T_188, 1, 1) @[breakpoint.scala 43:22] 
      node T_190 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_191 = and(T_189, T_190) @[breakpoint.scala 43:28] 
      node T_192 = cat(T_191, T_188) @[Cat.scala 20:58] 
      node T_193 = bits(T_192, 2, 2) @[breakpoint.scala 43:22] 
      node T_194 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_195 = and(T_193, T_194) @[breakpoint.scala 43:28] 
      node T_196 = cat(T_195, T_192) @[Cat.scala 20:58] 
      node T_197 = or(T_183, T_196) @[breakpoint.scala 48:9] 
      node T_198 = not(io.bp[0].address) @[breakpoint.scala 48:24] 
      node T_199 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_200 = bits(T_199, 0, 0) @[breakpoint.scala 43:22] 
      node T_201 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_202 = and(T_200, T_201) @[breakpoint.scala 43:28] 
      node T_203 = cat(T_202, T_199) @[Cat.scala 20:58] 
      node T_204 = bits(T_203, 1, 1) @[breakpoint.scala 43:22] 
      node T_205 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_206 = and(T_204, T_205) @[breakpoint.scala 43:28] 
      node T_207 = cat(T_206, T_203) @[Cat.scala 20:58] 
      node T_208 = bits(T_207, 2, 2) @[breakpoint.scala 43:22] 
      node T_209 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_210 = and(T_208, T_209) @[breakpoint.scala 43:28] 
      node T_211 = cat(T_210, T_207) @[Cat.scala 20:58] 
      node T_212 = or(T_198, T_211) @[breakpoint.scala 48:33] 
      node T_213 = eq(T_197, T_212) @[breakpoint.scala 48:19] 
      node T_214 = and(T_213, io.bp[0].control.x) @[breakpoint.scala 68:40] 
      when T_214 : @[breakpoint.scala 68:57] 
        io.xcpt_if <= UInt<1>("h01") @[breakpoint.scala 68:70] 
        skip @[breakpoint.scala 68:57] 
      node T_216 = not(io.ea) @[breakpoint.scala 48:6] 
      node T_217 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_218 = bits(T_217, 0, 0) @[breakpoint.scala 43:22] 
      node T_219 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_220 = and(T_218, T_219) @[breakpoint.scala 43:28] 
      node T_221 = cat(T_220, T_217) @[Cat.scala 20:58] 
      node T_222 = bits(T_221, 1, 1) @[breakpoint.scala 43:22] 
      node T_223 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_224 = and(T_222, T_223) @[breakpoint.scala 43:28] 
      node T_225 = cat(T_224, T_221) @[Cat.scala 20:58] 
      node T_226 = bits(T_225, 2, 2) @[breakpoint.scala 43:22] 
      node T_227 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_228 = and(T_226, T_227) @[breakpoint.scala 43:28] 
      node T_229 = cat(T_228, T_225) @[Cat.scala 20:58] 
      node T_230 = or(T_216, T_229) @[breakpoint.scala 48:9] 
      node T_231 = not(io.bp[0].address) @[breakpoint.scala 48:24] 
      node T_232 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_233 = bits(T_232, 0, 0) @[breakpoint.scala 43:22] 
      node T_234 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_235 = and(T_233, T_234) @[breakpoint.scala 43:28] 
      node T_236 = cat(T_235, T_232) @[Cat.scala 20:58] 
      node T_237 = bits(T_236, 1, 1) @[breakpoint.scala 43:22] 
      node T_238 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_239 = and(T_237, T_238) @[breakpoint.scala 43:28] 
      node T_240 = cat(T_239, T_236) @[Cat.scala 20:58] 
      node T_241 = bits(T_240, 2, 2) @[breakpoint.scala 43:22] 
      node T_242 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_243 = and(T_241, T_242) @[breakpoint.scala 43:28] 
      node T_244 = cat(T_243, T_240) @[Cat.scala 20:58] 
      node T_245 = or(T_231, T_244) @[breakpoint.scala 48:33] 
      node T_246 = eq(T_230, T_245) @[breakpoint.scala 48:19] 
      node T_247 = and(T_246, io.bp[0].control.r) @[breakpoint.scala 69:40] 
      when T_247 : @[breakpoint.scala 69:57] 
        io.xcpt_ld <= UInt<1>("h01") @[breakpoint.scala 69:70] 
        skip @[breakpoint.scala 69:57] 
      node T_249 = not(io.ea) @[breakpoint.scala 48:6] 
      node T_250 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_251 = bits(T_250, 0, 0) @[breakpoint.scala 43:22] 
      node T_252 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_253 = and(T_251, T_252) @[breakpoint.scala 43:28] 
      node T_254 = cat(T_253, T_250) @[Cat.scala 20:58] 
      node T_255 = bits(T_254, 1, 1) @[breakpoint.scala 43:22] 
      node T_256 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_257 = and(T_255, T_256) @[breakpoint.scala 43:28] 
      node T_258 = cat(T_257, T_254) @[Cat.scala 20:58] 
      node T_259 = bits(T_258, 2, 2) @[breakpoint.scala 43:22] 
      node T_260 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_261 = and(T_259, T_260) @[breakpoint.scala 43:28] 
      node T_262 = cat(T_261, T_258) @[Cat.scala 20:58] 
      node T_263 = or(T_249, T_262) @[breakpoint.scala 48:9] 
      node T_264 = not(io.bp[0].address) @[breakpoint.scala 48:24] 
      node T_265 = bits(io.bp[0].control.bpmatch, 1, 1) @[breakpoint.scala 41:37] 
      node T_266 = bits(T_265, 0, 0) @[breakpoint.scala 43:22] 
      node T_267 = bits(io.bp[0].address, 0, 0) @[breakpoint.scala 43:38] 
      node T_268 = and(T_266, T_267) @[breakpoint.scala 43:28] 
      node T_269 = cat(T_268, T_265) @[Cat.scala 20:58] 
      node T_270 = bits(T_269, 1, 1) @[breakpoint.scala 43:22] 
      node T_271 = bits(io.bp[0].address, 1, 1) @[breakpoint.scala 43:38] 
      node T_272 = and(T_270, T_271) @[breakpoint.scala 43:28] 
      node T_273 = cat(T_272, T_269) @[Cat.scala 20:58] 
      node T_274 = bits(T_273, 2, 2) @[breakpoint.scala 43:22] 
      node T_275 = bits(io.bp[0].address, 2, 2) @[breakpoint.scala 43:38] 
      node T_276 = and(T_274, T_275) @[breakpoint.scala 43:28] 
      node T_277 = cat(T_276, T_273) @[Cat.scala 20:58] 
      node T_278 = or(T_264, T_277) @[breakpoint.scala 48:33] 
      node T_279 = eq(T_263, T_278) @[breakpoint.scala 48:19] 
      node T_280 = and(T_279, io.bp[0].control.w) @[breakpoint.scala 70:40] 
      when T_280 : @[breakpoint.scala 70:57] 
        io.xcpt_st <= UInt<1>("h01") @[breakpoint.scala 70:70] 
        skip @[breakpoint.scala 70:57] 
      skip @[breakpoint.scala 67:42] 
    
  module ALU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip dw : UInt<1>, flip fn : UInt<4>, flip in2 : UInt<64>, flip in1 : UInt<64>, out : UInt<64>, adder_out : UInt<64>, cmp_out : UInt<1>}
    
    io is invalid
    node T_7 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29] 
    node T_8 = not(io.in2) @[dpath_alu.scala 59:35] 
    node in2_inv = mux(T_7, T_8, io.in2) @[dpath_alu.scala 59:20] 
    node in1_xor_in2 = xor(io.in1, in2_inv) @[dpath_alu.scala 60:28] 
    node T_9 = add(io.in1, in2_inv) @[dpath_alu.scala 61:26] 
    node T_10 = tail(T_9, 1) @[dpath_alu.scala 61:26] 
    node T_11 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29] 
    node T_12 = add(T_10, T_11) @[dpath_alu.scala 61:36] 
    node T_13 = tail(T_12, 1) @[dpath_alu.scala 61:36] 
    io.adder_out <= T_13 @[dpath_alu.scala 61:16] 
    node T_14 = bits(io.fn, 0, 0) @[dpath_alu.scala 42:35] 
    node T_15 = bits(io.fn, 3, 3) @[dpath_alu.scala 43:30] 
    node T_17 = eq(T_15, UInt<1>("h00")) @[dpath_alu.scala 43:26] 
    node T_19 = eq(in1_xor_in2, UInt<1>("h00")) @[dpath_alu.scala 65:35] 
    node T_20 = bits(io.in1, 63, 63) @[dpath_alu.scala 66:15] 
    node T_21 = bits(io.in2, 63, 63) @[dpath_alu.scala 66:34] 
    node T_22 = eq(T_20, T_21) @[dpath_alu.scala 66:24] 
    node T_23 = bits(io.adder_out, 63, 63) @[dpath_alu.scala 66:56] 
    node T_24 = bits(io.fn, 1, 1) @[dpath_alu.scala 41:35] 
    node T_25 = bits(io.in2, 63, 63) @[dpath_alu.scala 67:35] 
    node T_26 = bits(io.in1, 63, 63) @[dpath_alu.scala 67:51] 
    node T_27 = mux(T_24, T_25, T_26) @[dpath_alu.scala 67:8] 
    node T_28 = mux(T_22, T_23, T_27) @[dpath_alu.scala 66:8] 
    node T_29 = mux(T_17, T_19, T_28) @[dpath_alu.scala 65:8] 
    node T_30 = xor(T_14, T_29) @[dpath_alu.scala 64:36] 
    io.cmp_out <= T_30 @[dpath_alu.scala 64:14] 
    node T_31 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29] 
    node T_32 = bits(io.in1, 31, 31) @[dpath_alu.scala 74:55] 
    node T_33 = and(T_31, T_32) @[dpath_alu.scala 74:46] 
    node T_34 = bits(T_33, 0, 0) @[Bitwise.scala 33:15] 
    node T_37 = mux(T_34, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_40 = and(io.dw, UInt<1>("h01")) @[dpath_alu.scala 75:31] 
    node T_41 = eq(UInt<1>("h01"), T_40) @[dpath_alu.scala 75:31] 
    node T_42 = bits(io.in1, 63, 32) @[dpath_alu.scala 75:48] 
    node T_43 = mux(T_41, T_42, T_37) @[dpath_alu.scala 75:24] 
    node T_44 = bits(io.in2, 5, 5) @[dpath_alu.scala 76:29] 
    node T_47 = and(io.dw, UInt<1>("h01")) @[dpath_alu.scala 76:42] 
    node T_48 = eq(UInt<1>("h01"), T_47) @[dpath_alu.scala 76:42] 
    node T_49 = and(T_44, T_48) @[dpath_alu.scala 76:33] 
    node T_50 = bits(io.in2, 4, 0) @[dpath_alu.scala 76:60] 
    node shamt = cat(T_49, T_50) @[Cat.scala 20:58] 
    node T_51 = bits(io.in1, 31, 0) @[dpath_alu.scala 77:34] 
    node shin_r = cat(T_43, T_51) @[Cat.scala 20:58] 
    node T_52 = eq(io.fn, UInt<3>("h05")) @[dpath_alu.scala 79:24] 
    node T_53 = eq(io.fn, UInt<4>("h0b")) @[dpath_alu.scala 79:44] 
    node T_54 = or(T_52, T_53) @[dpath_alu.scala 79:35] 
    node T_57 = shl(UInt<32>("h0ffffffff"), 32) @[Bitwise.scala 58:47] 
    node T_58 = xor(UInt<64>("h0ffffffffffffffff"), T_57) @[Bitwise.scala 58:21] 
    node T_59 = shr(shin_r, 32) @[Bitwise.scala 59:21] 
    node T_60 = and(T_59, T_58) @[Bitwise.scala 59:31] 
    node T_61 = bits(shin_r, 31, 0) @[Bitwise.scala 59:46] 
    node T_62 = shl(T_61, 32) @[Bitwise.scala 59:65] 
    node T_63 = not(T_58) @[Bitwise.scala 59:77] 
    node T_64 = and(T_62, T_63) @[Bitwise.scala 59:75] 
    node T_65 = or(T_60, T_64) @[Bitwise.scala 59:39] 
    node T_66 = bits(T_58, 47, 0) @[Bitwise.scala 58:28] 
    node T_67 = shl(T_66, 16) @[Bitwise.scala 58:47] 
    node T_68 = xor(T_58, T_67) @[Bitwise.scala 58:21] 
    node T_69 = shr(T_65, 16) @[Bitwise.scala 59:21] 
    node T_70 = and(T_69, T_68) @[Bitwise.scala 59:31] 
    node T_71 = bits(T_65, 47, 0) @[Bitwise.scala 59:46] 
    node T_72 = shl(T_71, 16) @[Bitwise.scala 59:65] 
    node T_73 = not(T_68) @[Bitwise.scala 59:77] 
    node T_74 = and(T_72, T_73) @[Bitwise.scala 59:75] 
    node T_75 = or(T_70, T_74) @[Bitwise.scala 59:39] 
    node T_76 = bits(T_68, 55, 0) @[Bitwise.scala 58:28] 
    node T_77 = shl(T_76, 8) @[Bitwise.scala 58:47] 
    node T_78 = xor(T_68, T_77) @[Bitwise.scala 58:21] 
    node T_79 = shr(T_75, 8) @[Bitwise.scala 59:21] 
    node T_80 = and(T_79, T_78) @[Bitwise.scala 59:31] 
    node T_81 = bits(T_75, 55, 0) @[Bitwise.scala 59:46] 
    node T_82 = shl(T_81, 8) @[Bitwise.scala 59:65] 
    node T_83 = not(T_78) @[Bitwise.scala 59:77] 
    node T_84 = and(T_82, T_83) @[Bitwise.scala 59:75] 
    node T_85 = or(T_80, T_84) @[Bitwise.scala 59:39] 
    node T_86 = bits(T_78, 59, 0) @[Bitwise.scala 58:28] 
    node T_87 = shl(T_86, 4) @[Bitwise.scala 58:47] 
    node T_88 = xor(T_78, T_87) @[Bitwise.scala 58:21] 
    node T_89 = shr(T_85, 4) @[Bitwise.scala 59:21] 
    node T_90 = and(T_89, T_88) @[Bitwise.scala 59:31] 
    node T_91 = bits(T_85, 59, 0) @[Bitwise.scala 59:46] 
    node T_92 = shl(T_91, 4) @[Bitwise.scala 59:65] 
    node T_93 = not(T_88) @[Bitwise.scala 59:77] 
    node T_94 = and(T_92, T_93) @[Bitwise.scala 59:75] 
    node T_95 = or(T_90, T_94) @[Bitwise.scala 59:39] 
    node T_96 = bits(T_88, 61, 0) @[Bitwise.scala 58:28] 
    node T_97 = shl(T_96, 2) @[Bitwise.scala 58:47] 
    node T_98 = xor(T_88, T_97) @[Bitwise.scala 58:21] 
    node T_99 = shr(T_95, 2) @[Bitwise.scala 59:21] 
    node T_100 = and(T_99, T_98) @[Bitwise.scala 59:31] 
    node T_101 = bits(T_95, 61, 0) @[Bitwise.scala 59:46] 
    node T_102 = shl(T_101, 2) @[Bitwise.scala 59:65] 
    node T_103 = not(T_98) @[Bitwise.scala 59:77] 
    node T_104 = and(T_102, T_103) @[Bitwise.scala 59:75] 
    node T_105 = or(T_100, T_104) @[Bitwise.scala 59:39] 
    node T_106 = bits(T_98, 62, 0) @[Bitwise.scala 58:28] 
    node T_107 = shl(T_106, 1) @[Bitwise.scala 58:47] 
    node T_108 = xor(T_98, T_107) @[Bitwise.scala 58:21] 
    node T_109 = shr(T_105, 1) @[Bitwise.scala 59:21] 
    node T_110 = and(T_109, T_108) @[Bitwise.scala 59:31] 
    node T_111 = bits(T_105, 62, 0) @[Bitwise.scala 59:46] 
    node T_112 = shl(T_111, 1) @[Bitwise.scala 59:65] 
    node T_113 = not(T_108) @[Bitwise.scala 59:77] 
    node T_114 = and(T_112, T_113) @[Bitwise.scala 59:75] 
    node T_115 = or(T_110, T_114) @[Bitwise.scala 59:39] 
    node shin = mux(T_54, shin_r, T_115) @[dpath_alu.scala 79:17] 
    node T_116 = bits(io.fn, 3, 3) @[dpath_alu.scala 39:29] 
    node T_117 = bits(shin, 63, 63) @[dpath_alu.scala 80:41] 
    node T_118 = and(T_116, T_117) @[dpath_alu.scala 80:35] 
    node T_119 = cat(T_118, shin) @[Cat.scala 20:58] 
    node T_120 = asSInt(T_119) @[dpath_alu.scala 80:57] 
    node T_121 = dshr(T_120, shamt) @[dpath_alu.scala 80:64] 
    node shout_r = bits(T_121, 63, 0) @[dpath_alu.scala 80:73] 
    node T_124 = shl(UInt<32>("h0ffffffff"), 32) @[Bitwise.scala 58:47] 
    node T_125 = xor(UInt<64>("h0ffffffffffffffff"), T_124) @[Bitwise.scala 58:21] 
    node T_126 = shr(shout_r, 32) @[Bitwise.scala 59:21] 
    node T_127 = and(T_126, T_125) @[Bitwise.scala 59:31] 
    node T_128 = bits(shout_r, 31, 0) @[Bitwise.scala 59:46] 
    node T_129 = shl(T_128, 32) @[Bitwise.scala 59:65] 
    node T_130 = not(T_125) @[Bitwise.scala 59:77] 
    node T_131 = and(T_129, T_130) @[Bitwise.scala 59:75] 
    node T_132 = or(T_127, T_131) @[Bitwise.scala 59:39] 
    node T_133 = bits(T_125, 47, 0) @[Bitwise.scala 58:28] 
    node T_134 = shl(T_133, 16) @[Bitwise.scala 58:47] 
    node T_135 = xor(T_125, T_134) @[Bitwise.scala 58:21] 
    node T_136 = shr(T_132, 16) @[Bitwise.scala 59:21] 
    node T_137 = and(T_136, T_135) @[Bitwise.scala 59:31] 
    node T_138 = bits(T_132, 47, 0) @[Bitwise.scala 59:46] 
    node T_139 = shl(T_138, 16) @[Bitwise.scala 59:65] 
    node T_140 = not(T_135) @[Bitwise.scala 59:77] 
    node T_141 = and(T_139, T_140) @[Bitwise.scala 59:75] 
    node T_142 = or(T_137, T_141) @[Bitwise.scala 59:39] 
    node T_143 = bits(T_135, 55, 0) @[Bitwise.scala 58:28] 
    node T_144 = shl(T_143, 8) @[Bitwise.scala 58:47] 
    node T_145 = xor(T_135, T_144) @[Bitwise.scala 58:21] 
    node T_146 = shr(T_142, 8) @[Bitwise.scala 59:21] 
    node T_147 = and(T_146, T_145) @[Bitwise.scala 59:31] 
    node T_148 = bits(T_142, 55, 0) @[Bitwise.scala 59:46] 
    node T_149 = shl(T_148, 8) @[Bitwise.scala 59:65] 
    node T_150 = not(T_145) @[Bitwise.scala 59:77] 
    node T_151 = and(T_149, T_150) @[Bitwise.scala 59:75] 
    node T_152 = or(T_147, T_151) @[Bitwise.scala 59:39] 
    node T_153 = bits(T_145, 59, 0) @[Bitwise.scala 58:28] 
    node T_154 = shl(T_153, 4) @[Bitwise.scala 58:47] 
    node T_155 = xor(T_145, T_154) @[Bitwise.scala 58:21] 
    node T_156 = shr(T_152, 4) @[Bitwise.scala 59:21] 
    node T_157 = and(T_156, T_155) @[Bitwise.scala 59:31] 
    node T_158 = bits(T_152, 59, 0) @[Bitwise.scala 59:46] 
    node T_159 = shl(T_158, 4) @[Bitwise.scala 59:65] 
    node T_160 = not(T_155) @[Bitwise.scala 59:77] 
    node T_161 = and(T_159, T_160) @[Bitwise.scala 59:75] 
    node T_162 = or(T_157, T_161) @[Bitwise.scala 59:39] 
    node T_163 = bits(T_155, 61, 0) @[Bitwise.scala 58:28] 
    node T_164 = shl(T_163, 2) @[Bitwise.scala 58:47] 
    node T_165 = xor(T_155, T_164) @[Bitwise.scala 58:21] 
    node T_166 = shr(T_162, 2) @[Bitwise.scala 59:21] 
    node T_167 = and(T_166, T_165) @[Bitwise.scala 59:31] 
    node T_168 = bits(T_162, 61, 0) @[Bitwise.scala 59:46] 
    node T_169 = shl(T_168, 2) @[Bitwise.scala 59:65] 
    node T_170 = not(T_165) @[Bitwise.scala 59:77] 
    node T_171 = and(T_169, T_170) @[Bitwise.scala 59:75] 
    node T_172 = or(T_167, T_171) @[Bitwise.scala 59:39] 
    node T_173 = bits(T_165, 62, 0) @[Bitwise.scala 58:28] 
    node T_174 = shl(T_173, 1) @[Bitwise.scala 58:47] 
    node T_175 = xor(T_165, T_174) @[Bitwise.scala 58:21] 
    node T_176 = shr(T_172, 1) @[Bitwise.scala 59:21] 
    node T_177 = and(T_176, T_175) @[Bitwise.scala 59:31] 
    node T_178 = bits(T_172, 62, 0) @[Bitwise.scala 59:46] 
    node T_179 = shl(T_178, 1) @[Bitwise.scala 59:65] 
    node T_180 = not(T_175) @[Bitwise.scala 59:77] 
    node T_181 = and(T_179, T_180) @[Bitwise.scala 59:75] 
    node shout_l = or(T_177, T_181) @[Bitwise.scala 59:39] 
    node T_182 = eq(io.fn, UInt<3>("h05")) @[dpath_alu.scala 82:25] 
    node T_183 = eq(io.fn, UInt<4>("h0b")) @[dpath_alu.scala 82:44] 
    node T_184 = or(T_182, T_183) @[dpath_alu.scala 82:35] 
    node T_186 = mux(T_184, shout_r, UInt<1>("h00")) @[dpath_alu.scala 82:18] 
    node T_187 = eq(io.fn, UInt<1>("h01")) @[dpath_alu.scala 83:25] 
    node T_189 = mux(T_187, shout_l, UInt<1>("h00")) @[dpath_alu.scala 83:18] 
    node shout = or(T_186, T_189) @[dpath_alu.scala 82:74] 
    node T_190 = eq(io.fn, UInt<3>("h04")) @[dpath_alu.scala 86:25] 
    node T_191 = eq(io.fn, UInt<3>("h06")) @[dpath_alu.scala 86:45] 
    node T_192 = or(T_190, T_191) @[dpath_alu.scala 86:36] 
    node T_194 = mux(T_192, in1_xor_in2, UInt<1>("h00")) @[dpath_alu.scala 86:18] 
    node T_195 = eq(io.fn, UInt<3>("h06")) @[dpath_alu.scala 87:25] 
    node T_196 = eq(io.fn, UInt<3>("h07")) @[dpath_alu.scala 87:44] 
    node T_197 = or(T_195, T_196) @[dpath_alu.scala 87:35] 
    node T_198 = and(io.in1, io.in2) @[dpath_alu.scala 87:63] 
    node T_200 = mux(T_197, T_198, UInt<1>("h00")) @[dpath_alu.scala 87:18] 
    node logic = or(T_194, T_200) @[dpath_alu.scala 86:78] 
    node T_201 = eq(io.fn, UInt<2>("h02")) @[dpath_alu.scala 40:30] 
    node T_202 = eq(io.fn, UInt<2>("h03")) @[dpath_alu.scala 40:48] 
    node T_203 = or(T_201, T_202) @[dpath_alu.scala 40:41] 
    node T_204 = geq(io.fn, UInt<4>("h0c")) @[dpath_alu.scala 40:66] 
    node T_205 = or(T_203, T_204) @[dpath_alu.scala 40:59] 
    node T_206 = and(T_205, io.cmp_out) @[dpath_alu.scala 88:35] 
    node T_207 = or(T_206, logic) @[dpath_alu.scala 88:50] 
    node shift_logic = or(T_207, shout) @[dpath_alu.scala 88:58] 
    node T_208 = eq(io.fn, UInt<1>("h00")) @[dpath_alu.scala 89:23] 
    node T_209 = eq(io.fn, UInt<4>("h0a")) @[dpath_alu.scala 89:43] 
    node T_210 = or(T_208, T_209) @[dpath_alu.scala 89:34] 
    node out = mux(T_210, io.adder_out, shift_logic) @[dpath_alu.scala 89:16] 
    io.out <= out @[dpath_alu.scala 91:10] 
    node T_213 = and(io.dw, UInt<1>("h01")) @[dpath_alu.scala 94:17] 
    node T_214 = eq(UInt<1>("h00"), T_213) @[dpath_alu.scala 94:17] 
    when T_214 : @[dpath_alu.scala 94:28] 
      node T_215 = bits(out, 31, 31) @[dpath_alu.scala 94:56] 
      node T_216 = bits(T_215, 0, 0) @[Bitwise.scala 33:15] 
      node T_219 = mux(T_216, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
      node T_220 = bits(out, 31, 0) @[dpath_alu.scala 94:66] 
      node T_221 = cat(T_219, T_220) @[Cat.scala 20:58] 
      io.out <= T_221 @[dpath_alu.scala 94:37] 
      skip @[dpath_alu.scala 94:28] 
    
  module MulDiv : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}}, flip kill : UInt<1>, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, tag : UInt<5>}}}
    
    io is invalid
    reg state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg req : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}, clk
    reg count : UInt<7>, clk
    reg neg_out : UInt<1>, clk
    reg isMul : UInt<1>, clk
    reg isHi : UInt<1>, clk
    reg divisor : UInt<65>, clk
    reg remainder : UInt<130>, clk
    node T_62 = and(io.req.bits.fn, UInt<4>("h04")) @[decode.scala 13:65] 
    node T_64 = eq(T_62, UInt<4>("h00")) @[decode.scala 13:121] 
    node T_66 = and(io.req.bits.fn, UInt<4>("h08")) @[decode.scala 13:65] 
    node T_68 = eq(T_66, UInt<4>("h08")) @[decode.scala 13:121] 
    node T_70 = or(UInt<1>("h00"), T_64) @[decode.scala 14:30] 
    node T_71 = or(T_70, T_68) @[decode.scala 14:30] 
    node T_73 = and(io.req.bits.fn, UInt<4>("h05")) @[decode.scala 13:65] 
    node T_75 = eq(T_73, UInt<4>("h01")) @[decode.scala 13:121] 
    node T_77 = and(io.req.bits.fn, UInt<4>("h02")) @[decode.scala 13:65] 
    node T_79 = eq(T_77, UInt<4>("h02")) @[decode.scala 13:121] 
    node T_81 = or(UInt<1>("h00"), T_75) @[decode.scala 14:30] 
    node T_82 = or(T_81, T_79) @[decode.scala 14:30] 
    node T_83 = or(T_82, T_68) @[decode.scala 14:30] 
    node T_85 = and(io.req.bits.fn, UInt<4>("h09")) @[decode.scala 13:65] 
    node T_87 = eq(T_85, UInt<4>("h00")) @[decode.scala 13:121] 
    node T_89 = and(io.req.bits.fn, UInt<4>("h03")) @[decode.scala 13:65] 
    node T_91 = eq(T_89, UInt<4>("h00")) @[decode.scala 13:121] 
    node T_93 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30] 
    node T_94 = or(T_93, T_64) @[decode.scala 14:30] 
    node T_95 = or(T_94, T_91) @[decode.scala 14:30] 
    node T_97 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30] 
    node T_98 = or(T_97, T_64) @[decode.scala 14:30] 
    node cmdMul = bits(T_71, 0, 0) @[multiplier.scala 59:58] 
    node cmdHi = bits(T_83, 0, 0) @[multiplier.scala 59:58] 
    node lhsSigned = bits(T_95, 0, 0) @[multiplier.scala 59:58] 
    node rhsSigned = bits(T_98, 0, 0) @[multiplier.scala 59:58] 
    node T_102 = and(io.req.bits.dw, UInt<1>("h01")) @[multiplier.scala 62:62] 
    node T_103 = eq(UInt<1>("h00"), T_102) @[multiplier.scala 62:62] 
    node T_104 = and(UInt<1>("h01"), T_103) @[multiplier.scala 62:52] 
    node T_105 = bits(io.req.bits.in1, 31, 31) @[multiplier.scala 65:38] 
    node T_106 = bits(io.req.bits.in1, 63, 63) @[multiplier.scala 65:48] 
    node T_107 = mux(T_104, T_105, T_106) @[multiplier.scala 65:29] 
    node lhs_sign = and(lhsSigned, T_107) @[multiplier.scala 65:23] 
    node T_108 = bits(lhs_sign, 0, 0) @[Bitwise.scala 33:15] 
    node T_111 = mux(T_108, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_112 = bits(io.req.bits.in1, 63, 32) @[multiplier.scala 66:43] 
    node T_113 = mux(T_104, T_111, T_112) @[multiplier.scala 66:17] 
    node T_114 = bits(io.req.bits.in1, 31, 0) @[multiplier.scala 67:15] 
    node lhs_in = cat(T_113, T_114) @[Cat.scala 20:58] 
    node T_118 = and(io.req.bits.dw, UInt<1>("h01")) @[multiplier.scala 62:62] 
    node T_119 = eq(UInt<1>("h00"), T_118) @[multiplier.scala 62:62] 
    node T_120 = and(UInt<1>("h01"), T_119) @[multiplier.scala 62:52] 
    node T_121 = bits(io.req.bits.in2, 31, 31) @[multiplier.scala 65:38] 
    node T_122 = bits(io.req.bits.in2, 63, 63) @[multiplier.scala 65:48] 
    node T_123 = mux(T_120, T_121, T_122) @[multiplier.scala 65:29] 
    node rhs_sign = and(rhsSigned, T_123) @[multiplier.scala 65:23] 
    node T_124 = bits(rhs_sign, 0, 0) @[Bitwise.scala 33:15] 
    node T_127 = mux(T_124, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_128 = bits(io.req.bits.in2, 63, 32) @[multiplier.scala 66:43] 
    node T_129 = mux(T_120, T_127, T_128) @[multiplier.scala 66:17] 
    node T_130 = bits(io.req.bits.in2, 31, 0) @[multiplier.scala 67:15] 
    node rhs_in = cat(T_129, T_130) @[Cat.scala 20:58] 
    node T_131 = bits(remainder, 128, 64) @[multiplier.scala 72:29] 
    node T_132 = bits(divisor, 64, 0) @[multiplier.scala 72:46] 
    node T_133 = sub(T_131, T_132) @[multiplier.scala 72:37] 
    node subtractor = tail(T_133, 1) @[multiplier.scala 72:37] 
    node less = bits(subtractor, 64, 64) @[multiplier.scala 73:24] 
    node T_134 = bits(remainder, 63, 0) @[multiplier.scala 74:37] 
    node T_136 = sub(UInt<1>("h00"), T_134) @[multiplier.scala 74:27] 
    node negated_remainder = tail(T_136, 1) @[multiplier.scala 74:27] 
    node T_137 = eq(state, UInt<3>("h01")) @[multiplier.scala 76:15] 
    when T_137 : @[multiplier.scala 76:33] 
      node T_138 = bits(remainder, 63, 63) @[multiplier.scala 77:20] 
      node T_139 = or(T_138, isMul) @[multiplier.scala 77:26] 
      when T_139 : @[multiplier.scala 77:36] 
        remainder <= negated_remainder @[multiplier.scala 78:17] 
        skip @[multiplier.scala 77:36] 
      node T_140 = bits(divisor, 63, 63) @[multiplier.scala 80:18] 
      node T_141 = or(T_140, isMul) @[multiplier.scala 80:24] 
      when T_141 : @[multiplier.scala 80:34] 
        divisor <= subtractor @[multiplier.scala 81:15] 
        skip @[multiplier.scala 80:34] 
      state <= UInt<3>("h02") @[multiplier.scala 83:11] 
      skip @[multiplier.scala 76:33] 
    node T_142 = eq(state, UInt<3>("h04")) @[multiplier.scala 86:15] 
    when T_142 : @[multiplier.scala 86:33] 
      remainder <= negated_remainder @[multiplier.scala 87:15] 
      state <= UInt<3>("h05") @[multiplier.scala 88:11] 
      skip @[multiplier.scala 86:33] 
    node T_143 = eq(state, UInt<3>("h03")) @[multiplier.scala 90:15] 
    when T_143 : @[multiplier.scala 90:31] 
      node T_144 = bits(remainder, 128, 65) @[multiplier.scala 91:27] 
      remainder <= T_144 @[multiplier.scala 91:15] 
      node T_145 = mux(neg_out, UInt<3>("h04"), UInt<3>("h05")) @[multiplier.scala 92:17] 
      state <= T_145 @[multiplier.scala 92:11] 
      skip @[multiplier.scala 90:31] 
    node T_146 = eq(state, UInt<3>("h02")) @[multiplier.scala 94:15] 
    node T_147 = and(T_146, isMul) @[multiplier.scala 94:26] 
    when T_147 : @[multiplier.scala 94:36] 
      node T_148 = bits(remainder, 129, 65) @[multiplier.scala 95:31] 
      node T_149 = bits(remainder, 63, 0) @[multiplier.scala 95:55] 
      node T_150 = cat(T_148, T_149) @[Cat.scala 20:58] 
      node T_151 = bits(T_150, 63, 0) @[multiplier.scala 96:24] 
      node T_152 = bits(T_150, 128, 64) @[multiplier.scala 97:23] 
      node T_153 = asSInt(T_152) @[multiplier.scala 97:37] 
      node T_154 = asSInt(divisor) @[multiplier.scala 98:26] 
      node T_155 = bits(T_151, 7, 0) @[multiplier.scala 99:22] 
      node T_156 = mul(T_154, T_155) @[multiplier.scala 99:35] 
      node T_157 = add(T_156, T_153) @[multiplier.scala 99:44] 
      node T_158 = tail(T_157, 1) @[multiplier.scala 99:44] 
      node T_159 = asSInt(T_158) @[multiplier.scala 99:44] 
      node T_160 = bits(T_151, 63, 8) @[multiplier.scala 100:38] 
      node T_161 = asUInt(T_159) @[Cat.scala 20:58] 
      node T_162 = cat(T_161, T_160) @[Cat.scala 20:58] 
      node T_165 = mul(count, UInt<4>("h08")) @[multiplier.scala 102:56] 
      node T_166 = bits(T_165, 5, 0) @[multiplier.scala 102:65] 
      node T_167 = dshr(asSInt(UInt<65>("h010000000000000000")), T_166) @[multiplier.scala 102:46] 
      node T_168 = bits(T_167, 63, 0) @[multiplier.scala 102:84] 
      node T_171 = neq(count, UInt<3>("h07")) @[multiplier.scala 103:40] 
      node T_172 = and(UInt<1>("h01"), T_171) @[multiplier.scala 103:31] 
      node T_174 = neq(count, UInt<1>("h00")) @[multiplier.scala 103:67] 
      node T_175 = and(T_172, T_174) @[multiplier.scala 103:58] 
      node T_177 = eq(isHi, UInt<1>("h00")) @[multiplier.scala 104:7] 
      node T_178 = and(T_175, T_177) @[multiplier.scala 103:73] 
      node T_179 = not(T_168) @[multiplier.scala 104:26] 
      node T_180 = and(T_151, T_179) @[multiplier.scala 104:24] 
      node T_182 = eq(T_180, UInt<1>("h00")) @[multiplier.scala 104:37] 
      node T_183 = and(T_178, T_182) @[multiplier.scala 104:13] 
      node T_186 = mul(count, UInt<4>("h08")) @[multiplier.scala 105:44] 
      node T_187 = sub(UInt<7>("h040"), T_186) @[multiplier.scala 105:36] 
      node T_188 = tail(T_187, 1) @[multiplier.scala 105:36] 
      node T_189 = bits(T_188, 5, 0) @[multiplier.scala 105:53] 
      node T_190 = dshr(T_150, T_189) @[multiplier.scala 105:27] 
      node T_191 = bits(T_162, 128, 64) @[multiplier.scala 106:37] 
      node T_192 = mux(T_183, T_190, T_162) @[multiplier.scala 106:55] 
      node T_193 = bits(T_192, 63, 0) @[multiplier.scala 106:82] 
      node T_194 = cat(T_191, T_193) @[Cat.scala 20:58] 
      node T_195 = shr(T_194, 64) @[multiplier.scala 107:34] 
      node T_197 = bits(T_194, 63, 0) @[multiplier.scala 107:64] 
      node T_198 = cat(T_195, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_199 = cat(T_198, T_197) @[Cat.scala 20:58] 
      remainder <= T_199 @[multiplier.scala 107:15] 
      node T_201 = add(count, UInt<1>("h01")) @[multiplier.scala 109:20] 
      node T_202 = tail(T_201, 1) @[multiplier.scala 109:20] 
      count <= T_202 @[multiplier.scala 109:11] 
      node T_204 = eq(count, UInt<3>("h07")) @[multiplier.scala 110:25] 
      node T_205 = or(T_183, T_204) @[multiplier.scala 110:16] 
      when T_205 : @[multiplier.scala 110:44] 
        node T_206 = mux(isHi, UInt<3>("h03"), UInt<3>("h05")) @[multiplier.scala 111:19] 
        state <= T_206 @[multiplier.scala 111:13] 
        skip @[multiplier.scala 110:44] 
      skip @[multiplier.scala 94:36] 
    node T_207 = eq(state, UInt<3>("h02")) @[multiplier.scala 114:15] 
    node T_209 = eq(isMul, UInt<1>("h00")) @[multiplier.scala 114:29] 
    node T_210 = and(T_207, T_209) @[multiplier.scala 114:26] 
    when T_210 : @[multiplier.scala 114:37] 
      node T_212 = eq(count, UInt<7>("h040")) @[multiplier.scala 115:17] 
      when T_212 : @[multiplier.scala 115:24] 
        node T_213 = mux(neg_out, UInt<3>("h04"), UInt<3>("h05")) @[multiplier.scala 116:41] 
        node T_214 = mux(isHi, UInt<3>("h03"), T_213) @[multiplier.scala 116:19] 
        state <= T_214 @[multiplier.scala 116:13] 
        skip @[multiplier.scala 115:24] 
      node T_216 = add(count, UInt<1>("h01")) @[multiplier.scala 118:20] 
      node T_217 = tail(T_216, 1) @[multiplier.scala 118:20] 
      count <= T_217 @[multiplier.scala 118:11] 
      node T_218 = bits(remainder, 127, 64) @[multiplier.scala 120:41] 
      node T_219 = bits(subtractor, 63, 0) @[multiplier.scala 120:62] 
      node T_220 = mux(less, T_218, T_219) @[multiplier.scala 120:25] 
      node T_221 = bits(remainder, 63, 0) @[multiplier.scala 120:81] 
      node T_223 = eq(less, UInt<1>("h00")) @[multiplier.scala 120:90] 
      node T_224 = cat(T_220, T_221) @[Cat.scala 20:58] 
      node T_225 = cat(T_224, T_223) @[Cat.scala 20:58] 
      remainder <= T_225 @[multiplier.scala 120:15] 
      node T_226 = bits(divisor, 63, 0) @[multiplier.scala 122:34] 
      node T_227 = bits(T_226, 63, 32) @[CircuitMath.scala 26:17] 
      node T_228 = bits(T_226, 31, 0) @[CircuitMath.scala 27:17] 
      node T_230 = neq(T_227, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_231 = bits(T_227, 31, 16) @[CircuitMath.scala 26:17] 
      node T_232 = bits(T_227, 15, 0) @[CircuitMath.scala 27:17] 
      node T_234 = neq(T_231, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_235 = bits(T_231, 15, 8) @[CircuitMath.scala 26:17] 
      node T_236 = bits(T_231, 7, 0) @[CircuitMath.scala 27:17] 
      node T_238 = neq(T_235, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_239 = bits(T_235, 7, 4) @[CircuitMath.scala 26:17] 
      node T_240 = bits(T_235, 3, 0) @[CircuitMath.scala 27:17] 
      node T_242 = neq(T_239, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_243 = bits(T_239, 3, 3) @[CircuitMath.scala 23:12] 
      node T_245 = bits(T_239, 2, 2) @[CircuitMath.scala 23:12] 
      node T_247 = bits(T_239, 1, 1) @[CircuitMath.scala 21:8] 
      node T_248 = shl(T_247, 0) @[CircuitMath.scala 23:10] 
      node T_249 = mux(T_245, UInt<2>("h02"), T_248) @[CircuitMath.scala 23:10] 
      node T_250 = mux(T_243, UInt<2>("h03"), T_249) @[CircuitMath.scala 23:10] 
      node T_251 = bits(T_240, 3, 3) @[CircuitMath.scala 23:12] 
      node T_253 = bits(T_240, 2, 2) @[CircuitMath.scala 23:12] 
      node T_255 = bits(T_240, 1, 1) @[CircuitMath.scala 21:8] 
      node T_256 = shl(T_255, 0) @[CircuitMath.scala 23:10] 
      node T_257 = mux(T_253, UInt<2>("h02"), T_256) @[CircuitMath.scala 23:10] 
      node T_258 = mux(T_251, UInt<2>("h03"), T_257) @[CircuitMath.scala 23:10] 
      node T_259 = mux(T_242, T_250, T_258) @[CircuitMath.scala 29:21] 
      node T_260 = cat(T_242, T_259) @[Cat.scala 20:58] 
      node T_261 = bits(T_236, 7, 4) @[CircuitMath.scala 26:17] 
      node T_262 = bits(T_236, 3, 0) @[CircuitMath.scala 27:17] 
      node T_264 = neq(T_261, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_265 = bits(T_261, 3, 3) @[CircuitMath.scala 23:12] 
      node T_267 = bits(T_261, 2, 2) @[CircuitMath.scala 23:12] 
      node T_269 = bits(T_261, 1, 1) @[CircuitMath.scala 21:8] 
      node T_270 = shl(T_269, 0) @[CircuitMath.scala 23:10] 
      node T_271 = mux(T_267, UInt<2>("h02"), T_270) @[CircuitMath.scala 23:10] 
      node T_272 = mux(T_265, UInt<2>("h03"), T_271) @[CircuitMath.scala 23:10] 
      node T_273 = bits(T_262, 3, 3) @[CircuitMath.scala 23:12] 
      node T_275 = bits(T_262, 2, 2) @[CircuitMath.scala 23:12] 
      node T_277 = bits(T_262, 1, 1) @[CircuitMath.scala 21:8] 
      node T_278 = shl(T_277, 0) @[CircuitMath.scala 23:10] 
      node T_279 = mux(T_275, UInt<2>("h02"), T_278) @[CircuitMath.scala 23:10] 
      node T_280 = mux(T_273, UInt<2>("h03"), T_279) @[CircuitMath.scala 23:10] 
      node T_281 = mux(T_264, T_272, T_280) @[CircuitMath.scala 29:21] 
      node T_282 = cat(T_264, T_281) @[Cat.scala 20:58] 
      node T_283 = mux(T_238, T_260, T_282) @[CircuitMath.scala 29:21] 
      node T_284 = cat(T_238, T_283) @[Cat.scala 20:58] 
      node T_285 = bits(T_232, 15, 8) @[CircuitMath.scala 26:17] 
      node T_286 = bits(T_232, 7, 0) @[CircuitMath.scala 27:17] 
      node T_288 = neq(T_285, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_289 = bits(T_285, 7, 4) @[CircuitMath.scala 26:17] 
      node T_290 = bits(T_285, 3, 0) @[CircuitMath.scala 27:17] 
      node T_292 = neq(T_289, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_293 = bits(T_289, 3, 3) @[CircuitMath.scala 23:12] 
      node T_295 = bits(T_289, 2, 2) @[CircuitMath.scala 23:12] 
      node T_297 = bits(T_289, 1, 1) @[CircuitMath.scala 21:8] 
      node T_298 = shl(T_297, 0) @[CircuitMath.scala 23:10] 
      node T_299 = mux(T_295, UInt<2>("h02"), T_298) @[CircuitMath.scala 23:10] 
      node T_300 = mux(T_293, UInt<2>("h03"), T_299) @[CircuitMath.scala 23:10] 
      node T_301 = bits(T_290, 3, 3) @[CircuitMath.scala 23:12] 
      node T_303 = bits(T_290, 2, 2) @[CircuitMath.scala 23:12] 
      node T_305 = bits(T_290, 1, 1) @[CircuitMath.scala 21:8] 
      node T_306 = shl(T_305, 0) @[CircuitMath.scala 23:10] 
      node T_307 = mux(T_303, UInt<2>("h02"), T_306) @[CircuitMath.scala 23:10] 
      node T_308 = mux(T_301, UInt<2>("h03"), T_307) @[CircuitMath.scala 23:10] 
      node T_309 = mux(T_292, T_300, T_308) @[CircuitMath.scala 29:21] 
      node T_310 = cat(T_292, T_309) @[Cat.scala 20:58] 
      node T_311 = bits(T_286, 7, 4) @[CircuitMath.scala 26:17] 
      node T_312 = bits(T_286, 3, 0) @[CircuitMath.scala 27:17] 
      node T_314 = neq(T_311, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_315 = bits(T_311, 3, 3) @[CircuitMath.scala 23:12] 
      node T_317 = bits(T_311, 2, 2) @[CircuitMath.scala 23:12] 
      node T_319 = bits(T_311, 1, 1) @[CircuitMath.scala 21:8] 
      node T_320 = shl(T_319, 0) @[CircuitMath.scala 23:10] 
      node T_321 = mux(T_317, UInt<2>("h02"), T_320) @[CircuitMath.scala 23:10] 
      node T_322 = mux(T_315, UInt<2>("h03"), T_321) @[CircuitMath.scala 23:10] 
      node T_323 = bits(T_312, 3, 3) @[CircuitMath.scala 23:12] 
      node T_325 = bits(T_312, 2, 2) @[CircuitMath.scala 23:12] 
      node T_327 = bits(T_312, 1, 1) @[CircuitMath.scala 21:8] 
      node T_328 = shl(T_327, 0) @[CircuitMath.scala 23:10] 
      node T_329 = mux(T_325, UInt<2>("h02"), T_328) @[CircuitMath.scala 23:10] 
      node T_330 = mux(T_323, UInt<2>("h03"), T_329) @[CircuitMath.scala 23:10] 
      node T_331 = mux(T_314, T_322, T_330) @[CircuitMath.scala 29:21] 
      node T_332 = cat(T_314, T_331) @[Cat.scala 20:58] 
      node T_333 = mux(T_288, T_310, T_332) @[CircuitMath.scala 29:21] 
      node T_334 = cat(T_288, T_333) @[Cat.scala 20:58] 
      node T_335 = mux(T_234, T_284, T_334) @[CircuitMath.scala 29:21] 
      node T_336 = cat(T_234, T_335) @[Cat.scala 20:58] 
      node T_337 = bits(T_228, 31, 16) @[CircuitMath.scala 26:17] 
      node T_338 = bits(T_228, 15, 0) @[CircuitMath.scala 27:17] 
      node T_340 = neq(T_337, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_341 = bits(T_337, 15, 8) @[CircuitMath.scala 26:17] 
      node T_342 = bits(T_337, 7, 0) @[CircuitMath.scala 27:17] 
      node T_344 = neq(T_341, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_345 = bits(T_341, 7, 4) @[CircuitMath.scala 26:17] 
      node T_346 = bits(T_341, 3, 0) @[CircuitMath.scala 27:17] 
      node T_348 = neq(T_345, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_349 = bits(T_345, 3, 3) @[CircuitMath.scala 23:12] 
      node T_351 = bits(T_345, 2, 2) @[CircuitMath.scala 23:12] 
      node T_353 = bits(T_345, 1, 1) @[CircuitMath.scala 21:8] 
      node T_354 = shl(T_353, 0) @[CircuitMath.scala 23:10] 
      node T_355 = mux(T_351, UInt<2>("h02"), T_354) @[CircuitMath.scala 23:10] 
      node T_356 = mux(T_349, UInt<2>("h03"), T_355) @[CircuitMath.scala 23:10] 
      node T_357 = bits(T_346, 3, 3) @[CircuitMath.scala 23:12] 
      node T_359 = bits(T_346, 2, 2) @[CircuitMath.scala 23:12] 
      node T_361 = bits(T_346, 1, 1) @[CircuitMath.scala 21:8] 
      node T_362 = shl(T_361, 0) @[CircuitMath.scala 23:10] 
      node T_363 = mux(T_359, UInt<2>("h02"), T_362) @[CircuitMath.scala 23:10] 
      node T_364 = mux(T_357, UInt<2>("h03"), T_363) @[CircuitMath.scala 23:10] 
      node T_365 = mux(T_348, T_356, T_364) @[CircuitMath.scala 29:21] 
      node T_366 = cat(T_348, T_365) @[Cat.scala 20:58] 
      node T_367 = bits(T_342, 7, 4) @[CircuitMath.scala 26:17] 
      node T_368 = bits(T_342, 3, 0) @[CircuitMath.scala 27:17] 
      node T_370 = neq(T_367, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_371 = bits(T_367, 3, 3) @[CircuitMath.scala 23:12] 
      node T_373 = bits(T_367, 2, 2) @[CircuitMath.scala 23:12] 
      node T_375 = bits(T_367, 1, 1) @[CircuitMath.scala 21:8] 
      node T_376 = shl(T_375, 0) @[CircuitMath.scala 23:10] 
      node T_377 = mux(T_373, UInt<2>("h02"), T_376) @[CircuitMath.scala 23:10] 
      node T_378 = mux(T_371, UInt<2>("h03"), T_377) @[CircuitMath.scala 23:10] 
      node T_379 = bits(T_368, 3, 3) @[CircuitMath.scala 23:12] 
      node T_381 = bits(T_368, 2, 2) @[CircuitMath.scala 23:12] 
      node T_383 = bits(T_368, 1, 1) @[CircuitMath.scala 21:8] 
      node T_384 = shl(T_383, 0) @[CircuitMath.scala 23:10] 
      node T_385 = mux(T_381, UInt<2>("h02"), T_384) @[CircuitMath.scala 23:10] 
      node T_386 = mux(T_379, UInt<2>("h03"), T_385) @[CircuitMath.scala 23:10] 
      node T_387 = mux(T_370, T_378, T_386) @[CircuitMath.scala 29:21] 
      node T_388 = cat(T_370, T_387) @[Cat.scala 20:58] 
      node T_389 = mux(T_344, T_366, T_388) @[CircuitMath.scala 29:21] 
      node T_390 = cat(T_344, T_389) @[Cat.scala 20:58] 
      node T_391 = bits(T_338, 15, 8) @[CircuitMath.scala 26:17] 
      node T_392 = bits(T_338, 7, 0) @[CircuitMath.scala 27:17] 
      node T_394 = neq(T_391, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_395 = bits(T_391, 7, 4) @[CircuitMath.scala 26:17] 
      node T_396 = bits(T_391, 3, 0) @[CircuitMath.scala 27:17] 
      node T_398 = neq(T_395, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_399 = bits(T_395, 3, 3) @[CircuitMath.scala 23:12] 
      node T_401 = bits(T_395, 2, 2) @[CircuitMath.scala 23:12] 
      node T_403 = bits(T_395, 1, 1) @[CircuitMath.scala 21:8] 
      node T_404 = shl(T_403, 0) @[CircuitMath.scala 23:10] 
      node T_405 = mux(T_401, UInt<2>("h02"), T_404) @[CircuitMath.scala 23:10] 
      node T_406 = mux(T_399, UInt<2>("h03"), T_405) @[CircuitMath.scala 23:10] 
      node T_407 = bits(T_396, 3, 3) @[CircuitMath.scala 23:12] 
      node T_409 = bits(T_396, 2, 2) @[CircuitMath.scala 23:12] 
      node T_411 = bits(T_396, 1, 1) @[CircuitMath.scala 21:8] 
      node T_412 = shl(T_411, 0) @[CircuitMath.scala 23:10] 
      node T_413 = mux(T_409, UInt<2>("h02"), T_412) @[CircuitMath.scala 23:10] 
      node T_414 = mux(T_407, UInt<2>("h03"), T_413) @[CircuitMath.scala 23:10] 
      node T_415 = mux(T_398, T_406, T_414) @[CircuitMath.scala 29:21] 
      node T_416 = cat(T_398, T_415) @[Cat.scala 20:58] 
      node T_417 = bits(T_392, 7, 4) @[CircuitMath.scala 26:17] 
      node T_418 = bits(T_392, 3, 0) @[CircuitMath.scala 27:17] 
      node T_420 = neq(T_417, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_421 = bits(T_417, 3, 3) @[CircuitMath.scala 23:12] 
      node T_423 = bits(T_417, 2, 2) @[CircuitMath.scala 23:12] 
      node T_425 = bits(T_417, 1, 1) @[CircuitMath.scala 21:8] 
      node T_426 = shl(T_425, 0) @[CircuitMath.scala 23:10] 
      node T_427 = mux(T_423, UInt<2>("h02"), T_426) @[CircuitMath.scala 23:10] 
      node T_428 = mux(T_421, UInt<2>("h03"), T_427) @[CircuitMath.scala 23:10] 
      node T_429 = bits(T_418, 3, 3) @[CircuitMath.scala 23:12] 
      node T_431 = bits(T_418, 2, 2) @[CircuitMath.scala 23:12] 
      node T_433 = bits(T_418, 1, 1) @[CircuitMath.scala 21:8] 
      node T_434 = shl(T_433, 0) @[CircuitMath.scala 23:10] 
      node T_435 = mux(T_431, UInt<2>("h02"), T_434) @[CircuitMath.scala 23:10] 
      node T_436 = mux(T_429, UInt<2>("h03"), T_435) @[CircuitMath.scala 23:10] 
      node T_437 = mux(T_420, T_428, T_436) @[CircuitMath.scala 29:21] 
      node T_438 = cat(T_420, T_437) @[Cat.scala 20:58] 
      node T_439 = mux(T_394, T_416, T_438) @[CircuitMath.scala 29:21] 
      node T_440 = cat(T_394, T_439) @[Cat.scala 20:58] 
      node T_441 = mux(T_340, T_390, T_440) @[CircuitMath.scala 29:21] 
      node T_442 = cat(T_340, T_441) @[Cat.scala 20:58] 
      node T_443 = mux(T_230, T_336, T_442) @[CircuitMath.scala 29:21] 
      node T_444 = cat(T_230, T_443) @[Cat.scala 20:58] 
      node T_445 = bits(remainder, 63, 0) @[multiplier.scala 123:37] 
      node T_446 = bits(T_445, 63, 32) @[CircuitMath.scala 26:17] 
      node T_447 = bits(T_445, 31, 0) @[CircuitMath.scala 27:17] 
      node T_449 = neq(T_446, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_450 = bits(T_446, 31, 16) @[CircuitMath.scala 26:17] 
      node T_451 = bits(T_446, 15, 0) @[CircuitMath.scala 27:17] 
      node T_453 = neq(T_450, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_454 = bits(T_450, 15, 8) @[CircuitMath.scala 26:17] 
      node T_455 = bits(T_450, 7, 0) @[CircuitMath.scala 27:17] 
      node T_457 = neq(T_454, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_458 = bits(T_454, 7, 4) @[CircuitMath.scala 26:17] 
      node T_459 = bits(T_454, 3, 0) @[CircuitMath.scala 27:17] 
      node T_461 = neq(T_458, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_462 = bits(T_458, 3, 3) @[CircuitMath.scala 23:12] 
      node T_464 = bits(T_458, 2, 2) @[CircuitMath.scala 23:12] 
      node T_466 = bits(T_458, 1, 1) @[CircuitMath.scala 21:8] 
      node T_467 = shl(T_466, 0) @[CircuitMath.scala 23:10] 
      node T_468 = mux(T_464, UInt<2>("h02"), T_467) @[CircuitMath.scala 23:10] 
      node T_469 = mux(T_462, UInt<2>("h03"), T_468) @[CircuitMath.scala 23:10] 
      node T_470 = bits(T_459, 3, 3) @[CircuitMath.scala 23:12] 
      node T_472 = bits(T_459, 2, 2) @[CircuitMath.scala 23:12] 
      node T_474 = bits(T_459, 1, 1) @[CircuitMath.scala 21:8] 
      node T_475 = shl(T_474, 0) @[CircuitMath.scala 23:10] 
      node T_476 = mux(T_472, UInt<2>("h02"), T_475) @[CircuitMath.scala 23:10] 
      node T_477 = mux(T_470, UInt<2>("h03"), T_476) @[CircuitMath.scala 23:10] 
      node T_478 = mux(T_461, T_469, T_477) @[CircuitMath.scala 29:21] 
      node T_479 = cat(T_461, T_478) @[Cat.scala 20:58] 
      node T_480 = bits(T_455, 7, 4) @[CircuitMath.scala 26:17] 
      node T_481 = bits(T_455, 3, 0) @[CircuitMath.scala 27:17] 
      node T_483 = neq(T_480, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_484 = bits(T_480, 3, 3) @[CircuitMath.scala 23:12] 
      node T_486 = bits(T_480, 2, 2) @[CircuitMath.scala 23:12] 
      node T_488 = bits(T_480, 1, 1) @[CircuitMath.scala 21:8] 
      node T_489 = shl(T_488, 0) @[CircuitMath.scala 23:10] 
      node T_490 = mux(T_486, UInt<2>("h02"), T_489) @[CircuitMath.scala 23:10] 
      node T_491 = mux(T_484, UInt<2>("h03"), T_490) @[CircuitMath.scala 23:10] 
      node T_492 = bits(T_481, 3, 3) @[CircuitMath.scala 23:12] 
      node T_494 = bits(T_481, 2, 2) @[CircuitMath.scala 23:12] 
      node T_496 = bits(T_481, 1, 1) @[CircuitMath.scala 21:8] 
      node T_497 = shl(T_496, 0) @[CircuitMath.scala 23:10] 
      node T_498 = mux(T_494, UInt<2>("h02"), T_497) @[CircuitMath.scala 23:10] 
      node T_499 = mux(T_492, UInt<2>("h03"), T_498) @[CircuitMath.scala 23:10] 
      node T_500 = mux(T_483, T_491, T_499) @[CircuitMath.scala 29:21] 
      node T_501 = cat(T_483, T_500) @[Cat.scala 20:58] 
      node T_502 = mux(T_457, T_479, T_501) @[CircuitMath.scala 29:21] 
      node T_503 = cat(T_457, T_502) @[Cat.scala 20:58] 
      node T_504 = bits(T_451, 15, 8) @[CircuitMath.scala 26:17] 
      node T_505 = bits(T_451, 7, 0) @[CircuitMath.scala 27:17] 
      node T_507 = neq(T_504, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_508 = bits(T_504, 7, 4) @[CircuitMath.scala 26:17] 
      node T_509 = bits(T_504, 3, 0) @[CircuitMath.scala 27:17] 
      node T_511 = neq(T_508, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_512 = bits(T_508, 3, 3) @[CircuitMath.scala 23:12] 
      node T_514 = bits(T_508, 2, 2) @[CircuitMath.scala 23:12] 
      node T_516 = bits(T_508, 1, 1) @[CircuitMath.scala 21:8] 
      node T_517 = shl(T_516, 0) @[CircuitMath.scala 23:10] 
      node T_518 = mux(T_514, UInt<2>("h02"), T_517) @[CircuitMath.scala 23:10] 
      node T_519 = mux(T_512, UInt<2>("h03"), T_518) @[CircuitMath.scala 23:10] 
      node T_520 = bits(T_509, 3, 3) @[CircuitMath.scala 23:12] 
      node T_522 = bits(T_509, 2, 2) @[CircuitMath.scala 23:12] 
      node T_524 = bits(T_509, 1, 1) @[CircuitMath.scala 21:8] 
      node T_525 = shl(T_524, 0) @[CircuitMath.scala 23:10] 
      node T_526 = mux(T_522, UInt<2>("h02"), T_525) @[CircuitMath.scala 23:10] 
      node T_527 = mux(T_520, UInt<2>("h03"), T_526) @[CircuitMath.scala 23:10] 
      node T_528 = mux(T_511, T_519, T_527) @[CircuitMath.scala 29:21] 
      node T_529 = cat(T_511, T_528) @[Cat.scala 20:58] 
      node T_530 = bits(T_505, 7, 4) @[CircuitMath.scala 26:17] 
      node T_531 = bits(T_505, 3, 0) @[CircuitMath.scala 27:17] 
      node T_533 = neq(T_530, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_534 = bits(T_530, 3, 3) @[CircuitMath.scala 23:12] 
      node T_536 = bits(T_530, 2, 2) @[CircuitMath.scala 23:12] 
      node T_538 = bits(T_530, 1, 1) @[CircuitMath.scala 21:8] 
      node T_539 = shl(T_538, 0) @[CircuitMath.scala 23:10] 
      node T_540 = mux(T_536, UInt<2>("h02"), T_539) @[CircuitMath.scala 23:10] 
      node T_541 = mux(T_534, UInt<2>("h03"), T_540) @[CircuitMath.scala 23:10] 
      node T_542 = bits(T_531, 3, 3) @[CircuitMath.scala 23:12] 
      node T_544 = bits(T_531, 2, 2) @[CircuitMath.scala 23:12] 
      node T_546 = bits(T_531, 1, 1) @[CircuitMath.scala 21:8] 
      node T_547 = shl(T_546, 0) @[CircuitMath.scala 23:10] 
      node T_548 = mux(T_544, UInt<2>("h02"), T_547) @[CircuitMath.scala 23:10] 
      node T_549 = mux(T_542, UInt<2>("h03"), T_548) @[CircuitMath.scala 23:10] 
      node T_550 = mux(T_533, T_541, T_549) @[CircuitMath.scala 29:21] 
      node T_551 = cat(T_533, T_550) @[Cat.scala 20:58] 
      node T_552 = mux(T_507, T_529, T_551) @[CircuitMath.scala 29:21] 
      node T_553 = cat(T_507, T_552) @[Cat.scala 20:58] 
      node T_554 = mux(T_453, T_503, T_553) @[CircuitMath.scala 29:21] 
      node T_555 = cat(T_453, T_554) @[Cat.scala 20:58] 
      node T_556 = bits(T_447, 31, 16) @[CircuitMath.scala 26:17] 
      node T_557 = bits(T_447, 15, 0) @[CircuitMath.scala 27:17] 
      node T_559 = neq(T_556, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_560 = bits(T_556, 15, 8) @[CircuitMath.scala 26:17] 
      node T_561 = bits(T_556, 7, 0) @[CircuitMath.scala 27:17] 
      node T_563 = neq(T_560, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_564 = bits(T_560, 7, 4) @[CircuitMath.scala 26:17] 
      node T_565 = bits(T_560, 3, 0) @[CircuitMath.scala 27:17] 
      node T_567 = neq(T_564, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_568 = bits(T_564, 3, 3) @[CircuitMath.scala 23:12] 
      node T_570 = bits(T_564, 2, 2) @[CircuitMath.scala 23:12] 
      node T_572 = bits(T_564, 1, 1) @[CircuitMath.scala 21:8] 
      node T_573 = shl(T_572, 0) @[CircuitMath.scala 23:10] 
      node T_574 = mux(T_570, UInt<2>("h02"), T_573) @[CircuitMath.scala 23:10] 
      node T_575 = mux(T_568, UInt<2>("h03"), T_574) @[CircuitMath.scala 23:10] 
      node T_576 = bits(T_565, 3, 3) @[CircuitMath.scala 23:12] 
      node T_578 = bits(T_565, 2, 2) @[CircuitMath.scala 23:12] 
      node T_580 = bits(T_565, 1, 1) @[CircuitMath.scala 21:8] 
      node T_581 = shl(T_580, 0) @[CircuitMath.scala 23:10] 
      node T_582 = mux(T_578, UInt<2>("h02"), T_581) @[CircuitMath.scala 23:10] 
      node T_583 = mux(T_576, UInt<2>("h03"), T_582) @[CircuitMath.scala 23:10] 
      node T_584 = mux(T_567, T_575, T_583) @[CircuitMath.scala 29:21] 
      node T_585 = cat(T_567, T_584) @[Cat.scala 20:58] 
      node T_586 = bits(T_561, 7, 4) @[CircuitMath.scala 26:17] 
      node T_587 = bits(T_561, 3, 0) @[CircuitMath.scala 27:17] 
      node T_589 = neq(T_586, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_590 = bits(T_586, 3, 3) @[CircuitMath.scala 23:12] 
      node T_592 = bits(T_586, 2, 2) @[CircuitMath.scala 23:12] 
      node T_594 = bits(T_586, 1, 1) @[CircuitMath.scala 21:8] 
      node T_595 = shl(T_594, 0) @[CircuitMath.scala 23:10] 
      node T_596 = mux(T_592, UInt<2>("h02"), T_595) @[CircuitMath.scala 23:10] 
      node T_597 = mux(T_590, UInt<2>("h03"), T_596) @[CircuitMath.scala 23:10] 
      node T_598 = bits(T_587, 3, 3) @[CircuitMath.scala 23:12] 
      node T_600 = bits(T_587, 2, 2) @[CircuitMath.scala 23:12] 
      node T_602 = bits(T_587, 1, 1) @[CircuitMath.scala 21:8] 
      node T_603 = shl(T_602, 0) @[CircuitMath.scala 23:10] 
      node T_604 = mux(T_600, UInt<2>("h02"), T_603) @[CircuitMath.scala 23:10] 
      node T_605 = mux(T_598, UInt<2>("h03"), T_604) @[CircuitMath.scala 23:10] 
      node T_606 = mux(T_589, T_597, T_605) @[CircuitMath.scala 29:21] 
      node T_607 = cat(T_589, T_606) @[Cat.scala 20:58] 
      node T_608 = mux(T_563, T_585, T_607) @[CircuitMath.scala 29:21] 
      node T_609 = cat(T_563, T_608) @[Cat.scala 20:58] 
      node T_610 = bits(T_557, 15, 8) @[CircuitMath.scala 26:17] 
      node T_611 = bits(T_557, 7, 0) @[CircuitMath.scala 27:17] 
      node T_613 = neq(T_610, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_614 = bits(T_610, 7, 4) @[CircuitMath.scala 26:17] 
      node T_615 = bits(T_610, 3, 0) @[CircuitMath.scala 27:17] 
      node T_617 = neq(T_614, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_618 = bits(T_614, 3, 3) @[CircuitMath.scala 23:12] 
      node T_620 = bits(T_614, 2, 2) @[CircuitMath.scala 23:12] 
      node T_622 = bits(T_614, 1, 1) @[CircuitMath.scala 21:8] 
      node T_623 = shl(T_622, 0) @[CircuitMath.scala 23:10] 
      node T_624 = mux(T_620, UInt<2>("h02"), T_623) @[CircuitMath.scala 23:10] 
      node T_625 = mux(T_618, UInt<2>("h03"), T_624) @[CircuitMath.scala 23:10] 
      node T_626 = bits(T_615, 3, 3) @[CircuitMath.scala 23:12] 
      node T_628 = bits(T_615, 2, 2) @[CircuitMath.scala 23:12] 
      node T_630 = bits(T_615, 1, 1) @[CircuitMath.scala 21:8] 
      node T_631 = shl(T_630, 0) @[CircuitMath.scala 23:10] 
      node T_632 = mux(T_628, UInt<2>("h02"), T_631) @[CircuitMath.scala 23:10] 
      node T_633 = mux(T_626, UInt<2>("h03"), T_632) @[CircuitMath.scala 23:10] 
      node T_634 = mux(T_617, T_625, T_633) @[CircuitMath.scala 29:21] 
      node T_635 = cat(T_617, T_634) @[Cat.scala 20:58] 
      node T_636 = bits(T_611, 7, 4) @[CircuitMath.scala 26:17] 
      node T_637 = bits(T_611, 3, 0) @[CircuitMath.scala 27:17] 
      node T_639 = neq(T_636, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_640 = bits(T_636, 3, 3) @[CircuitMath.scala 23:12] 
      node T_642 = bits(T_636, 2, 2) @[CircuitMath.scala 23:12] 
      node T_644 = bits(T_636, 1, 1) @[CircuitMath.scala 21:8] 
      node T_645 = shl(T_644, 0) @[CircuitMath.scala 23:10] 
      node T_646 = mux(T_642, UInt<2>("h02"), T_645) @[CircuitMath.scala 23:10] 
      node T_647 = mux(T_640, UInt<2>("h03"), T_646) @[CircuitMath.scala 23:10] 
      node T_648 = bits(T_637, 3, 3) @[CircuitMath.scala 23:12] 
      node T_650 = bits(T_637, 2, 2) @[CircuitMath.scala 23:12] 
      node T_652 = bits(T_637, 1, 1) @[CircuitMath.scala 21:8] 
      node T_653 = shl(T_652, 0) @[CircuitMath.scala 23:10] 
      node T_654 = mux(T_650, UInt<2>("h02"), T_653) @[CircuitMath.scala 23:10] 
      node T_655 = mux(T_648, UInt<2>("h03"), T_654) @[CircuitMath.scala 23:10] 
      node T_656 = mux(T_639, T_647, T_655) @[CircuitMath.scala 29:21] 
      node T_657 = cat(T_639, T_656) @[Cat.scala 20:58] 
      node T_658 = mux(T_613, T_635, T_657) @[CircuitMath.scala 29:21] 
      node T_659 = cat(T_613, T_658) @[Cat.scala 20:58] 
      node T_660 = mux(T_559, T_609, T_659) @[CircuitMath.scala 29:21] 
      node T_661 = cat(T_559, T_660) @[Cat.scala 20:58] 
      node T_662 = mux(T_449, T_555, T_661) @[CircuitMath.scala 29:21] 
      node T_663 = cat(T_449, T_662) @[Cat.scala 20:58] 
      node T_665 = add(UInt<6>("h03f"), T_444) @[multiplier.scala 124:29] 
      node T_666 = tail(T_665, 1) @[multiplier.scala 124:29] 
      node T_667 = sub(T_666, T_663) @[multiplier.scala 124:42] 
      node T_668 = tail(T_667, 1) @[multiplier.scala 124:42] 
      node T_669 = gt(T_444, T_663) @[multiplier.scala 125:31] 
      node T_671 = eq(count, UInt<1>("h00")) @[multiplier.scala 126:22] 
      node T_672 = and(T_671, less) @[multiplier.scala 126:28] 
      node T_674 = gt(T_668, UInt<1>("h00")) @[multiplier.scala 126:65] 
      node T_675 = or(T_674, T_669) @[multiplier.scala 126:69] 
      node T_676 = and(T_672, T_675) @[multiplier.scala 126:53] 
      node T_678 = and(UInt<1>("h01"), T_676) @[multiplier.scala 127:26] 
      when T_678 : @[multiplier.scala 127:35] 
        node T_680 = bits(T_668, 5, 0) @[multiplier.scala 128:51] 
        node T_681 = mux(T_669, UInt<6>("h03f"), T_680) @[multiplier.scala 128:22] 
        node T_682 = bits(remainder, 63, 0) @[multiplier.scala 129:29] 
        node T_683 = dshl(T_682, T_681) @[multiplier.scala 129:37] 
        remainder <= T_683 @[multiplier.scala 129:17] 
        count <= T_681 @[multiplier.scala 130:13] 
        skip @[multiplier.scala 127:35] 
      node T_685 = eq(count, UInt<1>("h00")) @[multiplier.scala 132:17] 
      node T_687 = eq(less, UInt<1>("h00")) @[multiplier.scala 132:26] 
      node T_688 = and(T_685, T_687) @[multiplier.scala 132:23] 
      node T_690 = eq(isHi, UInt<1>("h00")) @[multiplier.scala 132:48] 
      node T_691 = and(T_688, T_690) @[multiplier.scala 132:45] 
      when T_691 : @[multiplier.scala 132:55] 
        neg_out <= UInt<1>("h00") @[multiplier.scala 132:65] 
        skip @[multiplier.scala 132:55] 
      skip @[multiplier.scala 114:37] 
    node T_693 = and(io.resp.ready, io.resp.valid) @[Decoupled.scala 16:42] 
    node T_694 = or(T_693, io.kill) @[multiplier.scala 134:24] 
    when T_694 : @[multiplier.scala 134:36] 
      state <= UInt<3>("h00") @[multiplier.scala 135:11] 
      skip @[multiplier.scala 134:36] 
    node T_695 = and(io.req.ready, io.req.valid) @[Decoupled.scala 16:42] 
    when T_695 : @[multiplier.scala 137:24] 
      node T_697 = eq(cmdMul, UInt<1>("h00")) @[multiplier.scala 138:42] 
      node T_698 = and(rhs_sign, T_697) @[multiplier.scala 138:39] 
      node T_699 = or(lhs_sign, T_698) @[multiplier.scala 138:27] 
      node T_700 = mux(T_699, UInt<3>("h01"), UInt<3>("h02")) @[multiplier.scala 138:17] 
      state <= T_700 @[multiplier.scala 138:11] 
      isMul <= cmdMul @[multiplier.scala 139:11] 
      isHi <= cmdHi @[multiplier.scala 140:10] 
      count <= UInt<1>("h00") @[multiplier.scala 141:11] 
      node T_703 = eq(cmdMul, UInt<1>("h00")) @[multiplier.scala 142:16] 
      node T_704 = neq(lhs_sign, rhs_sign) @[multiplier.scala 142:57] 
      node T_705 = mux(cmdHi, lhs_sign, T_704) @[multiplier.scala 142:30] 
      node T_706 = and(T_703, T_705) @[multiplier.scala 142:24] 
      neg_out <= T_706 @[multiplier.scala 142:13] 
      node T_707 = cat(rhs_sign, rhs_in) @[Cat.scala 20:58] 
      divisor <= T_707 @[multiplier.scala 143:13] 
      remainder <= lhs_in @[multiplier.scala 144:15] 
      req <- io.req.bits @[multiplier.scala 145:9] 
      skip @[multiplier.scala 137:24] 
    io.resp.bits <- req @[multiplier.scala 148:16] 
    node T_711 = and(req.dw, UInt<1>("h01")) @[multiplier.scala 62:62] 
    node T_712 = eq(UInt<1>("h00"), T_711) @[multiplier.scala 62:62] 
    node T_713 = and(UInt<1>("h01"), T_712) @[multiplier.scala 62:52] 
    node T_714 = bits(remainder, 31, 31) @[multiplier.scala 149:67] 
    node T_715 = bits(T_714, 0, 0) @[Bitwise.scala 33:15] 
    node T_718 = mux(T_715, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_719 = bits(remainder, 31, 0) @[multiplier.scala 149:86] 
    node T_720 = cat(T_718, T_719) @[Cat.scala 20:58] 
    node T_721 = bits(remainder, 63, 0) @[multiplier.scala 149:107] 
    node T_722 = mux(T_713, T_720, T_721) @[multiplier.scala 149:27] 
    io.resp.bits.data <= T_722 @[multiplier.scala 149:21] 
    node T_723 = eq(state, UInt<3>("h05")) @[multiplier.scala 150:26] 
    io.resp.valid <= T_723 @[multiplier.scala 150:17] 
    node T_724 = eq(state, UInt<3>("h00")) @[multiplier.scala 151:25] 
    io.req.ready <= T_724 @[multiplier.scala 151:16] 
    
  module Rocket : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip prci : {reset : UInt<1>, id : UInt<1>, interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>}}, imem : {req : {valid : UInt<1>, bits : {pc : UInt<40>, speculative : UInt<1>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}, flush_icache : UInt<1>, flush_tlb : UInt<1>, flip npc : UInt<40>}, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, flip ptw : {flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, flip fpu : {flip inst : UInt<32>, flip fromint_data : UInt<64>, flip fcsr_rm : UInt<3>, fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, store_data : UInt<64>, toint_data : UInt<64>, flip dmem_resp_val : UInt<1>, flip dmem_resp_type : UInt<3>, flip dmem_resp_tag : UInt<5>, flip dmem_resp_data : UInt<64>, flip valid : UInt<1>, fcsr_rdy : UInt<1>, nack_mem : UInt<1>, illegal_rm : UInt<1>, flip killx : UInt<1>, flip killm : UInt<1>, dec : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, sboard_set : UInt<1>, sboard_clr : UInt<1>, sboard_clra : UInt<5>, flip cp_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, cp_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}, flip rocc : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {inst : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {rd : UInt<5>, data : UInt<64>}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, busy : UInt<1>, interrupt : UInt<1>, autl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, utl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[0], fpu_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, flip fpu_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip exception : UInt<1>, flip csr : {flip rdata : UInt<64>[0], waddr : UInt<12>, wdata : UInt<64>, wen : UInt<1>}, flip host_id : UInt<1>}}
    
    io is invalid
    reg ex_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>}, clk
    reg mem_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>}, clk
    reg wb_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>}, clk
    reg ex_reg_xcpt_interrupt : UInt<1>, clk
    reg ex_reg_valid : UInt<1>, clk
    reg ex_reg_rvc : UInt<1>, clk
    reg ex_reg_btb_hit : UInt<1>, clk
    reg ex_reg_btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg ex_reg_xcpt : UInt<1>, clk
    reg ex_reg_flush_pipe : UInt<1>, clk
    reg ex_reg_load_use : UInt<1>, clk
    reg ex_reg_cause : UInt, clk
    reg ex_reg_replay : UInt<1>, clk
    reg ex_reg_pc : UInt, clk
    reg ex_reg_inst : UInt, clk
    reg mem_reg_xcpt_interrupt : UInt<1>, clk
    reg mem_reg_valid : UInt<1>, clk
    reg mem_reg_rvc : UInt<1>, clk
    reg mem_reg_btb_hit : UInt<1>, clk
    reg mem_reg_btb_resp : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg mem_reg_xcpt : UInt<1>, clk
    reg mem_reg_replay : UInt<1>, clk
    reg mem_reg_flush_pipe : UInt<1>, clk
    reg mem_reg_cause : UInt, clk
    reg mem_reg_slow_bypass : UInt<1>, clk
    reg mem_reg_load : UInt<1>, clk
    reg mem_reg_store : UInt<1>, clk
    reg mem_reg_pc : UInt, clk
    reg mem_reg_inst : UInt, clk
    reg mem_reg_wdata : UInt, clk
    reg mem_reg_rs2 : UInt, clk
    wire take_pc_mem : UInt<1> @[rocket.scala 189:25] 
    take_pc_mem is invalid @[rocket.scala 189:25] 
    reg wb_reg_valid : UInt<1>, clk
    reg wb_reg_xcpt : UInt<1>, clk
    reg wb_reg_replay : UInt<1>, clk
    reg wb_reg_cause : UInt, clk
    reg wb_reg_pc : UInt, clk
    reg wb_reg_inst : UInt, clk
    reg wb_reg_wdata : UInt, clk
    reg wb_reg_rs2 : UInt, clk
    wire take_pc_wb : UInt<1> @[rocket.scala 199:24] 
    take_pc_wb is invalid @[rocket.scala 199:24] 
    node take_pc_mem_wb = or(take_pc_wb, take_pc_mem) @[rocket.scala 201:35] 
    inst ibuf of IBuf @[rocket.scala 205:20] 
    ibuf.io is invalid
    ibuf.clk <= clk
    ibuf.reset <= reset
    ibuf.io.imem <- io.imem.resp @[rocket.scala 208:16] 
    ibuf.io.kill <= take_pc_mem_wb @[rocket.scala 209:16] 
    wire id_ctrl : {legal : UInt<1>, fp : UInt<1>, rocc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, rxs2 : UInt<1>, rxs1 : UInt<1>, sel_alu2 : UInt<2>, sel_alu1 : UInt<2>, sel_imm : UInt<3>, alu_dw : UInt<1>, alu_fn : UInt<4>, mem : UInt<1>, mem_cmd : UInt<5>, mem_type : UInt<3>, rfs1 : UInt<1>, rfs2 : UInt<1>, rfs3 : UInt<1>, wfd : UInt<1>, div : UInt<1>, wxd : UInt<1>, csr : UInt<3>, fence_i : UInt<1>, fence : UInt<1>, amo : UInt<1>} @[rocket.scala 211:21] 
    id_ctrl is invalid @[rocket.scala 211:21] 
    node T_6664 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65] 
    node T_6666 = eq(T_6664, UInt<32>("h03")) @[decode.scala 13:121] 
    node T_6668 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0106f")) @[decode.scala 13:65] 
    node T_6670 = eq(T_6668, UInt<32>("h03")) @[decode.scala 13:121] 
    node T_6672 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0607f")) @[decode.scala 13:65] 
    node T_6674 = eq(T_6672, UInt<32>("h0f")) @[decode.scala 13:121] 
    node T_6676 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07077")) @[decode.scala 13:65] 
    node T_6678 = eq(T_6676, UInt<32>("h013")) @[decode.scala 13:121] 
    node T_6680 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05f")) @[decode.scala 13:65] 
    node T_6682 = eq(T_6680, UInt<32>("h017")) @[decode.scala 13:121] 
    node T_6684 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc00007f")) @[decode.scala 13:65] 
    node T_6686 = eq(T_6684, UInt<32>("h033")) @[decode.scala 13:121] 
    node T_6688 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be007077")) @[decode.scala 13:65] 
    node T_6690 = eq(T_6688, UInt<32>("h033")) @[decode.scala 13:121] 
    node T_6692 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04000073")) @[decode.scala 13:65] 
    node T_6694 = eq(T_6692, UInt<32>("h043")) @[decode.scala 13:121] 
    node T_6696 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0e400007f")) @[decode.scala 13:65] 
    node T_6698 = eq(T_6696, UInt<32>("h053")) @[decode.scala 13:121] 
    node T_6700 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0707b")) @[decode.scala 13:65] 
    node T_6702 = eq(T_6700, UInt<32>("h063")) @[decode.scala 13:121] 
    node T_6704 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07f")) @[decode.scala 13:65] 
    node T_6706 = eq(T_6704, UInt<32>("h06f")) @[decode.scala 13:121] 
    node T_6708 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0ffefffff")) @[decode.scala 13:65] 
    node T_6710 = eq(T_6708, UInt<32>("h073")) @[decode.scala 13:121] 
    node T_6712 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc00305f")) @[decode.scala 13:65] 
    node T_6714 = eq(T_6712, UInt<32>("h01013")) @[decode.scala 13:121] 
    node T_6716 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fe00305f")) @[decode.scala 13:65] 
    node T_6718 = eq(T_6716, UInt<32>("h0101b")) @[decode.scala 13:121] 
    node T_6720 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0605b")) @[decode.scala 13:65] 
    node T_6722 = eq(T_6720, UInt<32>("h02003")) @[decode.scala 13:121] 
    node T_6724 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65] 
    node T_6726 = eq(T_6724, UInt<32>("h02013")) @[decode.scala 13:121] 
    node T_6728 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01800607f")) @[decode.scala 13:65] 
    node T_6730 = eq(T_6728, UInt<32>("h0202f")) @[decode.scala 13:121] 
    node T_6732 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0207f")) @[decode.scala 13:65] 
    node T_6734 = eq(T_6732, UInt<32>("h02073")) @[decode.scala 13:121] 
    node T_6736 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0bc00707f")) @[decode.scala 13:65] 
    node T_6738 = eq(T_6736, UInt<32>("h05013")) @[decode.scala 13:121] 
    node T_6740 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be00705f")) @[decode.scala 13:65] 
    node T_6742 = eq(T_6740, UInt<32>("h0501b")) @[decode.scala 13:121] 
    node T_6744 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0be007077")) @[decode.scala 13:65] 
    node T_6746 = eq(T_6744, UInt<32>("h05033")) @[decode.scala 13:121] 
    node T_6748 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fe004077")) @[decode.scala 13:65] 
    node T_6750 = eq(T_6748, UInt<32>("h02004033")) @[decode.scala 13:121] 
    node T_6752 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0e800607f")) @[decode.scala 13:65] 
    node T_6754 = eq(T_6752, UInt<32>("h0800202f")) @[decode.scala 13:121] 
    node T_6756 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0f9f0607f")) @[decode.scala 13:65] 
    node T_6758 = eq(T_6756, UInt<32>("h01000202f")) @[decode.scala 13:121] 
    node T_6760 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0dfffffff")) @[decode.scala 13:65] 
    node T_6762 = eq(T_6760, UInt<32>("h010200073")) @[decode.scala 13:121] 
    node T_6764 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fff07fff")) @[decode.scala 13:65] 
    node T_6766 = eq(T_6764, UInt<32>("h010400073")) @[decode.scala 13:121] 
    node T_6768 = eq(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010500073")) @[decode.scala 13:121] 
    node T_6770 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0f400607f")) @[decode.scala 13:65] 
    node T_6772 = eq(T_6770, UInt<32>("h020000053")) @[decode.scala 13:121] 
    node T_6774 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c00607f")) @[decode.scala 13:65] 
    node T_6776 = eq(T_6774, UInt<32>("h020000053")) @[decode.scala 13:121] 
    node T_6778 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c00507f")) @[decode.scala 13:65] 
    node T_6780 = eq(T_6778, UInt<32>("h020000053")) @[decode.scala 13:121] 
    node T_6782 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07ff0007f")) @[decode.scala 13:65] 
    node T_6784 = eq(T_6782, UInt<32>("h040100053")) @[decode.scala 13:121] 
    node T_6786 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07ff0007f")) @[decode.scala 13:65] 
    node T_6788 = eq(T_6786, UInt<32>("h042000053")) @[decode.scala 13:121] 
    node T_6790 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fdf0007f")) @[decode.scala 13:65] 
    node T_6792 = eq(T_6790, UInt<32>("h058000053")) @[decode.scala 13:121] 
    node T_6794 = eq(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07b200073")) @[decode.scala 13:121] 
    node T_6796 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0edc0007f")) @[decode.scala 13:65] 
    node T_6798 = eq(T_6796, UInt<32>("h0c0000053")) @[decode.scala 13:121] 
    node T_6800 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fdf0607f")) @[decode.scala 13:65] 
    node T_6802 = eq(T_6800, UInt<32>("h0e0000053")) @[decode.scala 13:121] 
    node T_6804 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0edf0707f")) @[decode.scala 13:65] 
    node T_6806 = eq(T_6804, UInt<32>("h0e0000053")) @[decode.scala 13:121] 
    node T_6808 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0603f")) @[decode.scala 13:65] 
    node T_6810 = eq(T_6808, UInt<32>("h023")) @[decode.scala 13:121] 
    node T_6812 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0306f")) @[decode.scala 13:65] 
    node T_6814 = eq(T_6812, UInt<32>("h01063")) @[decode.scala 13:121] 
    node T_6816 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0407f")) @[decode.scala 13:65] 
    node T_6818 = eq(T_6816, UInt<32>("h04063")) @[decode.scala 13:121] 
    node T_6820 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0fc007077")) @[decode.scala 13:65] 
    node T_6822 = eq(T_6820, UInt<32>("h033")) @[decode.scala 13:121] 
    node T_6824 = or(UInt<1>("h00"), T_6666) @[decode.scala 14:30] 
    node T_6825 = or(T_6824, T_6670) @[decode.scala 14:30] 
    node T_6826 = or(T_6825, T_6674) @[decode.scala 14:30] 
    node T_6827 = or(T_6826, T_6678) @[decode.scala 14:30] 
    node T_6828 = or(T_6827, T_6682) @[decode.scala 14:30] 
    node T_6829 = or(T_6828, T_6686) @[decode.scala 14:30] 
    node T_6830 = or(T_6829, T_6690) @[decode.scala 14:30] 
    node T_6831 = or(T_6830, T_6694) @[decode.scala 14:30] 
    node T_6832 = or(T_6831, T_6698) @[decode.scala 14:30] 
    node T_6833 = or(T_6832, T_6702) @[decode.scala 14:30] 
    node T_6834 = or(T_6833, T_6706) @[decode.scala 14:30] 
    node T_6835 = or(T_6834, T_6710) @[decode.scala 14:30] 
    node T_6836 = or(T_6835, T_6714) @[decode.scala 14:30] 
    node T_6837 = or(T_6836, T_6718) @[decode.scala 14:30] 
    node T_6838 = or(T_6837, T_6722) @[decode.scala 14:30] 
    node T_6839 = or(T_6838, T_6726) @[decode.scala 14:30] 
    node T_6840 = or(T_6839, T_6730) @[decode.scala 14:30] 
    node T_6841 = or(T_6840, T_6734) @[decode.scala 14:30] 
    node T_6842 = or(T_6841, T_6738) @[decode.scala 14:30] 
    node T_6843 = or(T_6842, T_6742) @[decode.scala 14:30] 
    node T_6844 = or(T_6843, T_6746) @[decode.scala 14:30] 
    node T_6845 = or(T_6844, T_6750) @[decode.scala 14:30] 
    node T_6846 = or(T_6845, T_6754) @[decode.scala 14:30] 
    node T_6847 = or(T_6846, T_6758) @[decode.scala 14:30] 
    node T_6848 = or(T_6847, T_6762) @[decode.scala 14:30] 
    node T_6849 = or(T_6848, T_6766) @[decode.scala 14:30] 
    node T_6850 = or(T_6849, T_6768) @[decode.scala 14:30] 
    node T_6851 = or(T_6850, T_6772) @[decode.scala 14:30] 
    node T_6852 = or(T_6851, T_6776) @[decode.scala 14:30] 
    node T_6853 = or(T_6852, T_6780) @[decode.scala 14:30] 
    node T_6854 = or(T_6853, T_6784) @[decode.scala 14:30] 
    node T_6855 = or(T_6854, T_6788) @[decode.scala 14:30] 
    node T_6856 = or(T_6855, T_6792) @[decode.scala 14:30] 
    node T_6857 = or(T_6856, T_6794) @[decode.scala 14:30] 
    node T_6858 = or(T_6857, T_6798) @[decode.scala 14:30] 
    node T_6859 = or(T_6858, T_6802) @[decode.scala 14:30] 
    node T_6860 = or(T_6859, T_6806) @[decode.scala 14:30] 
    node T_6861 = or(T_6860, T_6810) @[decode.scala 14:30] 
    node T_6862 = or(T_6861, T_6814) @[decode.scala 14:30] 
    node T_6863 = or(T_6862, T_6818) @[decode.scala 14:30] 
    node T_6864 = or(T_6863, T_6822) @[decode.scala 14:30] 
    node T_6866 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05c")) @[decode.scala 13:65] 
    node T_6868 = eq(T_6866, UInt<32>("h04")) @[decode.scala 13:121] 
    node T_6870 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h060")) @[decode.scala 13:65] 
    node T_6872 = eq(T_6870, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_6874 = or(UInt<1>("h00"), T_6868) @[decode.scala 14:30] 
    node T_6875 = or(T_6874, T_6872) @[decode.scala 14:30] 
    node T_6878 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h074")) @[decode.scala 13:65] 
    node T_6880 = eq(T_6878, UInt<32>("h060")) @[decode.scala 13:121] 
    node T_6882 = or(UInt<1>("h00"), T_6880) @[decode.scala 14:30] 
    node T_6884 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h068")) @[decode.scala 13:65] 
    node T_6886 = eq(T_6884, UInt<32>("h068")) @[decode.scala 13:121] 
    node T_6888 = or(UInt<1>("h00"), T_6886) @[decode.scala 14:30] 
    node T_6890 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0203c")) @[decode.scala 13:65] 
    node T_6892 = eq(T_6890, UInt<32>("h024")) @[decode.scala 13:121] 
    node T_6894 = or(UInt<1>("h00"), T_6892) @[decode.scala 14:30] 
    node T_6896 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h064")) @[decode.scala 13:65] 
    node T_6898 = eq(T_6896, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_6900 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h034")) @[decode.scala 13:65] 
    node T_6902 = eq(T_6900, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_6904 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02048")) @[decode.scala 13:65] 
    node T_6906 = eq(T_6904, UInt<32>("h02008")) @[decode.scala 13:121] 
    node T_6908 = or(UInt<1>("h00"), T_6898) @[decode.scala 14:30] 
    node T_6909 = or(T_6908, T_6902) @[decode.scala 14:30] 
    node T_6910 = or(T_6909, T_6906) @[decode.scala 14:30] 
    node T_6912 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h044")) @[decode.scala 13:65] 
    node T_6914 = eq(T_6912, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6916 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04024")) @[decode.scala 13:65] 
    node T_6918 = eq(T_6916, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_6920 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h038")) @[decode.scala 13:65] 
    node T_6922 = eq(T_6920, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_6924 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02050")) @[decode.scala 13:65] 
    node T_6926 = eq(T_6924, UInt<32>("h02000")) @[decode.scala 13:121] 
    node T_6928 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000034")) @[decode.scala 13:65] 
    node T_6930 = eq(T_6928, UInt<32>("h090000010")) @[decode.scala 13:121] 
    node T_6932 = or(UInt<1>("h00"), T_6914) @[decode.scala 14:30] 
    node T_6933 = or(T_6932, T_6918) @[decode.scala 14:30] 
    node T_6934 = or(T_6933, T_6922) @[decode.scala 14:30] 
    node T_6935 = or(T_6934, T_6926) @[decode.scala 14:30] 
    node T_6936 = or(T_6935, T_6930) @[decode.scala 14:30] 
    node T_6938 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h058")) @[decode.scala 13:65] 
    node T_6940 = eq(T_6938, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6942 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h020")) @[decode.scala 13:65] 
    node T_6944 = eq(T_6942, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6946 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0c")) @[decode.scala 13:65] 
    node T_6948 = eq(T_6946, UInt<32>("h04")) @[decode.scala 13:121] 
    node T_6950 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h048")) @[decode.scala 13:65] 
    node T_6952 = eq(T_6950, UInt<32>("h048")) @[decode.scala 13:121] 
    node T_6954 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04050")) @[decode.scala 13:65] 
    node T_6956 = eq(T_6954, UInt<32>("h04050")) @[decode.scala 13:121] 
    node T_6958 = or(UInt<1>("h00"), T_6940) @[decode.scala 14:30] 
    node T_6959 = or(T_6958, T_6944) @[decode.scala 14:30] 
    node T_6960 = or(T_6959, T_6948) @[decode.scala 14:30] 
    node T_6961 = or(T_6960, T_6952) @[decode.scala 14:30] 
    node T_6962 = or(T_6961, T_6956) @[decode.scala 14:30] 
    node T_6964 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h048")) @[decode.scala 13:65] 
    node T_6966 = eq(T_6964, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6968 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018")) @[decode.scala 13:65] 
    node T_6970 = eq(T_6968, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6972 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04008")) @[decode.scala 13:65] 
    node T_6974 = eq(T_6972, UInt<32>("h04000")) @[decode.scala 13:121] 
    node T_6976 = or(UInt<1>("h00"), T_6966) @[decode.scala 14:30] 
    node T_6977 = or(T_6976, T_6914) @[decode.scala 14:30] 
    node T_6978 = or(T_6977, T_6970) @[decode.scala 14:30] 
    node T_6979 = or(T_6978, T_6974) @[decode.scala 14:30] 
    node T_6980 = cat(T_6979, T_6962) @[Cat.scala 20:58] 
    node T_6982 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04004")) @[decode.scala 13:65] 
    node T_6984 = eq(T_6982, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6986 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h050")) @[decode.scala 13:65] 
    node T_6988 = eq(T_6986, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6990 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h024")) @[decode.scala 13:65] 
    node T_6992 = eq(T_6990, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_6994 = or(UInt<1>("h00"), T_6984) @[decode.scala 14:30] 
    node T_6995 = or(T_6994, T_6988) @[decode.scala 14:30] 
    node T_6996 = or(T_6995, T_6914) @[decode.scala 14:30] 
    node T_6997 = or(T_6996, T_6992) @[decode.scala 14:30] 
    node T_6998 = or(T_6997, T_6970) @[decode.scala 14:30] 
    node T_7000 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h034")) @[decode.scala 13:65] 
    node T_7002 = eq(T_7000, UInt<32>("h014")) @[decode.scala 13:121] 
    node T_7004 = or(UInt<1>("h00"), T_7002) @[decode.scala 14:30] 
    node T_7005 = or(T_7004, T_6952) @[decode.scala 14:30] 
    node T_7006 = cat(T_7005, T_6998) @[Cat.scala 20:58] 
    node T_7008 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018")) @[decode.scala 13:65] 
    node T_7010 = eq(T_7008, UInt<32>("h08")) @[decode.scala 13:121] 
    node T_7012 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h044")) @[decode.scala 13:65] 
    node T_7014 = eq(T_7012, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7016 = or(UInt<1>("h00"), T_7010) @[decode.scala 14:30] 
    node T_7017 = or(T_7016, T_7014) @[decode.scala 14:30] 
    node T_7019 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h014")) @[decode.scala 13:65] 
    node T_7021 = eq(T_7019, UInt<32>("h014")) @[decode.scala 13:121] 
    node T_7023 = or(UInt<1>("h00"), T_7010) @[decode.scala 14:30] 
    node T_7024 = or(T_7023, T_7021) @[decode.scala 14:30] 
    node T_7026 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h030")) @[decode.scala 13:65] 
    node T_7028 = eq(T_7026, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_7030 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0201c")) @[decode.scala 13:65] 
    node T_7032 = eq(T_7030, UInt<32>("h04")) @[decode.scala 13:121] 
    node T_7034 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h014")) @[decode.scala 13:65] 
    node T_7036 = eq(T_7034, UInt<32>("h010")) @[decode.scala 13:121] 
    node T_7038 = or(UInt<1>("h00"), T_7028) @[decode.scala 14:30] 
    node T_7039 = or(T_7038, T_7032) @[decode.scala 14:30] 
    node T_7040 = or(T_7039, T_7036) @[decode.scala 14:30] 
    node T_7041 = cat(T_7040, T_7024) @[Cat.scala 20:58] 
    node T_7042 = cat(T_7041, T_7017) @[Cat.scala 20:58] 
    node T_7044 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010")) @[decode.scala 13:65] 
    node T_7046 = eq(T_7044, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_7048 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h08")) @[decode.scala 13:65] 
    node T_7050 = eq(T_7048, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_7052 = or(UInt<1>("h00"), T_7046) @[decode.scala 14:30] 
    node T_7053 = or(T_7052, T_7050) @[decode.scala 14:30] 
    node T_7055 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03054")) @[decode.scala 13:65] 
    node T_7057 = eq(T_7055, UInt<32>("h01010")) @[decode.scala 13:121] 
    node T_7059 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01058")) @[decode.scala 13:65] 
    node T_7061 = eq(T_7059, UInt<32>("h01040")) @[decode.scala 13:121] 
    node T_7063 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07044")) @[decode.scala 13:65] 
    node T_7065 = eq(T_7063, UInt<32>("h07000")) @[decode.scala 13:121] 
    node T_7067 = or(UInt<1>("h00"), T_7057) @[decode.scala 14:30] 
    node T_7068 = or(T_7067, T_7061) @[decode.scala 14:30] 
    node T_7069 = or(T_7068, T_7065) @[decode.scala 14:30] 
    node T_7071 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04054")) @[decode.scala 13:65] 
    node T_7073 = eq(T_7071, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7075 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02058")) @[decode.scala 13:65] 
    node T_7077 = eq(T_7075, UInt<32>("h02040")) @[decode.scala 13:121] 
    node T_7079 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03054")) @[decode.scala 13:65] 
    node T_7081 = eq(T_7079, UInt<32>("h03010")) @[decode.scala 13:121] 
    node T_7083 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06054")) @[decode.scala 13:65] 
    node T_7085 = eq(T_7083, UInt<32>("h06010")) @[decode.scala 13:121] 
    node T_7087 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040003034")) @[decode.scala 13:65] 
    node T_7089 = eq(T_7087, UInt<32>("h040000030")) @[decode.scala 13:121] 
    node T_7091 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040001054")) @[decode.scala 13:65] 
    node T_7093 = eq(T_7091, UInt<32>("h040001010")) @[decode.scala 13:121] 
    node T_7095 = or(UInt<1>("h00"), T_7073) @[decode.scala 14:30] 
    node T_7096 = or(T_7095, T_7077) @[decode.scala 14:30] 
    node T_7097 = or(T_7096, T_7081) @[decode.scala 14:30] 
    node T_7098 = or(T_7097, T_7085) @[decode.scala 14:30] 
    node T_7099 = or(T_7098, T_7089) @[decode.scala 14:30] 
    node T_7100 = or(T_7099, T_7093) @[decode.scala 14:30] 
    node T_7102 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02054")) @[decode.scala 13:65] 
    node T_7104 = eq(T_7102, UInt<32>("h02010")) @[decode.scala 13:121] 
    node T_7106 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040004054")) @[decode.scala 13:65] 
    node T_7108 = eq(T_7106, UInt<32>("h04010")) @[decode.scala 13:121] 
    node T_7110 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h05054")) @[decode.scala 13:65] 
    node T_7112 = eq(T_7110, UInt<32>("h04010")) @[decode.scala 13:121] 
    node T_7114 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04058")) @[decode.scala 13:65] 
    node T_7116 = eq(T_7114, UInt<32>("h04040")) @[decode.scala 13:121] 
    node T_7118 = or(UInt<1>("h00"), T_7104) @[decode.scala 14:30] 
    node T_7119 = or(T_7118, T_7108) @[decode.scala 14:30] 
    node T_7120 = or(T_7119, T_7112) @[decode.scala 14:30] 
    node T_7121 = or(T_7120, T_7116) @[decode.scala 14:30] 
    node T_7123 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06054")) @[decode.scala 13:65] 
    node T_7125 = eq(T_7123, UInt<32>("h02010")) @[decode.scala 13:121] 
    node T_7127 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040003054")) @[decode.scala 13:65] 
    node T_7129 = eq(T_7127, UInt<32>("h040001010")) @[decode.scala 13:121] 
    node T_7131 = or(UInt<1>("h00"), T_7125) @[decode.scala 14:30] 
    node T_7132 = or(T_7131, T_7116) @[decode.scala 14:30] 
    node T_7133 = or(T_7132, T_7089) @[decode.scala 14:30] 
    node T_7134 = or(T_7133, T_7129) @[decode.scala 14:30] 
    node T_7135 = cat(T_7100, T_7069) @[Cat.scala 20:58] 
    node T_7136 = cat(T_7134, T_7121) @[Cat.scala 20:58] 
    node T_7137 = cat(T_7136, T_7135) @[Cat.scala 20:58] 
    node T_7139 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0405f")) @[decode.scala 13:65] 
    node T_7141 = eq(T_7139, UInt<32>("h03")) @[decode.scala 13:121] 
    node T_7143 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0107f")) @[decode.scala 13:65] 
    node T_7145 = eq(T_7143, UInt<32>("h03")) @[decode.scala 13:121] 
    node T_7147 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h0707f")) @[decode.scala 13:65] 
    node T_7149 = eq(T_7147, UInt<32>("h0100f")) @[decode.scala 13:121] 
    node T_7151 = or(UInt<1>("h00"), T_7141) @[decode.scala 14:30] 
    node T_7152 = or(T_7151, T_6666) @[decode.scala 14:30] 
    node T_7153 = or(T_7152, T_7145) @[decode.scala 14:30] 
    node T_7154 = or(T_7153, T_7149) @[decode.scala 14:30] 
    node T_7155 = or(T_7154, T_6722) @[decode.scala 14:30] 
    node T_7156 = or(T_7155, T_6730) @[decode.scala 14:30] 
    node T_7157 = or(T_7156, T_6754) @[decode.scala 14:30] 
    node T_7158 = or(T_7157, T_6758) @[decode.scala 14:30] 
    node T_7160 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02008")) @[decode.scala 13:65] 
    node T_7162 = eq(T_7160, UInt<32>("h08")) @[decode.scala 13:121] 
    node T_7164 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h028")) @[decode.scala 13:65] 
    node T_7166 = eq(T_7164, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_7168 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018000020")) @[decode.scala 13:65] 
    node T_7170 = eq(T_7168, UInt<32>("h018000020")) @[decode.scala 13:121] 
    node T_7172 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h020000020")) @[decode.scala 13:65] 
    node T_7174 = eq(T_7172, UInt<32>("h020000020")) @[decode.scala 13:121] 
    node T_7176 = or(UInt<1>("h00"), T_7162) @[decode.scala 14:30] 
    node T_7177 = or(T_7176, T_7166) @[decode.scala 14:30] 
    node T_7178 = or(T_7177, T_7170) @[decode.scala 14:30] 
    node T_7179 = or(T_7178, T_7174) @[decode.scala 14:30] 
    node T_7181 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010002008")) @[decode.scala 13:65] 
    node T_7183 = eq(T_7181, UInt<32>("h010002008")) @[decode.scala 13:121] 
    node T_7185 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040002008")) @[decode.scala 13:65] 
    node T_7187 = eq(T_7185, UInt<32>("h040002008")) @[decode.scala 13:121] 
    node T_7189 = or(UInt<1>("h00"), T_7183) @[decode.scala 14:30] 
    node T_7190 = or(T_7189, T_7187) @[decode.scala 14:30] 
    node T_7192 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h08000008")) @[decode.scala 13:65] 
    node T_7194 = eq(T_7192, UInt<32>("h08000008")) @[decode.scala 13:121] 
    node T_7196 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000008")) @[decode.scala 13:65] 
    node T_7198 = eq(T_7196, UInt<32>("h010000008")) @[decode.scala 13:121] 
    node T_7200 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h080000008")) @[decode.scala 13:65] 
    node T_7202 = eq(T_7200, UInt<32>("h080000008")) @[decode.scala 13:121] 
    node T_7204 = or(UInt<1>("h00"), T_7162) @[decode.scala 14:30] 
    node T_7205 = or(T_7204, T_7194) @[decode.scala 14:30] 
    node T_7206 = or(T_7205, T_7198) @[decode.scala 14:30] 
    node T_7207 = or(T_7206, T_7202) @[decode.scala 14:30] 
    node T_7209 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h018002008")) @[decode.scala 13:65] 
    node T_7211 = eq(T_7209, UInt<32>("h02008")) @[decode.scala 13:121] 
    node T_7213 = or(UInt<1>("h00"), T_7211) @[decode.scala 14:30] 
    node T_7215 = cat(T_7190, T_7179) @[Cat.scala 20:58] 
    node T_7216 = cat(UInt<1>("h00"), T_7213) @[Cat.scala 20:58] 
    node T_7217 = cat(T_7216, T_7207) @[Cat.scala 20:58] 
    node T_7218 = cat(T_7217, T_7215) @[Cat.scala 20:58] 
    node T_7220 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01000")) @[decode.scala 13:65] 
    node T_7222 = eq(T_7220, UInt<32>("h01000")) @[decode.scala 13:121] 
    node T_7224 = or(UInt<1>("h00"), T_7222) @[decode.scala 14:30] 
    node T_7226 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02000")) @[decode.scala 13:65] 
    node T_7228 = eq(T_7226, UInt<32>("h02000")) @[decode.scala 13:121] 
    node T_7230 = or(UInt<1>("h00"), T_7228) @[decode.scala 14:30] 
    node T_7232 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h04000")) @[decode.scala 13:65] 
    node T_7234 = eq(T_7232, UInt<32>("h04000")) @[decode.scala 13:121] 
    node T_7236 = or(UInt<1>("h00"), T_7234) @[decode.scala 14:30] 
    node T_7237 = cat(T_7236, T_7230) @[Cat.scala 20:58] 
    node T_7238 = cat(T_7237, T_7224) @[Cat.scala 20:58] 
    node T_7240 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h080000060")) @[decode.scala 13:65] 
    node T_7242 = eq(T_7240, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7244 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000060")) @[decode.scala 13:65] 
    node T_7246 = eq(T_7244, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7248 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h070")) @[decode.scala 13:65] 
    node T_7250 = eq(T_7248, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7252 = or(UInt<1>("h00"), T_7242) @[decode.scala 14:30] 
    node T_7253 = or(T_7252, T_7246) @[decode.scala 14:30] 
    node T_7254 = or(T_7253, T_7250) @[decode.scala 14:30] 
    node T_7256 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h07c")) @[decode.scala 13:65] 
    node T_7258 = eq(T_7256, UInt<32>("h024")) @[decode.scala 13:121] 
    node T_7260 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h040000060")) @[decode.scala 13:65] 
    node T_7262 = eq(T_7260, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_7264 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000060")) @[decode.scala 13:65] 
    node T_7266 = eq(T_7264, UInt<32>("h010000040")) @[decode.scala 13:121] 
    node T_7268 = or(UInt<1>("h00"), T_7258) @[decode.scala 14:30] 
    node T_7269 = or(T_7268, T_7262) @[decode.scala 14:30] 
    node T_7270 = or(T_7269, T_7250) @[decode.scala 14:30] 
    node T_7271 = or(T_7270, T_7266) @[decode.scala 14:30] 
    node T_7273 = or(UInt<1>("h00"), T_7250) @[decode.scala 14:30] 
    node T_7275 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03c")) @[decode.scala 13:65] 
    node T_7277 = eq(T_7275, UInt<32>("h04")) @[decode.scala 13:121] 
    node T_7279 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h010000060")) @[decode.scala 13:65] 
    node T_7281 = eq(T_7279, UInt<32>("h010000040")) @[decode.scala 13:121] 
    node T_7283 = or(UInt<1>("h00"), T_7277) @[decode.scala 14:30] 
    node T_7284 = or(T_7283, T_7242) @[decode.scala 14:30] 
    node T_7285 = or(T_7284, T_7250) @[decode.scala 14:30] 
    node T_7286 = or(T_7285, T_7281) @[decode.scala 14:30] 
    node T_7288 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02000074")) @[decode.scala 13:65] 
    node T_7290 = eq(T_7288, UInt<32>("h02000030")) @[decode.scala 13:121] 
    node T_7292 = or(UInt<1>("h00"), T_7290) @[decode.scala 14:30] 
    node T_7294 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h064")) @[decode.scala 13:65] 
    node T_7296 = eq(T_7294, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_7298 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h050")) @[decode.scala 13:65] 
    node T_7300 = eq(T_7298, UInt<32>("h010")) @[decode.scala 13:121] 
    node T_7302 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02024")) @[decode.scala 13:65] 
    node T_7304 = eq(T_7302, UInt<32>("h024")) @[decode.scala 13:121] 
    node T_7306 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h028")) @[decode.scala 13:65] 
    node T_7308 = eq(T_7306, UInt<32>("h028")) @[decode.scala 13:121] 
    node T_7310 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01030")) @[decode.scala 13:65] 
    node T_7312 = eq(T_7310, UInt<32>("h01030")) @[decode.scala 13:121] 
    node T_7314 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02030")) @[decode.scala 13:65] 
    node T_7316 = eq(T_7314, UInt<32>("h02030")) @[decode.scala 13:121] 
    node T_7318 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h090000010")) @[decode.scala 13:65] 
    node T_7320 = eq(T_7318, UInt<32>("h080000010")) @[decode.scala 13:121] 
    node T_7322 = or(UInt<1>("h00"), T_7296) @[decode.scala 14:30] 
    node T_7323 = or(T_7322, T_7300) @[decode.scala 14:30] 
    node T_7324 = or(T_7323, T_7304) @[decode.scala 14:30] 
    node T_7325 = or(T_7324, T_7308) @[decode.scala 14:30] 
    node T_7326 = or(T_7325, T_7312) @[decode.scala 14:30] 
    node T_7327 = or(T_7326, T_7316) @[decode.scala 14:30] 
    node T_7328 = or(T_7327, T_7320) @[decode.scala 14:30] 
    node T_7330 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h01070")) @[decode.scala 13:65] 
    node T_7332 = eq(T_7330, UInt<32>("h01070")) @[decode.scala 13:121] 
    node T_7334 = or(UInt<1>("h00"), T_7332) @[decode.scala 14:30] 
    node T_7336 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h02070")) @[decode.scala 13:65] 
    node T_7338 = eq(T_7336, UInt<32>("h02070")) @[decode.scala 13:121] 
    node T_7340 = or(UInt<1>("h00"), T_7338) @[decode.scala 14:30] 
    node T_7342 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03070")) @[decode.scala 13:65] 
    node T_7344 = eq(T_7342, UInt<32>("h070")) @[decode.scala 13:121] 
    node T_7346 = or(UInt<1>("h00"), T_7344) @[decode.scala 14:30] 
    node T_7347 = cat(T_7346, T_7340) @[Cat.scala 20:58] 
    node T_7348 = cat(T_7347, T_7334) @[Cat.scala 20:58] 
    node T_7350 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03058")) @[decode.scala 13:65] 
    node T_7352 = eq(T_7350, UInt<32>("h01008")) @[decode.scala 13:121] 
    node T_7354 = or(UInt<1>("h00"), T_7352) @[decode.scala 14:30] 
    node T_7356 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h03058")) @[decode.scala 13:65] 
    node T_7358 = eq(T_7356, UInt<32>("h08")) @[decode.scala 13:121] 
    node T_7360 = or(UInt<1>("h00"), T_7358) @[decode.scala 14:30] 
    node T_7362 = and(ibuf.io.inst[0].bits.inst.bits, UInt<32>("h06048")) @[decode.scala 13:65] 
    node T_7364 = eq(T_7362, UInt<32>("h02008")) @[decode.scala 13:121] 
    node T_7366 = or(UInt<1>("h00"), T_7364) @[decode.scala 14:30] 
    id_ctrl.legal <= T_6864 @[idecode.scala 61:42] 
    id_ctrl.fp <= T_6875 @[idecode.scala 61:42] 
    id_ctrl.rocc <= UInt<1>("h00") @[idecode.scala 61:42] 
    id_ctrl.branch <= T_6882 @[idecode.scala 61:42] 
    id_ctrl.jal <= T_6888 @[idecode.scala 61:42] 
    id_ctrl.jalr <= T_6894 @[idecode.scala 61:42] 
    id_ctrl.rxs2 <= T_6910 @[idecode.scala 61:42] 
    id_ctrl.rxs1 <= T_6936 @[idecode.scala 61:42] 
    id_ctrl.sel_alu2 <= T_6980 @[idecode.scala 61:42] 
    id_ctrl.sel_alu1 <= T_7006 @[idecode.scala 61:42] 
    id_ctrl.sel_imm <= T_7042 @[idecode.scala 61:42] 
    id_ctrl.alu_dw <= T_7053 @[idecode.scala 61:42] 
    id_ctrl.alu_fn <= T_7137 @[idecode.scala 61:42] 
    id_ctrl.mem <= T_7158 @[idecode.scala 61:42] 
    id_ctrl.mem_cmd <= T_7218 @[idecode.scala 61:42] 
    id_ctrl.mem_type <= T_7238 @[idecode.scala 61:42] 
    id_ctrl.rfs1 <= T_7254 @[idecode.scala 61:42] 
    id_ctrl.rfs2 <= T_7271 @[idecode.scala 61:42] 
    id_ctrl.rfs3 <= T_7273 @[idecode.scala 61:42] 
    id_ctrl.wfd <= T_7286 @[idecode.scala 61:42] 
    id_ctrl.div <= T_7292 @[idecode.scala 61:42] 
    id_ctrl.wxd <= T_7328 @[idecode.scala 61:42] 
    id_ctrl.csr <= T_7348 @[idecode.scala 61:42] 
    id_ctrl.fence_i <= T_7354 @[idecode.scala 61:42] 
    id_ctrl.fence <= T_7360 @[idecode.scala 61:42] 
    id_ctrl.amo <= T_7366 @[idecode.scala 61:42] 
    wire id_load_use : UInt<1> @[rocket.scala 216:25] 
    id_load_use is invalid @[rocket.scala 216:25] 
    reg id_reg_fence : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    cmem T_7371 : UInt<64>[31] @[rocket.scala 94:23] 
    wire id_rs_0 : UInt @[rocket.scala 100:26] 
    id_rs_0 is invalid @[rocket.scala 100:26] 
    node T_7375 = eq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 101:45] 
    node T_7376 = and(UInt<1>("h00"), T_7375) @[rocket.scala 101:37] 
    node T_7378 = bits(ibuf.io.inst[0].bits.inst.rs1, 4, 0) @[rocket.scala 95:44] 
    node T_7379 = not(T_7378) @[rocket.scala 95:39] 
    infer mport T_7380 = T_7371[T_7379], clk
    node T_7381 = mux(T_7376, UInt<1>("h00"), T_7380) @[rocket.scala 101:25] 
    id_rs_0 <= T_7381 @[rocket.scala 101:19] 
    wire id_rs_1 : UInt @[rocket.scala 100:26] 
    id_rs_1 is invalid @[rocket.scala 100:26] 
    node T_7385 = eq(ibuf.io.inst[0].bits.inst.rs2, UInt<1>("h00")) @[rocket.scala 101:45] 
    node T_7386 = and(UInt<1>("h00"), T_7385) @[rocket.scala 101:37] 
    node T_7388 = bits(ibuf.io.inst[0].bits.inst.rs2, 4, 0) @[rocket.scala 95:44] 
    node T_7389 = not(T_7388) @[rocket.scala 95:39] 
    infer mport T_7390 = T_7371[T_7389], clk
    node T_7391 = mux(T_7386, UInt<1>("h00"), T_7390) @[rocket.scala 101:25] 
    id_rs_1 <= T_7391 @[rocket.scala 101:19] 
    wire ctrl_killd : UInt<1> @[rocket.scala 222:24] 
    ctrl_killd is invalid @[rocket.scala 222:24] 
    inst csr of CSRFile @[rocket.scala 224:19] 
    csr.io is invalid
    csr.clk <= clk
    csr.reset <= reset
    node id_csr_en = neq(id_ctrl.csr, UInt<3>("h00")) @[rocket.scala 225:31] 
    node id_system_insn = eq(id_ctrl.csr, UInt<3>("h04")) @[rocket.scala 226:36] 
    node T_7393 = eq(id_ctrl.csr, UInt<3>("h02")) @[rocket.scala 227:33] 
    node T_7394 = eq(id_ctrl.csr, UInt<3>("h03")) @[rocket.scala 227:58] 
    node T_7395 = or(T_7393, T_7394) @[rocket.scala 227:43] 
    node T_7397 = eq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 227:82] 
    node id_csr_ren = and(T_7395, T_7397) @[rocket.scala 227:69] 
    node id_csr = mux(id_csr_ren, UInt<3>("h05"), id_ctrl.csr) @[rocket.scala 228:19] 
    node id_csr_addr = bits(ibuf.io.inst[0].bits.inst.bits, 31, 20) @[rocket.scala 229:31] 
    node T_7399 = eq(id_csr_ren, UInt<1>("h00")) @[rocket.scala 233:54] 
    node T_7400 = and(id_csr_en, T_7399) @[rocket.scala 233:51] 
    node T_7454 = and(id_csr_addr, UInt<12>("h046")) @[decode.scala 13:65] 
    node T_7456 = eq(T_7454, UInt<12>("h040")) @[decode.scala 13:121] 
    node T_7458 = and(id_csr_addr, UInt<12>("h0644")) @[decode.scala 13:65] 
    node T_7460 = eq(T_7458, UInt<12>("h0240")) @[decode.scala 13:121] 
    node T_7462 = or(UInt<1>("h00"), T_7456) @[decode.scala 14:30] 
    node T_7463 = or(T_7462, T_7460) @[decode.scala 14:30] 
    node T_7464 = bits(T_7463, 0, 0) @[decode.scala 54:116] 
    node T_7466 = eq(T_7464, UInt<1>("h00")) @[rocket.scala 233:69] 
    node T_7467 = and(T_7400, T_7466) @[rocket.scala 233:66] 
    node id_csr_flush = or(id_system_insn, T_7467) @[rocket.scala 233:37] 
    node T_7469 = eq(id_ctrl.legal, UInt<1>("h00")) @[rocket.scala 235:25] 
    node T_7471 = neq(csr.io.status.fs, UInt<1>("h00")) @[rocket.scala 236:37] 
    node T_7473 = eq(T_7471, UInt<1>("h00")) @[rocket.scala 236:19] 
    node T_7474 = and(id_ctrl.fp, T_7473) @[rocket.scala 236:16] 
    node T_7475 = or(T_7469, T_7474) @[rocket.scala 235:40] 
    node T_7477 = neq(csr.io.status.xs, UInt<1>("h00")) @[rocket.scala 237:39] 
    node T_7479 = eq(T_7477, UInt<1>("h00")) @[rocket.scala 237:21] 
    node T_7480 = and(id_ctrl.rocc, T_7479) @[rocket.scala 237:18] 
    node id_illegal_insn = or(T_7475, T_7480) @[rocket.scala 236:41] 
    node id_amo_aq = bits(ibuf.io.inst[0].bits.inst.bits, 26, 26) @[rocket.scala 239:29] 
    node id_amo_rl = bits(ibuf.io.inst[0].bits.inst.bits, 25, 25) @[rocket.scala 240:29] 
    node T_7481 = and(id_ctrl.amo, id_amo_rl) @[rocket.scala 241:52] 
    node id_fence_next = or(id_ctrl.fence, T_7481) @[rocket.scala 241:37] 
    node T_7483 = eq(io.dmem.ordered, UInt<1>("h00")) @[rocket.scala 242:21] 
    node id_mem_busy = or(T_7483, io.dmem.req.valid) @[rocket.scala 242:38] 
    node T_7485 = and(ex_reg_valid, ex_ctrl.rocc) @[rocket.scala 244:35] 
    node T_7486 = or(io.rocc.busy, T_7485) @[rocket.scala 244:19] 
    node T_7487 = and(mem_reg_valid, mem_ctrl.rocc) @[rocket.scala 245:20] 
    node T_7488 = or(T_7486, T_7487) @[rocket.scala 244:51] 
    node T_7489 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 245:53] 
    node T_7490 = or(T_7488, T_7489) @[rocket.scala 245:37] 
    node id_rocc_busy = and(UInt<1>("h00"), T_7490) @[rocket.scala 243:38] 
    node T_7491 = and(id_reg_fence, id_mem_busy) @[rocket.scala 246:49] 
    node T_7492 = or(id_fence_next, T_7491) @[rocket.scala 246:33] 
    id_reg_fence <= T_7492 @[rocket.scala 246:16] 
    node T_7493 = and(id_rocc_busy, id_ctrl.fence) @[rocket.scala 247:34] 
    node T_7494 = and(id_ctrl.amo, id_amo_aq) @[rocket.scala 248:33] 
    node T_7495 = or(T_7494, id_ctrl.fence_i) @[rocket.scala 248:46] 
    node T_7496 = or(id_ctrl.mem, id_ctrl.rocc) @[rocket.scala 248:97] 
    node T_7497 = and(id_reg_fence, T_7496) @[rocket.scala 248:81] 
    node T_7498 = or(T_7495, T_7497) @[rocket.scala 248:65] 
    node T_7499 = or(T_7498, id_csr_en) @[rocket.scala 248:114] 
    node T_7500 = and(id_mem_busy, T_7499) @[rocket.scala 248:17] 
    node id_do_fence = or(T_7493, T_7500) @[rocket.scala 247:51] 
    inst bpu of BreakpointUnit @[rocket.scala 250:19] 
    bpu.io is invalid
    bpu.clk <= clk
    bpu.reset <= reset
    bpu.io.status <- csr.io.status @[rocket.scala 251:17] 
    bpu.io.bp <= csr.io.bp @[rocket.scala 252:13] 
    bpu.io.pc <= ibuf.io.pc @[rocket.scala 253:13] 
    bpu.io.ea <= mem_reg_wdata @[rocket.scala 254:13] 
    node id_xcpt_if = or(ibuf.io.inst[0].bits.pf0, ibuf.io.inst[0].bits.pf1) @[rocket.scala 256:45] 
    node T_7504 = or(csr.io.interrupt, bpu.io.xcpt_if) @[rocket.scala 670:26] 
    node T_7505 = or(T_7504, id_xcpt_if) @[rocket.scala 670:26] 
    node id_xcpt = or(T_7505, id_illegal_insn) @[rocket.scala 670:26] 
    node T_7506 = mux(id_xcpt_if, UInt<1>("h01"), UInt<2>("h02")) @[Mux.scala 31:69] 
    node T_7507 = mux(bpu.io.xcpt_if, UInt<2>("h03"), T_7506) @[Mux.scala 31:69] 
    node id_cause = mux(csr.io.interrupt, csr.io.interrupt_cause, T_7507) @[Mux.scala 31:69] 
    node ex_waddr = bits(ex_reg_inst, 11, 7) @[rocket.scala 269:29] 
    node mem_waddr = bits(mem_reg_inst, 11, 7) @[rocket.scala 270:31] 
    node wb_waddr = bits(wb_reg_inst, 11, 7) @[rocket.scala 271:29] 
    node T_7511 = and(ex_reg_valid, ex_ctrl.wxd) @[rocket.scala 274:19] 
    node T_7512 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 275:20] 
    node T_7514 = eq(mem_ctrl.mem, UInt<1>("h00")) @[rocket.scala 275:39] 
    node T_7515 = and(T_7512, T_7514) @[rocket.scala 275:36] 
    node T_7516 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 276:20] 
    node T_7517 = eq(UInt<1>("h00"), ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 277:82] 
    node id_bypass_src_0_0 = and(UInt<1>("h01"), T_7517) @[rocket.scala 277:74] 
    node T_7518 = eq(ex_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 277:82] 
    node id_bypass_src_0_1 = and(T_7511, T_7518) @[rocket.scala 277:74] 
    node T_7519 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 277:82] 
    node id_bypass_src_0_2 = and(T_7515, T_7519) @[rocket.scala 277:74] 
    node T_7520 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 277:82] 
    node id_bypass_src_0_3 = and(T_7516, T_7520) @[rocket.scala 277:74] 
    node T_7521 = eq(UInt<1>("h00"), ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 277:82] 
    node id_bypass_src_1_0 = and(UInt<1>("h01"), T_7521) @[rocket.scala 277:74] 
    node T_7522 = eq(ex_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 277:82] 
    node id_bypass_src_1_1 = and(T_7511, T_7522) @[rocket.scala 277:74] 
    node T_7523 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 277:82] 
    node id_bypass_src_1_2 = and(T_7515, T_7523) @[rocket.scala 277:74] 
    node T_7524 = eq(mem_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 277:82] 
    node id_bypass_src_1_3 = and(T_7516, T_7524) @[rocket.scala 277:74] 
    wire bypass_mux : UInt[4] @[rocket.scala 280:23] 
    bypass_mux is invalid @[rocket.scala 280:23] 
    bypass_mux[0] <= UInt<1>("h00") @[rocket.scala 280:23] 
    bypass_mux[1] <= mem_reg_wdata @[rocket.scala 280:23] 
    bypass_mux[2] <= wb_reg_wdata @[rocket.scala 280:23] 
    bypass_mux[3] <= io.dmem.resp.bits.data_word_bypass @[rocket.scala 280:23] 
    reg ex_reg_rs_bypass : UInt<1>[2], clk
    reg ex_reg_rs_lsb : UInt[2], clk
    reg ex_reg_rs_msb : UInt[2], clk
    node T_7552 = cat(ex_reg_rs_msb[0], ex_reg_rs_lsb[0]) @[Cat.scala 20:58] 
    node ex_rs_0 = mux(ex_reg_rs_bypass[0], bypass_mux[ex_reg_rs_lsb[0]], T_7552) @[rocket.scala 285:14] 
    node T_7553 = cat(ex_reg_rs_msb[1], ex_reg_rs_lsb[1]) @[Cat.scala 20:58] 
    node ex_rs_1 = mux(ex_reg_rs_bypass[1], bypass_mux[ex_reg_rs_lsb[1]], T_7553) @[rocket.scala 285:14] 
    node T_7554 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 116:24] 
    node T_7556 = bits(ex_reg_inst, 31, 31) @[rocket.scala 116:48] 
    node T_7557 = asSInt(T_7556) @[rocket.scala 116:53] 
    node T_7558 = mux(T_7554, asSInt(UInt<1>("h00")), T_7557) @[rocket.scala 116:19] 
    node T_7559 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 117:26] 
    node T_7560 = bits(ex_reg_inst, 30, 20) @[rocket.scala 117:41] 
    node T_7561 = asSInt(T_7560) @[rocket.scala 117:49] 
    node T_7562 = mux(T_7559, T_7561, T_7558) @[rocket.scala 117:21] 
    node T_7563 = neq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 118:26] 
    node T_7564 = neq(ex_ctrl.sel_imm, UInt<3>("h03")) @[rocket.scala 118:43] 
    node T_7565 = and(T_7563, T_7564) @[rocket.scala 118:36] 
    node T_7566 = bits(ex_reg_inst, 19, 12) @[rocket.scala 118:65] 
    node T_7567 = asSInt(T_7566) @[rocket.scala 118:73] 
    node T_7568 = mux(T_7565, T_7558, T_7567) @[rocket.scala 118:21] 
    node T_7569 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 119:23] 
    node T_7570 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 119:40] 
    node T_7571 = or(T_7569, T_7570) @[rocket.scala 119:33] 
    node T_7573 = eq(ex_ctrl.sel_imm, UInt<3>("h03")) @[rocket.scala 120:23] 
    node T_7574 = bits(ex_reg_inst, 20, 20) @[rocket.scala 120:39] 
    node T_7575 = asSInt(T_7574) @[rocket.scala 120:44] 
    node T_7576 = eq(ex_ctrl.sel_imm, UInt<3>("h01")) @[rocket.scala 121:23] 
    node T_7577 = bits(ex_reg_inst, 7, 7) @[rocket.scala 121:39] 
    node T_7578 = asSInt(T_7577) @[rocket.scala 121:43] 
    node T_7579 = mux(T_7576, T_7578, T_7558) @[rocket.scala 121:18] 
    node T_7580 = mux(T_7573, T_7575, T_7579) @[rocket.scala 120:18] 
    node T_7581 = mux(T_7571, asSInt(UInt<1>("h00")), T_7580) @[rocket.scala 119:18] 
    node T_7582 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 122:25] 
    node T_7583 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 122:42] 
    node T_7584 = or(T_7582, T_7583) @[rocket.scala 122:35] 
    node T_7586 = bits(ex_reg_inst, 30, 25) @[rocket.scala 122:66] 
    node T_7587 = mux(T_7584, UInt<1>("h00"), T_7586) @[rocket.scala 122:20] 
    node T_7588 = eq(ex_ctrl.sel_imm, UInt<3>("h02")) @[rocket.scala 123:24] 
    node T_7590 = eq(ex_ctrl.sel_imm, UInt<3>("h00")) @[rocket.scala 124:24] 
    node T_7591 = eq(ex_ctrl.sel_imm, UInt<3>("h01")) @[rocket.scala 124:41] 
    node T_7592 = or(T_7590, T_7591) @[rocket.scala 124:34] 
    node T_7593 = bits(ex_reg_inst, 11, 8) @[rocket.scala 124:57] 
    node T_7594 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 125:24] 
    node T_7595 = bits(ex_reg_inst, 19, 16) @[rocket.scala 125:39] 
    node T_7596 = bits(ex_reg_inst, 24, 21) @[rocket.scala 125:52] 
    node T_7597 = mux(T_7594, T_7595, T_7596) @[rocket.scala 125:19] 
    node T_7598 = mux(T_7592, T_7593, T_7597) @[rocket.scala 124:19] 
    node T_7599 = mux(T_7588, UInt<1>("h00"), T_7598) @[rocket.scala 123:19] 
    node T_7600 = eq(ex_ctrl.sel_imm, UInt<3>("h00")) @[rocket.scala 126:22] 
    node T_7601 = bits(ex_reg_inst, 7, 7) @[rocket.scala 126:37] 
    node T_7602 = eq(ex_ctrl.sel_imm, UInt<3>("h04")) @[rocket.scala 127:22] 
    node T_7603 = bits(ex_reg_inst, 20, 20) @[rocket.scala 127:37] 
    node T_7604 = eq(ex_ctrl.sel_imm, UInt<3>("h05")) @[rocket.scala 128:22] 
    node T_7605 = bits(ex_reg_inst, 15, 15) @[rocket.scala 128:37] 
    node T_7607 = shl(T_7605, 0) @[rocket.scala 128:17] 
    node T_7608 = mux(T_7604, T_7607, UInt<1>("h00")) @[rocket.scala 128:17] 
    node T_7609 = shl(T_7603, 0) @[rocket.scala 127:17] 
    node T_7610 = mux(T_7602, T_7609, T_7608) @[rocket.scala 127:17] 
    node T_7611 = shl(T_7601, 0) @[rocket.scala 126:17] 
    node T_7612 = mux(T_7600, T_7611, T_7610) @[rocket.scala 126:17] 
    node T_7613 = cat(T_7587, T_7599) @[Cat.scala 20:58] 
    node T_7614 = cat(T_7613, T_7612) @[Cat.scala 20:58] 
    node T_7615 = asUInt(T_7581) @[Cat.scala 20:58] 
    node T_7616 = asUInt(T_7568) @[Cat.scala 20:58] 
    node T_7617 = cat(T_7616, T_7615) @[Cat.scala 20:58] 
    node T_7618 = asUInt(T_7562) @[Cat.scala 20:58] 
    node T_7619 = asUInt(T_7558) @[Cat.scala 20:58] 
    node T_7620 = cat(T_7619, T_7618) @[Cat.scala 20:58] 
    node T_7621 = cat(T_7620, T_7617) @[Cat.scala 20:58] 
    node T_7622 = cat(T_7621, T_7614) @[Cat.scala 20:58] 
    node ex_imm = asSInt(T_7622) @[rocket.scala 130:53] 
    node T_7624 = asSInt(ex_rs_0) @[rocket.scala 288:24] 
    node T_7625 = asSInt(ex_reg_pc) @[rocket.scala 289:24] 
    node T_7626 = eq(UInt<2>("h02"), ex_ctrl.sel_alu1) @[Mux.scala 46:19] 
    node T_7627 = mux(T_7626, T_7625, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16] 
    node T_7628 = eq(UInt<2>("h01"), ex_ctrl.sel_alu1) @[Mux.scala 46:19] 
    node ex_op1 = mux(T_7628, T_7624, T_7627) @[Mux.scala 46:16] 
    node T_7630 = asSInt(ex_rs_1) @[rocket.scala 291:24] 
    node T_7633 = mux(ex_reg_rvc, asSInt(UInt<3>("h02")), asSInt(UInt<4>("h04"))) @[rocket.scala 293:19] 
    node T_7634 = eq(UInt<2>("h01"), ex_ctrl.sel_alu2) @[Mux.scala 46:19] 
    node T_7635 = mux(T_7634, T_7633, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16] 
    node T_7636 = eq(UInt<2>("h03"), ex_ctrl.sel_alu2) @[Mux.scala 46:19] 
    node T_7637 = mux(T_7636, ex_imm, T_7635) @[Mux.scala 46:16] 
    node T_7638 = eq(UInt<2>("h02"), ex_ctrl.sel_alu2) @[Mux.scala 46:19] 
    node ex_op2 = mux(T_7638, T_7630, T_7637) @[Mux.scala 46:16] 
    inst alu of ALU @[rocket.scala 295:19] 
    alu.io is invalid
    alu.clk <= clk
    alu.reset <= reset
    alu.io.dw <= ex_ctrl.alu_dw @[rocket.scala 296:13] 
    alu.io.fn <= ex_ctrl.alu_fn @[rocket.scala 297:13] 
    node T_7639 = asUInt(ex_op2) @[rocket.scala 298:24] 
    alu.io.in2 <= T_7639 @[rocket.scala 298:14] 
    node T_7640 = asUInt(ex_op1) @[rocket.scala 299:24] 
    alu.io.in1 <= T_7640 @[rocket.scala 299:14] 
    inst div of MulDiv @[rocket.scala 302:19] 
    div.io is invalid
    div.clk <= clk
    div.reset <= reset
    node T_7641 = and(ex_reg_valid, ex_ctrl.div) @[rocket.scala 306:36] 
    div.io.req.valid <= T_7641 @[rocket.scala 306:20] 
    div.io.req.bits.dw <= ex_ctrl.alu_dw @[rocket.scala 307:22] 
    div.io.req.bits.fn <= ex_ctrl.alu_fn @[rocket.scala 308:22] 
    div.io.req.bits.in1 <= ex_rs_0 @[rocket.scala 309:23] 
    div.io.req.bits.in2 <= ex_rs_1 @[rocket.scala 310:23] 
    div.io.req.bits.tag <= ex_waddr @[rocket.scala 311:23] 
    node T_7643 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 313:19] 
    ex_reg_valid <= T_7643 @[rocket.scala 313:16] 
    node T_7645 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 314:20] 
    node T_7646 = and(T_7645, ibuf.io.inst[0].valid) @[rocket.scala 314:29] 
    node T_7647 = and(T_7646, ibuf.io.inst[0].bits.replay) @[rocket.scala 314:54] 
    ex_reg_replay <= T_7647 @[rocket.scala 314:17] 
    node T_7649 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 315:18] 
    node T_7650 = and(T_7649, id_xcpt) @[rocket.scala 315:30] 
    ex_reg_xcpt <= T_7650 @[rocket.scala 315:15] 
    node T_7652 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 316:28] 
    node T_7653 = and(T_7652, ibuf.io.inst[0].valid) @[rocket.scala 316:37] 
    node T_7654 = and(T_7653, csr.io.interrupt) @[rocket.scala 316:62] 
    ex_reg_xcpt_interrupt <= T_7654 @[rocket.scala 316:25] 
    when id_xcpt : @[rocket.scala 317:18] 
      ex_reg_cause <= id_cause @[rocket.scala 317:33] 
      skip @[rocket.scala 317:18] 
    ex_reg_btb_hit <= ibuf.io.inst[0].bits.btb_hit @[rocket.scala 318:18] 
    when ibuf.io.inst[0].bits.btb_hit : @[rocket.scala 319:39] 
      ex_reg_btb_resp <- ibuf.io.btb_resp @[rocket.scala 319:57] 
      skip @[rocket.scala 319:39] 
    node T_7656 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 321:9] 
    when T_7656 : @[rocket.scala 321:22] 
      ex_ctrl <- id_ctrl @[rocket.scala 322:13] 
      ex_reg_rvc <= ibuf.io.inst[0].bits.rvc @[rocket.scala 323:16] 
      ex_ctrl.csr <= id_csr @[rocket.scala 324:17] 
      when id_xcpt : @[rocket.scala 325:20] 
        ex_ctrl.alu_fn <= UInt<1>("h00") @[rocket.scala 326:22] 
        ex_ctrl.sel_alu1 <= UInt<2>("h02") @[rocket.scala 327:24] 
        ex_ctrl.sel_alu2 <= UInt<2>("h00") @[rocket.scala 328:24] 
        node T_7658 = eq(bpu.io.xcpt_if, UInt<1>("h00")) @[rocket.scala 329:13] 
        node T_7660 = eq(ibuf.io.inst[0].bits.pf0, UInt<1>("h00")) @[rocket.scala 329:32] 
        node T_7661 = and(T_7658, T_7660) @[rocket.scala 329:29] 
        node T_7662 = and(T_7661, ibuf.io.inst[0].bits.pf1) @[rocket.scala 329:58] 
        when T_7662 : @[rocket.scala 329:87] 
          ex_ctrl.sel_alu2 <= UInt<2>("h01") @[rocket.scala 330:26] 
          ex_reg_rvc <= UInt<1>("h01") @[rocket.scala 331:20] 
          skip @[rocket.scala 329:87] 
        skip @[rocket.scala 325:20] 
      node T_7664 = or(id_ctrl.fence_i, id_csr_flush) @[rocket.scala 334:42] 
      node T_7665 = or(T_7664, csr.io.singleStep) @[rocket.scala 334:58] 
      ex_reg_flush_pipe <= T_7665 @[rocket.scala 334:23] 
      ex_reg_load_use <= id_load_use @[rocket.scala 335:21] 
      node T_7666 = and(id_ctrl.jalr, csr.io.status.debug) @[rocket.scala 337:24] 
      when T_7666 : @[rocket.scala 337:48] 
        ex_reg_flush_pipe <= UInt<1>("h01") @[rocket.scala 338:25] 
        ex_ctrl.fence_i <= UInt<1>("h01") @[rocket.scala 339:23] 
        skip @[rocket.scala 337:48] 
      node T_7669 = or(id_bypass_src_0_0, id_bypass_src_0_1) @[rocket.scala 343:48] 
      node T_7670 = or(T_7669, id_bypass_src_0_2) @[rocket.scala 343:48] 
      node T_7671 = or(T_7670, id_bypass_src_0_3) @[rocket.scala 343:48] 
      node T_7676 = mux(id_bypass_src_0_2, UInt<2>("h02"), UInt<2>("h03")) @[Mux.scala 31:69] 
      node T_7677 = mux(id_bypass_src_0_1, UInt<1>("h01"), T_7676) @[Mux.scala 31:69] 
      node T_7678 = mux(id_bypass_src_0_0, UInt<1>("h00"), T_7677) @[Mux.scala 31:69] 
      ex_reg_rs_bypass[0] <= T_7671 @[rocket.scala 345:27] 
      ex_reg_rs_lsb[0] <= T_7678 @[rocket.scala 346:24] 
      node T_7680 = eq(T_7671, UInt<1>("h00")) @[rocket.scala 347:26] 
      node T_7681 = and(id_ctrl.rxs1, T_7680) @[rocket.scala 347:23] 
      when T_7681 : @[rocket.scala 347:38] 
        node T_7682 = bits(id_rs_0, 1, 0) @[rocket.scala 348:37] 
        ex_reg_rs_lsb[0] <= T_7682 @[rocket.scala 348:26] 
        node T_7683 = shr(id_rs_0, 2) @[rocket.scala 349:38] 
        ex_reg_rs_msb[0] <= T_7683 @[rocket.scala 349:26] 
        skip @[rocket.scala 347:38] 
      node T_7684 = or(id_bypass_src_1_0, id_bypass_src_1_1) @[rocket.scala 343:48] 
      node T_7685 = or(T_7684, id_bypass_src_1_2) @[rocket.scala 343:48] 
      node T_7686 = or(T_7685, id_bypass_src_1_3) @[rocket.scala 343:48] 
      node T_7691 = mux(id_bypass_src_1_2, UInt<2>("h02"), UInt<2>("h03")) @[Mux.scala 31:69] 
      node T_7692 = mux(id_bypass_src_1_1, UInt<1>("h01"), T_7691) @[Mux.scala 31:69] 
      node T_7693 = mux(id_bypass_src_1_0, UInt<1>("h00"), T_7692) @[Mux.scala 31:69] 
      ex_reg_rs_bypass[1] <= T_7686 @[rocket.scala 345:27] 
      ex_reg_rs_lsb[1] <= T_7693 @[rocket.scala 346:24] 
      node T_7695 = eq(T_7686, UInt<1>("h00")) @[rocket.scala 347:26] 
      node T_7696 = and(id_ctrl.rxs2, T_7695) @[rocket.scala 347:23] 
      when T_7696 : @[rocket.scala 347:38] 
        node T_7697 = bits(id_rs_1, 1, 0) @[rocket.scala 348:37] 
        ex_reg_rs_lsb[1] <= T_7697 @[rocket.scala 348:26] 
        node T_7698 = shr(id_rs_1, 2) @[rocket.scala 349:38] 
        ex_reg_rs_msb[1] <= T_7698 @[rocket.scala 349:26] 
        skip @[rocket.scala 347:38] 
      skip @[rocket.scala 321:22] 
    node T_7700 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 353:9] 
    node T_7701 = or(T_7700, csr.io.interrupt) @[rocket.scala 353:21] 
    node T_7702 = or(T_7701, ibuf.io.inst[0].bits.replay) @[rocket.scala 353:41] 
    when T_7702 : @[rocket.scala 353:73] 
      ex_reg_inst <= ibuf.io.inst[0].bits.inst.bits @[rocket.scala 354:17] 
      ex_reg_pc <= ibuf.io.pc @[rocket.scala 355:15] 
      skip @[rocket.scala 353:73] 
    node T_7703 = or(ex_reg_valid, ex_reg_replay) @[rocket.scala 359:34] 
    node ex_pc_valid = or(T_7703, ex_reg_xcpt_interrupt) @[rocket.scala 359:51] 
    node T_7705 = eq(io.dmem.resp.valid, UInt<1>("h00")) @[rocket.scala 360:39] 
    node wb_dcache_miss = and(wb_ctrl.mem, T_7705) @[rocket.scala 360:36] 
    node T_7707 = eq(io.dmem.req.ready, UInt<1>("h00")) @[rocket.scala 361:45] 
    node T_7708 = and(ex_ctrl.mem, T_7707) @[rocket.scala 361:42] 
    node T_7710 = eq(div.io.req.ready, UInt<1>("h00")) @[rocket.scala 362:45] 
    node T_7711 = and(ex_ctrl.div, T_7710) @[rocket.scala 362:42] 
    node replay_ex_structural = or(T_7708, T_7711) @[rocket.scala 361:64] 
    node replay_ex_load_use = and(wb_dcache_miss, ex_reg_load_use) @[rocket.scala 363:43] 
    node T_7712 = or(replay_ex_structural, replay_ex_load_use) @[rocket.scala 364:75] 
    node T_7713 = and(ex_reg_valid, T_7712) @[rocket.scala 364:50] 
    node replay_ex = or(ex_reg_replay, T_7713) @[rocket.scala 364:33] 
    node T_7714 = or(take_pc_mem_wb, replay_ex) @[rocket.scala 365:35] 
    node T_7716 = eq(ex_reg_valid, UInt<1>("h00")) @[rocket.scala 365:51] 
    node ctrl_killx = or(T_7714, T_7716) @[rocket.scala 365:48] 
    node T_7717 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[rocket.scala 367:40] 
    wire T_7723 : UInt<3>[4] @[rocket.scala 367:56] 
    T_7723 is invalid @[rocket.scala 367:56] 
    T_7723[0] <= UInt<3>("h00") @[rocket.scala 367:56] 
    T_7723[1] <= UInt<3>("h04") @[rocket.scala 367:56] 
    T_7723[2] <= UInt<3>("h01") @[rocket.scala 367:56] 
    T_7723[3] <= UInt<3>("h05") @[rocket.scala 367:56] 
    node T_7725 = eq(T_7723[0], ex_ctrl.mem_type) @[rocket.scala 367:91] 
    node T_7726 = eq(T_7723[1], ex_ctrl.mem_type) @[rocket.scala 367:91] 
    node T_7727 = eq(T_7723[2], ex_ctrl.mem_type) @[rocket.scala 367:91] 
    node T_7728 = eq(T_7723[3], ex_ctrl.mem_type) @[rocket.scala 367:91] 
    node T_7730 = or(UInt<1>("h00"), T_7725) @[rocket.scala 367:91] 
    node T_7731 = or(T_7730, T_7726) @[rocket.scala 367:91] 
    node T_7732 = or(T_7731, T_7727) @[rocket.scala 367:91] 
    node T_7733 = or(T_7732, T_7728) @[rocket.scala 367:91] 
    node ex_slow_bypass = or(T_7717, T_7733) @[rocket.scala 367:50] 
    node T_7734 = or(ex_reg_xcpt_interrupt, ex_reg_xcpt) @[rocket.scala 370:28] 
    node T_7735 = and(ex_ctrl.fp, io.fpu.illegal_rm) @[rocket.scala 371:17] 
    node ex_xcpt = or(T_7734, T_7735) @[rocket.scala 670:26] 
    node ex_cause = mux(T_7734, ex_reg_cause, UInt<2>("h02")) @[Mux.scala 31:69] 
    node mem_br_taken = bits(mem_reg_wdata, 0, 0) @[rocket.scala 374:35] 
    node T_7737 = asSInt(mem_reg_pc) @[rocket.scala 375:34] 
    node T_7738 = and(mem_ctrl.branch, mem_br_taken) @[rocket.scala 376:25] 
    node T_7739 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 116:24] 
    node T_7741 = bits(mem_reg_inst, 31, 31) @[rocket.scala 116:48] 
    node T_7742 = asSInt(T_7741) @[rocket.scala 116:53] 
    node T_7743 = mux(T_7739, asSInt(UInt<1>("h00")), T_7742) @[rocket.scala 116:19] 
    node T_7744 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 117:26] 
    node T_7745 = bits(mem_reg_inst, 30, 20) @[rocket.scala 117:41] 
    node T_7746 = asSInt(T_7745) @[rocket.scala 117:49] 
    node T_7747 = mux(T_7744, T_7746, T_7743) @[rocket.scala 117:21] 
    node T_7748 = neq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 118:26] 
    node T_7749 = neq(UInt<3>("h01"), UInt<3>("h03")) @[rocket.scala 118:43] 
    node T_7750 = and(T_7748, T_7749) @[rocket.scala 118:36] 
    node T_7751 = bits(mem_reg_inst, 19, 12) @[rocket.scala 118:65] 
    node T_7752 = asSInt(T_7751) @[rocket.scala 118:73] 
    node T_7753 = mux(T_7750, T_7743, T_7752) @[rocket.scala 118:21] 
    node T_7754 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 119:23] 
    node T_7755 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 119:40] 
    node T_7756 = or(T_7754, T_7755) @[rocket.scala 119:33] 
    node T_7758 = eq(UInt<3>("h01"), UInt<3>("h03")) @[rocket.scala 120:23] 
    node T_7759 = bits(mem_reg_inst, 20, 20) @[rocket.scala 120:39] 
    node T_7760 = asSInt(T_7759) @[rocket.scala 120:44] 
    node T_7761 = eq(UInt<3>("h01"), UInt<3>("h01")) @[rocket.scala 121:23] 
    node T_7762 = bits(mem_reg_inst, 7, 7) @[rocket.scala 121:39] 
    node T_7763 = asSInt(T_7762) @[rocket.scala 121:43] 
    node T_7764 = mux(T_7761, T_7763, T_7743) @[rocket.scala 121:18] 
    node T_7765 = mux(T_7758, T_7760, T_7764) @[rocket.scala 120:18] 
    node T_7766 = mux(T_7756, asSInt(UInt<1>("h00")), T_7765) @[rocket.scala 119:18] 
    node T_7767 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 122:25] 
    node T_7768 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 122:42] 
    node T_7769 = or(T_7767, T_7768) @[rocket.scala 122:35] 
    node T_7771 = bits(mem_reg_inst, 30, 25) @[rocket.scala 122:66] 
    node T_7772 = mux(T_7769, UInt<1>("h00"), T_7771) @[rocket.scala 122:20] 
    node T_7773 = eq(UInt<3>("h01"), UInt<3>("h02")) @[rocket.scala 123:24] 
    node T_7775 = eq(UInt<3>("h01"), UInt<3>("h00")) @[rocket.scala 124:24] 
    node T_7776 = eq(UInt<3>("h01"), UInt<3>("h01")) @[rocket.scala 124:41] 
    node T_7777 = or(T_7775, T_7776) @[rocket.scala 124:34] 
    node T_7778 = bits(mem_reg_inst, 11, 8) @[rocket.scala 124:57] 
    node T_7779 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 125:24] 
    node T_7780 = bits(mem_reg_inst, 19, 16) @[rocket.scala 125:39] 
    node T_7781 = bits(mem_reg_inst, 24, 21) @[rocket.scala 125:52] 
    node T_7782 = mux(T_7779, T_7780, T_7781) @[rocket.scala 125:19] 
    node T_7783 = mux(T_7777, T_7778, T_7782) @[rocket.scala 124:19] 
    node T_7784 = mux(T_7773, UInt<1>("h00"), T_7783) @[rocket.scala 123:19] 
    node T_7785 = eq(UInt<3>("h01"), UInt<3>("h00")) @[rocket.scala 126:22] 
    node T_7786 = bits(mem_reg_inst, 7, 7) @[rocket.scala 126:37] 
    node T_7787 = eq(UInt<3>("h01"), UInt<3>("h04")) @[rocket.scala 127:22] 
    node T_7788 = bits(mem_reg_inst, 20, 20) @[rocket.scala 127:37] 
    node T_7789 = eq(UInt<3>("h01"), UInt<3>("h05")) @[rocket.scala 128:22] 
    node T_7790 = bits(mem_reg_inst, 15, 15) @[rocket.scala 128:37] 
    node T_7792 = shl(T_7790, 0) @[rocket.scala 128:17] 
    node T_7793 = mux(T_7789, T_7792, UInt<1>("h00")) @[rocket.scala 128:17] 
    node T_7794 = shl(T_7788, 0) @[rocket.scala 127:17] 
    node T_7795 = mux(T_7787, T_7794, T_7793) @[rocket.scala 127:17] 
    node T_7796 = shl(T_7786, 0) @[rocket.scala 126:17] 
    node T_7797 = mux(T_7785, T_7796, T_7795) @[rocket.scala 126:17] 
    node T_7798 = cat(T_7772, T_7784) @[Cat.scala 20:58] 
    node T_7799 = cat(T_7798, T_7797) @[Cat.scala 20:58] 
    node T_7800 = asUInt(T_7766) @[Cat.scala 20:58] 
    node T_7801 = asUInt(T_7753) @[Cat.scala 20:58] 
    node T_7802 = cat(T_7801, T_7800) @[Cat.scala 20:58] 
    node T_7803 = asUInt(T_7747) @[Cat.scala 20:58] 
    node T_7804 = asUInt(T_7743) @[Cat.scala 20:58] 
    node T_7805 = cat(T_7804, T_7803) @[Cat.scala 20:58] 
    node T_7806 = cat(T_7805, T_7802) @[Cat.scala 20:58] 
    node T_7807 = cat(T_7806, T_7799) @[Cat.scala 20:58] 
    node T_7808 = asSInt(T_7807) @[rocket.scala 130:53] 
    node T_7809 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 116:24] 
    node T_7811 = bits(mem_reg_inst, 31, 31) @[rocket.scala 116:48] 
    node T_7812 = asSInt(T_7811) @[rocket.scala 116:53] 
    node T_7813 = mux(T_7809, asSInt(UInt<1>("h00")), T_7812) @[rocket.scala 116:19] 
    node T_7814 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 117:26] 
    node T_7815 = bits(mem_reg_inst, 30, 20) @[rocket.scala 117:41] 
    node T_7816 = asSInt(T_7815) @[rocket.scala 117:49] 
    node T_7817 = mux(T_7814, T_7816, T_7813) @[rocket.scala 117:21] 
    node T_7818 = neq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 118:26] 
    node T_7819 = neq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 118:43] 
    node T_7820 = and(T_7818, T_7819) @[rocket.scala 118:36] 
    node T_7821 = bits(mem_reg_inst, 19, 12) @[rocket.scala 118:65] 
    node T_7822 = asSInt(T_7821) @[rocket.scala 118:73] 
    node T_7823 = mux(T_7820, T_7813, T_7822) @[rocket.scala 118:21] 
    node T_7824 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 119:23] 
    node T_7825 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 119:40] 
    node T_7826 = or(T_7824, T_7825) @[rocket.scala 119:33] 
    node T_7828 = eq(UInt<3>("h03"), UInt<3>("h03")) @[rocket.scala 120:23] 
    node T_7829 = bits(mem_reg_inst, 20, 20) @[rocket.scala 120:39] 
    node T_7830 = asSInt(T_7829) @[rocket.scala 120:44] 
    node T_7831 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 121:23] 
    node T_7832 = bits(mem_reg_inst, 7, 7) @[rocket.scala 121:39] 
    node T_7833 = asSInt(T_7832) @[rocket.scala 121:43] 
    node T_7834 = mux(T_7831, T_7833, T_7813) @[rocket.scala 121:18] 
    node T_7835 = mux(T_7828, T_7830, T_7834) @[rocket.scala 120:18] 
    node T_7836 = mux(T_7826, asSInt(UInt<1>("h00")), T_7835) @[rocket.scala 119:18] 
    node T_7837 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 122:25] 
    node T_7838 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 122:42] 
    node T_7839 = or(T_7837, T_7838) @[rocket.scala 122:35] 
    node T_7841 = bits(mem_reg_inst, 30, 25) @[rocket.scala 122:66] 
    node T_7842 = mux(T_7839, UInt<1>("h00"), T_7841) @[rocket.scala 122:20] 
    node T_7843 = eq(UInt<3>("h03"), UInt<3>("h02")) @[rocket.scala 123:24] 
    node T_7845 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 124:24] 
    node T_7846 = eq(UInt<3>("h03"), UInt<3>("h01")) @[rocket.scala 124:41] 
    node T_7847 = or(T_7845, T_7846) @[rocket.scala 124:34] 
    node T_7848 = bits(mem_reg_inst, 11, 8) @[rocket.scala 124:57] 
    node T_7849 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 125:24] 
    node T_7850 = bits(mem_reg_inst, 19, 16) @[rocket.scala 125:39] 
    node T_7851 = bits(mem_reg_inst, 24, 21) @[rocket.scala 125:52] 
    node T_7852 = mux(T_7849, T_7850, T_7851) @[rocket.scala 125:19] 
    node T_7853 = mux(T_7847, T_7848, T_7852) @[rocket.scala 124:19] 
    node T_7854 = mux(T_7843, UInt<1>("h00"), T_7853) @[rocket.scala 123:19] 
    node T_7855 = eq(UInt<3>("h03"), UInt<3>("h00")) @[rocket.scala 126:22] 
    node T_7856 = bits(mem_reg_inst, 7, 7) @[rocket.scala 126:37] 
    node T_7857 = eq(UInt<3>("h03"), UInt<3>("h04")) @[rocket.scala 127:22] 
    node T_7858 = bits(mem_reg_inst, 20, 20) @[rocket.scala 127:37] 
    node T_7859 = eq(UInt<3>("h03"), UInt<3>("h05")) @[rocket.scala 128:22] 
    node T_7860 = bits(mem_reg_inst, 15, 15) @[rocket.scala 128:37] 
    node T_7862 = shl(T_7860, 0) @[rocket.scala 128:17] 
    node T_7863 = mux(T_7859, T_7862, UInt<1>("h00")) @[rocket.scala 128:17] 
    node T_7864 = shl(T_7858, 0) @[rocket.scala 127:17] 
    node T_7865 = mux(T_7857, T_7864, T_7863) @[rocket.scala 127:17] 
    node T_7866 = shl(T_7856, 0) @[rocket.scala 126:17] 
    node T_7867 = mux(T_7855, T_7866, T_7865) @[rocket.scala 126:17] 
    node T_7868 = cat(T_7842, T_7854) @[Cat.scala 20:58] 
    node T_7869 = cat(T_7868, T_7867) @[Cat.scala 20:58] 
    node T_7870 = asUInt(T_7836) @[Cat.scala 20:58] 
    node T_7871 = asUInt(T_7823) @[Cat.scala 20:58] 
    node T_7872 = cat(T_7871, T_7870) @[Cat.scala 20:58] 
    node T_7873 = asUInt(T_7817) @[Cat.scala 20:58] 
    node T_7874 = asUInt(T_7813) @[Cat.scala 20:58] 
    node T_7875 = cat(T_7874, T_7873) @[Cat.scala 20:58] 
    node T_7876 = cat(T_7875, T_7872) @[Cat.scala 20:58] 
    node T_7877 = cat(T_7876, T_7869) @[Cat.scala 20:58] 
    node T_7878 = asSInt(T_7877) @[rocket.scala 130:53] 
    node T_7881 = mux(mem_reg_rvc, asSInt(UInt<3>("h02")), asSInt(UInt<4>("h04"))) @[rocket.scala 378:8] 
    node T_7882 = mux(mem_ctrl.jal, T_7878, T_7881) @[rocket.scala 377:8] 
    node T_7883 = mux(T_7738, T_7808, T_7882) @[rocket.scala 376:8] 
    node T_7884 = add(T_7737, T_7883) @[rocket.scala 375:41] 
    node T_7885 = tail(T_7884, 1) @[rocket.scala 375:41] 
    node mem_br_target = asSInt(T_7885) @[rocket.scala 375:41] 
    node T_7886 = shr(mem_reg_wdata, 38) @[rocket.scala 678:16] 
    node T_7887 = bits(mem_reg_wdata, 39, 38) @[rocket.scala 679:15] 
    node T_7888 = asSInt(T_7887) @[rocket.scala 679:39] 
    node T_7890 = eq(T_7886, UInt<1>("h00")) @[rocket.scala 681:13] 
    node T_7892 = eq(T_7886, UInt<1>("h01")) @[rocket.scala 681:30] 
    node T_7893 = or(T_7890, T_7892) @[rocket.scala 681:25] 
    node T_7895 = neq(T_7888, asSInt(UInt<1>("h00"))) @[rocket.scala 681:45] 
    node T_7896 = asSInt(T_7886) @[rocket.scala 682:13] 
    node T_7898 = eq(T_7896, asSInt(UInt<1>("h01"))) @[rocket.scala 682:20] 
    node T_7899 = asSInt(T_7886) @[rocket.scala 682:38] 
    node T_7901 = eq(T_7899, asSInt(UInt<2>("h02"))) @[rocket.scala 682:45] 
    node T_7902 = or(T_7898, T_7901) @[rocket.scala 682:33] 
    node T_7904 = eq(T_7888, asSInt(UInt<1>("h01"))) @[rocket.scala 682:61] 
    node T_7905 = bits(T_7888, 0, 0) @[rocket.scala 682:76] 
    node T_7906 = mux(T_7902, T_7904, T_7905) @[rocket.scala 682:10] 
    node T_7907 = mux(T_7893, T_7895, T_7906) @[rocket.scala 681:10] 
    node T_7908 = bits(mem_reg_wdata, 38, 0) @[rocket.scala 683:16] 
    node T_7909 = cat(T_7907, T_7908) @[Cat.scala 20:58] 
    node T_7910 = asSInt(T_7909) @[rocket.scala 379:88] 
    node T_7911 = mux(mem_ctrl.jalr, T_7910, mem_br_target) @[rocket.scala 379:21] 
    node T_7913 = and(T_7911, asSInt(UInt<2>("h02"))) @[rocket.scala 379:111] 
    node T_7914 = asSInt(T_7913) @[rocket.scala 379:111] 
    node mem_npc = asUInt(T_7914) @[rocket.scala 379:123] 
    node T_7915 = neq(mem_npc, ex_reg_pc) @[rocket.scala 380:48] 
    node T_7916 = neq(mem_npc, ibuf.io.pc) @[rocket.scala 380:98] 
    node T_7918 = mux(ibuf.io.inst[0].valid, T_7916, UInt<1>("h01")) @[rocket.scala 380:66] 
    node mem_wrong_npc = mux(ex_pc_valid, T_7915, T_7918) @[rocket.scala 380:26] 
    node T_7920 = eq(mem_reg_xcpt, UInt<1>("h00")) @[rocket.scala 382:27] 
    node T_7921 = xor(mem_ctrl.jalr, UInt<1>("h00")) @[rocket.scala 382:59] 
    node T_7922 = and(T_7920, T_7921) @[rocket.scala 382:41] 
    node T_7923 = asSInt(mem_reg_wdata) @[rocket.scala 382:111] 
    node T_7924 = mux(T_7922, mem_br_target, T_7923) @[rocket.scala 382:26] 
    node mem_int_wdata = asUInt(T_7924) @[rocket.scala 382:119] 
    node T_7925 = or(mem_ctrl.branch, mem_ctrl.jalr) @[rocket.scala 383:33] 
    node mem_cfi = or(T_7925, mem_ctrl.jal) @[rocket.scala 383:50] 
    node T_7926 = and(mem_ctrl.branch, mem_br_taken) @[rocket.scala 384:40] 
    node T_7927 = or(T_7926, mem_ctrl.jalr) @[rocket.scala 384:57] 
    node mem_cfi_taken = or(T_7927, mem_ctrl.jal) @[rocket.scala 384:74] 
    node T_7928 = or(mem_wrong_npc, mem_reg_flush_pipe) @[rocket.scala 388:54] 
    node T_7929 = and(mem_reg_valid, T_7928) @[rocket.scala 388:32] 
    take_pc_mem <= T_7929 @[rocket.scala 388:15] 
    node T_7931 = eq(ctrl_killx, UInt<1>("h00")) @[rocket.scala 390:20] 
    mem_reg_valid <= T_7931 @[rocket.scala 390:17] 
    node T_7933 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 391:21] 
    node T_7934 = and(T_7933, replay_ex) @[rocket.scala 391:37] 
    mem_reg_replay <= T_7934 @[rocket.scala 391:18] 
    node T_7936 = eq(ctrl_killx, UInt<1>("h00")) @[rocket.scala 392:19] 
    node T_7937 = and(T_7936, ex_xcpt) @[rocket.scala 392:31] 
    mem_reg_xcpt <= T_7937 @[rocket.scala 392:16] 
    node T_7939 = eq(take_pc_mem_wb, UInt<1>("h00")) @[rocket.scala 393:29] 
    node T_7940 = and(T_7939, ex_reg_xcpt_interrupt) @[rocket.scala 393:45] 
    mem_reg_xcpt_interrupt <= T_7940 @[rocket.scala 393:26] 
    when ex_xcpt : @[rocket.scala 394:18] 
      mem_reg_cause <= ex_cause @[rocket.scala 394:34] 
      skip @[rocket.scala 394:18] 
    when ex_pc_valid : @[rocket.scala 396:22] 
      mem_ctrl <- ex_ctrl @[rocket.scala 397:14] 
      mem_reg_rvc <= ex_reg_rvc @[rocket.scala 398:17] 
      node T_7941 = eq(ex_ctrl.mem_cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
      node T_7942 = eq(ex_ctrl.mem_cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
      node T_7943 = or(T_7941, T_7942) @[Consts.scala 46:41] 
      node T_7944 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
      node T_7945 = or(T_7943, T_7944) @[Consts.scala 46:58] 
      node T_7946 = bits(ex_ctrl.mem_cmd, 3, 3) @[Consts.scala 44:29] 
      node T_7947 = eq(ex_ctrl.mem_cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
      node T_7948 = or(T_7946, T_7947) @[Consts.scala 44:33] 
      node T_7949 = or(T_7945, T_7948) @[Consts.scala 46:75] 
      node T_7950 = and(ex_ctrl.mem, T_7949) @[rocket.scala 399:33] 
      mem_reg_load <= T_7950 @[rocket.scala 399:18] 
      node T_7951 = eq(ex_ctrl.mem_cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
      node T_7952 = eq(ex_ctrl.mem_cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
      node T_7953 = or(T_7951, T_7952) @[Consts.scala 47:42] 
      node T_7954 = bits(ex_ctrl.mem_cmd, 3, 3) @[Consts.scala 44:29] 
      node T_7955 = eq(ex_ctrl.mem_cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
      node T_7956 = or(T_7954, T_7955) @[Consts.scala 44:33] 
      node T_7957 = or(T_7953, T_7956) @[Consts.scala 47:59] 
      node T_7958 = and(ex_ctrl.mem, T_7957) @[rocket.scala 400:34] 
      mem_reg_store <= T_7958 @[rocket.scala 400:19] 
      mem_reg_btb_hit <= ex_reg_btb_hit @[rocket.scala 401:21] 
      when ex_reg_btb_hit : @[rocket.scala 402:27] 
        mem_reg_btb_resp <- ex_reg_btb_resp @[rocket.scala 402:46] 
        skip @[rocket.scala 402:27] 
      mem_reg_flush_pipe <= ex_reg_flush_pipe @[rocket.scala 403:24] 
      mem_reg_slow_bypass <= ex_slow_bypass @[rocket.scala 404:25] 
      mem_reg_inst <= ex_reg_inst @[rocket.scala 406:18] 
      mem_reg_pc <= ex_reg_pc @[rocket.scala 407:16] 
      mem_reg_wdata <= alu.io.out @[rocket.scala 408:19] 
      node T_7959 = or(ex_ctrl.mem, ex_ctrl.rocc) @[rocket.scala 409:40] 
      node T_7960 = and(ex_ctrl.rxs2, T_7959) @[rocket.scala 409:24] 
      when T_7960 : @[rocket.scala 409:58] 
        mem_reg_rs2 <= ex_rs_1 @[rocket.scala 410:19] 
        skip @[rocket.scala 409:58] 
      skip @[rocket.scala 396:22] 
    node T_7961 = and(mem_reg_load, bpu.io.xcpt_ld) @[rocket.scala 415:19] 
    node T_7963 = and(mem_reg_store, bpu.io.xcpt_st) @[rocket.scala 416:20] 
    node T_7966 = and(mem_ctrl.mem, io.dmem.xcpt.ma.st) @[rocket.scala 418:19] 
    node T_7968 = and(mem_ctrl.mem, io.dmem.xcpt.ma.ld) @[rocket.scala 419:19] 
    node T_7970 = and(mem_ctrl.mem, io.dmem.xcpt.pf.st) @[rocket.scala 420:19] 
    node T_7972 = and(mem_ctrl.mem, io.dmem.xcpt.pf.ld) @[rocket.scala 421:19] 
    node T_7974 = or(T_7961, T_7963) @[rocket.scala 670:26] 
    node T_7975 = or(T_7974, UInt<1>("h00")) @[rocket.scala 670:26] 
    node T_7976 = or(T_7975, T_7966) @[rocket.scala 670:26] 
    node T_7977 = or(T_7976, T_7968) @[rocket.scala 670:26] 
    node T_7978 = or(T_7977, T_7970) @[rocket.scala 670:26] 
    node mem_new_xcpt = or(T_7978, T_7972) @[rocket.scala 670:26] 
    node T_7979 = mux(T_7970, UInt<3>("h07"), UInt<3>("h05")) @[Mux.scala 31:69] 
    node T_7980 = mux(T_7968, UInt<3>("h04"), T_7979) @[Mux.scala 31:69] 
    node T_7981 = mux(T_7966, UInt<3>("h06"), T_7980) @[Mux.scala 31:69] 
    node T_7982 = mux(UInt<1>("h00"), UInt<1>("h00"), T_7981) @[Mux.scala 31:69] 
    node T_7983 = mux(T_7963, UInt<2>("h03"), T_7982) @[Mux.scala 31:69] 
    node mem_new_cause = mux(T_7961, UInt<2>("h03"), T_7983) @[Mux.scala 31:69] 
    node T_7984 = or(mem_reg_xcpt_interrupt, mem_reg_xcpt) @[rocket.scala 424:29] 
    node T_7985 = and(mem_reg_valid, mem_new_xcpt) @[rocket.scala 425:20] 
    node mem_xcpt = or(T_7984, T_7985) @[rocket.scala 670:26] 
    node mem_cause = mux(T_7984, mem_reg_cause, mem_new_cause) @[Mux.scala 31:69] 
    node T_7986 = and(mem_reg_valid, mem_ctrl.wxd) @[rocket.scala 427:39] 
    node dcache_kill_mem = and(T_7986, io.dmem.replay_next) @[rocket.scala 427:55] 
    node T_7987 = and(mem_reg_valid, mem_ctrl.fp) @[rocket.scala 428:36] 
    node fpu_kill_mem = and(T_7987, io.fpu.nack_mem) @[rocket.scala 428:51] 
    node T_7988 = or(dcache_kill_mem, mem_reg_replay) @[rocket.scala 429:37] 
    node replay_mem = or(T_7988, fpu_kill_mem) @[rocket.scala 429:55] 
    node T_7989 = or(dcache_kill_mem, take_pc_wb) @[rocket.scala 430:38] 
    node T_7990 = or(T_7989, mem_reg_xcpt) @[rocket.scala 430:52] 
    node T_7992 = eq(mem_reg_valid, UInt<1>("h00")) @[rocket.scala 430:71] 
    node killm_common = or(T_7990, T_7992) @[rocket.scala 430:68] 
    node T_7993 = and(div.io.req.ready, div.io.req.valid) @[Decoupled.scala 16:42] 
    reg T_7994 : UInt<1>, clk
    T_7994 <= T_7993
    node T_7995 = and(killm_common, T_7994) @[rocket.scala 431:31] 
    div.io.kill <= T_7995 @[rocket.scala 431:15] 
    node T_7996 = or(killm_common, mem_xcpt) @[rocket.scala 432:33] 
    node ctrl_killm = or(T_7996, fpu_kill_mem) @[rocket.scala 432:45] 
    node T_7998 = eq(ctrl_killm, UInt<1>("h00")) @[rocket.scala 435:19] 
    wb_reg_valid <= T_7998 @[rocket.scala 435:16] 
    node T_8000 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 436:34] 
    node T_8001 = and(replay_mem, T_8000) @[rocket.scala 436:31] 
    wb_reg_replay <= T_8001 @[rocket.scala 436:17] 
    node T_8003 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 437:30] 
    node T_8004 = and(mem_xcpt, T_8003) @[rocket.scala 437:27] 
    wb_reg_xcpt <= T_8004 @[rocket.scala 437:15] 
    when mem_xcpt : @[rocket.scala 438:19] 
      wb_reg_cause <= mem_cause @[rocket.scala 438:34] 
      skip @[rocket.scala 438:19] 
    node T_8005 = or(mem_reg_valid, mem_reg_replay) @[rocket.scala 439:23] 
    node T_8006 = or(T_8005, mem_reg_xcpt_interrupt) @[rocket.scala 439:41] 
    when T_8006 : @[rocket.scala 439:68] 
      wb_ctrl <- mem_ctrl @[rocket.scala 440:13] 
      node T_8008 = eq(mem_reg_xcpt, UInt<1>("h00")) @[rocket.scala 441:25] 
      node T_8009 = and(T_8008, mem_ctrl.fp) @[rocket.scala 441:39] 
      node T_8010 = and(T_8009, mem_ctrl.wxd) @[rocket.scala 441:54] 
      node T_8011 = mux(T_8010, io.fpu.toint_data, mem_int_wdata) @[rocket.scala 441:24] 
      wb_reg_wdata <= T_8011 @[rocket.scala 441:18] 
      when mem_ctrl.rocc : @[rocket.scala 442:26] 
        wb_reg_rs2 <= mem_reg_rs2 @[rocket.scala 443:18] 
        skip @[rocket.scala 442:26] 
      wb_reg_inst <= mem_reg_inst @[rocket.scala 445:17] 
      wb_reg_pc <= mem_reg_pc @[rocket.scala 446:15] 
      skip @[rocket.scala 439:68] 
    node T_8012 = or(wb_ctrl.div, wb_dcache_miss) @[rocket.scala 449:35] 
    node wb_set_sboard = or(T_8012, wb_ctrl.rocc) @[rocket.scala 449:53] 
    node replay_wb_common = or(io.dmem.s2_nack, wb_reg_replay) @[rocket.scala 450:42] 
    node T_8013 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 451:37] 
    node T_8015 = eq(io.rocc.cmd.ready, UInt<1>("h00")) @[rocket.scala 451:56] 
    node replay_wb_rocc = and(T_8013, T_8015) @[rocket.scala 451:53] 
    node replay_wb = or(replay_wb_common, replay_wb_rocc) @[rocket.scala 452:36] 
    node wb_xcpt = or(wb_reg_xcpt, csr.io.csr_xcpt) @[rocket.scala 453:29] 
    node T_8016 = or(replay_wb, wb_xcpt) @[rocket.scala 454:27] 
    node T_8017 = or(T_8016, csr.io.eret) @[rocket.scala 454:38] 
    take_pc_wb <= T_8017 @[rocket.scala 454:14] 
    node T_8018 = bits(io.dmem.resp.bits.tag, 0, 0) @[rocket.scala 457:45] 
    node T_8019 = bits(T_8018, 0, 0) @[rocket.scala 457:49] 
    node dmem_resp_xpu = eq(T_8019, UInt<1>("h00")) @[rocket.scala 457:23] 
    node T_8021 = bits(io.dmem.resp.bits.tag, 0, 0) @[rocket.scala 458:45] 
    node dmem_resp_fpu = bits(T_8021, 0, 0) @[rocket.scala 458:49] 
    node dmem_resp_waddr = bits(io.dmem.resp.bits.tag, 5, 1) @[rocket.scala 459:46] 
    node dmem_resp_valid = and(io.dmem.resp.valid, io.dmem.resp.bits.has_data) @[rocket.scala 460:44] 
    node dmem_resp_replay = and(dmem_resp_valid, io.dmem.resp.bits.replay) @[rocket.scala 461:42] 
    node T_8022 = and(wb_reg_valid, wb_ctrl.wxd) @[rocket.scala 463:39] 
    node T_8024 = eq(T_8022, UInt<1>("h00")) @[rocket.scala 463:24] 
    div.io.resp.ready <= T_8024 @[rocket.scala 463:21] 
    wire ll_wdata : UInt
    ll_wdata is invalid
    ll_wdata <= div.io.resp.bits.data
    wire ll_waddr : UInt
    ll_waddr is invalid
    ll_waddr <= div.io.resp.bits.tag
    node T_8025 = and(div.io.resp.ready, div.io.resp.valid) @[Decoupled.scala 16:42] 
    wire ll_wen : UInt<1>
    ll_wen is invalid
    ll_wen <= T_8025
    node T_8026 = and(dmem_resp_replay, dmem_resp_xpu) @[rocket.scala 476:26] 
    when T_8026 : @[rocket.scala 476:44] 
      div.io.resp.ready <= UInt<1>("h00") @[rocket.scala 477:23] 
      ll_waddr <= dmem_resp_waddr @[rocket.scala 480:14] 
      ll_wen <= UInt<1>("h01") @[rocket.scala 481:12] 
      skip @[rocket.scala 476:44] 
    node T_8030 = eq(replay_wb, UInt<1>("h00")) @[rocket.scala 484:34] 
    node T_8031 = and(wb_reg_valid, T_8030) @[rocket.scala 484:31] 
    node T_8033 = eq(wb_xcpt, UInt<1>("h00")) @[rocket.scala 484:48] 
    node wb_valid = and(T_8031, T_8033) @[rocket.scala 484:45] 
    node wb_wen = and(wb_valid, wb_ctrl.wxd) @[rocket.scala 485:25] 
    node rf_wen = or(wb_wen, ll_wen) @[rocket.scala 486:23] 
    node rf_waddr = mux(ll_wen, ll_waddr, wb_waddr) @[rocket.scala 487:21] 
    node T_8034 = and(dmem_resp_valid, dmem_resp_xpu) @[rocket.scala 488:38] 
    node T_8035 = neq(wb_ctrl.csr, UInt<3>("h00")) @[rocket.scala 490:34] 
    node T_8036 = mux(T_8035, csr.io.rw.rdata, wb_reg_wdata) @[rocket.scala 490:21] 
    node T_8037 = mux(ll_wen, ll_wdata, T_8036) @[rocket.scala 489:21] 
    node rf_wdata = mux(T_8034, io.dmem.resp.bits.data, T_8037) @[rocket.scala 488:21] 
    when rf_wen : @[rocket.scala 492:17] 
      node T_8039 = neq(rf_waddr, UInt<1>("h00")) @[rocket.scala 106:16] 
      when T_8039 : @[rocket.scala 106:29] 
        node T_8040 = bits(rf_waddr, 4, 0) @[rocket.scala 95:44] 
        node T_8041 = not(T_8040) @[rocket.scala 95:39] 
        infer mport T_8042 = T_7371[T_8041], clk
        T_8042 <= rf_wdata @[rocket.scala 107:20] 
        node T_8043 = eq(rf_waddr, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 109:20] 
        when T_8043 : @[rocket.scala 109:31] 
          id_rs_0 <= rf_wdata @[rocket.scala 109:39] 
          skip @[rocket.scala 109:31] 
        node T_8044 = eq(rf_waddr, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 109:20] 
        when T_8044 : @[rocket.scala 109:31] 
          id_rs_1 <= rf_wdata @[rocket.scala 109:39] 
          skip @[rocket.scala 109:31] 
        skip @[rocket.scala 106:29] 
      skip @[rocket.scala 492:17] 
    csr.io.exception <= wb_reg_xcpt @[rocket.scala 495:20] 
    csr.io.cause <= wb_reg_cause @[rocket.scala 496:16] 
    csr.io.retire <= wb_valid @[rocket.scala 497:17] 
    csr.io.prci <- io.prci @[rocket.scala 498:15] 
    io.fpu.fcsr_rm <= csr.io.fcsr_rm @[rocket.scala 499:18] 
    csr.io.fcsr_flags <- io.fpu.fcsr_flags @[rocket.scala 500:21] 
    io.rocc.csr <- csr.io.rocc.csr @[rocket.scala 501:15] 
    csr.io.rocc.interrupt <= io.rocc.interrupt @[rocket.scala 502:25] 
    csr.io.pc <= wb_reg_pc @[rocket.scala 503:13] 
    node T_8045 = shr(wb_reg_wdata, 38) @[rocket.scala 678:16] 
    node T_8046 = bits(wb_reg_wdata, 39, 38) @[rocket.scala 679:15] 
    node T_8047 = asSInt(T_8046) @[rocket.scala 679:39] 
    node T_8049 = eq(T_8045, UInt<1>("h00")) @[rocket.scala 681:13] 
    node T_8051 = eq(T_8045, UInt<1>("h01")) @[rocket.scala 681:30] 
    node T_8052 = or(T_8049, T_8051) @[rocket.scala 681:25] 
    node T_8054 = neq(T_8047, asSInt(UInt<1>("h00"))) @[rocket.scala 681:45] 
    node T_8055 = asSInt(T_8045) @[rocket.scala 682:13] 
    node T_8057 = eq(T_8055, asSInt(UInt<1>("h01"))) @[rocket.scala 682:20] 
    node T_8058 = asSInt(T_8045) @[rocket.scala 682:38] 
    node T_8060 = eq(T_8058, asSInt(UInt<2>("h02"))) @[rocket.scala 682:45] 
    node T_8061 = or(T_8057, T_8060) @[rocket.scala 682:33] 
    node T_8063 = eq(T_8047, asSInt(UInt<1>("h01"))) @[rocket.scala 682:61] 
    node T_8064 = bits(T_8047, 0, 0) @[rocket.scala 682:76] 
    node T_8065 = mux(T_8061, T_8063, T_8064) @[rocket.scala 682:10] 
    node T_8066 = mux(T_8052, T_8054, T_8065) @[rocket.scala 681:10] 
    node T_8067 = bits(wb_reg_wdata, 38, 0) @[rocket.scala 683:16] 
    node T_8068 = cat(T_8066, T_8067) @[Cat.scala 20:58] 
    csr.io.badaddr <= T_8068 @[rocket.scala 504:18] 
    io.ptw.ptbr <- csr.io.ptbr @[rocket.scala 505:15] 
    io.ptw.invalidate <= csr.io.fatc @[rocket.scala 506:21] 
    io.ptw.status <- csr.io.status @[rocket.scala 507:17] 
    node T_8069 = bits(wb_reg_inst, 31, 20) @[rocket.scala 508:32] 
    csr.io.rw.addr <= T_8069 @[rocket.scala 508:18] 
    node T_8070 = mux(wb_reg_valid, wb_ctrl.csr, UInt<3>("h00")) @[rocket.scala 509:23] 
    csr.io.rw.cmd <= T_8070 @[rocket.scala 509:17] 
    csr.io.rw.wdata <= wb_reg_wdata @[rocket.scala 510:19] 
    node T_8072 = neq(ibuf.io.inst[0].bits.inst.rs1, UInt<1>("h00")) @[rocket.scala 512:55] 
    node T_8073 = and(id_ctrl.rxs1, T_8072) @[rocket.scala 512:42] 
    node T_8075 = neq(ibuf.io.inst[0].bits.inst.rs2, UInt<1>("h00")) @[rocket.scala 513:55] 
    node T_8076 = and(id_ctrl.rxs2, T_8075) @[rocket.scala 513:42] 
    node T_8078 = neq(ibuf.io.inst[0].bits.inst.rd, UInt<1>("h00")) @[rocket.scala 514:55] 
    node T_8079 = and(id_ctrl.wxd, T_8078) @[rocket.scala 514:42] 
    reg T_8081 : UInt<32>, clk with : (reset => (reset, UInt<32>("h00")))
    node T_8082 = shr(T_8081, 1) @[rocket.scala 694:35] 
    node T_8083 = shl(T_8082, 1) @[rocket.scala 694:40] 
    node T_8086 = dshl(UInt<1>("h01"), ll_waddr) @[rocket.scala 697:62] 
    node T_8088 = mux(ll_wen, T_8086, UInt<1>("h00")) @[rocket.scala 697:49] 
    node T_8089 = not(T_8088) @[rocket.scala 689:64] 
    node T_8090 = and(T_8083, T_8089) @[rocket.scala 689:62] 
    node T_8091 = or(UInt<1>("h00"), ll_wen) @[rocket.scala 700:17] 
    when T_8091 : @[rocket.scala 701:18] 
      T_8081 <= T_8090 @[rocket.scala 701:23] 
      skip @[rocket.scala 701:18] 
    node T_8092 = dshr(T_8083, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 690:35] 
    node T_8093 = bits(T_8092, 0, 0) @[rocket.scala 690:35] 
    node T_8094 = and(T_8073, T_8093) @[rocket.scala 673:27] 
    node T_8095 = dshr(T_8083, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 690:35] 
    node T_8096 = bits(T_8095, 0, 0) @[rocket.scala 690:35] 
    node T_8097 = and(T_8076, T_8096) @[rocket.scala 673:27] 
    node T_8098 = dshr(T_8083, ibuf.io.inst[0].bits.inst.rd) @[rocket.scala 690:35] 
    node T_8099 = bits(T_8098, 0, 0) @[rocket.scala 690:35] 
    node T_8100 = and(T_8079, T_8099) @[rocket.scala 673:27] 
    node T_8101 = or(T_8094, T_8097) @[rocket.scala 673:50] 
    node id_sboard_hazard = or(T_8101, T_8100) @[rocket.scala 673:50] 
    node T_8102 = and(wb_set_sboard, wb_wen) @[rocket.scala 523:28] 
    node T_8104 = dshl(UInt<1>("h01"), wb_waddr) @[rocket.scala 697:62] 
    node T_8106 = mux(T_8102, T_8104, UInt<1>("h00")) @[rocket.scala 697:49] 
    node T_8107 = or(T_8090, T_8106) @[rocket.scala 688:60] 
    node T_8108 = or(T_8091, T_8102) @[rocket.scala 700:17] 
    when T_8108 : @[rocket.scala 701:18] 
      T_8081 <= T_8107 @[rocket.scala 701:23] 
      skip @[rocket.scala 701:18] 
    node T_8109 = neq(ex_ctrl.csr, UInt<3>("h00")) @[rocket.scala 526:38] 
    node T_8110 = or(T_8109, ex_ctrl.jalr) @[rocket.scala 526:48] 
    node T_8111 = or(T_8110, ex_ctrl.mem) @[rocket.scala 526:64] 
    node T_8112 = or(T_8111, ex_ctrl.div) @[rocket.scala 526:79] 
    node T_8113 = or(T_8112, ex_ctrl.fp) @[rocket.scala 526:94] 
    node ex_cannot_bypass = or(T_8113, ex_ctrl.rocc) @[rocket.scala 526:108] 
    node T_8114 = eq(ibuf.io.inst[0].bits.inst.rs1, ex_waddr) @[rocket.scala 527:70] 
    node T_8115 = and(T_8073, T_8114) @[rocket.scala 673:27] 
    node T_8116 = eq(ibuf.io.inst[0].bits.inst.rs2, ex_waddr) @[rocket.scala 527:70] 
    node T_8117 = and(T_8076, T_8116) @[rocket.scala 673:27] 
    node T_8118 = eq(ibuf.io.inst[0].bits.inst.rd, ex_waddr) @[rocket.scala 527:70] 
    node T_8119 = and(T_8079, T_8118) @[rocket.scala 673:27] 
    node T_8120 = or(T_8115, T_8117) @[rocket.scala 673:50] 
    node T_8121 = or(T_8120, T_8119) @[rocket.scala 673:50] 
    node data_hazard_ex = and(ex_ctrl.wxd, T_8121) @[rocket.scala 527:36] 
    node T_8122 = eq(ibuf.io.inst[0].bits.inst.rs1, ex_waddr) @[rocket.scala 528:76] 
    node T_8123 = and(io.fpu.dec.ren1, T_8122) @[rocket.scala 673:27] 
    node T_8124 = eq(ibuf.io.inst[0].bits.inst.rs2, ex_waddr) @[rocket.scala 528:76] 
    node T_8125 = and(io.fpu.dec.ren2, T_8124) @[rocket.scala 673:27] 
    node T_8126 = eq(ibuf.io.inst[0].bits.inst.rs3, ex_waddr) @[rocket.scala 528:76] 
    node T_8127 = and(io.fpu.dec.ren3, T_8126) @[rocket.scala 673:27] 
    node T_8128 = eq(ibuf.io.inst[0].bits.inst.rd, ex_waddr) @[rocket.scala 528:76] 
    node T_8129 = and(io.fpu.dec.wen, T_8128) @[rocket.scala 673:27] 
    node T_8130 = or(T_8123, T_8125) @[rocket.scala 673:50] 
    node T_8131 = or(T_8130, T_8127) @[rocket.scala 673:50] 
    node T_8132 = or(T_8131, T_8129) @[rocket.scala 673:50] 
    node fp_data_hazard_ex = and(ex_ctrl.wfd, T_8132) @[rocket.scala 528:39] 
    node T_8133 = and(data_hazard_ex, ex_cannot_bypass) @[rocket.scala 529:54] 
    node T_8134 = or(T_8133, fp_data_hazard_ex) @[rocket.scala 529:74] 
    node id_ex_hazard = and(ex_reg_valid, T_8134) @[rocket.scala 529:35] 
    node mem_mem_cmd_bh = and(UInt<1>("h01"), mem_reg_slow_bypass) @[rocket.scala 533:43] 
    node T_8136 = neq(mem_ctrl.csr, UInt<3>("h00")) @[rocket.scala 535:40] 
    node T_8137 = and(mem_ctrl.mem, mem_mem_cmd_bh) @[rocket.scala 535:66] 
    node T_8138 = or(T_8136, T_8137) @[rocket.scala 535:50] 
    node T_8139 = or(T_8138, mem_ctrl.div) @[rocket.scala 535:84] 
    node T_8140 = or(T_8139, mem_ctrl.fp) @[rocket.scala 535:100] 
    node mem_cannot_bypass = or(T_8140, mem_ctrl.rocc) @[rocket.scala 535:115] 
    node T_8141 = eq(ibuf.io.inst[0].bits.inst.rs1, mem_waddr) @[rocket.scala 536:72] 
    node T_8142 = and(T_8073, T_8141) @[rocket.scala 673:27] 
    node T_8143 = eq(ibuf.io.inst[0].bits.inst.rs2, mem_waddr) @[rocket.scala 536:72] 
    node T_8144 = and(T_8076, T_8143) @[rocket.scala 673:27] 
    node T_8145 = eq(ibuf.io.inst[0].bits.inst.rd, mem_waddr) @[rocket.scala 536:72] 
    node T_8146 = and(T_8079, T_8145) @[rocket.scala 673:27] 
    node T_8147 = or(T_8142, T_8144) @[rocket.scala 673:50] 
    node T_8148 = or(T_8147, T_8146) @[rocket.scala 673:50] 
    node data_hazard_mem = and(mem_ctrl.wxd, T_8148) @[rocket.scala 536:38] 
    node T_8149 = eq(ibuf.io.inst[0].bits.inst.rs1, mem_waddr) @[rocket.scala 537:78] 
    node T_8150 = and(io.fpu.dec.ren1, T_8149) @[rocket.scala 673:27] 
    node T_8151 = eq(ibuf.io.inst[0].bits.inst.rs2, mem_waddr) @[rocket.scala 537:78] 
    node T_8152 = and(io.fpu.dec.ren2, T_8151) @[rocket.scala 673:27] 
    node T_8153 = eq(ibuf.io.inst[0].bits.inst.rs3, mem_waddr) @[rocket.scala 537:78] 
    node T_8154 = and(io.fpu.dec.ren3, T_8153) @[rocket.scala 673:27] 
    node T_8155 = eq(ibuf.io.inst[0].bits.inst.rd, mem_waddr) @[rocket.scala 537:78] 
    node T_8156 = and(io.fpu.dec.wen, T_8155) @[rocket.scala 673:27] 
    node T_8157 = or(T_8150, T_8152) @[rocket.scala 673:50] 
    node T_8158 = or(T_8157, T_8154) @[rocket.scala 673:50] 
    node T_8159 = or(T_8158, T_8156) @[rocket.scala 673:50] 
    node fp_data_hazard_mem = and(mem_ctrl.wfd, T_8159) @[rocket.scala 537:41] 
    node T_8160 = and(data_hazard_mem, mem_cannot_bypass) @[rocket.scala 538:57] 
    node T_8161 = or(T_8160, fp_data_hazard_mem) @[rocket.scala 538:78] 
    node id_mem_hazard = and(mem_reg_valid, T_8161) @[rocket.scala 538:37] 
    node T_8162 = and(mem_reg_valid, data_hazard_mem) @[rocket.scala 539:32] 
    node T_8163 = and(T_8162, mem_ctrl.mem) @[rocket.scala 539:51] 
    id_load_use <= T_8163 @[rocket.scala 539:15] 
    node T_8164 = eq(ibuf.io.inst[0].bits.inst.rs1, wb_waddr) @[rocket.scala 542:70] 
    node T_8165 = and(T_8073, T_8164) @[rocket.scala 673:27] 
    node T_8166 = eq(ibuf.io.inst[0].bits.inst.rs2, wb_waddr) @[rocket.scala 542:70] 
    node T_8167 = and(T_8076, T_8166) @[rocket.scala 673:27] 
    node T_8168 = eq(ibuf.io.inst[0].bits.inst.rd, wb_waddr) @[rocket.scala 542:70] 
    node T_8169 = and(T_8079, T_8168) @[rocket.scala 673:27] 
    node T_8170 = or(T_8165, T_8167) @[rocket.scala 673:50] 
    node T_8171 = or(T_8170, T_8169) @[rocket.scala 673:50] 
    node data_hazard_wb = and(wb_ctrl.wxd, T_8171) @[rocket.scala 542:36] 
    node T_8172 = eq(ibuf.io.inst[0].bits.inst.rs1, wb_waddr) @[rocket.scala 543:76] 
    node T_8173 = and(io.fpu.dec.ren1, T_8172) @[rocket.scala 673:27] 
    node T_8174 = eq(ibuf.io.inst[0].bits.inst.rs2, wb_waddr) @[rocket.scala 543:76] 
    node T_8175 = and(io.fpu.dec.ren2, T_8174) @[rocket.scala 673:27] 
    node T_8176 = eq(ibuf.io.inst[0].bits.inst.rs3, wb_waddr) @[rocket.scala 543:76] 
    node T_8177 = and(io.fpu.dec.ren3, T_8176) @[rocket.scala 673:27] 
    node T_8178 = eq(ibuf.io.inst[0].bits.inst.rd, wb_waddr) @[rocket.scala 543:76] 
    node T_8179 = and(io.fpu.dec.wen, T_8178) @[rocket.scala 673:27] 
    node T_8180 = or(T_8173, T_8175) @[rocket.scala 673:50] 
    node T_8181 = or(T_8180, T_8177) @[rocket.scala 673:50] 
    node T_8182 = or(T_8181, T_8179) @[rocket.scala 673:50] 
    node fp_data_hazard_wb = and(wb_ctrl.wfd, T_8182) @[rocket.scala 543:39] 
    node T_8183 = and(data_hazard_wb, wb_set_sboard) @[rocket.scala 544:54] 
    node T_8184 = or(T_8183, fp_data_hazard_wb) @[rocket.scala 544:71] 
    node id_wb_hazard = and(wb_reg_valid, T_8184) @[rocket.scala 544:35] 
    reg T_8186 : UInt<32>, clk with : (reset => (reset, UInt<32>("h00")))
    node T_8188 = and(wb_dcache_miss, wb_ctrl.wfd) @[rocket.scala 548:35] 
    node T_8189 = or(T_8188, io.fpu.sboard_set) @[rocket.scala 548:50] 
    node T_8190 = and(T_8189, wb_valid) @[rocket.scala 548:72] 
    node T_8192 = dshl(UInt<1>("h01"), wb_waddr) @[rocket.scala 697:62] 
    node T_8194 = mux(T_8190, T_8192, UInt<1>("h00")) @[rocket.scala 697:49] 
    node T_8195 = or(T_8186, T_8194) @[rocket.scala 688:60] 
    node T_8196 = or(UInt<1>("h00"), T_8190) @[rocket.scala 700:17] 
    when T_8196 : @[rocket.scala 701:18] 
      T_8186 <= T_8195 @[rocket.scala 701:23] 
      skip @[rocket.scala 701:18] 
    node T_8197 = and(dmem_resp_replay, dmem_resp_fpu) @[rocket.scala 549:38] 
    node T_8199 = dshl(UInt<1>("h01"), dmem_resp_waddr) @[rocket.scala 697:62] 
    node T_8201 = mux(T_8197, T_8199, UInt<1>("h00")) @[rocket.scala 697:49] 
    node T_8202 = not(T_8201) @[rocket.scala 689:64] 
    node T_8203 = and(T_8195, T_8202) @[rocket.scala 689:62] 
    node T_8204 = or(T_8196, T_8197) @[rocket.scala 700:17] 
    when T_8204 : @[rocket.scala 701:18] 
      T_8186 <= T_8203 @[rocket.scala 701:23] 
      skip @[rocket.scala 701:18] 
    node T_8206 = dshl(UInt<1>("h01"), io.fpu.sboard_clra) @[rocket.scala 697:62] 
    node T_8208 = mux(io.fpu.sboard_clr, T_8206, UInt<1>("h00")) @[rocket.scala 697:49] 
    node T_8209 = not(T_8208) @[rocket.scala 689:64] 
    node T_8210 = and(T_8203, T_8209) @[rocket.scala 689:62] 
    node T_8211 = or(T_8204, io.fpu.sboard_clr) @[rocket.scala 700:17] 
    when T_8211 : @[rocket.scala 701:18] 
      T_8186 <= T_8210 @[rocket.scala 701:23] 
      skip @[rocket.scala 701:18] 
    node T_8213 = eq(io.fpu.fcsr_rdy, UInt<1>("h00")) @[rocket.scala 552:18] 
    node T_8214 = and(id_csr_en, T_8213) @[rocket.scala 552:15] 
    node T_8215 = dshr(T_8186, ibuf.io.inst[0].bits.inst.rs1) @[rocket.scala 690:35] 
    node T_8216 = bits(T_8215, 0, 0) @[rocket.scala 690:35] 
    node T_8217 = and(io.fpu.dec.ren1, T_8216) @[rocket.scala 673:27] 
    node T_8218 = dshr(T_8186, ibuf.io.inst[0].bits.inst.rs2) @[rocket.scala 690:35] 
    node T_8219 = bits(T_8218, 0, 0) @[rocket.scala 690:35] 
    node T_8220 = and(io.fpu.dec.ren2, T_8219) @[rocket.scala 673:27] 
    node T_8221 = dshr(T_8186, ibuf.io.inst[0].bits.inst.rs3) @[rocket.scala 690:35] 
    node T_8222 = bits(T_8221, 0, 0) @[rocket.scala 690:35] 
    node T_8223 = and(io.fpu.dec.ren3, T_8222) @[rocket.scala 673:27] 
    node T_8224 = dshr(T_8186, ibuf.io.inst[0].bits.inst.rd) @[rocket.scala 690:35] 
    node T_8225 = bits(T_8224, 0, 0) @[rocket.scala 690:35] 
    node T_8226 = and(io.fpu.dec.wen, T_8225) @[rocket.scala 673:27] 
    node T_8227 = or(T_8217, T_8220) @[rocket.scala 673:50] 
    node T_8228 = or(T_8227, T_8223) @[rocket.scala 673:50] 
    node T_8229 = or(T_8228, T_8226) @[rocket.scala 673:50] 
    node id_stall_fpu = or(T_8214, T_8229) @[rocket.scala 552:35] 
    reg dcache_blocked : UInt<1>, clk
    node T_8232 = eq(io.dmem.req.ready, UInt<1>("h00")) @[rocket.scala 556:21] 
    node T_8233 = or(io.dmem.req.valid, dcache_blocked) @[rocket.scala 556:62] 
    node T_8234 = and(T_8232, T_8233) @[rocket.scala 556:40] 
    dcache_blocked <= T_8234 @[rocket.scala 556:18] 
    reg rocc_blocked : UInt<1>, clk
    node T_8237 = eq(wb_reg_xcpt, UInt<1>("h00")) @[rocket.scala 558:19] 
    node T_8239 = eq(io.rocc.cmd.ready, UInt<1>("h00")) @[rocket.scala 558:35] 
    node T_8240 = and(T_8237, T_8239) @[rocket.scala 558:32] 
    node T_8241 = or(io.rocc.cmd.valid, rocc_blocked) @[rocket.scala 558:76] 
    node T_8242 = and(T_8240, T_8241) @[rocket.scala 558:54] 
    rocc_blocked <= T_8242 @[rocket.scala 558:16] 
    node T_8243 = or(id_ex_hazard, id_mem_hazard) @[rocket.scala 561:18] 
    node T_8244 = or(T_8243, id_wb_hazard) @[rocket.scala 561:35] 
    node T_8245 = or(T_8244, id_sboard_hazard) @[rocket.scala 561:51] 
    node T_8246 = and(id_ctrl.fp, id_stall_fpu) @[rocket.scala 562:16] 
    node T_8247 = or(T_8245, T_8246) @[rocket.scala 561:71] 
    node T_8248 = and(id_ctrl.mem, dcache_blocked) @[rocket.scala 563:17] 
    node T_8249 = or(T_8247, T_8248) @[rocket.scala 562:32] 
    node T_8250 = and(id_ctrl.rocc, rocc_blocked) @[rocket.scala 564:18] 
    node T_8251 = or(T_8249, T_8250) @[rocket.scala 563:35] 
    node T_8252 = or(T_8251, id_do_fence) @[rocket.scala 564:34] 
    node ctrl_stalld = or(T_8252, csr.io.csr_stall) @[rocket.scala 565:17] 
    node T_8254 = eq(ibuf.io.inst[0].valid, UInt<1>("h00")) @[rocket.scala 567:17] 
    node T_8255 = or(T_8254, ibuf.io.inst[0].bits.replay) @[rocket.scala 567:40] 
    node T_8256 = or(T_8255, take_pc_mem_wb) @[rocket.scala 567:71] 
    node T_8257 = or(T_8256, ctrl_stalld) @[rocket.scala 567:82] 
    node T_8258 = or(T_8257, csr.io.interrupt) @[rocket.scala 567:97] 
    ctrl_killd <= T_8258 @[rocket.scala 567:14] 
    io.imem.req.valid <= take_pc_mem_wb @[rocket.scala 569:21] 
    node T_8260 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 570:35] 
    io.imem.req.bits.speculative <= T_8260 @[rocket.scala 570:32] 
    node T_8261 = or(wb_xcpt, csr.io.eret) @[rocket.scala 572:17] 
    node T_8262 = mux(replay_wb, wb_reg_pc, mem_npc) @[rocket.scala 573:8] 
    node T_8263 = mux(T_8261, csr.io.evec, T_8262) @[rocket.scala 572:8] 
    io.imem.req.bits.pc <= T_8263 @[rocket.scala 571:23] 
    node T_8264 = and(wb_reg_valid, wb_ctrl.fence_i) @[rocket.scala 575:40] 
    node T_8266 = eq(io.dmem.s2_nack, UInt<1>("h00")) @[rocket.scala 575:62] 
    node T_8267 = and(T_8264, T_8266) @[rocket.scala 575:59] 
    io.imem.flush_icache <= T_8267 @[rocket.scala 575:24] 
    io.imem.flush_tlb <= csr.io.fatc @[rocket.scala 576:21] 
    node T_8269 = eq(ctrl_stalld, UInt<1>("h00")) @[rocket.scala 578:28] 
    node T_8270 = or(T_8269, csr.io.interrupt) @[rocket.scala 578:41] 
    ibuf.io.inst[0].ready <= T_8270 @[rocket.scala 578:25] 
    node T_8271 = and(mem_reg_replay, mem_reg_btb_hit) @[rocket.scala 580:47] 
    node T_8273 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 580:88] 
    node T_8274 = and(mem_reg_valid, T_8273) @[rocket.scala 580:85] 
    node T_8275 = and(T_8274, mem_wrong_npc) @[rocket.scala 580:100] 
    node T_8276 = or(T_8271, T_8275) @[rocket.scala 580:67] 
    io.imem.btb_update.valid <= T_8276 @[rocket.scala 580:28] 
    node T_8278 = eq(mem_reg_replay, UInt<1>("h00")) @[rocket.scala 581:38] 
    node T_8279 = and(T_8278, mem_cfi) @[rocket.scala 581:54] 
    io.imem.btb_update.bits.isValid <= T_8279 @[rocket.scala 581:35] 
    node T_8280 = or(mem_ctrl.jal, mem_ctrl.jalr) @[rocket.scala 582:50] 
    io.imem.btb_update.bits.isJump <= T_8280 @[rocket.scala 582:34] 
    node T_8281 = bits(mem_reg_inst, 19, 15) @[rocket.scala 583:68] 
    node T_8284 = and(T_8281, UInt<5>("h019")) @[rocket.scala 583:76] 
    node T_8285 = eq(UInt<5>("h01"), T_8284) @[rocket.scala 583:76] 
    node T_8286 = and(mem_ctrl.jalr, T_8285) @[rocket.scala 583:53] 
    io.imem.btb_update.bits.isReturn <= T_8286 @[rocket.scala 583:36] 
    io.imem.btb_update.bits.target <= io.imem.req.bits.pc @[rocket.scala 584:34] 
    node T_8289 = mux(mem_reg_rvc, UInt<1>("h00"), UInt<2>("h02")) @[rocket.scala 585:74] 
    node T_8290 = add(mem_reg_pc, T_8289) @[rocket.scala 585:69] 
    node T_8291 = tail(T_8290, 1) @[rocket.scala 585:69] 
    io.imem.btb_update.bits.br_pc <= T_8291 @[rocket.scala 585:33] 
    node T_8292 = not(io.imem.btb_update.bits.br_pc) @[rocket.scala 586:35] 
    node T_8294 = or(T_8292, UInt<2>("h03")) @[rocket.scala 586:66] 
    node T_8295 = not(T_8294) @[rocket.scala 586:33] 
    io.imem.btb_update.bits.pc <= T_8295 @[rocket.scala 586:30] 
    io.imem.btb_update.bits.prediction.valid <= mem_reg_btb_hit @[rocket.scala 587:44] 
    io.imem.btb_update.bits.prediction.bits <- mem_reg_btb_resp @[rocket.scala 588:43] 
    node T_8297 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 590:48] 
    node T_8298 = and(mem_reg_valid, T_8297) @[rocket.scala 590:45] 
    node T_8299 = and(T_8298, mem_ctrl.branch) @[rocket.scala 590:60] 
    io.imem.bht_update.valid <= T_8299 @[rocket.scala 590:28] 
    io.imem.bht_update.bits.pc <= io.imem.btb_update.bits.pc @[rocket.scala 591:30] 
    io.imem.bht_update.bits.taken <= mem_br_taken @[rocket.scala 592:33] 
    io.imem.bht_update.bits.mispredict <= mem_wrong_npc @[rocket.scala 593:38] 
    io.imem.bht_update.bits.prediction <- io.imem.btb_update.bits.prediction @[rocket.scala 594:38] 
    node T_8301 = eq(take_pc_wb, UInt<1>("h00")) @[rocket.scala 596:48] 
    node T_8302 = and(mem_reg_valid, T_8301) @[rocket.scala 596:45] 
    io.imem.ras_update.valid <= T_8302 @[rocket.scala 596:28] 
    io.imem.ras_update.bits.returnAddr <= mem_int_wdata @[rocket.scala 597:38] 
    node T_8303 = bits(mem_waddr, 0, 0) @[rocket.scala 598:80] 
    node T_8304 = and(io.imem.btb_update.bits.isJump, T_8303) @[rocket.scala 598:68] 
    io.imem.ras_update.bits.isCall <= T_8304 @[rocket.scala 598:34] 
    io.imem.ras_update.bits.isReturn <= io.imem.btb_update.bits.isReturn @[rocket.scala 599:36] 
    io.imem.ras_update.bits.prediction <- io.imem.btb_update.bits.prediction @[rocket.scala 600:38] 
    node T_8306 = eq(ctrl_killd, UInt<1>("h00")) @[rocket.scala 602:19] 
    node T_8307 = and(T_8306, id_ctrl.fp) @[rocket.scala 602:31] 
    io.fpu.valid <= T_8307 @[rocket.scala 602:16] 
    io.fpu.killx <= ctrl_killx @[rocket.scala 603:16] 
    io.fpu.killm <= killm_common @[rocket.scala 604:16] 
    io.fpu.inst <= ibuf.io.inst[0].bits.inst.bits @[rocket.scala 605:15] 
    io.fpu.fromint_data <= ex_rs_0 @[rocket.scala 606:23] 
    node T_8308 = and(dmem_resp_valid, dmem_resp_fpu) @[rocket.scala 607:43] 
    io.fpu.dmem_resp_val <= T_8308 @[rocket.scala 607:24] 
    io.fpu.dmem_resp_data <= io.dmem.resp.bits.data_word_bypass @[rocket.scala 608:25] 
    io.fpu.dmem_resp_type <= io.dmem.resp.bits.typ @[rocket.scala 609:25] 
    io.fpu.dmem_resp_tag <= dmem_resp_waddr @[rocket.scala 610:24] 
    node T_8309 = and(ex_reg_valid, ex_ctrl.mem) @[rocket.scala 612:41] 
    io.dmem.req.valid <= T_8309 @[rocket.scala 612:25] 
    node ex_dcache_tag = cat(ex_waddr, ex_ctrl.fp) @[Cat.scala 20:58] 
    io.dmem.req.bits.tag <= ex_dcache_tag @[rocket.scala 615:25] 
    io.dmem.req.bits.cmd <= ex_ctrl.mem_cmd @[rocket.scala 616:25] 
    io.dmem.req.bits.typ <= ex_ctrl.mem_type @[rocket.scala 617:25] 
    io.dmem.req.bits.phys <= UInt<1>("h00") @[rocket.scala 618:25] 
    node T_8311 = shr(ex_rs_0, 38) @[rocket.scala 678:16] 
    node T_8312 = bits(alu.io.adder_out, 39, 38) @[rocket.scala 679:15] 
    node T_8313 = asSInt(T_8312) @[rocket.scala 679:39] 
    node T_8315 = eq(T_8311, UInt<1>("h00")) @[rocket.scala 681:13] 
    node T_8317 = eq(T_8311, UInt<1>("h01")) @[rocket.scala 681:30] 
    node T_8318 = or(T_8315, T_8317) @[rocket.scala 681:25] 
    node T_8320 = neq(T_8313, asSInt(UInt<1>("h00"))) @[rocket.scala 681:45] 
    node T_8321 = asSInt(T_8311) @[rocket.scala 682:13] 
    node T_8323 = eq(T_8321, asSInt(UInt<1>("h01"))) @[rocket.scala 682:20] 
    node T_8324 = asSInt(T_8311) @[rocket.scala 682:38] 
    node T_8326 = eq(T_8324, asSInt(UInt<2>("h02"))) @[rocket.scala 682:45] 
    node T_8327 = or(T_8323, T_8326) @[rocket.scala 682:33] 
    node T_8329 = eq(T_8313, asSInt(UInt<1>("h01"))) @[rocket.scala 682:61] 
    node T_8330 = bits(T_8313, 0, 0) @[rocket.scala 682:76] 
    node T_8331 = mux(T_8327, T_8329, T_8330) @[rocket.scala 682:10] 
    node T_8332 = mux(T_8318, T_8320, T_8331) @[rocket.scala 681:10] 
    node T_8333 = bits(alu.io.adder_out, 38, 0) @[rocket.scala 683:16] 
    node T_8334 = cat(T_8332, T_8333) @[Cat.scala 20:58] 
    io.dmem.req.bits.addr <= T_8334 @[rocket.scala 619:25] 
    node T_8335 = or(killm_common, mem_xcpt) @[rocket.scala 620:35] 
    io.dmem.s1_kill <= T_8335 @[rocket.scala 620:19] 
    node T_8336 = mux(mem_ctrl.fp, io.fpu.store_data, mem_reg_rs2) @[rocket.scala 621:25] 
    io.dmem.s1_data <= T_8336 @[rocket.scala 621:19] 
    io.dmem.invalidate_lr <= wb_xcpt @[rocket.scala 622:25] 
    node T_8337 = and(wb_reg_valid, wb_ctrl.rocc) @[rocket.scala 624:37] 
    node T_8339 = eq(replay_wb_common, UInt<1>("h00")) @[rocket.scala 624:56] 
    node T_8340 = and(T_8337, T_8339) @[rocket.scala 624:53] 
    io.rocc.cmd.valid <= T_8340 @[rocket.scala 624:21] 
    node T_8342 = neq(csr.io.status.xs, UInt<1>("h00")) @[rocket.scala 625:52] 
    node T_8343 = and(wb_xcpt, T_8342) @[rocket.scala 625:32] 
    io.rocc.exception <= T_8343 @[rocket.scala 625:21] 
    io.rocc.cmd.bits.status <- csr.io.status @[rocket.scala 626:27] 
    wire T_8362 : {funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>} @[rocket.scala 627:58] 
    T_8362 is invalid @[rocket.scala 627:58] 
    wire T_8372 : UInt<32>
    T_8372 is invalid
    T_8372 <= wb_reg_inst
    node T_8373 = bits(T_8372, 6, 0) @[rocket.scala 627:58] 
    T_8362.opcode <= T_8373 @[rocket.scala 627:58] 
    node T_8374 = bits(T_8372, 11, 7) @[rocket.scala 627:58] 
    T_8362.rd <= T_8374 @[rocket.scala 627:58] 
    node T_8375 = bits(T_8372, 12, 12) @[rocket.scala 627:58] 
    T_8362.xs2 <= T_8375 @[rocket.scala 627:58] 
    node T_8376 = bits(T_8372, 13, 13) @[rocket.scala 627:58] 
    T_8362.xs1 <= T_8376 @[rocket.scala 627:58] 
    node T_8377 = bits(T_8372, 14, 14) @[rocket.scala 627:58] 
    T_8362.xd <= T_8377 @[rocket.scala 627:58] 
    node T_8378 = bits(T_8372, 19, 15) @[rocket.scala 627:58] 
    T_8362.rs1 <= T_8378 @[rocket.scala 627:58] 
    node T_8379 = bits(T_8372, 24, 20) @[rocket.scala 627:58] 
    T_8362.rs2 <= T_8379 @[rocket.scala 627:58] 
    node T_8380 = bits(T_8372, 31, 25) @[rocket.scala 627:58] 
    T_8362.funct <= T_8380 @[rocket.scala 627:58] 
    io.rocc.cmd.bits.inst <- T_8362 @[rocket.scala 627:25] 
    io.rocc.cmd.bits.rs1 <= wb_reg_wdata @[rocket.scala 628:24] 
    io.rocc.cmd.bits.rs2 <= wb_reg_rs2 @[rocket.scala 629:24] 
    node T_8381 = bits(csr.io.time, 31, 0) @[rocket.scala 662:33] 
    node T_8383 = mux(rf_wen, rf_waddr, UInt<1>("h00")) @[rocket.scala 663:13] 
    node T_8384 = bits(wb_reg_inst, 19, 15) @[rocket.scala 664:21] 
    reg T_8385 : UInt, clk
    T_8385 <= ex_rs_0
    reg T_8386 : UInt, clk
    T_8386 <= T_8385
    node T_8387 = bits(wb_reg_inst, 24, 20) @[rocket.scala 665:21] 
    reg T_8388 : UInt, clk
    T_8388 <= ex_rs_1
    reg T_8389 : UInt, clk
    T_8389 <= T_8388
    node T_8391 = eq(reset, UInt<1>("h00")) @[rocket.scala 661:11] 
    when T_8391 : @[rocket.scala 661:11] 
      printf(clk, UInt<1>(1), "C%d: %d [%d] pc=[%x] W[r%d=%x][%d] R[r%d=%x] R[r%d=%x] inst=[%x] DASM(%x)\n", io.prci.id, T_8381, wb_valid, wb_reg_pc, T_8383, rf_wdata, rf_wen, T_8384, T_8386, T_8387, T_8389, wb_reg_inst, wb_reg_inst) @[rocket.scala 661:11] 
      skip @[rocket.scala 661:11] 
    
  module FlowThroughSerializer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, cnt : UInt<1>, done : UInt<1>}
    
    io is invalid
    io.out <- io.in @[Serializer.scala 19:12] 
    io.cnt <= UInt<1>("h00") @[Serializer.scala 20:12] 
    io.done <= UInt<1>("h01") @[Serializer.scala 21:13] 
    
  module ICache : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<39>}}, flip s1_ppn : UInt<20>, flip s1_kill : UInt<1>, flip s2_kill : UInt<1>, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<16>, datablock : UInt<64>}}, flip invalidate : UInt<1>, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    reg state : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg invalidated : UInt<1>, clk
    node stall = eq(io.resp.ready, UInt<1>("h00")) @[icache.scala 44:15] 
    wire rdy : UInt<1> @[icache.scala 45:17] 
    rdy is invalid @[icache.scala 45:17] 
    reg refill_addr : UInt<32>, clk
    wire s1_any_tag_hit : UInt<1> @[icache.scala 48:28] 
    s1_any_tag_hit is invalid @[icache.scala 48:28] 
    reg s1_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s1_vaddr : UInt, clk
    node T_827 = bits(s1_vaddr, 11, 0) @[icache.scala 52:41] 
    node s1_paddr = cat(io.s1_ppn, T_827) @[Cat.scala 20:58] 
    node s1_tag = bits(s1_paddr, 31, 12) @[icache.scala 53:24] 
    node T_828 = and(s1_valid, stall) @[icache.scala 55:43] 
    node s0_valid = or(io.req.valid, T_828) @[icache.scala 55:31] 
    node T_829 = and(s1_valid, stall) @[icache.scala 56:31] 
    node s0_vaddr = mux(T_829, s1_vaddr, io.req.bits.addr) @[icache.scala 56:21] 
    node T_830 = and(io.req.valid, rdy) @[icache.scala 58:28] 
    node T_831 = and(s1_valid, stall) @[icache.scala 58:47] 
    node T_833 = eq(io.s1_kill, UInt<1>("h00")) @[icache.scala 58:59] 
    node T_834 = and(T_831, T_833) @[icache.scala 58:56] 
    node T_835 = or(T_830, T_834) @[icache.scala 58:35] 
    s1_valid <= T_835 @[icache.scala 58:12] 
    node T_836 = and(io.req.valid, rdy) @[icache.scala 59:22] 
    when T_836 : @[icache.scala 59:30] 
      s1_vaddr <= io.req.bits.addr @[icache.scala 60:14] 
      skip @[icache.scala 59:30] 
    node T_838 = eq(io.s1_kill, UInt<1>("h00")) @[icache.scala 63:31] 
    node T_839 = and(s1_valid, T_838) @[icache.scala 63:28] 
    node T_840 = eq(state, UInt<2>("h00")) @[icache.scala 63:52] 
    node out_valid = and(T_839, T_840) @[icache.scala 63:43] 
    node s1_idx = bits(s1_vaddr, 11, 6) @[icache.scala 64:24] 
    node s1_hit = and(out_valid, s1_any_tag_hit) @[icache.scala 65:26] 
    node T_842 = eq(s1_any_tag_hit, UInt<1>("h00")) @[icache.scala 66:30] 
    node s1_miss = and(out_valid, T_842) @[icache.scala 66:27] 
    node T_843 = eq(state, UInt<2>("h00")) @[icache.scala 67:16] 
    node T_845 = eq(s1_miss, UInt<1>("h00")) @[icache.scala 67:31] 
    node T_846 = and(T_843, T_845) @[icache.scala 67:28] 
    rdy <= T_846 @[icache.scala 67:7] 
    node T_847 = eq(state, UInt<2>("h00")) @[icache.scala 69:26] 
    node T_848 = and(s1_miss, T_847) @[icache.scala 69:17] 
    when T_848 : @[icache.scala 69:39] 
      refill_addr <= s1_paddr @[icache.scala 70:17] 
      skip @[icache.scala 69:39] 
    node refill_tag = bits(refill_addr, 31, 12) @[icache.scala 72:31] 
    inst FlowThroughSerializer_1 of FlowThroughSerializer @[Serializer.scala 63:20] 
    FlowThroughSerializer_1.io is invalid
    FlowThroughSerializer_1.clk <= clk
    FlowThroughSerializer_1.reset <= reset
    FlowThroughSerializer_1.io.in.valid <= io.mem.grant.valid @[Serializer.scala 64:20] 
    FlowThroughSerializer_1.io.in.bits <- io.mem.grant.bits @[Serializer.scala 65:19] 
    io.mem.grant.ready <= FlowThroughSerializer_1.io.in.ready @[Serializer.scala 66:14] 
    node T_849 = and(FlowThroughSerializer_1.io.out.ready, FlowThroughSerializer_1.io.out.valid) @[Decoupled.scala 16:42] 
    reg refill_cnt : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_849 : @[Counter.scala 43:17] 
      node T_852 = eq(refill_cnt, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_854 = add(refill_cnt, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_855 = tail(T_854, 1) @[Counter.scala 21:22] 
      refill_cnt <= T_855 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node refill_wrap = and(T_849, T_852) @[Counter.scala 44:20] 
    node T_856 = eq(state, UInt<2>("h03")) @[icache.scala 76:27] 
    node refill_done = and(T_856, refill_wrap) @[icache.scala 76:40] 
    FlowThroughSerializer_1.io.out.ready <= UInt<1>("h01") @[icache.scala 77:22] 
    reg T_859 : UInt<16>, clk with : (reset => (reset, UInt<16>("h01")))
    when s1_miss : @[LFSR.scala 19:22] 
      node T_860 = bits(T_859, 0, 0) @[LFSR.scala 19:40] 
      node T_861 = bits(T_859, 2, 2) @[LFSR.scala 19:48] 
      node T_862 = xor(T_860, T_861) @[LFSR.scala 19:43] 
      node T_863 = bits(T_859, 3, 3) @[LFSR.scala 19:56] 
      node T_864 = xor(T_862, T_863) @[LFSR.scala 19:51] 
      node T_865 = bits(T_859, 5, 5) @[LFSR.scala 19:64] 
      node T_866 = xor(T_864, T_865) @[LFSR.scala 19:59] 
      node T_867 = bits(T_859, 15, 1) @[LFSR.scala 19:73] 
      node T_868 = cat(T_866, T_867) @[Cat.scala 20:58] 
      T_859 <= T_868 @[LFSR.scala 19:29] 
      skip @[LFSR.scala 19:22] 
    node repl_way = bits(T_859, 1, 0) @[icache.scala 79:56] 
    smem tag_array : UInt<20>[4][64] @[icache.scala 81:25] 
    node T_877 = bits(s0_vaddr, 11, 6) @[icache.scala 82:42] 
    node T_879 = eq(refill_done, UInt<1>("h00")) @[icache.scala 82:70] 
    node T_880 = and(T_879, s0_valid) @[icache.scala 82:83] 
    wire T_882 : UInt
    T_882 is invalid
    when T_880 :
      T_882 <= T_877
      skip
    read mport tag_rdata = tag_array[T_882], clk
    when refill_done : @[icache.scala 83:22] 
      wire T_891 : UInt<20>[4] @[icache.scala 85:44] 
      T_891 is invalid @[icache.scala 85:44] 
      T_891[0] <= refill_tag @[icache.scala 85:44] 
      T_891[1] <= refill_tag @[icache.scala 85:44] 
      T_891[2] <= refill_tag @[icache.scala 85:44] 
      T_891[3] <= refill_tag @[icache.scala 85:44] 
      node T_894 = eq(repl_way, UInt<1>("h00")) @[icache.scala 85:80] 
      node T_896 = eq(repl_way, UInt<1>("h01")) @[icache.scala 85:80] 
      node T_898 = eq(repl_way, UInt<2>("h02")) @[icache.scala 85:80] 
      node T_900 = eq(repl_way, UInt<2>("h03")) @[icache.scala 85:80] 
      wire T_906 : UInt<1>[4] @[icache.scala 85:70] 
      T_906 is invalid @[icache.scala 85:70] 
      T_906[0] <= T_894 @[icache.scala 85:70] 
      T_906[1] <= T_896 @[icache.scala 85:70] 
      T_906[2] <= T_898 @[icache.scala 85:70] 
      T_906[3] <= T_900 @[icache.scala 85:70] 
      write mport T_910 = tag_array[s1_idx], clk
      when T_906[0] :
        T_910[0] <= T_891[0]
        skip
      when T_906[1] :
        T_910[1] <= T_891[1]
        skip
      when T_906[2] :
        T_910[2] <= T_891[2]
        skip
      when T_906[3] :
        T_910[3] <= T_891[3]
        skip
      skip @[icache.scala 83:22] 
    reg vb_array : UInt<256>, clk with : (reset => (reset, UInt<256>("h00")))
    node T_914 = eq(invalidated, UInt<1>("h00")) @[icache.scala 89:24] 
    node T_915 = and(refill_done, T_914) @[icache.scala 89:21] 
    when T_915 : @[icache.scala 89:38] 
      node T_916 = cat(repl_way, s1_idx) @[Cat.scala 20:58] 
      node T_919 = dshl(UInt<1>("h01"), T_916) @[icache.scala 90:32] 
      node T_920 = or(vb_array, T_919) @[icache.scala 90:32] 
      node T_921 = not(vb_array) @[icache.scala 90:32] 
      node T_922 = or(T_921, T_919) @[icache.scala 90:32] 
      node T_923 = not(T_922) @[icache.scala 90:32] 
      node T_924 = mux(UInt<1>("h01"), T_920, T_923) @[icache.scala 90:32] 
      vb_array <= T_924 @[icache.scala 90:14] 
      skip @[icache.scala 89:38] 
    when io.invalidate : @[icache.scala 92:24] 
      vb_array <= UInt<1>("h00") @[icache.scala 93:14] 
      invalidated <= UInt<1>("h01") @[icache.scala 94:17] 
      skip @[icache.scala 92:24] 
    wire s1_disparity : UInt<1>[4] @[icache.scala 96:26] 
    s1_disparity is invalid @[icache.scala 96:26] 
    node T_934 = and(s1_valid, s1_disparity[0]) @[icache.scala 98:20] 
    when T_934 : @[icache.scala 98:40] 
      node T_936 = cat(UInt<1>("h00"), s1_idx) @[Cat.scala 20:58] 
      node T_939 = dshl(UInt<1>("h01"), T_936) @[icache.scala 98:69] 
      node T_940 = or(vb_array, T_939) @[icache.scala 98:69] 
      node T_941 = not(vb_array) @[icache.scala 98:69] 
      node T_942 = or(T_941, T_939) @[icache.scala 98:69] 
      node T_943 = not(T_942) @[icache.scala 98:69] 
      node T_944 = mux(UInt<1>("h00"), T_940, T_943) @[icache.scala 98:69] 
      vb_array <= T_944 @[icache.scala 98:51] 
      skip @[icache.scala 98:40] 
    node T_945 = and(s1_valid, s1_disparity[1]) @[icache.scala 98:20] 
    when T_945 : @[icache.scala 98:40] 
      node T_947 = cat(UInt<1>("h01"), s1_idx) @[Cat.scala 20:58] 
      node T_950 = dshl(UInt<1>("h01"), T_947) @[icache.scala 98:69] 
      node T_951 = or(vb_array, T_950) @[icache.scala 98:69] 
      node T_952 = not(vb_array) @[icache.scala 98:69] 
      node T_953 = or(T_952, T_950) @[icache.scala 98:69] 
      node T_954 = not(T_953) @[icache.scala 98:69] 
      node T_955 = mux(UInt<1>("h00"), T_951, T_954) @[icache.scala 98:69] 
      vb_array <= T_955 @[icache.scala 98:51] 
      skip @[icache.scala 98:40] 
    node T_956 = and(s1_valid, s1_disparity[2]) @[icache.scala 98:20] 
    when T_956 : @[icache.scala 98:40] 
      node T_958 = cat(UInt<2>("h02"), s1_idx) @[Cat.scala 20:58] 
      node T_961 = dshl(UInt<1>("h01"), T_958) @[icache.scala 98:69] 
      node T_962 = or(vb_array, T_961) @[icache.scala 98:69] 
      node T_963 = not(vb_array) @[icache.scala 98:69] 
      node T_964 = or(T_963, T_961) @[icache.scala 98:69] 
      node T_965 = not(T_964) @[icache.scala 98:69] 
      node T_966 = mux(UInt<1>("h00"), T_962, T_965) @[icache.scala 98:69] 
      vb_array <= T_966 @[icache.scala 98:51] 
      skip @[icache.scala 98:40] 
    node T_967 = and(s1_valid, s1_disparity[3]) @[icache.scala 98:20] 
    when T_967 : @[icache.scala 98:40] 
      node T_969 = cat(UInt<2>("h03"), s1_idx) @[Cat.scala 20:58] 
      node T_972 = dshl(UInt<1>("h01"), T_969) @[icache.scala 98:69] 
      node T_973 = or(vb_array, T_972) @[icache.scala 98:69] 
      node T_974 = not(vb_array) @[icache.scala 98:69] 
      node T_975 = or(T_974, T_972) @[icache.scala 98:69] 
      node T_976 = not(T_975) @[icache.scala 98:69] 
      node T_977 = mux(UInt<1>("h00"), T_973, T_976) @[icache.scala 98:69] 
      vb_array <= T_977 @[icache.scala 98:51] 
      skip @[icache.scala 98:40] 
    wire s1_tag_match : UInt<1>[4] @[icache.scala 100:26] 
    s1_tag_match is invalid @[icache.scala 100:26] 
    wire s1_tag_hit : UInt<1>[4] @[icache.scala 101:24] 
    s1_tag_hit is invalid @[icache.scala 101:24] 
    wire s1_dout : UInt<64>[4] @[icache.scala 102:21] 
    s1_dout is invalid @[icache.scala 102:21] 
    node T_1000 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17] 
    node T_1002 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65] 
    node T_1003 = cat(UInt<1>("h00"), T_1002) @[Cat.scala 20:58] 
    node T_1004 = dshr(vb_array, T_1003) @[icache.scala 105:43] 
    node T_1005 = bits(T_1004, 0, 0) @[icache.scala 105:43] 
    node T_1006 = bits(T_1005, 0, 0) @[icache.scala 105:94] 
    node T_1007 = and(T_1000, T_1006) @[icache.scala 105:32] 
    node T_1010 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1011 = bits(tag_rdata[0], 19, 0) @[icache.scala 108:31] 
    node T_1012 = eq(T_1011, s1_tag) @[icache.scala 108:45] 
    s1_tag_match[0] <= T_1012 @[icache.scala 108:21] 
    node T_1013 = and(T_1007, s1_tag_match[0]) @[icache.scala 109:28] 
    s1_tag_hit[0] <= T_1013 @[icache.scala 109:19] 
    node T_1016 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1017 = or(T_1010, T_1016) @[icache.scala 110:51] 
    node T_1018 = and(T_1007, T_1017) @[icache.scala 110:30] 
    s1_disparity[0] <= T_1018 @[icache.scala 110:21] 
    node T_1020 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17] 
    node T_1022 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65] 
    node T_1023 = cat(UInt<1>("h01"), T_1022) @[Cat.scala 20:58] 
    node T_1024 = dshr(vb_array, T_1023) @[icache.scala 105:43] 
    node T_1025 = bits(T_1024, 0, 0) @[icache.scala 105:43] 
    node T_1026 = bits(T_1025, 0, 0) @[icache.scala 105:94] 
    node T_1027 = and(T_1020, T_1026) @[icache.scala 105:32] 
    node T_1030 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1031 = bits(tag_rdata[1], 19, 0) @[icache.scala 108:31] 
    node T_1032 = eq(T_1031, s1_tag) @[icache.scala 108:45] 
    s1_tag_match[1] <= T_1032 @[icache.scala 108:21] 
    node T_1033 = and(T_1027, s1_tag_match[1]) @[icache.scala 109:28] 
    s1_tag_hit[1] <= T_1033 @[icache.scala 109:19] 
    node T_1036 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1037 = or(T_1030, T_1036) @[icache.scala 110:51] 
    node T_1038 = and(T_1027, T_1037) @[icache.scala 110:30] 
    s1_disparity[1] <= T_1038 @[icache.scala 110:21] 
    node T_1040 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17] 
    node T_1042 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65] 
    node T_1043 = cat(UInt<2>("h02"), T_1042) @[Cat.scala 20:58] 
    node T_1044 = dshr(vb_array, T_1043) @[icache.scala 105:43] 
    node T_1045 = bits(T_1044, 0, 0) @[icache.scala 105:43] 
    node T_1046 = bits(T_1045, 0, 0) @[icache.scala 105:94] 
    node T_1047 = and(T_1040, T_1046) @[icache.scala 105:32] 
    node T_1050 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1051 = bits(tag_rdata[2], 19, 0) @[icache.scala 108:31] 
    node T_1052 = eq(T_1051, s1_tag) @[icache.scala 108:45] 
    s1_tag_match[2] <= T_1052 @[icache.scala 108:21] 
    node T_1053 = and(T_1047, s1_tag_match[2]) @[icache.scala 109:28] 
    s1_tag_hit[2] <= T_1053 @[icache.scala 109:19] 
    node T_1056 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1057 = or(T_1050, T_1056) @[icache.scala 110:51] 
    node T_1058 = and(T_1047, T_1057) @[icache.scala 110:30] 
    s1_disparity[2] <= T_1058 @[icache.scala 110:21] 
    node T_1060 = eq(io.invalidate, UInt<1>("h00")) @[icache.scala 105:17] 
    node T_1062 = bits(s1_vaddr, 11, 6) @[icache.scala 105:65] 
    node T_1063 = cat(UInt<2>("h03"), T_1062) @[Cat.scala 20:58] 
    node T_1064 = dshr(vb_array, T_1063) @[icache.scala 105:43] 
    node T_1065 = bits(T_1064, 0, 0) @[icache.scala 105:43] 
    node T_1066 = bits(T_1065, 0, 0) @[icache.scala 105:94] 
    node T_1067 = and(T_1060, T_1066) @[icache.scala 105:32] 
    node T_1070 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1071 = bits(tag_rdata[3], 19, 0) @[icache.scala 108:31] 
    node T_1072 = eq(T_1071, s1_tag) @[icache.scala 108:45] 
    s1_tag_match[3] <= T_1072 @[icache.scala 108:21] 
    node T_1073 = and(T_1067, s1_tag_match[3]) @[icache.scala 109:28] 
    s1_tag_hit[3] <= T_1073 @[icache.scala 109:19] 
    node T_1076 = or(UInt<1>("h00"), UInt<1>("h00")) @[Ecc.scala 14:27] 
    node T_1077 = or(T_1070, T_1076) @[icache.scala 110:51] 
    node T_1078 = and(T_1067, T_1077) @[icache.scala 110:30] 
    s1_disparity[3] <= T_1078 @[icache.scala 110:21] 
    node T_1079 = or(s1_tag_hit[0], s1_tag_hit[1]) @[icache.scala 112:44] 
    node T_1080 = or(T_1079, s1_tag_hit[2]) @[icache.scala 112:44] 
    node T_1081 = or(T_1080, s1_tag_hit[3]) @[icache.scala 112:44] 
    node T_1082 = or(s1_disparity[0], s1_disparity[1]) @[icache.scala 112:78] 
    node T_1083 = or(T_1082, s1_disparity[2]) @[icache.scala 112:78] 
    node T_1084 = or(T_1083, s1_disparity[3]) @[icache.scala 112:78] 
    node T_1086 = eq(T_1084, UInt<1>("h00")) @[icache.scala 112:52] 
    node T_1087 = and(T_1081, T_1086) @[icache.scala 112:49] 
    s1_any_tag_hit <= T_1087 @[icache.scala 112:18] 
    smem T_1090 : UInt<64>[512] @[icache.scala 115:28] 
    node T_1092 = eq(repl_way, UInt<1>("h00")) @[icache.scala 116:46] 
    node T_1093 = and(FlowThroughSerializer_1.io.out.valid, T_1092) @[icache.scala 116:34] 
    when T_1093 : @[icache.scala 117:16] 
      node T_1094 = shl(s1_idx, 3) @[icache.scala 119:32] 
      node T_1095 = or(T_1094, refill_cnt) @[icache.scala 119:59] 
      write mport T_1096 = T_1090[T_1095], clk
      T_1096 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16] 
    node T_1097 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28] 
    node T_1099 = eq(T_1093, UInt<1>("h00")) @[icache.scala 122:45] 
    node T_1100 = and(T_1099, s0_valid) @[icache.scala 122:50] 
    wire T_1102 : UInt
    T_1102 is invalid
    when T_1100 :
      T_1102 <= T_1097
      skip
    read mport T_1103 = T_1090[T_1102], clk
    s1_dout[0] <= T_1103 @[icache.scala 122:16] 
    smem T_1106 : UInt<64>[512] @[icache.scala 115:28] 
    node T_1108 = eq(repl_way, UInt<1>("h01")) @[icache.scala 116:46] 
    node T_1109 = and(FlowThroughSerializer_1.io.out.valid, T_1108) @[icache.scala 116:34] 
    when T_1109 : @[icache.scala 117:16] 
      node T_1110 = shl(s1_idx, 3) @[icache.scala 119:32] 
      node T_1111 = or(T_1110, refill_cnt) @[icache.scala 119:59] 
      write mport T_1112 = T_1106[T_1111], clk
      T_1112 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16] 
    node T_1113 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28] 
    node T_1115 = eq(T_1109, UInt<1>("h00")) @[icache.scala 122:45] 
    node T_1116 = and(T_1115, s0_valid) @[icache.scala 122:50] 
    wire T_1118 : UInt
    T_1118 is invalid
    when T_1116 :
      T_1118 <= T_1113
      skip
    read mport T_1119 = T_1106[T_1118], clk
    s1_dout[1] <= T_1119 @[icache.scala 122:16] 
    smem T_1122 : UInt<64>[512] @[icache.scala 115:28] 
    node T_1124 = eq(repl_way, UInt<2>("h02")) @[icache.scala 116:46] 
    node T_1125 = and(FlowThroughSerializer_1.io.out.valid, T_1124) @[icache.scala 116:34] 
    when T_1125 : @[icache.scala 117:16] 
      node T_1126 = shl(s1_idx, 3) @[icache.scala 119:32] 
      node T_1127 = or(T_1126, refill_cnt) @[icache.scala 119:59] 
      write mport T_1128 = T_1122[T_1127], clk
      T_1128 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16] 
    node T_1129 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28] 
    node T_1131 = eq(T_1125, UInt<1>("h00")) @[icache.scala 122:45] 
    node T_1132 = and(T_1131, s0_valid) @[icache.scala 122:50] 
    wire T_1134 : UInt
    T_1134 is invalid
    when T_1132 :
      T_1134 <= T_1129
      skip
    read mport T_1135 = T_1122[T_1134], clk
    s1_dout[2] <= T_1135 @[icache.scala 122:16] 
    smem T_1138 : UInt<64>[512] @[icache.scala 115:28] 
    node T_1140 = eq(repl_way, UInt<2>("h03")) @[icache.scala 116:46] 
    node T_1141 = and(FlowThroughSerializer_1.io.out.valid, T_1140) @[icache.scala 116:34] 
    when T_1141 : @[icache.scala 117:16] 
      node T_1142 = shl(s1_idx, 3) @[icache.scala 119:32] 
      node T_1143 = or(T_1142, refill_cnt) @[icache.scala 119:59] 
      write mport T_1144 = T_1138[T_1143], clk
      T_1144 <= FlowThroughSerializer_1.io.out.bits.data
      skip @[icache.scala 117:16] 
    node T_1145 = bits(s0_vaddr, 11, 3) @[icache.scala 121:28] 
    node T_1147 = eq(T_1141, UInt<1>("h00")) @[icache.scala 122:45] 
    node T_1148 = and(T_1147, s0_valid) @[icache.scala 122:50] 
    wire T_1150 : UInt
    T_1150 is invalid
    when T_1148 :
      T_1150 <= T_1145
      skip
    read mport T_1151 = T_1138[T_1150], clk
    s1_dout[3] <= T_1151 @[icache.scala 122:16] 
    node T_1153 = eq(stall, UInt<1>("h00")) @[icache.scala 131:38] 
    reg T_1154 : UInt<1>, clk
    when T_1153 : @[Reg.scala 29:19] 
      T_1154 <= s1_hit @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_1156 = eq(stall, UInt<1>("h00")) @[icache.scala 132:46] 
    reg T_1159 : UInt<1>[4], clk
    when T_1156 : @[Reg.scala 29:19] 
      T_1159 <= s1_tag_hit @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_1162 = eq(stall, UInt<1>("h00")) @[icache.scala 133:40] 
    reg T_1165 : UInt<64>[4], clk
    when T_1162 : @[Reg.scala 29:19] 
      T_1165 <= s1_dout @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_1168 = mux(T_1159[0], T_1165[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_1170 = mux(T_1159[1], T_1165[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_1172 = mux(T_1159[2], T_1165[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_1174 = mux(T_1159[3], T_1165[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_1176 = or(T_1168, T_1170) @[Mux.scala 18:72] 
    node T_1177 = or(T_1176, T_1172) @[Mux.scala 18:72] 
    node T_1178 = or(T_1177, T_1174) @[Mux.scala 18:72] 
    wire T_1179 : UInt<64>
    T_1179 is invalid
    T_1179 <= T_1178 @[Mux.scala 18:72] 
    io.resp.bits.datablock <= T_1179 @[icache.scala 134:30] 
    io.resp.valid <= T_1154 @[icache.scala 135:21] 
    node T_1180 = eq(state, UInt<2>("h01")) @[icache.scala 137:33] 
    node T_1182 = eq(io.s2_kill, UInt<1>("h00")) @[icache.scala 137:50] 
    node T_1183 = and(T_1180, T_1182) @[icache.scala 137:47] 
    io.mem.acquire.valid <= T_1183 @[icache.scala 137:24] 
    node T_1184 = shr(refill_addr, 6) @[icache.scala 138:60] 
    node T_1214 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 385:49] 
    node T_1215 = bits(T_1214, 2, 0) @[Definitions.scala 385:61] 
    node T_1217 = or(UInt<3>("h00"), UInt<3>("h07")) @[Definitions.scala 386:43] 
    node T_1218 = bits(T_1217, 2, 0) @[Definitions.scala 386:58] 
    node T_1220 = or(UInt<5>("h00"), UInt<5>("h00")) @[Definitions.scala 387:36] 
    node T_1221 = bits(T_1220, 4, 0) @[Definitions.scala 387:45] 
    node T_1223 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 388:46] 
    node T_1224 = bits(T_1223, 7, 0) @[Definitions.scala 388:54] 
    node T_1227 = cat(T_1221, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1228 = cat(T_1215, T_1218) @[Cat.scala 20:58] 
    node T_1229 = cat(T_1228, T_1227) @[Cat.scala 20:58] 
    node T_1231 = cat(T_1218, T_1221) @[Cat.scala 20:58] 
    node T_1232 = cat(T_1231, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1234 = cat(T_1224, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1236 = cat(T_1224, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1238 = cat(T_1221, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1239 = cat(T_1215, T_1218) @[Cat.scala 20:58] 
    node T_1240 = cat(T_1239, T_1238) @[Cat.scala 20:58] 
    node T_1242 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1244 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1245 = eq(UInt<3>("h06"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1246 = mux(T_1245, T_1244, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_1247 = eq(UInt<3>("h05"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1248 = mux(T_1247, T_1242, T_1246) @[Mux.scala 46:16] 
    node T_1249 = eq(UInt<3>("h04"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1250 = mux(T_1249, T_1240, T_1248) @[Mux.scala 46:16] 
    node T_1251 = eq(UInt<3>("h03"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1252 = mux(T_1251, T_1236, T_1250) @[Mux.scala 46:16] 
    node T_1253 = eq(UInt<3>("h02"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1254 = mux(T_1253, T_1234, T_1252) @[Mux.scala 46:16] 
    node T_1255 = eq(UInt<3>("h01"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1256 = mux(T_1255, T_1232, T_1254) @[Mux.scala 46:16] 
    node T_1257 = eq(UInt<3>("h00"), UInt<3>("h01")) @[Mux.scala 46:19] 
    node T_1258 = mux(T_1257, T_1229, T_1256) @[Mux.scala 46:16] 
    wire T_1287 : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_1287 is invalid @[Definitions.scala 412:19] 
    T_1287.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_1287.a_type <= UInt<3>("h01") @[Definitions.scala 414:16] 
    T_1287.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_1287.addr_block <= T_1184 @[Definitions.scala 416:20] 
    T_1287.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_1287.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_1287.union <= T_1258 @[Definitions.scala 419:15] 
    io.mem.acquire.bits <- T_1287 @[icache.scala 138:23] 
    node T_1315 = eq(UInt<2>("h00"), state) @[Conditional.scala 24:42] 
    when T_1315 : @[Conditional.scala 24:73] 
      when s1_miss : @[icache.scala 143:22] 
        state <= UInt<2>("h01") @[icache.scala 143:30] 
        skip @[icache.scala 143:22] 
      invalidated <= UInt<1>("h00") @[icache.scala 144:19] 
      skip @[Conditional.scala 24:73] 
    node T_1317 = eq(UInt<2>("h01"), state) @[Conditional.scala 24:42] 
    when T_1317 : @[Conditional.scala 24:73] 
      when io.mem.acquire.ready : @[icache.scala 147:35] 
        state <= UInt<2>("h02") @[icache.scala 147:43] 
        skip @[icache.scala 147:35] 
      when io.s2_kill : @[icache.scala 148:25] 
        state <= UInt<2>("h00") @[icache.scala 148:33] 
        skip @[icache.scala 148:25] 
      skip @[Conditional.scala 24:73] 
    node T_1318 = eq(UInt<2>("h02"), state) @[Conditional.scala 24:42] 
    when T_1318 : @[Conditional.scala 24:73] 
      when io.mem.grant.valid : @[icache.scala 151:33] 
        state <= UInt<2>("h03") @[icache.scala 151:41] 
        skip @[icache.scala 151:33] 
      skip @[Conditional.scala 24:73] 
    node T_1319 = eq(UInt<2>("h03"), state) @[Conditional.scala 24:42] 
    when T_1319 : @[Conditional.scala 24:73] 
      when refill_done : @[icache.scala 154:26] 
        state <= UInt<2>("h00") @[icache.scala 154:34] 
        skip @[icache.scala 154:26] 
      skip @[Conditional.scala 24:73] 
    
  module TLB : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {vpn : UInt<28>, passthrough : UInt<1>, instruction : UInt<1>, store : UInt<1>}}, resp : {miss : UInt<1>, ppn : UInt<20>, xcpt_ld : UInt<1>, xcpt_st : UInt<1>, xcpt_if : UInt<1>, cacheable : UInt<1>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}
    
    io is invalid
    reg valid : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg ppns : UInt<38>[8], clk
    reg tags : UInt<34>[8], clk
    reg state : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg r_refill_tag : UInt<34>, clk
    reg r_refill_waddr : UInt<3>, clk
    reg r_req : {vpn : UInt<28>, passthrough : UInt<1>, instruction : UInt<1>, store : UInt<1>}, clk
    node T_215 = bits(io.req.bits.vpn, 26, 0) @[tlb.scala 55:57] 
    node lookup_tag = cat(io.ptw.ptbr.asid, T_215) @[Cat.scala 20:58] 
    node T_216 = bits(valid, 0, 0) @[tlb.scala 56:49] 
    node T_217 = eq(tags[0], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_0 = and(T_216, T_217) @[tlb.scala 56:53] 
    node T_218 = bits(valid, 1, 1) @[tlb.scala 56:49] 
    node T_219 = eq(tags[1], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_1 = and(T_218, T_219) @[tlb.scala 56:53] 
    node T_220 = bits(valid, 2, 2) @[tlb.scala 56:49] 
    node T_221 = eq(tags[2], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_2 = and(T_220, T_221) @[tlb.scala 56:53] 
    node T_222 = bits(valid, 3, 3) @[tlb.scala 56:49] 
    node T_223 = eq(tags[3], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_3 = and(T_222, T_223) @[tlb.scala 56:53] 
    node T_224 = bits(valid, 4, 4) @[tlb.scala 56:49] 
    node T_225 = eq(tags[4], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_4 = and(T_224, T_225) @[tlb.scala 56:53] 
    node T_226 = bits(valid, 5, 5) @[tlb.scala 56:49] 
    node T_227 = eq(tags[5], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_5 = and(T_226, T_227) @[tlb.scala 56:53] 
    node T_228 = bits(valid, 6, 6) @[tlb.scala 56:49] 
    node T_229 = eq(tags[6], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_6 = and(T_228, T_229) @[tlb.scala 56:53] 
    node T_230 = bits(valid, 7, 7) @[tlb.scala 56:49] 
    node T_231 = eq(tags[7], lookup_tag) @[tlb.scala 56:64] 
    node hitsVec_7 = and(T_230, T_231) @[tlb.scala 56:53] 
    node T_232 = cat(hitsVec_1, hitsVec_0) @[Cat.scala 20:58] 
    node T_233 = cat(hitsVec_3, hitsVec_2) @[Cat.scala 20:58] 
    node T_234 = cat(T_233, T_232) @[Cat.scala 20:58] 
    node T_235 = cat(hitsVec_5, hitsVec_4) @[Cat.scala 20:58] 
    node T_236 = cat(hitsVec_7, hitsVec_6) @[Cat.scala 20:58] 
    node T_237 = cat(T_236, T_235) @[Cat.scala 20:58] 
    node hits = cat(T_237, T_234) @[Cat.scala 20:58] 
    reg pte_array : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}, clk
    reg u_array : UInt<8>, clk
    reg sw_array : UInt<8>, clk
    reg sx_array : UInt<8>, clk
    reg sr_array : UInt<8>, clk
    reg dirty_array : UInt<8>, clk
    when io.ptw.resp.valid : @[tlb.scala 66:28] 
      ppns[r_refill_waddr] <= io.ptw.resp.bits.pte.ppn @[tlb.scala 68:26] 
      tags[r_refill_waddr] <= r_refill_tag @[tlb.scala 69:26] 
      node T_267 = dshl(UInt<1>("h01"), r_refill_waddr) @[OneHot.scala 44:15] 
      node T_268 = or(valid, T_267) @[tlb.scala 72:20] 
      valid <= T_268 @[tlb.scala 72:11] 
      node T_269 = or(u_array, T_267) @[tlb.scala 73:35] 
      node T_270 = not(T_267) @[tlb.scala 73:53] 
      node T_271 = and(u_array, T_270) @[tlb.scala 73:51] 
      node T_272 = mux(io.ptw.resp.bits.pte.u, T_269, T_271) @[tlb.scala 73:19] 
      u_array <= T_272 @[tlb.scala 73:13] 
      node T_274 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 52:47] 
      node T_275 = and(io.ptw.resp.bits.pte.x, T_274) @[ptw.scala 52:44] 
      node T_276 = or(io.ptw.resp.bits.pte.r, T_275) @[ptw.scala 52:38] 
      node T_277 = and(io.ptw.resp.bits.pte.v, T_276) @[ptw.scala 52:32] 
      node T_278 = and(T_277, io.ptw.resp.bits.pte.r) @[ptw.scala 56:35] 
      node T_279 = or(sr_array, T_267) @[tlb.scala 74:40] 
      node T_280 = not(T_267) @[tlb.scala 74:59] 
      node T_281 = and(sr_array, T_280) @[tlb.scala 74:57] 
      node T_282 = mux(T_278, T_279, T_281) @[tlb.scala 74:20] 
      sr_array <= T_282 @[tlb.scala 74:14] 
      node T_284 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 52:47] 
      node T_285 = and(io.ptw.resp.bits.pte.x, T_284) @[ptw.scala 52:44] 
      node T_286 = or(io.ptw.resp.bits.pte.r, T_285) @[ptw.scala 52:38] 
      node T_287 = and(io.ptw.resp.bits.pte.v, T_286) @[ptw.scala 52:32] 
      node T_288 = and(T_287, io.ptw.resp.bits.pte.w) @[ptw.scala 57:35] 
      node T_289 = or(sw_array, T_267) @[tlb.scala 75:40] 
      node T_290 = not(T_267) @[tlb.scala 75:59] 
      node T_291 = and(sw_array, T_290) @[tlb.scala 75:57] 
      node T_292 = mux(T_288, T_289, T_291) @[tlb.scala 75:20] 
      sw_array <= T_292 @[tlb.scala 75:14] 
      node T_294 = eq(io.ptw.resp.bits.pte.w, UInt<1>("h00")) @[ptw.scala 52:47] 
      node T_295 = and(io.ptw.resp.bits.pte.x, T_294) @[ptw.scala 52:44] 
      node T_296 = or(io.ptw.resp.bits.pte.r, T_295) @[ptw.scala 52:38] 
      node T_297 = and(io.ptw.resp.bits.pte.v, T_296) @[ptw.scala 52:32] 
      node T_298 = and(T_297, io.ptw.resp.bits.pte.x) @[ptw.scala 58:35] 
      node T_299 = or(sx_array, T_267) @[tlb.scala 76:40] 
      node T_300 = not(T_267) @[tlb.scala 76:59] 
      node T_301 = and(sx_array, T_300) @[tlb.scala 76:57] 
      node T_302 = mux(T_298, T_299, T_301) @[tlb.scala 76:20] 
      sx_array <= T_302 @[tlb.scala 76:14] 
      node T_303 = or(dirty_array, T_267) @[tlb.scala 77:43] 
      node T_304 = not(T_267) @[tlb.scala 77:65] 
      node T_305 = and(dirty_array, T_304) @[tlb.scala 77:63] 
      node T_306 = mux(io.ptw.resp.bits.pte.d, T_303, T_305) @[tlb.scala 77:23] 
      dirty_array <= T_306 @[tlb.scala 77:17] 
      skip @[tlb.scala 66:28] 
    reg T_308 : UInt<8>, clk
    node T_309 = not(valid) @[tlb.scala 82:31] 
    node T_311 = eq(T_309, UInt<1>("h00")) @[tlb.scala 82:31] 
    node T_313 = eq(T_311, UInt<1>("h00")) @[tlb.scala 82:24] 
    node T_314 = not(valid) @[tlb.scala 82:53] 
    node T_315 = bits(T_314, 0, 0) @[OneHot.scala 35:40] 
    node T_316 = bits(T_314, 1, 1) @[OneHot.scala 35:40] 
    node T_317 = bits(T_314, 2, 2) @[OneHot.scala 35:40] 
    node T_318 = bits(T_314, 3, 3) @[OneHot.scala 35:40] 
    node T_319 = bits(T_314, 4, 4) @[OneHot.scala 35:40] 
    node T_320 = bits(T_314, 5, 5) @[OneHot.scala 35:40] 
    node T_321 = bits(T_314, 6, 6) @[OneHot.scala 35:40] 
    node T_322 = bits(T_314, 7, 7) @[OneHot.scala 35:40] 
    node T_331 = mux(T_321, UInt<3>("h06"), UInt<3>("h07")) @[Mux.scala 31:69] 
    node T_332 = mux(T_320, UInt<3>("h05"), T_331) @[Mux.scala 31:69] 
    node T_333 = mux(T_319, UInt<3>("h04"), T_332) @[Mux.scala 31:69] 
    node T_334 = mux(T_318, UInt<2>("h03"), T_333) @[Mux.scala 31:69] 
    node T_335 = mux(T_317, UInt<2>("h02"), T_334) @[Mux.scala 31:69] 
    node T_336 = mux(T_316, UInt<1>("h01"), T_335) @[Mux.scala 31:69] 
    node T_337 = mux(T_315, UInt<1>("h00"), T_336) @[Mux.scala 31:69] 
    node T_339 = dshr(T_308, UInt<1>("h01")) @[Cache.scala 104:27] 
    node T_340 = bits(T_339, 0, 0) @[Cache.scala 104:27] 
    node T_341 = cat(UInt<1>("h01"), T_340) @[Cat.scala 20:58] 
    node T_342 = dshr(T_308, T_341) @[Cache.scala 104:27] 
    node T_343 = bits(T_342, 0, 0) @[Cache.scala 104:27] 
    node T_344 = cat(T_341, T_343) @[Cat.scala 20:58] 
    node T_345 = dshr(T_308, T_344) @[Cache.scala 104:27] 
    node T_346 = bits(T_345, 0, 0) @[Cache.scala 104:27] 
    node T_347 = cat(T_344, T_346) @[Cat.scala 20:58] 
    node T_348 = bits(T_347, 2, 0) @[Cache.scala 105:8] 
    node repl_waddr = mux(T_313, T_337, T_348) @[tlb.scala 82:23] 
    node T_350 = eq(io.req.bits.instruction, UInt<1>("h00")) @[tlb.scala 84:39] 
    node do_mprv = and(io.ptw.status.mprv, T_350) @[tlb.scala 84:36] 
    node priv = mux(do_mprv, io.ptw.status.mpp, io.ptw.status.prv) @[tlb.scala 85:17] 
    node priv_s = eq(priv, UInt<1>("h01")) @[tlb.scala 86:21] 
    node T_353 = leq(priv, UInt<1>("h01")) @[tlb.scala 87:27] 
    node T_355 = eq(io.ptw.status.debug, UInt<1>("h00")) @[tlb.scala 87:39] 
    node priv_uses_vm = and(T_353, T_355) @[tlb.scala 87:36] 
    node T_357 = mux(io.ptw.status.pum, u_array, UInt<1>("h00")) @[tlb.scala 89:33] 
    node T_358 = not(T_357) @[tlb.scala 89:29] 
    node priv_ok = mux(priv_s, T_358, u_array) @[tlb.scala 89:20] 
    node w_array = and(priv_ok, sw_array) @[tlb.scala 90:25] 
    node x_array = and(priv_ok, sx_array) @[tlb.scala 91:25] 
    node T_360 = mux(io.ptw.status.mxr, x_array, UInt<1>("h00")) @[tlb.scala 92:42] 
    node T_361 = or(sr_array, T_360) @[tlb.scala 92:37] 
    node r_array = and(priv_ok, T_361) @[tlb.scala 92:25] 
    node T_363 = bits(io.ptw.status.vm, 3, 3) @[tlb.scala 94:53] 
    node T_364 = and(UInt<1>("h01"), T_363) @[tlb.scala 94:34] 
    node T_365 = and(T_364, priv_uses_vm) @[tlb.scala 94:57] 
    node T_367 = eq(io.req.bits.passthrough, UInt<1>("h00")) @[tlb.scala 94:76] 
    node vm_enabled = and(T_365, T_367) @[tlb.scala 94:73] 
    node T_368 = bits(io.req.bits.vpn, 27, 27) @[tlb.scala 97:25] 
    node T_369 = bits(io.req.bits.vpn, 26, 26) @[tlb.scala 97:54] 
    node bad_va = neq(T_368, T_369) @[tlb.scala 97:35] 
    node T_371 = mux(io.req.bits.store, w_array, UInt<1>("h00")) @[tlb.scala 99:44] 
    node T_372 = not(T_371) @[tlb.scala 99:40] 
    node T_373 = or(dirty_array, T_372) @[tlb.scala 99:38] 
    node tag_hits = and(hits, T_373) @[tlb.scala 99:23] 
    node tag_hit = neq(tag_hits, UInt<1>("h00")) @[tlb.scala 100:26] 
    node tlb_hit = and(vm_enabled, tag_hit) @[tlb.scala 101:28] 
    node T_376 = eq(tag_hit, UInt<1>("h00")) @[tlb.scala 102:32] 
    node T_377 = and(vm_enabled, T_376) @[tlb.scala 102:29] 
    node T_379 = eq(bad_va, UInt<1>("h00")) @[tlb.scala 102:44] 
    node tlb_miss = and(T_377, T_379) @[tlb.scala 102:41] 
    node T_380 = and(io.req.valid, tlb_hit) @[tlb.scala 104:22] 
    when T_380 : @[tlb.scala 104:34] 
      node T_381 = bits(hits, 7, 4) @[OneHot.scala 22:18] 
      node T_382 = bits(hits, 3, 0) @[OneHot.scala 23:18] 
      node T_384 = neq(T_381, UInt<1>("h00")) @[OneHot.scala 24:14] 
      node T_385 = or(T_381, T_382) @[OneHot.scala 24:28] 
      node T_386 = bits(T_385, 3, 2) @[OneHot.scala 22:18] 
      node T_387 = bits(T_385, 1, 0) @[OneHot.scala 23:18] 
      node T_389 = neq(T_386, UInt<1>("h00")) @[OneHot.scala 24:14] 
      node T_390 = or(T_386, T_387) @[OneHot.scala 24:28] 
      node T_391 = bits(T_390, 1, 1) @[CircuitMath.scala 21:8] 
      node T_392 = cat(T_389, T_391) @[Cat.scala 20:58] 
      node T_393 = cat(T_384, T_392) @[Cat.scala 20:58] 
      node T_395 = bits(T_393, 2, 2) @[Cache.scala 94:20] 
      node T_397 = eq(T_395, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_399 = dshl(UInt<1>("h01"), UInt<1>("h01")) @[Cache.scala 95:37] 
      node T_400 = or(T_308, T_399) @[Cache.scala 95:37] 
      node T_401 = not(T_308) @[Cache.scala 95:37] 
      node T_402 = or(T_401, T_399) @[Cache.scala 95:37] 
      node T_403 = not(T_402) @[Cache.scala 95:37] 
      node T_404 = mux(T_397, T_400, T_403) @[Cache.scala 95:37] 
      node T_405 = cat(UInt<1>("h01"), T_395) @[Cat.scala 20:58] 
      node T_406 = bits(T_393, 1, 1) @[Cache.scala 94:20] 
      node T_408 = eq(T_406, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_410 = dshl(UInt<1>("h01"), T_405) @[Cache.scala 95:37] 
      node T_411 = or(T_404, T_410) @[Cache.scala 95:37] 
      node T_412 = not(T_404) @[Cache.scala 95:37] 
      node T_413 = or(T_412, T_410) @[Cache.scala 95:37] 
      node T_414 = not(T_413) @[Cache.scala 95:37] 
      node T_415 = mux(T_408, T_411, T_414) @[Cache.scala 95:37] 
      node T_416 = cat(T_405, T_406) @[Cat.scala 20:58] 
      node T_417 = bits(T_393, 0, 0) @[Cache.scala 94:20] 
      node T_419 = eq(T_417, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_421 = dshl(UInt<1>("h01"), T_416) @[Cache.scala 95:37] 
      node T_422 = or(T_415, T_421) @[Cache.scala 95:37] 
      node T_423 = not(T_415) @[Cache.scala 95:37] 
      node T_424 = or(T_423, T_421) @[Cache.scala 95:37] 
      node T_425 = not(T_424) @[Cache.scala 95:37] 
      node T_426 = mux(T_419, T_422, T_425) @[Cache.scala 95:37] 
      node T_427 = cat(T_416, T_417) @[Cat.scala 20:58] 
      T_308 <= T_426 @[Cache.scala 88:15] 
      skip @[tlb.scala 104:34] 
    node paddr = cat(io.resp.ppn, UInt<12>("h00")) @[Cat.scala 20:58] 
    node T_430 = leq(UInt<1>("h00"), paddr) @[addrmap.scala 43:46] 
    node T_432 = lt(paddr, UInt<13>("h01000")) @[addrmap.scala 43:56] 
    node T_433 = and(T_430, T_432) @[addrmap.scala 43:51] 
    node T_436 = mux(T_433, UInt<3>("h07"), UInt<1>("h00")) @[addrmap.scala 146:10] 
    node T_438 = leq(UInt<13>("h01000"), paddr) @[addrmap.scala 43:46] 
    node T_440 = lt(paddr, UInt<14>("h02000")) @[addrmap.scala 43:56] 
    node T_441 = and(T_438, T_440) @[addrmap.scala 43:51] 
    node T_444 = mux(T_441, UInt<3>("h05"), UInt<1>("h00")) @[addrmap.scala 146:10] 
    node T_446 = leq(UInt<31>("h040000000"), paddr) @[addrmap.scala 43:46] 
    node T_448 = lt(paddr, UInt<31>("h044000000")) @[addrmap.scala 43:56] 
    node T_449 = and(T_446, T_448) @[addrmap.scala 43:51] 
    node T_452 = mux(T_449, UInt<3>("h03"), UInt<1>("h00")) @[addrmap.scala 146:10] 
    node T_454 = leq(UInt<31>("h044000000"), paddr) @[addrmap.scala 43:46] 
    node T_456 = lt(paddr, UInt<31>("h048000000")) @[addrmap.scala 43:56] 
    node T_457 = and(T_454, T_456) @[addrmap.scala 43:51] 
    node T_460 = mux(T_457, UInt<3>("h03"), UInt<1>("h00")) @[addrmap.scala 146:10] 
    node T_462 = leq(UInt<32>("h080000000"), paddr) @[addrmap.scala 43:46] 
    node T_464 = lt(paddr, UInt<32>("h090000000")) @[addrmap.scala 43:56] 
    node T_465 = and(T_462, T_464) @[addrmap.scala 43:51] 
    node T_468 = mux(T_465, UInt<3>("h07"), UInt<1>("h00")) @[addrmap.scala 146:10] 
    node T_473 = or(T_436, T_444) @[addrmap.scala 148:54] 
    node T_474 = or(T_473, T_452) @[addrmap.scala 148:54] 
    node T_475 = or(T_474, T_460) @[addrmap.scala 148:54] 
    node T_476 = or(T_475, T_468) @[addrmap.scala 148:54] 
    wire addr_prot : {x : UInt<1>, w : UInt<1>, r : UInt<1>} @[addrmap.scala 148:31] 
    addr_prot is invalid @[addrmap.scala 148:31] 
    node T_484 = bits(T_476, 0, 0) @[addrmap.scala 148:31] 
    addr_prot.r <= T_484 @[addrmap.scala 148:31] 
    node T_485 = bits(T_476, 1, 1) @[addrmap.scala 148:31] 
    addr_prot.w <= T_485 @[addrmap.scala 148:31] 
    node T_486 = bits(T_476, 2, 2) @[addrmap.scala 148:31] 
    addr_prot.x <= T_486 @[addrmap.scala 148:31] 
    node T_487 = eq(state, UInt<2>("h00")) @[tlb.scala 111:25] 
    io.req.ready <= T_487 @[tlb.scala 111:16] 
    node T_489 = eq(tlb_miss, UInt<1>("h00")) @[tlb.scala 112:33] 
    node T_491 = eq(addr_prot.r, UInt<1>("h00")) @[tlb.scala 112:46] 
    node T_492 = and(T_489, T_491) @[tlb.scala 112:43] 
    node T_493 = or(bad_va, T_492) @[tlb.scala 112:29] 
    node T_494 = and(r_array, hits) @[tlb.scala 112:85] 
    node T_496 = neq(T_494, UInt<1>("h00")) @[tlb.scala 112:93] 
    node T_498 = eq(T_496, UInt<1>("h00")) @[tlb.scala 112:75] 
    node T_499 = and(tlb_hit, T_498) @[tlb.scala 112:72] 
    node T_500 = or(T_493, T_499) @[tlb.scala 112:60] 
    io.resp.xcpt_ld <= T_500 @[tlb.scala 112:19] 
    node T_502 = eq(tlb_miss, UInt<1>("h00")) @[tlb.scala 113:33] 
    node T_504 = eq(addr_prot.w, UInt<1>("h00")) @[tlb.scala 113:46] 
    node T_505 = and(T_502, T_504) @[tlb.scala 113:43] 
    node T_506 = or(bad_va, T_505) @[tlb.scala 113:29] 
    node T_507 = and(w_array, hits) @[tlb.scala 113:85] 
    node T_509 = neq(T_507, UInt<1>("h00")) @[tlb.scala 113:93] 
    node T_511 = eq(T_509, UInt<1>("h00")) @[tlb.scala 113:75] 
    node T_512 = and(tlb_hit, T_511) @[tlb.scala 113:72] 
    node T_513 = or(T_506, T_512) @[tlb.scala 113:60] 
    io.resp.xcpt_st <= T_513 @[tlb.scala 113:19] 
    node T_515 = eq(tlb_miss, UInt<1>("h00")) @[tlb.scala 114:33] 
    node T_517 = eq(addr_prot.x, UInt<1>("h00")) @[tlb.scala 114:46] 
    node T_518 = and(T_515, T_517) @[tlb.scala 114:43] 
    node T_519 = or(bad_va, T_518) @[tlb.scala 114:29] 
    node T_520 = and(x_array, hits) @[tlb.scala 114:85] 
    node T_522 = neq(T_520, UInt<1>("h00")) @[tlb.scala 114:93] 
    node T_524 = eq(T_522, UInt<1>("h00")) @[tlb.scala 114:75] 
    node T_525 = and(tlb_hit, T_524) @[tlb.scala 114:72] 
    node T_526 = or(T_519, T_525) @[tlb.scala 114:60] 
    io.resp.xcpt_if <= T_526 @[tlb.scala 114:19] 
    node T_528 = leq(UInt<32>("h080000000"), paddr) @[addrmap.scala 43:46] 
    node T_530 = lt(paddr, UInt<32>("h090000000")) @[addrmap.scala 43:56] 
    node T_531 = and(T_528, T_530) @[addrmap.scala 43:51] 
    node T_533 = or(UInt<1>("h00"), T_531) @[addrmap.scala 135:31] 
    io.resp.cacheable <= T_533 @[tlb.scala 115:21] 
    io.resp.miss <= tlb_miss @[tlb.scala 116:16] 
    node T_535 = mux(hitsVec_0, ppns[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_537 = mux(hitsVec_1, ppns[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_539 = mux(hitsVec_2, ppns[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_541 = mux(hitsVec_3, ppns[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_543 = mux(hitsVec_4, ppns[4], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_545 = mux(hitsVec_5, ppns[5], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_547 = mux(hitsVec_6, ppns[6], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_549 = mux(hitsVec_7, ppns[7], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_551 = or(T_535, T_537) @[Mux.scala 18:72] 
    node T_552 = or(T_551, T_539) @[Mux.scala 18:72] 
    node T_553 = or(T_552, T_541) @[Mux.scala 18:72] 
    node T_554 = or(T_553, T_543) @[Mux.scala 18:72] 
    node T_555 = or(T_554, T_545) @[Mux.scala 18:72] 
    node T_556 = or(T_555, T_547) @[Mux.scala 18:72] 
    node T_557 = or(T_556, T_549) @[Mux.scala 18:72] 
    wire T_558 : UInt<38>
    T_558 is invalid
    T_558 <= T_557 @[Mux.scala 18:72] 
    node T_559 = bits(io.req.bits.vpn, 19, 0) @[tlb.scala 117:71] 
    node T_560 = mux(vm_enabled, T_558, T_559) @[tlb.scala 117:21] 
    io.resp.ppn <= T_560 @[tlb.scala 117:15] 
    node T_561 = eq(state, UInt<2>("h01")) @[tlb.scala 119:29] 
    io.ptw.req.valid <= T_561 @[tlb.scala 119:20] 
    io.ptw.req.bits <- io.ptw.status @[tlb.scala 120:19] 
    io.ptw.req.bits.addr <= r_refill_tag @[tlb.scala 121:24] 
    io.ptw.req.bits.store <= r_req.store @[tlb.scala 122:25] 
    io.ptw.req.bits.fetch <= r_req.instruction @[tlb.scala 123:25] 
    node T_562 = and(io.req.ready, io.req.valid) @[Decoupled.scala 16:42] 
    node T_563 = and(T_562, tlb_miss) @[tlb.scala 126:25] 
    when T_563 : @[tlb.scala 126:38] 
      state <= UInt<2>("h01") @[tlb.scala 127:13] 
      r_refill_tag <= lookup_tag @[tlb.scala 128:20] 
      r_refill_waddr <= repl_waddr @[tlb.scala 129:22] 
      r_req <- io.req.bits @[tlb.scala 130:13] 
      skip @[tlb.scala 126:38] 
    node T_564 = eq(state, UInt<2>("h01")) @[tlb.scala 132:17] 
    when T_564 : @[tlb.scala 132:32] 
      when io.ptw.invalidate : @[tlb.scala 133:32] 
        state <= UInt<2>("h00") @[tlb.scala 134:15] 
        skip @[tlb.scala 133:32] 
      when io.ptw.req.ready : @[tlb.scala 136:31] 
        state <= UInt<2>("h02") @[tlb.scala 137:15] 
        when io.ptw.invalidate : @[tlb.scala 138:34] 
          state <= UInt<2>("h03") @[tlb.scala 138:42] 
          skip @[tlb.scala 138:34] 
        skip @[tlb.scala 136:31] 
      skip @[tlb.scala 132:32] 
    node T_565 = eq(state, UInt<2>("h02")) @[tlb.scala 141:17] 
    node T_566 = and(T_565, io.ptw.invalidate) @[tlb.scala 141:28] 
    when T_566 : @[tlb.scala 141:50] 
      state <= UInt<2>("h03") @[tlb.scala 142:13] 
      skip @[tlb.scala 141:50] 
    when io.ptw.resp.valid : @[tlb.scala 144:30] 
      state <= UInt<2>("h00") @[tlb.scala 145:13] 
      skip @[tlb.scala 144:30] 
    when io.ptw.invalidate : @[tlb.scala 148:30] 
      valid <= UInt<1>("h00") @[tlb.scala 149:13] 
      skip @[tlb.scala 148:30] 
    
  module BTB : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<39>}}, resp : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, flip btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, flip bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, flip ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}}
    
    io is invalid
    reg idxs : UInt<11>[62], clk
    reg idxPages : UInt<3>[62], clk
    reg tgts : UInt<11>[62], clk
    reg tgtPages : UInt<3>[62], clk
    reg pages : UInt<27>[6], clk
    reg pageValid : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    node T_606 = dshl(UInt<1>("h01"), idxPages[0]) @[OneHot.scala 44:15] 
    node idxPagesOH_0 = bits(T_606, 5, 0) @[btb.scala 152:44] 
    node T_608 = dshl(UInt<1>("h01"), idxPages[1]) @[OneHot.scala 44:15] 
    node idxPagesOH_1 = bits(T_608, 5, 0) @[btb.scala 152:44] 
    node T_610 = dshl(UInt<1>("h01"), idxPages[2]) @[OneHot.scala 44:15] 
    node idxPagesOH_2 = bits(T_610, 5, 0) @[btb.scala 152:44] 
    node T_612 = dshl(UInt<1>("h01"), idxPages[3]) @[OneHot.scala 44:15] 
    node idxPagesOH_3 = bits(T_612, 5, 0) @[btb.scala 152:44] 
    node T_614 = dshl(UInt<1>("h01"), idxPages[4]) @[OneHot.scala 44:15] 
    node idxPagesOH_4 = bits(T_614, 5, 0) @[btb.scala 152:44] 
    node T_616 = dshl(UInt<1>("h01"), idxPages[5]) @[OneHot.scala 44:15] 
    node idxPagesOH_5 = bits(T_616, 5, 0) @[btb.scala 152:44] 
    node T_618 = dshl(UInt<1>("h01"), idxPages[6]) @[OneHot.scala 44:15] 
    node idxPagesOH_6 = bits(T_618, 5, 0) @[btb.scala 152:44] 
    node T_620 = dshl(UInt<1>("h01"), idxPages[7]) @[OneHot.scala 44:15] 
    node idxPagesOH_7 = bits(T_620, 5, 0) @[btb.scala 152:44] 
    node T_622 = dshl(UInt<1>("h01"), idxPages[8]) @[OneHot.scala 44:15] 
    node idxPagesOH_8 = bits(T_622, 5, 0) @[btb.scala 152:44] 
    node T_624 = dshl(UInt<1>("h01"), idxPages[9]) @[OneHot.scala 44:15] 
    node idxPagesOH_9 = bits(T_624, 5, 0) @[btb.scala 152:44] 
    node T_626 = dshl(UInt<1>("h01"), idxPages[10]) @[OneHot.scala 44:15] 
    node idxPagesOH_10 = bits(T_626, 5, 0) @[btb.scala 152:44] 
    node T_628 = dshl(UInt<1>("h01"), idxPages[11]) @[OneHot.scala 44:15] 
    node idxPagesOH_11 = bits(T_628, 5, 0) @[btb.scala 152:44] 
    node T_630 = dshl(UInt<1>("h01"), idxPages[12]) @[OneHot.scala 44:15] 
    node idxPagesOH_12 = bits(T_630, 5, 0) @[btb.scala 152:44] 
    node T_632 = dshl(UInt<1>("h01"), idxPages[13]) @[OneHot.scala 44:15] 
    node idxPagesOH_13 = bits(T_632, 5, 0) @[btb.scala 152:44] 
    node T_634 = dshl(UInt<1>("h01"), idxPages[14]) @[OneHot.scala 44:15] 
    node idxPagesOH_14 = bits(T_634, 5, 0) @[btb.scala 152:44] 
    node T_636 = dshl(UInt<1>("h01"), idxPages[15]) @[OneHot.scala 44:15] 
    node idxPagesOH_15 = bits(T_636, 5, 0) @[btb.scala 152:44] 
    node T_638 = dshl(UInt<1>("h01"), idxPages[16]) @[OneHot.scala 44:15] 
    node idxPagesOH_16 = bits(T_638, 5, 0) @[btb.scala 152:44] 
    node T_640 = dshl(UInt<1>("h01"), idxPages[17]) @[OneHot.scala 44:15] 
    node idxPagesOH_17 = bits(T_640, 5, 0) @[btb.scala 152:44] 
    node T_642 = dshl(UInt<1>("h01"), idxPages[18]) @[OneHot.scala 44:15] 
    node idxPagesOH_18 = bits(T_642, 5, 0) @[btb.scala 152:44] 
    node T_644 = dshl(UInt<1>("h01"), idxPages[19]) @[OneHot.scala 44:15] 
    node idxPagesOH_19 = bits(T_644, 5, 0) @[btb.scala 152:44] 
    node T_646 = dshl(UInt<1>("h01"), idxPages[20]) @[OneHot.scala 44:15] 
    node idxPagesOH_20 = bits(T_646, 5, 0) @[btb.scala 152:44] 
    node T_648 = dshl(UInt<1>("h01"), idxPages[21]) @[OneHot.scala 44:15] 
    node idxPagesOH_21 = bits(T_648, 5, 0) @[btb.scala 152:44] 
    node T_650 = dshl(UInt<1>("h01"), idxPages[22]) @[OneHot.scala 44:15] 
    node idxPagesOH_22 = bits(T_650, 5, 0) @[btb.scala 152:44] 
    node T_652 = dshl(UInt<1>("h01"), idxPages[23]) @[OneHot.scala 44:15] 
    node idxPagesOH_23 = bits(T_652, 5, 0) @[btb.scala 152:44] 
    node T_654 = dshl(UInt<1>("h01"), idxPages[24]) @[OneHot.scala 44:15] 
    node idxPagesOH_24 = bits(T_654, 5, 0) @[btb.scala 152:44] 
    node T_656 = dshl(UInt<1>("h01"), idxPages[25]) @[OneHot.scala 44:15] 
    node idxPagesOH_25 = bits(T_656, 5, 0) @[btb.scala 152:44] 
    node T_658 = dshl(UInt<1>("h01"), idxPages[26]) @[OneHot.scala 44:15] 
    node idxPagesOH_26 = bits(T_658, 5, 0) @[btb.scala 152:44] 
    node T_660 = dshl(UInt<1>("h01"), idxPages[27]) @[OneHot.scala 44:15] 
    node idxPagesOH_27 = bits(T_660, 5, 0) @[btb.scala 152:44] 
    node T_662 = dshl(UInt<1>("h01"), idxPages[28]) @[OneHot.scala 44:15] 
    node idxPagesOH_28 = bits(T_662, 5, 0) @[btb.scala 152:44] 
    node T_664 = dshl(UInt<1>("h01"), idxPages[29]) @[OneHot.scala 44:15] 
    node idxPagesOH_29 = bits(T_664, 5, 0) @[btb.scala 152:44] 
    node T_666 = dshl(UInt<1>("h01"), idxPages[30]) @[OneHot.scala 44:15] 
    node idxPagesOH_30 = bits(T_666, 5, 0) @[btb.scala 152:44] 
    node T_668 = dshl(UInt<1>("h01"), idxPages[31]) @[OneHot.scala 44:15] 
    node idxPagesOH_31 = bits(T_668, 5, 0) @[btb.scala 152:44] 
    node T_670 = dshl(UInt<1>("h01"), idxPages[32]) @[OneHot.scala 44:15] 
    node idxPagesOH_32 = bits(T_670, 5, 0) @[btb.scala 152:44] 
    node T_672 = dshl(UInt<1>("h01"), idxPages[33]) @[OneHot.scala 44:15] 
    node idxPagesOH_33 = bits(T_672, 5, 0) @[btb.scala 152:44] 
    node T_674 = dshl(UInt<1>("h01"), idxPages[34]) @[OneHot.scala 44:15] 
    node idxPagesOH_34 = bits(T_674, 5, 0) @[btb.scala 152:44] 
    node T_676 = dshl(UInt<1>("h01"), idxPages[35]) @[OneHot.scala 44:15] 
    node idxPagesOH_35 = bits(T_676, 5, 0) @[btb.scala 152:44] 
    node T_678 = dshl(UInt<1>("h01"), idxPages[36]) @[OneHot.scala 44:15] 
    node idxPagesOH_36 = bits(T_678, 5, 0) @[btb.scala 152:44] 
    node T_680 = dshl(UInt<1>("h01"), idxPages[37]) @[OneHot.scala 44:15] 
    node idxPagesOH_37 = bits(T_680, 5, 0) @[btb.scala 152:44] 
    node T_682 = dshl(UInt<1>("h01"), idxPages[38]) @[OneHot.scala 44:15] 
    node idxPagesOH_38 = bits(T_682, 5, 0) @[btb.scala 152:44] 
    node T_684 = dshl(UInt<1>("h01"), idxPages[39]) @[OneHot.scala 44:15] 
    node idxPagesOH_39 = bits(T_684, 5, 0) @[btb.scala 152:44] 
    node T_686 = dshl(UInt<1>("h01"), idxPages[40]) @[OneHot.scala 44:15] 
    node idxPagesOH_40 = bits(T_686, 5, 0) @[btb.scala 152:44] 
    node T_688 = dshl(UInt<1>("h01"), idxPages[41]) @[OneHot.scala 44:15] 
    node idxPagesOH_41 = bits(T_688, 5, 0) @[btb.scala 152:44] 
    node T_690 = dshl(UInt<1>("h01"), idxPages[42]) @[OneHot.scala 44:15] 
    node idxPagesOH_42 = bits(T_690, 5, 0) @[btb.scala 152:44] 
    node T_692 = dshl(UInt<1>("h01"), idxPages[43]) @[OneHot.scala 44:15] 
    node idxPagesOH_43 = bits(T_692, 5, 0) @[btb.scala 152:44] 
    node T_694 = dshl(UInt<1>("h01"), idxPages[44]) @[OneHot.scala 44:15] 
    node idxPagesOH_44 = bits(T_694, 5, 0) @[btb.scala 152:44] 
    node T_696 = dshl(UInt<1>("h01"), idxPages[45]) @[OneHot.scala 44:15] 
    node idxPagesOH_45 = bits(T_696, 5, 0) @[btb.scala 152:44] 
    node T_698 = dshl(UInt<1>("h01"), idxPages[46]) @[OneHot.scala 44:15] 
    node idxPagesOH_46 = bits(T_698, 5, 0) @[btb.scala 152:44] 
    node T_700 = dshl(UInt<1>("h01"), idxPages[47]) @[OneHot.scala 44:15] 
    node idxPagesOH_47 = bits(T_700, 5, 0) @[btb.scala 152:44] 
    node T_702 = dshl(UInt<1>("h01"), idxPages[48]) @[OneHot.scala 44:15] 
    node idxPagesOH_48 = bits(T_702, 5, 0) @[btb.scala 152:44] 
    node T_704 = dshl(UInt<1>("h01"), idxPages[49]) @[OneHot.scala 44:15] 
    node idxPagesOH_49 = bits(T_704, 5, 0) @[btb.scala 152:44] 
    node T_706 = dshl(UInt<1>("h01"), idxPages[50]) @[OneHot.scala 44:15] 
    node idxPagesOH_50 = bits(T_706, 5, 0) @[btb.scala 152:44] 
    node T_708 = dshl(UInt<1>("h01"), idxPages[51]) @[OneHot.scala 44:15] 
    node idxPagesOH_51 = bits(T_708, 5, 0) @[btb.scala 152:44] 
    node T_710 = dshl(UInt<1>("h01"), idxPages[52]) @[OneHot.scala 44:15] 
    node idxPagesOH_52 = bits(T_710, 5, 0) @[btb.scala 152:44] 
    node T_712 = dshl(UInt<1>("h01"), idxPages[53]) @[OneHot.scala 44:15] 
    node idxPagesOH_53 = bits(T_712, 5, 0) @[btb.scala 152:44] 
    node T_714 = dshl(UInt<1>("h01"), idxPages[54]) @[OneHot.scala 44:15] 
    node idxPagesOH_54 = bits(T_714, 5, 0) @[btb.scala 152:44] 
    node T_716 = dshl(UInt<1>("h01"), idxPages[55]) @[OneHot.scala 44:15] 
    node idxPagesOH_55 = bits(T_716, 5, 0) @[btb.scala 152:44] 
    node T_718 = dshl(UInt<1>("h01"), idxPages[56]) @[OneHot.scala 44:15] 
    node idxPagesOH_56 = bits(T_718, 5, 0) @[btb.scala 152:44] 
    node T_720 = dshl(UInt<1>("h01"), idxPages[57]) @[OneHot.scala 44:15] 
    node idxPagesOH_57 = bits(T_720, 5, 0) @[btb.scala 152:44] 
    node T_722 = dshl(UInt<1>("h01"), idxPages[58]) @[OneHot.scala 44:15] 
    node idxPagesOH_58 = bits(T_722, 5, 0) @[btb.scala 152:44] 
    node T_724 = dshl(UInt<1>("h01"), idxPages[59]) @[OneHot.scala 44:15] 
    node idxPagesOH_59 = bits(T_724, 5, 0) @[btb.scala 152:44] 
    node T_726 = dshl(UInt<1>("h01"), idxPages[60]) @[OneHot.scala 44:15] 
    node idxPagesOH_60 = bits(T_726, 5, 0) @[btb.scala 152:44] 
    node T_728 = dshl(UInt<1>("h01"), idxPages[61]) @[OneHot.scala 44:15] 
    node idxPagesOH_61 = bits(T_728, 5, 0) @[btb.scala 152:44] 
    node T_730 = dshl(UInt<1>("h01"), tgtPages[0]) @[OneHot.scala 44:15] 
    node tgtPagesOH_0 = bits(T_730, 5, 0) @[btb.scala 153:44] 
    node T_732 = dshl(UInt<1>("h01"), tgtPages[1]) @[OneHot.scala 44:15] 
    node tgtPagesOH_1 = bits(T_732, 5, 0) @[btb.scala 153:44] 
    node T_734 = dshl(UInt<1>("h01"), tgtPages[2]) @[OneHot.scala 44:15] 
    node tgtPagesOH_2 = bits(T_734, 5, 0) @[btb.scala 153:44] 
    node T_736 = dshl(UInt<1>("h01"), tgtPages[3]) @[OneHot.scala 44:15] 
    node tgtPagesOH_3 = bits(T_736, 5, 0) @[btb.scala 153:44] 
    node T_738 = dshl(UInt<1>("h01"), tgtPages[4]) @[OneHot.scala 44:15] 
    node tgtPagesOH_4 = bits(T_738, 5, 0) @[btb.scala 153:44] 
    node T_740 = dshl(UInt<1>("h01"), tgtPages[5]) @[OneHot.scala 44:15] 
    node tgtPagesOH_5 = bits(T_740, 5, 0) @[btb.scala 153:44] 
    node T_742 = dshl(UInt<1>("h01"), tgtPages[6]) @[OneHot.scala 44:15] 
    node tgtPagesOH_6 = bits(T_742, 5, 0) @[btb.scala 153:44] 
    node T_744 = dshl(UInt<1>("h01"), tgtPages[7]) @[OneHot.scala 44:15] 
    node tgtPagesOH_7 = bits(T_744, 5, 0) @[btb.scala 153:44] 
    node T_746 = dshl(UInt<1>("h01"), tgtPages[8]) @[OneHot.scala 44:15] 
    node tgtPagesOH_8 = bits(T_746, 5, 0) @[btb.scala 153:44] 
    node T_748 = dshl(UInt<1>("h01"), tgtPages[9]) @[OneHot.scala 44:15] 
    node tgtPagesOH_9 = bits(T_748, 5, 0) @[btb.scala 153:44] 
    node T_750 = dshl(UInt<1>("h01"), tgtPages[10]) @[OneHot.scala 44:15] 
    node tgtPagesOH_10 = bits(T_750, 5, 0) @[btb.scala 153:44] 
    node T_752 = dshl(UInt<1>("h01"), tgtPages[11]) @[OneHot.scala 44:15] 
    node tgtPagesOH_11 = bits(T_752, 5, 0) @[btb.scala 153:44] 
    node T_754 = dshl(UInt<1>("h01"), tgtPages[12]) @[OneHot.scala 44:15] 
    node tgtPagesOH_12 = bits(T_754, 5, 0) @[btb.scala 153:44] 
    node T_756 = dshl(UInt<1>("h01"), tgtPages[13]) @[OneHot.scala 44:15] 
    node tgtPagesOH_13 = bits(T_756, 5, 0) @[btb.scala 153:44] 
    node T_758 = dshl(UInt<1>("h01"), tgtPages[14]) @[OneHot.scala 44:15] 
    node tgtPagesOH_14 = bits(T_758, 5, 0) @[btb.scala 153:44] 
    node T_760 = dshl(UInt<1>("h01"), tgtPages[15]) @[OneHot.scala 44:15] 
    node tgtPagesOH_15 = bits(T_760, 5, 0) @[btb.scala 153:44] 
    node T_762 = dshl(UInt<1>("h01"), tgtPages[16]) @[OneHot.scala 44:15] 
    node tgtPagesOH_16 = bits(T_762, 5, 0) @[btb.scala 153:44] 
    node T_764 = dshl(UInt<1>("h01"), tgtPages[17]) @[OneHot.scala 44:15] 
    node tgtPagesOH_17 = bits(T_764, 5, 0) @[btb.scala 153:44] 
    node T_766 = dshl(UInt<1>("h01"), tgtPages[18]) @[OneHot.scala 44:15] 
    node tgtPagesOH_18 = bits(T_766, 5, 0) @[btb.scala 153:44] 
    node T_768 = dshl(UInt<1>("h01"), tgtPages[19]) @[OneHot.scala 44:15] 
    node tgtPagesOH_19 = bits(T_768, 5, 0) @[btb.scala 153:44] 
    node T_770 = dshl(UInt<1>("h01"), tgtPages[20]) @[OneHot.scala 44:15] 
    node tgtPagesOH_20 = bits(T_770, 5, 0) @[btb.scala 153:44] 
    node T_772 = dshl(UInt<1>("h01"), tgtPages[21]) @[OneHot.scala 44:15] 
    node tgtPagesOH_21 = bits(T_772, 5, 0) @[btb.scala 153:44] 
    node T_774 = dshl(UInt<1>("h01"), tgtPages[22]) @[OneHot.scala 44:15] 
    node tgtPagesOH_22 = bits(T_774, 5, 0) @[btb.scala 153:44] 
    node T_776 = dshl(UInt<1>("h01"), tgtPages[23]) @[OneHot.scala 44:15] 
    node tgtPagesOH_23 = bits(T_776, 5, 0) @[btb.scala 153:44] 
    node T_778 = dshl(UInt<1>("h01"), tgtPages[24]) @[OneHot.scala 44:15] 
    node tgtPagesOH_24 = bits(T_778, 5, 0) @[btb.scala 153:44] 
    node T_780 = dshl(UInt<1>("h01"), tgtPages[25]) @[OneHot.scala 44:15] 
    node tgtPagesOH_25 = bits(T_780, 5, 0) @[btb.scala 153:44] 
    node T_782 = dshl(UInt<1>("h01"), tgtPages[26]) @[OneHot.scala 44:15] 
    node tgtPagesOH_26 = bits(T_782, 5, 0) @[btb.scala 153:44] 
    node T_784 = dshl(UInt<1>("h01"), tgtPages[27]) @[OneHot.scala 44:15] 
    node tgtPagesOH_27 = bits(T_784, 5, 0) @[btb.scala 153:44] 
    node T_786 = dshl(UInt<1>("h01"), tgtPages[28]) @[OneHot.scala 44:15] 
    node tgtPagesOH_28 = bits(T_786, 5, 0) @[btb.scala 153:44] 
    node T_788 = dshl(UInt<1>("h01"), tgtPages[29]) @[OneHot.scala 44:15] 
    node tgtPagesOH_29 = bits(T_788, 5, 0) @[btb.scala 153:44] 
    node T_790 = dshl(UInt<1>("h01"), tgtPages[30]) @[OneHot.scala 44:15] 
    node tgtPagesOH_30 = bits(T_790, 5, 0) @[btb.scala 153:44] 
    node T_792 = dshl(UInt<1>("h01"), tgtPages[31]) @[OneHot.scala 44:15] 
    node tgtPagesOH_31 = bits(T_792, 5, 0) @[btb.scala 153:44] 
    node T_794 = dshl(UInt<1>("h01"), tgtPages[32]) @[OneHot.scala 44:15] 
    node tgtPagesOH_32 = bits(T_794, 5, 0) @[btb.scala 153:44] 
    node T_796 = dshl(UInt<1>("h01"), tgtPages[33]) @[OneHot.scala 44:15] 
    node tgtPagesOH_33 = bits(T_796, 5, 0) @[btb.scala 153:44] 
    node T_798 = dshl(UInt<1>("h01"), tgtPages[34]) @[OneHot.scala 44:15] 
    node tgtPagesOH_34 = bits(T_798, 5, 0) @[btb.scala 153:44] 
    node T_800 = dshl(UInt<1>("h01"), tgtPages[35]) @[OneHot.scala 44:15] 
    node tgtPagesOH_35 = bits(T_800, 5, 0) @[btb.scala 153:44] 
    node T_802 = dshl(UInt<1>("h01"), tgtPages[36]) @[OneHot.scala 44:15] 
    node tgtPagesOH_36 = bits(T_802, 5, 0) @[btb.scala 153:44] 
    node T_804 = dshl(UInt<1>("h01"), tgtPages[37]) @[OneHot.scala 44:15] 
    node tgtPagesOH_37 = bits(T_804, 5, 0) @[btb.scala 153:44] 
    node T_806 = dshl(UInt<1>("h01"), tgtPages[38]) @[OneHot.scala 44:15] 
    node tgtPagesOH_38 = bits(T_806, 5, 0) @[btb.scala 153:44] 
    node T_808 = dshl(UInt<1>("h01"), tgtPages[39]) @[OneHot.scala 44:15] 
    node tgtPagesOH_39 = bits(T_808, 5, 0) @[btb.scala 153:44] 
    node T_810 = dshl(UInt<1>("h01"), tgtPages[40]) @[OneHot.scala 44:15] 
    node tgtPagesOH_40 = bits(T_810, 5, 0) @[btb.scala 153:44] 
    node T_812 = dshl(UInt<1>("h01"), tgtPages[41]) @[OneHot.scala 44:15] 
    node tgtPagesOH_41 = bits(T_812, 5, 0) @[btb.scala 153:44] 
    node T_814 = dshl(UInt<1>("h01"), tgtPages[42]) @[OneHot.scala 44:15] 
    node tgtPagesOH_42 = bits(T_814, 5, 0) @[btb.scala 153:44] 
    node T_816 = dshl(UInt<1>("h01"), tgtPages[43]) @[OneHot.scala 44:15] 
    node tgtPagesOH_43 = bits(T_816, 5, 0) @[btb.scala 153:44] 
    node T_818 = dshl(UInt<1>("h01"), tgtPages[44]) @[OneHot.scala 44:15] 
    node tgtPagesOH_44 = bits(T_818, 5, 0) @[btb.scala 153:44] 
    node T_820 = dshl(UInt<1>("h01"), tgtPages[45]) @[OneHot.scala 44:15] 
    node tgtPagesOH_45 = bits(T_820, 5, 0) @[btb.scala 153:44] 
    node T_822 = dshl(UInt<1>("h01"), tgtPages[46]) @[OneHot.scala 44:15] 
    node tgtPagesOH_46 = bits(T_822, 5, 0) @[btb.scala 153:44] 
    node T_824 = dshl(UInt<1>("h01"), tgtPages[47]) @[OneHot.scala 44:15] 
    node tgtPagesOH_47 = bits(T_824, 5, 0) @[btb.scala 153:44] 
    node T_826 = dshl(UInt<1>("h01"), tgtPages[48]) @[OneHot.scala 44:15] 
    node tgtPagesOH_48 = bits(T_826, 5, 0) @[btb.scala 153:44] 
    node T_828 = dshl(UInt<1>("h01"), tgtPages[49]) @[OneHot.scala 44:15] 
    node tgtPagesOH_49 = bits(T_828, 5, 0) @[btb.scala 153:44] 
    node T_830 = dshl(UInt<1>("h01"), tgtPages[50]) @[OneHot.scala 44:15] 
    node tgtPagesOH_50 = bits(T_830, 5, 0) @[btb.scala 153:44] 
    node T_832 = dshl(UInt<1>("h01"), tgtPages[51]) @[OneHot.scala 44:15] 
    node tgtPagesOH_51 = bits(T_832, 5, 0) @[btb.scala 153:44] 
    node T_834 = dshl(UInt<1>("h01"), tgtPages[52]) @[OneHot.scala 44:15] 
    node tgtPagesOH_52 = bits(T_834, 5, 0) @[btb.scala 153:44] 
    node T_836 = dshl(UInt<1>("h01"), tgtPages[53]) @[OneHot.scala 44:15] 
    node tgtPagesOH_53 = bits(T_836, 5, 0) @[btb.scala 153:44] 
    node T_838 = dshl(UInt<1>("h01"), tgtPages[54]) @[OneHot.scala 44:15] 
    node tgtPagesOH_54 = bits(T_838, 5, 0) @[btb.scala 153:44] 
    node T_840 = dshl(UInt<1>("h01"), tgtPages[55]) @[OneHot.scala 44:15] 
    node tgtPagesOH_55 = bits(T_840, 5, 0) @[btb.scala 153:44] 
    node T_842 = dshl(UInt<1>("h01"), tgtPages[56]) @[OneHot.scala 44:15] 
    node tgtPagesOH_56 = bits(T_842, 5, 0) @[btb.scala 153:44] 
    node T_844 = dshl(UInt<1>("h01"), tgtPages[57]) @[OneHot.scala 44:15] 
    node tgtPagesOH_57 = bits(T_844, 5, 0) @[btb.scala 153:44] 
    node T_846 = dshl(UInt<1>("h01"), tgtPages[58]) @[OneHot.scala 44:15] 
    node tgtPagesOH_58 = bits(T_846, 5, 0) @[btb.scala 153:44] 
    node T_848 = dshl(UInt<1>("h01"), tgtPages[59]) @[OneHot.scala 44:15] 
    node tgtPagesOH_59 = bits(T_848, 5, 0) @[btb.scala 153:44] 
    node T_850 = dshl(UInt<1>("h01"), tgtPages[60]) @[OneHot.scala 44:15] 
    node tgtPagesOH_60 = bits(T_850, 5, 0) @[btb.scala 153:44] 
    node T_852 = dshl(UInt<1>("h01"), tgtPages[61]) @[OneHot.scala 44:15] 
    node tgtPagesOH_61 = bits(T_852, 5, 0) @[btb.scala 153:44] 
    reg isValid : UInt<62>, clk with : (reset => (reset, UInt<62>("h00")))
    reg isReturn : UInt<62>, clk
    reg isJump : UInt<62>, clk
    reg brIdx : UInt<1>[62], clk
    reg T_865 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_865 <= io.btb_update.valid
    reg T_866 : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}, clk
    when io.btb_update.valid : @[Reg.scala 29:19] 
      T_866 <- io.btb_update.bits @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire r_btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}} @[Valid.scala 39:21] 
    r_btb_update is invalid @[Valid.scala 39:21] 
    r_btb_update.valid <= T_865 @[Valid.scala 40:17] 
    r_btb_update.bits <- T_866 @[Valid.scala 41:16] 
    node T_1052 = shr(io.req.bits.addr, 12) @[btb.scala 160:39] 
    node T_1053 = eq(pages[0], T_1052) @[btb.scala 163:29] 
    node T_1054 = eq(pages[1], T_1052) @[btb.scala 163:29] 
    node T_1055 = eq(pages[2], T_1052) @[btb.scala 163:29] 
    node T_1056 = eq(pages[3], T_1052) @[btb.scala 163:29] 
    node T_1057 = eq(pages[4], T_1052) @[btb.scala 163:29] 
    node T_1058 = eq(pages[5], T_1052) @[btb.scala 163:29] 
    node T_1059 = cat(T_1055, T_1054) @[Cat.scala 20:58] 
    node T_1060 = cat(T_1059, T_1053) @[Cat.scala 20:58] 
    node T_1061 = cat(T_1058, T_1057) @[Cat.scala 20:58] 
    node T_1062 = cat(T_1061, T_1056) @[Cat.scala 20:58] 
    node T_1063 = cat(T_1062, T_1060) @[Cat.scala 20:58] 
    node pageHit = and(pageValid, T_1063) @[btb.scala 163:15] 
    node T_1064 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1065 = eq(idxs[0], T_1064) @[btb.scala 166:31] 
    node T_1066 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1067 = eq(idxs[1], T_1066) @[btb.scala 166:31] 
    node T_1068 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1069 = eq(idxs[2], T_1068) @[btb.scala 166:31] 
    node T_1070 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1071 = eq(idxs[3], T_1070) @[btb.scala 166:31] 
    node T_1072 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1073 = eq(idxs[4], T_1072) @[btb.scala 166:31] 
    node T_1074 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1075 = eq(idxs[5], T_1074) @[btb.scala 166:31] 
    node T_1076 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1077 = eq(idxs[6], T_1076) @[btb.scala 166:31] 
    node T_1078 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1079 = eq(idxs[7], T_1078) @[btb.scala 166:31] 
    node T_1080 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1081 = eq(idxs[8], T_1080) @[btb.scala 166:31] 
    node T_1082 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1083 = eq(idxs[9], T_1082) @[btb.scala 166:31] 
    node T_1084 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1085 = eq(idxs[10], T_1084) @[btb.scala 166:31] 
    node T_1086 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1087 = eq(idxs[11], T_1086) @[btb.scala 166:31] 
    node T_1088 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1089 = eq(idxs[12], T_1088) @[btb.scala 166:31] 
    node T_1090 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1091 = eq(idxs[13], T_1090) @[btb.scala 166:31] 
    node T_1092 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1093 = eq(idxs[14], T_1092) @[btb.scala 166:31] 
    node T_1094 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1095 = eq(idxs[15], T_1094) @[btb.scala 166:31] 
    node T_1096 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1097 = eq(idxs[16], T_1096) @[btb.scala 166:31] 
    node T_1098 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1099 = eq(idxs[17], T_1098) @[btb.scala 166:31] 
    node T_1100 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1101 = eq(idxs[18], T_1100) @[btb.scala 166:31] 
    node T_1102 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1103 = eq(idxs[19], T_1102) @[btb.scala 166:31] 
    node T_1104 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1105 = eq(idxs[20], T_1104) @[btb.scala 166:31] 
    node T_1106 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1107 = eq(idxs[21], T_1106) @[btb.scala 166:31] 
    node T_1108 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1109 = eq(idxs[22], T_1108) @[btb.scala 166:31] 
    node T_1110 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1111 = eq(idxs[23], T_1110) @[btb.scala 166:31] 
    node T_1112 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1113 = eq(idxs[24], T_1112) @[btb.scala 166:31] 
    node T_1114 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1115 = eq(idxs[25], T_1114) @[btb.scala 166:31] 
    node T_1116 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1117 = eq(idxs[26], T_1116) @[btb.scala 166:31] 
    node T_1118 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1119 = eq(idxs[27], T_1118) @[btb.scala 166:31] 
    node T_1120 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1121 = eq(idxs[28], T_1120) @[btb.scala 166:31] 
    node T_1122 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1123 = eq(idxs[29], T_1122) @[btb.scala 166:31] 
    node T_1124 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1125 = eq(idxs[30], T_1124) @[btb.scala 166:31] 
    node T_1126 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1127 = eq(idxs[31], T_1126) @[btb.scala 166:31] 
    node T_1128 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1129 = eq(idxs[32], T_1128) @[btb.scala 166:31] 
    node T_1130 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1131 = eq(idxs[33], T_1130) @[btb.scala 166:31] 
    node T_1132 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1133 = eq(idxs[34], T_1132) @[btb.scala 166:31] 
    node T_1134 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1135 = eq(idxs[35], T_1134) @[btb.scala 166:31] 
    node T_1136 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1137 = eq(idxs[36], T_1136) @[btb.scala 166:31] 
    node T_1138 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1139 = eq(idxs[37], T_1138) @[btb.scala 166:31] 
    node T_1140 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1141 = eq(idxs[38], T_1140) @[btb.scala 166:31] 
    node T_1142 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1143 = eq(idxs[39], T_1142) @[btb.scala 166:31] 
    node T_1144 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1145 = eq(idxs[40], T_1144) @[btb.scala 166:31] 
    node T_1146 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1147 = eq(idxs[41], T_1146) @[btb.scala 166:31] 
    node T_1148 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1149 = eq(idxs[42], T_1148) @[btb.scala 166:31] 
    node T_1150 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1151 = eq(idxs[43], T_1150) @[btb.scala 166:31] 
    node T_1152 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1153 = eq(idxs[44], T_1152) @[btb.scala 166:31] 
    node T_1154 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1155 = eq(idxs[45], T_1154) @[btb.scala 166:31] 
    node T_1156 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1157 = eq(idxs[46], T_1156) @[btb.scala 166:31] 
    node T_1158 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1159 = eq(idxs[47], T_1158) @[btb.scala 166:31] 
    node T_1160 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1161 = eq(idxs[48], T_1160) @[btb.scala 166:31] 
    node T_1162 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1163 = eq(idxs[49], T_1162) @[btb.scala 166:31] 
    node T_1164 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1165 = eq(idxs[50], T_1164) @[btb.scala 166:31] 
    node T_1166 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1167 = eq(idxs[51], T_1166) @[btb.scala 166:31] 
    node T_1168 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1169 = eq(idxs[52], T_1168) @[btb.scala 166:31] 
    node T_1170 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1171 = eq(idxs[53], T_1170) @[btb.scala 166:31] 
    node T_1172 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1173 = eq(idxs[54], T_1172) @[btb.scala 166:31] 
    node T_1174 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1175 = eq(idxs[55], T_1174) @[btb.scala 166:31] 
    node T_1176 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1177 = eq(idxs[56], T_1176) @[btb.scala 166:31] 
    node T_1178 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1179 = eq(idxs[57], T_1178) @[btb.scala 166:31] 
    node T_1180 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1181 = eq(idxs[58], T_1180) @[btb.scala 166:31] 
    node T_1182 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1183 = eq(idxs[59], T_1182) @[btb.scala 166:31] 
    node T_1184 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1185 = eq(idxs[60], T_1184) @[btb.scala 166:31] 
    node T_1186 = bits(io.req.bits.addr, 11, 1) @[btb.scala 166:39] 
    node T_1187 = eq(idxs[61], T_1186) @[btb.scala 166:31] 
    node T_1188 = cat(T_1069, T_1067) @[Cat.scala 20:58] 
    node T_1189 = cat(T_1188, T_1065) @[Cat.scala 20:58] 
    node T_1190 = cat(T_1073, T_1071) @[Cat.scala 20:58] 
    node T_1191 = cat(T_1077, T_1075) @[Cat.scala 20:58] 
    node T_1192 = cat(T_1191, T_1190) @[Cat.scala 20:58] 
    node T_1193 = cat(T_1192, T_1189) @[Cat.scala 20:58] 
    node T_1194 = cat(T_1081, T_1079) @[Cat.scala 20:58] 
    node T_1195 = cat(T_1085, T_1083) @[Cat.scala 20:58] 
    node T_1196 = cat(T_1195, T_1194) @[Cat.scala 20:58] 
    node T_1197 = cat(T_1089, T_1087) @[Cat.scala 20:58] 
    node T_1198 = cat(T_1093, T_1091) @[Cat.scala 20:58] 
    node T_1199 = cat(T_1198, T_1197) @[Cat.scala 20:58] 
    node T_1200 = cat(T_1199, T_1196) @[Cat.scala 20:58] 
    node T_1201 = cat(T_1200, T_1193) @[Cat.scala 20:58] 
    node T_1202 = cat(T_1097, T_1095) @[Cat.scala 20:58] 
    node T_1203 = cat(T_1101, T_1099) @[Cat.scala 20:58] 
    node T_1204 = cat(T_1203, T_1202) @[Cat.scala 20:58] 
    node T_1205 = cat(T_1105, T_1103) @[Cat.scala 20:58] 
    node T_1206 = cat(T_1109, T_1107) @[Cat.scala 20:58] 
    node T_1207 = cat(T_1206, T_1205) @[Cat.scala 20:58] 
    node T_1208 = cat(T_1207, T_1204) @[Cat.scala 20:58] 
    node T_1209 = cat(T_1113, T_1111) @[Cat.scala 20:58] 
    node T_1210 = cat(T_1117, T_1115) @[Cat.scala 20:58] 
    node T_1211 = cat(T_1210, T_1209) @[Cat.scala 20:58] 
    node T_1212 = cat(T_1121, T_1119) @[Cat.scala 20:58] 
    node T_1213 = cat(T_1125, T_1123) @[Cat.scala 20:58] 
    node T_1214 = cat(T_1213, T_1212) @[Cat.scala 20:58] 
    node T_1215 = cat(T_1214, T_1211) @[Cat.scala 20:58] 
    node T_1216 = cat(T_1215, T_1208) @[Cat.scala 20:58] 
    node T_1217 = cat(T_1216, T_1201) @[Cat.scala 20:58] 
    node T_1218 = cat(T_1131, T_1129) @[Cat.scala 20:58] 
    node T_1219 = cat(T_1218, T_1127) @[Cat.scala 20:58] 
    node T_1220 = cat(T_1135, T_1133) @[Cat.scala 20:58] 
    node T_1221 = cat(T_1139, T_1137) @[Cat.scala 20:58] 
    node T_1222 = cat(T_1221, T_1220) @[Cat.scala 20:58] 
    node T_1223 = cat(T_1222, T_1219) @[Cat.scala 20:58] 
    node T_1224 = cat(T_1143, T_1141) @[Cat.scala 20:58] 
    node T_1225 = cat(T_1147, T_1145) @[Cat.scala 20:58] 
    node T_1226 = cat(T_1225, T_1224) @[Cat.scala 20:58] 
    node T_1227 = cat(T_1151, T_1149) @[Cat.scala 20:58] 
    node T_1228 = cat(T_1155, T_1153) @[Cat.scala 20:58] 
    node T_1229 = cat(T_1228, T_1227) @[Cat.scala 20:58] 
    node T_1230 = cat(T_1229, T_1226) @[Cat.scala 20:58] 
    node T_1231 = cat(T_1230, T_1223) @[Cat.scala 20:58] 
    node T_1232 = cat(T_1159, T_1157) @[Cat.scala 20:58] 
    node T_1233 = cat(T_1163, T_1161) @[Cat.scala 20:58] 
    node T_1234 = cat(T_1233, T_1232) @[Cat.scala 20:58] 
    node T_1235 = cat(T_1167, T_1165) @[Cat.scala 20:58] 
    node T_1236 = cat(T_1171, T_1169) @[Cat.scala 20:58] 
    node T_1237 = cat(T_1236, T_1235) @[Cat.scala 20:58] 
    node T_1238 = cat(T_1237, T_1234) @[Cat.scala 20:58] 
    node T_1239 = cat(T_1175, T_1173) @[Cat.scala 20:58] 
    node T_1240 = cat(T_1179, T_1177) @[Cat.scala 20:58] 
    node T_1241 = cat(T_1240, T_1239) @[Cat.scala 20:58] 
    node T_1242 = cat(T_1183, T_1181) @[Cat.scala 20:58] 
    node T_1243 = cat(T_1187, T_1185) @[Cat.scala 20:58] 
    node T_1244 = cat(T_1243, T_1242) @[Cat.scala 20:58] 
    node T_1245 = cat(T_1244, T_1241) @[Cat.scala 20:58] 
    node T_1246 = cat(T_1245, T_1238) @[Cat.scala 20:58] 
    node T_1247 = cat(T_1246, T_1231) @[Cat.scala 20:58] 
    node T_1248 = cat(T_1247, T_1217) @[Cat.scala 20:58] 
    node T_1249 = and(idxPagesOH_0, pageHit) @[btb.scala 167:41] 
    node T_1250 = and(idxPagesOH_1, pageHit) @[btb.scala 167:41] 
    node T_1251 = and(idxPagesOH_2, pageHit) @[btb.scala 167:41] 
    node T_1252 = and(idxPagesOH_3, pageHit) @[btb.scala 167:41] 
    node T_1253 = and(idxPagesOH_4, pageHit) @[btb.scala 167:41] 
    node T_1254 = and(idxPagesOH_5, pageHit) @[btb.scala 167:41] 
    node T_1255 = and(idxPagesOH_6, pageHit) @[btb.scala 167:41] 
    node T_1256 = and(idxPagesOH_7, pageHit) @[btb.scala 167:41] 
    node T_1257 = and(idxPagesOH_8, pageHit) @[btb.scala 167:41] 
    node T_1258 = and(idxPagesOH_9, pageHit) @[btb.scala 167:41] 
    node T_1259 = and(idxPagesOH_10, pageHit) @[btb.scala 167:41] 
    node T_1260 = and(idxPagesOH_11, pageHit) @[btb.scala 167:41] 
    node T_1261 = and(idxPagesOH_12, pageHit) @[btb.scala 167:41] 
    node T_1262 = and(idxPagesOH_13, pageHit) @[btb.scala 167:41] 
    node T_1263 = and(idxPagesOH_14, pageHit) @[btb.scala 167:41] 
    node T_1264 = and(idxPagesOH_15, pageHit) @[btb.scala 167:41] 
    node T_1265 = and(idxPagesOH_16, pageHit) @[btb.scala 167:41] 
    node T_1266 = and(idxPagesOH_17, pageHit) @[btb.scala 167:41] 
    node T_1267 = and(idxPagesOH_18, pageHit) @[btb.scala 167:41] 
    node T_1268 = and(idxPagesOH_19, pageHit) @[btb.scala 167:41] 
    node T_1269 = and(idxPagesOH_20, pageHit) @[btb.scala 167:41] 
    node T_1270 = and(idxPagesOH_21, pageHit) @[btb.scala 167:41] 
    node T_1271 = and(idxPagesOH_22, pageHit) @[btb.scala 167:41] 
    node T_1272 = and(idxPagesOH_23, pageHit) @[btb.scala 167:41] 
    node T_1273 = and(idxPagesOH_24, pageHit) @[btb.scala 167:41] 
    node T_1274 = and(idxPagesOH_25, pageHit) @[btb.scala 167:41] 
    node T_1275 = and(idxPagesOH_26, pageHit) @[btb.scala 167:41] 
    node T_1276 = and(idxPagesOH_27, pageHit) @[btb.scala 167:41] 
    node T_1277 = and(idxPagesOH_28, pageHit) @[btb.scala 167:41] 
    node T_1278 = and(idxPagesOH_29, pageHit) @[btb.scala 167:41] 
    node T_1279 = and(idxPagesOH_30, pageHit) @[btb.scala 167:41] 
    node T_1280 = and(idxPagesOH_31, pageHit) @[btb.scala 167:41] 
    node T_1281 = and(idxPagesOH_32, pageHit) @[btb.scala 167:41] 
    node T_1282 = and(idxPagesOH_33, pageHit) @[btb.scala 167:41] 
    node T_1283 = and(idxPagesOH_34, pageHit) @[btb.scala 167:41] 
    node T_1284 = and(idxPagesOH_35, pageHit) @[btb.scala 167:41] 
    node T_1285 = and(idxPagesOH_36, pageHit) @[btb.scala 167:41] 
    node T_1286 = and(idxPagesOH_37, pageHit) @[btb.scala 167:41] 
    node T_1287 = and(idxPagesOH_38, pageHit) @[btb.scala 167:41] 
    node T_1288 = and(idxPagesOH_39, pageHit) @[btb.scala 167:41] 
    node T_1289 = and(idxPagesOH_40, pageHit) @[btb.scala 167:41] 
    node T_1290 = and(idxPagesOH_41, pageHit) @[btb.scala 167:41] 
    node T_1291 = and(idxPagesOH_42, pageHit) @[btb.scala 167:41] 
    node T_1292 = and(idxPagesOH_43, pageHit) @[btb.scala 167:41] 
    node T_1293 = and(idxPagesOH_44, pageHit) @[btb.scala 167:41] 
    node T_1294 = and(idxPagesOH_45, pageHit) @[btb.scala 167:41] 
    node T_1295 = and(idxPagesOH_46, pageHit) @[btb.scala 167:41] 
    node T_1296 = and(idxPagesOH_47, pageHit) @[btb.scala 167:41] 
    node T_1297 = and(idxPagesOH_48, pageHit) @[btb.scala 167:41] 
    node T_1298 = and(idxPagesOH_49, pageHit) @[btb.scala 167:41] 
    node T_1299 = and(idxPagesOH_50, pageHit) @[btb.scala 167:41] 
    node T_1300 = and(idxPagesOH_51, pageHit) @[btb.scala 167:41] 
    node T_1301 = and(idxPagesOH_52, pageHit) @[btb.scala 167:41] 
    node T_1302 = and(idxPagesOH_53, pageHit) @[btb.scala 167:41] 
    node T_1303 = and(idxPagesOH_54, pageHit) @[btb.scala 167:41] 
    node T_1304 = and(idxPagesOH_55, pageHit) @[btb.scala 167:41] 
    node T_1305 = and(idxPagesOH_56, pageHit) @[btb.scala 167:41] 
    node T_1306 = and(idxPagesOH_57, pageHit) @[btb.scala 167:41] 
    node T_1307 = and(idxPagesOH_58, pageHit) @[btb.scala 167:41] 
    node T_1308 = and(idxPagesOH_59, pageHit) @[btb.scala 167:41] 
    node T_1309 = and(idxPagesOH_60, pageHit) @[btb.scala 167:41] 
    node T_1310 = and(idxPagesOH_61, pageHit) @[btb.scala 167:41] 
    node T_1312 = neq(T_1249, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1314 = neq(T_1250, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1316 = neq(T_1251, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1318 = neq(T_1252, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1320 = neq(T_1253, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1322 = neq(T_1254, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1324 = neq(T_1255, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1326 = neq(T_1256, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1328 = neq(T_1257, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1330 = neq(T_1258, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1332 = neq(T_1259, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1334 = neq(T_1260, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1336 = neq(T_1261, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1338 = neq(T_1262, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1340 = neq(T_1263, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1342 = neq(T_1264, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1344 = neq(T_1265, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1346 = neq(T_1266, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1348 = neq(T_1267, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1350 = neq(T_1268, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1352 = neq(T_1269, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1354 = neq(T_1270, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1356 = neq(T_1271, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1358 = neq(T_1272, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1360 = neq(T_1273, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1362 = neq(T_1274, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1364 = neq(T_1275, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1366 = neq(T_1276, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1368 = neq(T_1277, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1370 = neq(T_1278, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1372 = neq(T_1279, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1374 = neq(T_1280, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1376 = neq(T_1281, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1378 = neq(T_1282, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1380 = neq(T_1283, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1382 = neq(T_1284, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1384 = neq(T_1285, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1386 = neq(T_1286, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1388 = neq(T_1287, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1390 = neq(T_1288, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1392 = neq(T_1289, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1394 = neq(T_1290, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1396 = neq(T_1291, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1398 = neq(T_1292, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1400 = neq(T_1293, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1402 = neq(T_1294, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1404 = neq(T_1295, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1406 = neq(T_1296, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1408 = neq(T_1297, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1410 = neq(T_1298, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1412 = neq(T_1299, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1414 = neq(T_1300, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1416 = neq(T_1301, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1418 = neq(T_1302, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1420 = neq(T_1303, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1422 = neq(T_1304, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1424 = neq(T_1305, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1426 = neq(T_1306, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1428 = neq(T_1307, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1430 = neq(T_1308, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1432 = neq(T_1309, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1434 = neq(T_1310, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1435 = cat(T_1316, T_1314) @[Cat.scala 20:58] 
    node T_1436 = cat(T_1435, T_1312) @[Cat.scala 20:58] 
    node T_1437 = cat(T_1320, T_1318) @[Cat.scala 20:58] 
    node T_1438 = cat(T_1324, T_1322) @[Cat.scala 20:58] 
    node T_1439 = cat(T_1438, T_1437) @[Cat.scala 20:58] 
    node T_1440 = cat(T_1439, T_1436) @[Cat.scala 20:58] 
    node T_1441 = cat(T_1328, T_1326) @[Cat.scala 20:58] 
    node T_1442 = cat(T_1332, T_1330) @[Cat.scala 20:58] 
    node T_1443 = cat(T_1442, T_1441) @[Cat.scala 20:58] 
    node T_1444 = cat(T_1336, T_1334) @[Cat.scala 20:58] 
    node T_1445 = cat(T_1340, T_1338) @[Cat.scala 20:58] 
    node T_1446 = cat(T_1445, T_1444) @[Cat.scala 20:58] 
    node T_1447 = cat(T_1446, T_1443) @[Cat.scala 20:58] 
    node T_1448 = cat(T_1447, T_1440) @[Cat.scala 20:58] 
    node T_1449 = cat(T_1344, T_1342) @[Cat.scala 20:58] 
    node T_1450 = cat(T_1348, T_1346) @[Cat.scala 20:58] 
    node T_1451 = cat(T_1450, T_1449) @[Cat.scala 20:58] 
    node T_1452 = cat(T_1352, T_1350) @[Cat.scala 20:58] 
    node T_1453 = cat(T_1356, T_1354) @[Cat.scala 20:58] 
    node T_1454 = cat(T_1453, T_1452) @[Cat.scala 20:58] 
    node T_1455 = cat(T_1454, T_1451) @[Cat.scala 20:58] 
    node T_1456 = cat(T_1360, T_1358) @[Cat.scala 20:58] 
    node T_1457 = cat(T_1364, T_1362) @[Cat.scala 20:58] 
    node T_1458 = cat(T_1457, T_1456) @[Cat.scala 20:58] 
    node T_1459 = cat(T_1368, T_1366) @[Cat.scala 20:58] 
    node T_1460 = cat(T_1372, T_1370) @[Cat.scala 20:58] 
    node T_1461 = cat(T_1460, T_1459) @[Cat.scala 20:58] 
    node T_1462 = cat(T_1461, T_1458) @[Cat.scala 20:58] 
    node T_1463 = cat(T_1462, T_1455) @[Cat.scala 20:58] 
    node T_1464 = cat(T_1463, T_1448) @[Cat.scala 20:58] 
    node T_1465 = cat(T_1378, T_1376) @[Cat.scala 20:58] 
    node T_1466 = cat(T_1465, T_1374) @[Cat.scala 20:58] 
    node T_1467 = cat(T_1382, T_1380) @[Cat.scala 20:58] 
    node T_1468 = cat(T_1386, T_1384) @[Cat.scala 20:58] 
    node T_1469 = cat(T_1468, T_1467) @[Cat.scala 20:58] 
    node T_1470 = cat(T_1469, T_1466) @[Cat.scala 20:58] 
    node T_1471 = cat(T_1390, T_1388) @[Cat.scala 20:58] 
    node T_1472 = cat(T_1394, T_1392) @[Cat.scala 20:58] 
    node T_1473 = cat(T_1472, T_1471) @[Cat.scala 20:58] 
    node T_1474 = cat(T_1398, T_1396) @[Cat.scala 20:58] 
    node T_1475 = cat(T_1402, T_1400) @[Cat.scala 20:58] 
    node T_1476 = cat(T_1475, T_1474) @[Cat.scala 20:58] 
    node T_1477 = cat(T_1476, T_1473) @[Cat.scala 20:58] 
    node T_1478 = cat(T_1477, T_1470) @[Cat.scala 20:58] 
    node T_1479 = cat(T_1406, T_1404) @[Cat.scala 20:58] 
    node T_1480 = cat(T_1410, T_1408) @[Cat.scala 20:58] 
    node T_1481 = cat(T_1480, T_1479) @[Cat.scala 20:58] 
    node T_1482 = cat(T_1414, T_1412) @[Cat.scala 20:58] 
    node T_1483 = cat(T_1418, T_1416) @[Cat.scala 20:58] 
    node T_1484 = cat(T_1483, T_1482) @[Cat.scala 20:58] 
    node T_1485 = cat(T_1484, T_1481) @[Cat.scala 20:58] 
    node T_1486 = cat(T_1422, T_1420) @[Cat.scala 20:58] 
    node T_1487 = cat(T_1426, T_1424) @[Cat.scala 20:58] 
    node T_1488 = cat(T_1487, T_1486) @[Cat.scala 20:58] 
    node T_1489 = cat(T_1430, T_1428) @[Cat.scala 20:58] 
    node T_1490 = cat(T_1434, T_1432) @[Cat.scala 20:58] 
    node T_1491 = cat(T_1490, T_1489) @[Cat.scala 20:58] 
    node T_1492 = cat(T_1491, T_1488) @[Cat.scala 20:58] 
    node T_1493 = cat(T_1492, T_1485) @[Cat.scala 20:58] 
    node T_1494 = cat(T_1493, T_1478) @[Cat.scala 20:58] 
    node T_1495 = cat(T_1494, T_1464) @[Cat.scala 20:58] 
    node T_1496 = and(T_1248, T_1495) @[btb.scala 168:14] 
    node hitsVec = and(T_1496, isValid) @[btb.scala 168:29] 
    node T_1497 = shr(r_btb_update.bits.pc, 12) @[btb.scala 160:39] 
    node T_1498 = eq(pages[0], T_1497) @[btb.scala 163:29] 
    node T_1499 = eq(pages[1], T_1497) @[btb.scala 163:29] 
    node T_1500 = eq(pages[2], T_1497) @[btb.scala 163:29] 
    node T_1501 = eq(pages[3], T_1497) @[btb.scala 163:29] 
    node T_1502 = eq(pages[4], T_1497) @[btb.scala 163:29] 
    node T_1503 = eq(pages[5], T_1497) @[btb.scala 163:29] 
    node T_1504 = cat(T_1500, T_1499) @[Cat.scala 20:58] 
    node T_1505 = cat(T_1504, T_1498) @[Cat.scala 20:58] 
    node T_1506 = cat(T_1503, T_1502) @[Cat.scala 20:58] 
    node T_1507 = cat(T_1506, T_1501) @[Cat.scala 20:58] 
    node T_1508 = cat(T_1507, T_1505) @[Cat.scala 20:58] 
    node updatePageHit = and(pageValid, T_1508) @[btb.scala 163:15] 
    node T_1509 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1510 = eq(idxs[0], T_1509) @[btb.scala 166:31] 
    node T_1511 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1512 = eq(idxs[1], T_1511) @[btb.scala 166:31] 
    node T_1513 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1514 = eq(idxs[2], T_1513) @[btb.scala 166:31] 
    node T_1515 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1516 = eq(idxs[3], T_1515) @[btb.scala 166:31] 
    node T_1517 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1518 = eq(idxs[4], T_1517) @[btb.scala 166:31] 
    node T_1519 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1520 = eq(idxs[5], T_1519) @[btb.scala 166:31] 
    node T_1521 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1522 = eq(idxs[6], T_1521) @[btb.scala 166:31] 
    node T_1523 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1524 = eq(idxs[7], T_1523) @[btb.scala 166:31] 
    node T_1525 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1526 = eq(idxs[8], T_1525) @[btb.scala 166:31] 
    node T_1527 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1528 = eq(idxs[9], T_1527) @[btb.scala 166:31] 
    node T_1529 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1530 = eq(idxs[10], T_1529) @[btb.scala 166:31] 
    node T_1531 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1532 = eq(idxs[11], T_1531) @[btb.scala 166:31] 
    node T_1533 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1534 = eq(idxs[12], T_1533) @[btb.scala 166:31] 
    node T_1535 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1536 = eq(idxs[13], T_1535) @[btb.scala 166:31] 
    node T_1537 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1538 = eq(idxs[14], T_1537) @[btb.scala 166:31] 
    node T_1539 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1540 = eq(idxs[15], T_1539) @[btb.scala 166:31] 
    node T_1541 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1542 = eq(idxs[16], T_1541) @[btb.scala 166:31] 
    node T_1543 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1544 = eq(idxs[17], T_1543) @[btb.scala 166:31] 
    node T_1545 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1546 = eq(idxs[18], T_1545) @[btb.scala 166:31] 
    node T_1547 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1548 = eq(idxs[19], T_1547) @[btb.scala 166:31] 
    node T_1549 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1550 = eq(idxs[20], T_1549) @[btb.scala 166:31] 
    node T_1551 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1552 = eq(idxs[21], T_1551) @[btb.scala 166:31] 
    node T_1553 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1554 = eq(idxs[22], T_1553) @[btb.scala 166:31] 
    node T_1555 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1556 = eq(idxs[23], T_1555) @[btb.scala 166:31] 
    node T_1557 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1558 = eq(idxs[24], T_1557) @[btb.scala 166:31] 
    node T_1559 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1560 = eq(idxs[25], T_1559) @[btb.scala 166:31] 
    node T_1561 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1562 = eq(idxs[26], T_1561) @[btb.scala 166:31] 
    node T_1563 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1564 = eq(idxs[27], T_1563) @[btb.scala 166:31] 
    node T_1565 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1566 = eq(idxs[28], T_1565) @[btb.scala 166:31] 
    node T_1567 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1568 = eq(idxs[29], T_1567) @[btb.scala 166:31] 
    node T_1569 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1570 = eq(idxs[30], T_1569) @[btb.scala 166:31] 
    node T_1571 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1572 = eq(idxs[31], T_1571) @[btb.scala 166:31] 
    node T_1573 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1574 = eq(idxs[32], T_1573) @[btb.scala 166:31] 
    node T_1575 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1576 = eq(idxs[33], T_1575) @[btb.scala 166:31] 
    node T_1577 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1578 = eq(idxs[34], T_1577) @[btb.scala 166:31] 
    node T_1579 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1580 = eq(idxs[35], T_1579) @[btb.scala 166:31] 
    node T_1581 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1582 = eq(idxs[36], T_1581) @[btb.scala 166:31] 
    node T_1583 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1584 = eq(idxs[37], T_1583) @[btb.scala 166:31] 
    node T_1585 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1586 = eq(idxs[38], T_1585) @[btb.scala 166:31] 
    node T_1587 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1588 = eq(idxs[39], T_1587) @[btb.scala 166:31] 
    node T_1589 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1590 = eq(idxs[40], T_1589) @[btb.scala 166:31] 
    node T_1591 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1592 = eq(idxs[41], T_1591) @[btb.scala 166:31] 
    node T_1593 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1594 = eq(idxs[42], T_1593) @[btb.scala 166:31] 
    node T_1595 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1596 = eq(idxs[43], T_1595) @[btb.scala 166:31] 
    node T_1597 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1598 = eq(idxs[44], T_1597) @[btb.scala 166:31] 
    node T_1599 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1600 = eq(idxs[45], T_1599) @[btb.scala 166:31] 
    node T_1601 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1602 = eq(idxs[46], T_1601) @[btb.scala 166:31] 
    node T_1603 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1604 = eq(idxs[47], T_1603) @[btb.scala 166:31] 
    node T_1605 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1606 = eq(idxs[48], T_1605) @[btb.scala 166:31] 
    node T_1607 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1608 = eq(idxs[49], T_1607) @[btb.scala 166:31] 
    node T_1609 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1610 = eq(idxs[50], T_1609) @[btb.scala 166:31] 
    node T_1611 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1612 = eq(idxs[51], T_1611) @[btb.scala 166:31] 
    node T_1613 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1614 = eq(idxs[52], T_1613) @[btb.scala 166:31] 
    node T_1615 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1616 = eq(idxs[53], T_1615) @[btb.scala 166:31] 
    node T_1617 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1618 = eq(idxs[54], T_1617) @[btb.scala 166:31] 
    node T_1619 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1620 = eq(idxs[55], T_1619) @[btb.scala 166:31] 
    node T_1621 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1622 = eq(idxs[56], T_1621) @[btb.scala 166:31] 
    node T_1623 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1624 = eq(idxs[57], T_1623) @[btb.scala 166:31] 
    node T_1625 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1626 = eq(idxs[58], T_1625) @[btb.scala 166:31] 
    node T_1627 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1628 = eq(idxs[59], T_1627) @[btb.scala 166:31] 
    node T_1629 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1630 = eq(idxs[60], T_1629) @[btb.scala 166:31] 
    node T_1631 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 166:39] 
    node T_1632 = eq(idxs[61], T_1631) @[btb.scala 166:31] 
    node T_1633 = cat(T_1514, T_1512) @[Cat.scala 20:58] 
    node T_1634 = cat(T_1633, T_1510) @[Cat.scala 20:58] 
    node T_1635 = cat(T_1518, T_1516) @[Cat.scala 20:58] 
    node T_1636 = cat(T_1522, T_1520) @[Cat.scala 20:58] 
    node T_1637 = cat(T_1636, T_1635) @[Cat.scala 20:58] 
    node T_1638 = cat(T_1637, T_1634) @[Cat.scala 20:58] 
    node T_1639 = cat(T_1526, T_1524) @[Cat.scala 20:58] 
    node T_1640 = cat(T_1530, T_1528) @[Cat.scala 20:58] 
    node T_1641 = cat(T_1640, T_1639) @[Cat.scala 20:58] 
    node T_1642 = cat(T_1534, T_1532) @[Cat.scala 20:58] 
    node T_1643 = cat(T_1538, T_1536) @[Cat.scala 20:58] 
    node T_1644 = cat(T_1643, T_1642) @[Cat.scala 20:58] 
    node T_1645 = cat(T_1644, T_1641) @[Cat.scala 20:58] 
    node T_1646 = cat(T_1645, T_1638) @[Cat.scala 20:58] 
    node T_1647 = cat(T_1542, T_1540) @[Cat.scala 20:58] 
    node T_1648 = cat(T_1546, T_1544) @[Cat.scala 20:58] 
    node T_1649 = cat(T_1648, T_1647) @[Cat.scala 20:58] 
    node T_1650 = cat(T_1550, T_1548) @[Cat.scala 20:58] 
    node T_1651 = cat(T_1554, T_1552) @[Cat.scala 20:58] 
    node T_1652 = cat(T_1651, T_1650) @[Cat.scala 20:58] 
    node T_1653 = cat(T_1652, T_1649) @[Cat.scala 20:58] 
    node T_1654 = cat(T_1558, T_1556) @[Cat.scala 20:58] 
    node T_1655 = cat(T_1562, T_1560) @[Cat.scala 20:58] 
    node T_1656 = cat(T_1655, T_1654) @[Cat.scala 20:58] 
    node T_1657 = cat(T_1566, T_1564) @[Cat.scala 20:58] 
    node T_1658 = cat(T_1570, T_1568) @[Cat.scala 20:58] 
    node T_1659 = cat(T_1658, T_1657) @[Cat.scala 20:58] 
    node T_1660 = cat(T_1659, T_1656) @[Cat.scala 20:58] 
    node T_1661 = cat(T_1660, T_1653) @[Cat.scala 20:58] 
    node T_1662 = cat(T_1661, T_1646) @[Cat.scala 20:58] 
    node T_1663 = cat(T_1576, T_1574) @[Cat.scala 20:58] 
    node T_1664 = cat(T_1663, T_1572) @[Cat.scala 20:58] 
    node T_1665 = cat(T_1580, T_1578) @[Cat.scala 20:58] 
    node T_1666 = cat(T_1584, T_1582) @[Cat.scala 20:58] 
    node T_1667 = cat(T_1666, T_1665) @[Cat.scala 20:58] 
    node T_1668 = cat(T_1667, T_1664) @[Cat.scala 20:58] 
    node T_1669 = cat(T_1588, T_1586) @[Cat.scala 20:58] 
    node T_1670 = cat(T_1592, T_1590) @[Cat.scala 20:58] 
    node T_1671 = cat(T_1670, T_1669) @[Cat.scala 20:58] 
    node T_1672 = cat(T_1596, T_1594) @[Cat.scala 20:58] 
    node T_1673 = cat(T_1600, T_1598) @[Cat.scala 20:58] 
    node T_1674 = cat(T_1673, T_1672) @[Cat.scala 20:58] 
    node T_1675 = cat(T_1674, T_1671) @[Cat.scala 20:58] 
    node T_1676 = cat(T_1675, T_1668) @[Cat.scala 20:58] 
    node T_1677 = cat(T_1604, T_1602) @[Cat.scala 20:58] 
    node T_1678 = cat(T_1608, T_1606) @[Cat.scala 20:58] 
    node T_1679 = cat(T_1678, T_1677) @[Cat.scala 20:58] 
    node T_1680 = cat(T_1612, T_1610) @[Cat.scala 20:58] 
    node T_1681 = cat(T_1616, T_1614) @[Cat.scala 20:58] 
    node T_1682 = cat(T_1681, T_1680) @[Cat.scala 20:58] 
    node T_1683 = cat(T_1682, T_1679) @[Cat.scala 20:58] 
    node T_1684 = cat(T_1620, T_1618) @[Cat.scala 20:58] 
    node T_1685 = cat(T_1624, T_1622) @[Cat.scala 20:58] 
    node T_1686 = cat(T_1685, T_1684) @[Cat.scala 20:58] 
    node T_1687 = cat(T_1628, T_1626) @[Cat.scala 20:58] 
    node T_1688 = cat(T_1632, T_1630) @[Cat.scala 20:58] 
    node T_1689 = cat(T_1688, T_1687) @[Cat.scala 20:58] 
    node T_1690 = cat(T_1689, T_1686) @[Cat.scala 20:58] 
    node T_1691 = cat(T_1690, T_1683) @[Cat.scala 20:58] 
    node T_1692 = cat(T_1691, T_1676) @[Cat.scala 20:58] 
    node T_1693 = cat(T_1692, T_1662) @[Cat.scala 20:58] 
    node T_1694 = and(idxPagesOH_0, updatePageHit) @[btb.scala 167:41] 
    node T_1695 = and(idxPagesOH_1, updatePageHit) @[btb.scala 167:41] 
    node T_1696 = and(idxPagesOH_2, updatePageHit) @[btb.scala 167:41] 
    node T_1697 = and(idxPagesOH_3, updatePageHit) @[btb.scala 167:41] 
    node T_1698 = and(idxPagesOH_4, updatePageHit) @[btb.scala 167:41] 
    node T_1699 = and(idxPagesOH_5, updatePageHit) @[btb.scala 167:41] 
    node T_1700 = and(idxPagesOH_6, updatePageHit) @[btb.scala 167:41] 
    node T_1701 = and(idxPagesOH_7, updatePageHit) @[btb.scala 167:41] 
    node T_1702 = and(idxPagesOH_8, updatePageHit) @[btb.scala 167:41] 
    node T_1703 = and(idxPagesOH_9, updatePageHit) @[btb.scala 167:41] 
    node T_1704 = and(idxPagesOH_10, updatePageHit) @[btb.scala 167:41] 
    node T_1705 = and(idxPagesOH_11, updatePageHit) @[btb.scala 167:41] 
    node T_1706 = and(idxPagesOH_12, updatePageHit) @[btb.scala 167:41] 
    node T_1707 = and(idxPagesOH_13, updatePageHit) @[btb.scala 167:41] 
    node T_1708 = and(idxPagesOH_14, updatePageHit) @[btb.scala 167:41] 
    node T_1709 = and(idxPagesOH_15, updatePageHit) @[btb.scala 167:41] 
    node T_1710 = and(idxPagesOH_16, updatePageHit) @[btb.scala 167:41] 
    node T_1711 = and(idxPagesOH_17, updatePageHit) @[btb.scala 167:41] 
    node T_1712 = and(idxPagesOH_18, updatePageHit) @[btb.scala 167:41] 
    node T_1713 = and(idxPagesOH_19, updatePageHit) @[btb.scala 167:41] 
    node T_1714 = and(idxPagesOH_20, updatePageHit) @[btb.scala 167:41] 
    node T_1715 = and(idxPagesOH_21, updatePageHit) @[btb.scala 167:41] 
    node T_1716 = and(idxPagesOH_22, updatePageHit) @[btb.scala 167:41] 
    node T_1717 = and(idxPagesOH_23, updatePageHit) @[btb.scala 167:41] 
    node T_1718 = and(idxPagesOH_24, updatePageHit) @[btb.scala 167:41] 
    node T_1719 = and(idxPagesOH_25, updatePageHit) @[btb.scala 167:41] 
    node T_1720 = and(idxPagesOH_26, updatePageHit) @[btb.scala 167:41] 
    node T_1721 = and(idxPagesOH_27, updatePageHit) @[btb.scala 167:41] 
    node T_1722 = and(idxPagesOH_28, updatePageHit) @[btb.scala 167:41] 
    node T_1723 = and(idxPagesOH_29, updatePageHit) @[btb.scala 167:41] 
    node T_1724 = and(idxPagesOH_30, updatePageHit) @[btb.scala 167:41] 
    node T_1725 = and(idxPagesOH_31, updatePageHit) @[btb.scala 167:41] 
    node T_1726 = and(idxPagesOH_32, updatePageHit) @[btb.scala 167:41] 
    node T_1727 = and(idxPagesOH_33, updatePageHit) @[btb.scala 167:41] 
    node T_1728 = and(idxPagesOH_34, updatePageHit) @[btb.scala 167:41] 
    node T_1729 = and(idxPagesOH_35, updatePageHit) @[btb.scala 167:41] 
    node T_1730 = and(idxPagesOH_36, updatePageHit) @[btb.scala 167:41] 
    node T_1731 = and(idxPagesOH_37, updatePageHit) @[btb.scala 167:41] 
    node T_1732 = and(idxPagesOH_38, updatePageHit) @[btb.scala 167:41] 
    node T_1733 = and(idxPagesOH_39, updatePageHit) @[btb.scala 167:41] 
    node T_1734 = and(idxPagesOH_40, updatePageHit) @[btb.scala 167:41] 
    node T_1735 = and(idxPagesOH_41, updatePageHit) @[btb.scala 167:41] 
    node T_1736 = and(idxPagesOH_42, updatePageHit) @[btb.scala 167:41] 
    node T_1737 = and(idxPagesOH_43, updatePageHit) @[btb.scala 167:41] 
    node T_1738 = and(idxPagesOH_44, updatePageHit) @[btb.scala 167:41] 
    node T_1739 = and(idxPagesOH_45, updatePageHit) @[btb.scala 167:41] 
    node T_1740 = and(idxPagesOH_46, updatePageHit) @[btb.scala 167:41] 
    node T_1741 = and(idxPagesOH_47, updatePageHit) @[btb.scala 167:41] 
    node T_1742 = and(idxPagesOH_48, updatePageHit) @[btb.scala 167:41] 
    node T_1743 = and(idxPagesOH_49, updatePageHit) @[btb.scala 167:41] 
    node T_1744 = and(idxPagesOH_50, updatePageHit) @[btb.scala 167:41] 
    node T_1745 = and(idxPagesOH_51, updatePageHit) @[btb.scala 167:41] 
    node T_1746 = and(idxPagesOH_52, updatePageHit) @[btb.scala 167:41] 
    node T_1747 = and(idxPagesOH_53, updatePageHit) @[btb.scala 167:41] 
    node T_1748 = and(idxPagesOH_54, updatePageHit) @[btb.scala 167:41] 
    node T_1749 = and(idxPagesOH_55, updatePageHit) @[btb.scala 167:41] 
    node T_1750 = and(idxPagesOH_56, updatePageHit) @[btb.scala 167:41] 
    node T_1751 = and(idxPagesOH_57, updatePageHit) @[btb.scala 167:41] 
    node T_1752 = and(idxPagesOH_58, updatePageHit) @[btb.scala 167:41] 
    node T_1753 = and(idxPagesOH_59, updatePageHit) @[btb.scala 167:41] 
    node T_1754 = and(idxPagesOH_60, updatePageHit) @[btb.scala 167:41] 
    node T_1755 = and(idxPagesOH_61, updatePageHit) @[btb.scala 167:41] 
    node T_1757 = neq(T_1694, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1759 = neq(T_1695, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1761 = neq(T_1696, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1763 = neq(T_1697, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1765 = neq(T_1698, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1767 = neq(T_1699, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1769 = neq(T_1700, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1771 = neq(T_1701, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1773 = neq(T_1702, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1775 = neq(T_1703, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1777 = neq(T_1704, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1779 = neq(T_1705, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1781 = neq(T_1706, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1783 = neq(T_1707, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1785 = neq(T_1708, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1787 = neq(T_1709, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1789 = neq(T_1710, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1791 = neq(T_1711, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1793 = neq(T_1712, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1795 = neq(T_1713, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1797 = neq(T_1714, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1799 = neq(T_1715, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1801 = neq(T_1716, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1803 = neq(T_1717, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1805 = neq(T_1718, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1807 = neq(T_1719, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1809 = neq(T_1720, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1811 = neq(T_1721, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1813 = neq(T_1722, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1815 = neq(T_1723, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1817 = neq(T_1724, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1819 = neq(T_1725, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1821 = neq(T_1726, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1823 = neq(T_1727, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1825 = neq(T_1728, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1827 = neq(T_1729, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1829 = neq(T_1730, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1831 = neq(T_1731, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1833 = neq(T_1732, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1835 = neq(T_1733, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1837 = neq(T_1734, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1839 = neq(T_1735, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1841 = neq(T_1736, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1843 = neq(T_1737, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1845 = neq(T_1738, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1847 = neq(T_1739, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1849 = neq(T_1740, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1851 = neq(T_1741, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1853 = neq(T_1742, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1855 = neq(T_1743, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1857 = neq(T_1744, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1859 = neq(T_1745, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1861 = neq(T_1746, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1863 = neq(T_1747, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1865 = neq(T_1748, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1867 = neq(T_1749, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1869 = neq(T_1750, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1871 = neq(T_1751, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1873 = neq(T_1752, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1875 = neq(T_1753, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1877 = neq(T_1754, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1879 = neq(T_1755, UInt<1>("h00")) @[btb.scala 167:58] 
    node T_1880 = cat(T_1761, T_1759) @[Cat.scala 20:58] 
    node T_1881 = cat(T_1880, T_1757) @[Cat.scala 20:58] 
    node T_1882 = cat(T_1765, T_1763) @[Cat.scala 20:58] 
    node T_1883 = cat(T_1769, T_1767) @[Cat.scala 20:58] 
    node T_1884 = cat(T_1883, T_1882) @[Cat.scala 20:58] 
    node T_1885 = cat(T_1884, T_1881) @[Cat.scala 20:58] 
    node T_1886 = cat(T_1773, T_1771) @[Cat.scala 20:58] 
    node T_1887 = cat(T_1777, T_1775) @[Cat.scala 20:58] 
    node T_1888 = cat(T_1887, T_1886) @[Cat.scala 20:58] 
    node T_1889 = cat(T_1781, T_1779) @[Cat.scala 20:58] 
    node T_1890 = cat(T_1785, T_1783) @[Cat.scala 20:58] 
    node T_1891 = cat(T_1890, T_1889) @[Cat.scala 20:58] 
    node T_1892 = cat(T_1891, T_1888) @[Cat.scala 20:58] 
    node T_1893 = cat(T_1892, T_1885) @[Cat.scala 20:58] 
    node T_1894 = cat(T_1789, T_1787) @[Cat.scala 20:58] 
    node T_1895 = cat(T_1793, T_1791) @[Cat.scala 20:58] 
    node T_1896 = cat(T_1895, T_1894) @[Cat.scala 20:58] 
    node T_1897 = cat(T_1797, T_1795) @[Cat.scala 20:58] 
    node T_1898 = cat(T_1801, T_1799) @[Cat.scala 20:58] 
    node T_1899 = cat(T_1898, T_1897) @[Cat.scala 20:58] 
    node T_1900 = cat(T_1899, T_1896) @[Cat.scala 20:58] 
    node T_1901 = cat(T_1805, T_1803) @[Cat.scala 20:58] 
    node T_1902 = cat(T_1809, T_1807) @[Cat.scala 20:58] 
    node T_1903 = cat(T_1902, T_1901) @[Cat.scala 20:58] 
    node T_1904 = cat(T_1813, T_1811) @[Cat.scala 20:58] 
    node T_1905 = cat(T_1817, T_1815) @[Cat.scala 20:58] 
    node T_1906 = cat(T_1905, T_1904) @[Cat.scala 20:58] 
    node T_1907 = cat(T_1906, T_1903) @[Cat.scala 20:58] 
    node T_1908 = cat(T_1907, T_1900) @[Cat.scala 20:58] 
    node T_1909 = cat(T_1908, T_1893) @[Cat.scala 20:58] 
    node T_1910 = cat(T_1823, T_1821) @[Cat.scala 20:58] 
    node T_1911 = cat(T_1910, T_1819) @[Cat.scala 20:58] 
    node T_1912 = cat(T_1827, T_1825) @[Cat.scala 20:58] 
    node T_1913 = cat(T_1831, T_1829) @[Cat.scala 20:58] 
    node T_1914 = cat(T_1913, T_1912) @[Cat.scala 20:58] 
    node T_1915 = cat(T_1914, T_1911) @[Cat.scala 20:58] 
    node T_1916 = cat(T_1835, T_1833) @[Cat.scala 20:58] 
    node T_1917 = cat(T_1839, T_1837) @[Cat.scala 20:58] 
    node T_1918 = cat(T_1917, T_1916) @[Cat.scala 20:58] 
    node T_1919 = cat(T_1843, T_1841) @[Cat.scala 20:58] 
    node T_1920 = cat(T_1847, T_1845) @[Cat.scala 20:58] 
    node T_1921 = cat(T_1920, T_1919) @[Cat.scala 20:58] 
    node T_1922 = cat(T_1921, T_1918) @[Cat.scala 20:58] 
    node T_1923 = cat(T_1922, T_1915) @[Cat.scala 20:58] 
    node T_1924 = cat(T_1851, T_1849) @[Cat.scala 20:58] 
    node T_1925 = cat(T_1855, T_1853) @[Cat.scala 20:58] 
    node T_1926 = cat(T_1925, T_1924) @[Cat.scala 20:58] 
    node T_1927 = cat(T_1859, T_1857) @[Cat.scala 20:58] 
    node T_1928 = cat(T_1863, T_1861) @[Cat.scala 20:58] 
    node T_1929 = cat(T_1928, T_1927) @[Cat.scala 20:58] 
    node T_1930 = cat(T_1929, T_1926) @[Cat.scala 20:58] 
    node T_1931 = cat(T_1867, T_1865) @[Cat.scala 20:58] 
    node T_1932 = cat(T_1871, T_1869) @[Cat.scala 20:58] 
    node T_1933 = cat(T_1932, T_1931) @[Cat.scala 20:58] 
    node T_1934 = cat(T_1875, T_1873) @[Cat.scala 20:58] 
    node T_1935 = cat(T_1879, T_1877) @[Cat.scala 20:58] 
    node T_1936 = cat(T_1935, T_1934) @[Cat.scala 20:58] 
    node T_1937 = cat(T_1936, T_1933) @[Cat.scala 20:58] 
    node T_1938 = cat(T_1937, T_1930) @[Cat.scala 20:58] 
    node T_1939 = cat(T_1938, T_1923) @[Cat.scala 20:58] 
    node T_1940 = cat(T_1939, T_1909) @[Cat.scala 20:58] 
    node T_1941 = and(T_1693, T_1940) @[btb.scala 168:14] 
    node updateHits = and(T_1941, isValid) @[btb.scala 168:29] 
    node T_1943 = eq(r_btb_update.bits.prediction.valid, UInt<1>("h00")) @[btb.scala 182:48] 
    node T_1944 = and(r_btb_update.valid, T_1943) @[btb.scala 182:45] 
    reg nextRepl : UInt<6>, clk with : (reset => (reset, UInt<6>("h00")))
    when T_1944 : @[Counter.scala 43:17] 
      node T_1947 = eq(nextRepl, UInt<6>("h03d")) @[Counter.scala 20:24] 
      node T_1949 = add(nextRepl, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1950 = tail(T_1949, 1) @[Counter.scala 21:22] 
      nextRepl <= T_1950 @[Counter.scala 21:13] 
      when T_1947 : @[Counter.scala 23:21] 
        nextRepl <= UInt<1>("h00") @[Counter.scala 23:29] 
        skip @[Counter.scala 23:21] 
      skip @[Counter.scala 43:17] 
    node T_1952 = and(T_1944, T_1947) @[Counter.scala 44:20] 
    node useUpdatePageHit = neq(updatePageHit, UInt<1>("h00")) @[btb.scala 184:40] 
    node usePageHit = neq(pageHit, UInt<1>("h00")) @[btb.scala 185:28] 
    node doIdxPageRepl = eq(useUpdatePageHit, UInt<1>("h00")) @[btb.scala 186:23] 
    reg nextPageRepl : UInt<3>, clk
    node T_1957 = bits(pageHit, 4, 0) @[btb.scala 188:48] 
    node T_1958 = bits(pageHit, 5, 5) @[btb.scala 188:69] 
    node T_1959 = cat(T_1957, T_1958) @[Cat.scala 20:58] 
    node T_1961 = dshl(UInt<1>("h01"), nextPageRepl) @[OneHot.scala 44:15] 
    node idxPageRepl = mux(usePageHit, T_1959, T_1961) @[btb.scala 188:24] 
    node idxPageUpdateOH = mux(useUpdatePageHit, updatePageHit, idxPageRepl) @[btb.scala 189:28] 
    node T_1962 = bits(idxPageUpdateOH, 7, 4) @[OneHot.scala 22:18] 
    node T_1963 = bits(idxPageUpdateOH, 3, 0) @[OneHot.scala 23:18] 
    node T_1965 = neq(T_1962, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_1966 = or(T_1962, T_1963) @[OneHot.scala 24:28] 
    node T_1967 = bits(T_1966, 3, 2) @[OneHot.scala 22:18] 
    node T_1968 = bits(T_1966, 1, 0) @[OneHot.scala 23:18] 
    node T_1970 = neq(T_1967, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_1971 = or(T_1967, T_1968) @[OneHot.scala 24:28] 
    node T_1972 = bits(T_1971, 1, 1) @[CircuitMath.scala 21:8] 
    node T_1973 = cat(T_1970, T_1972) @[Cat.scala 20:58] 
    node idxPageUpdate = cat(T_1965, T_1973) @[Cat.scala 20:58] 
    node idxPageReplEn = mux(doIdxPageRepl, idxPageRepl, UInt<1>("h00")) @[btb.scala 191:26] 
    node T_1975 = shr(r_btb_update.bits.pc, 12) @[btb.scala 160:39] 
    node T_1976 = shr(io.req.bits.addr, 12) @[btb.scala 160:39] 
    node samePage = eq(T_1975, T_1976) @[btb.scala 193:45] 
    node T_1978 = eq(samePage, UInt<1>("h00")) @[btb.scala 194:23] 
    node T_1980 = eq(usePageHit, UInt<1>("h00")) @[btb.scala 194:36] 
    node doTgtPageRepl = and(T_1978, T_1980) @[btb.scala 194:33] 
    node T_1981 = bits(idxPageUpdateOH, 4, 0) @[btb.scala 195:71] 
    node T_1982 = bits(idxPageUpdateOH, 5, 5) @[btb.scala 195:100] 
    node T_1983 = cat(T_1981, T_1982) @[Cat.scala 20:58] 
    node tgtPageRepl = mux(samePage, idxPageUpdateOH, T_1983) @[btb.scala 195:24] 
    node T_1984 = mux(usePageHit, pageHit, tgtPageRepl) @[btb.scala 196:35] 
    node T_1985 = bits(T_1984, 7, 4) @[OneHot.scala 22:18] 
    node T_1986 = bits(T_1984, 3, 0) @[OneHot.scala 23:18] 
    node T_1988 = neq(T_1985, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_1989 = or(T_1985, T_1986) @[OneHot.scala 24:28] 
    node T_1990 = bits(T_1989, 3, 2) @[OneHot.scala 22:18] 
    node T_1991 = bits(T_1989, 1, 0) @[OneHot.scala 23:18] 
    node T_1993 = neq(T_1990, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_1994 = or(T_1990, T_1991) @[OneHot.scala 24:28] 
    node T_1995 = bits(T_1994, 1, 1) @[CircuitMath.scala 21:8] 
    node T_1996 = cat(T_1993, T_1995) @[Cat.scala 20:58] 
    node tgtPageUpdate = cat(T_1988, T_1996) @[Cat.scala 20:58] 
    node tgtPageReplEn = mux(doTgtPageRepl, tgtPageRepl, UInt<1>("h00")) @[btb.scala 197:26] 
    node T_1998 = or(doIdxPageRepl, doTgtPageRepl) @[btb.scala 199:46] 
    node T_1999 = and(r_btb_update.valid, T_1998) @[btb.scala 199:28] 
    when T_1999 : @[btb.scala 199:65] 
      node T_2000 = and(doIdxPageRepl, doTgtPageRepl) @[btb.scala 200:30] 
      node T_2003 = mux(T_2000, UInt<2>("h02"), UInt<1>("h01")) @[btb.scala 201:40] 
      node T_2004 = add(nextPageRepl, T_2003) @[btb.scala 201:29] 
      node T_2005 = tail(T_2004, 1) @[btb.scala 201:29] 
      node T_2007 = geq(T_2005, UInt<3>("h06")) @[btb.scala 202:30] 
      node T_2008 = bits(T_2005, 0, 0) @[btb.scala 202:45] 
      node T_2009 = shl(T_2008, 0) @[btb.scala 202:24] 
      node T_2010 = mux(T_2007, T_2009, T_2005) @[btb.scala 202:24] 
      nextPageRepl <= T_2010 @[btb.scala 202:18] 
      skip @[btb.scala 199:65] 
    when r_btb_update.valid : @[btb.scala 205:29] 
      node T_2011 = mux(r_btb_update.bits.prediction.valid, r_btb_update.bits.prediction.bits.entry, nextRepl) @[btb.scala 206:20] 
      node T_2013 = dshl(UInt<1>("h01"), T_2011) @[OneHot.scala 44:15] 
      node T_2014 = bits(r_btb_update.bits.pc, 11, 1) @[btb.scala 208:40] 
      idxs[T_2011] <= T_2014 @[btb.scala 208:17] 
      node T_2015 = bits(io.req.bits.addr, 11, 1) @[btb.scala 209:33] 
      tgts[T_2011] <= T_2015 @[btb.scala 209:17] 
      idxPages[T_2011] <= idxPageUpdate @[btb.scala 210:21] 
      tgtPages[T_2011] <= tgtPageUpdate @[btb.scala 211:21] 
      node T_2016 = or(isValid, T_2013) @[btb.scala 212:55] 
      node T_2017 = not(T_2013) @[btb.scala 212:73] 
      node T_2018 = and(isValid, T_2017) @[btb.scala 212:71] 
      node T_2019 = mux(r_btb_update.bits.isValid, T_2016, T_2018) @[btb.scala 212:19] 
      isValid <= T_2019 @[btb.scala 212:13] 
      node T_2020 = or(isReturn, T_2013) @[btb.scala 213:58] 
      node T_2021 = not(T_2013) @[btb.scala 213:77] 
      node T_2022 = and(isReturn, T_2021) @[btb.scala 213:75] 
      node T_2023 = mux(r_btb_update.bits.isReturn, T_2020, T_2022) @[btb.scala 213:20] 
      isReturn <= T_2023 @[btb.scala 213:14] 
      node T_2024 = or(isJump, T_2013) @[btb.scala 214:52] 
      node T_2025 = not(T_2013) @[btb.scala 214:69] 
      node T_2026 = and(isJump, T_2025) @[btb.scala 214:67] 
      node T_2027 = mux(r_btb_update.bits.isJump, T_2024, T_2026) @[btb.scala 214:18] 
      isJump <= T_2027 @[btb.scala 214:12] 
      node T_2028 = shr(r_btb_update.bits.br_pc, 1) @[btb.scala 216:47] 
      brIdx[T_2011] <= T_2028 @[btb.scala 216:20] 
      node T_2029 = bits(idxPageUpdate, 0, 0) @[btb.scala 219:39] 
      node T_2031 = eq(T_2029, UInt<1>("h00")) @[btb.scala 219:25] 
      node T_2032 = mux(T_2031, idxPageReplEn, tgtPageReplEn) @[btb.scala 225:24] 
      node T_2033 = shr(r_btb_update.bits.pc, 12) @[btb.scala 160:39] 
      node T_2034 = shr(io.req.bits.addr, 12) @[btb.scala 160:39] 
      node T_2035 = mux(T_2031, T_2033, T_2034) @[btb.scala 226:10] 
      node T_2036 = bits(T_2032, 0, 0) @[btb.scala 223:17] 
      when T_2036 : @[btb.scala 223:22] 
        pages[0] <= T_2035 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2037 = bits(T_2032, 2, 2) @[btb.scala 223:17] 
      when T_2037 : @[btb.scala 223:22] 
        pages[2] <= T_2035 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2038 = bits(T_2032, 4, 4) @[btb.scala 223:17] 
      when T_2038 : @[btb.scala 223:22] 
        pages[4] <= T_2035 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2039 = mux(T_2031, tgtPageReplEn, idxPageReplEn) @[btb.scala 227:24] 
      node T_2040 = shr(io.req.bits.addr, 12) @[btb.scala 160:39] 
      node T_2041 = shr(r_btb_update.bits.pc, 12) @[btb.scala 160:39] 
      node T_2042 = mux(T_2031, T_2040, T_2041) @[btb.scala 228:10] 
      node T_2043 = bits(T_2039, 1, 1) @[btb.scala 223:17] 
      when T_2043 : @[btb.scala 223:22] 
        pages[1] <= T_2042 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2044 = bits(T_2039, 3, 3) @[btb.scala 223:17] 
      when T_2044 : @[btb.scala 223:22] 
        pages[3] <= T_2042 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2045 = bits(T_2039, 5, 5) @[btb.scala 223:17] 
      when T_2045 : @[btb.scala 223:22] 
        pages[5] <= T_2042 @[btb.scala 223:33] 
        skip @[btb.scala 223:22] 
      node T_2046 = or(pageValid, tgtPageReplEn) @[btb.scala 229:28] 
      node T_2047 = or(T_2046, idxPageReplEn) @[btb.scala 229:44] 
      pageValid <= T_2047 @[btb.scala 229:15] 
      skip @[btb.scala 205:29] 
    node T_2049 = neq(hitsVec, UInt<1>("h00")) @[btb.scala 232:25] 
    io.resp.valid <= T_2049 @[btb.scala 232:17] 
    io.resp.bits.taken <= UInt<1>("h01") @[btb.scala 233:22] 
    node T_2051 = bits(hitsVec, 0, 0) @[Mux.scala 20:36] 
    node T_2052 = bits(hitsVec, 1, 1) @[Mux.scala 20:36] 
    node T_2053 = bits(hitsVec, 2, 2) @[Mux.scala 20:36] 
    node T_2054 = bits(hitsVec, 3, 3) @[Mux.scala 20:36] 
    node T_2055 = bits(hitsVec, 4, 4) @[Mux.scala 20:36] 
    node T_2056 = bits(hitsVec, 5, 5) @[Mux.scala 20:36] 
    node T_2057 = bits(hitsVec, 6, 6) @[Mux.scala 20:36] 
    node T_2058 = bits(hitsVec, 7, 7) @[Mux.scala 20:36] 
    node T_2059 = bits(hitsVec, 8, 8) @[Mux.scala 20:36] 
    node T_2060 = bits(hitsVec, 9, 9) @[Mux.scala 20:36] 
    node T_2061 = bits(hitsVec, 10, 10) @[Mux.scala 20:36] 
    node T_2062 = bits(hitsVec, 11, 11) @[Mux.scala 20:36] 
    node T_2063 = bits(hitsVec, 12, 12) @[Mux.scala 20:36] 
    node T_2064 = bits(hitsVec, 13, 13) @[Mux.scala 20:36] 
    node T_2065 = bits(hitsVec, 14, 14) @[Mux.scala 20:36] 
    node T_2066 = bits(hitsVec, 15, 15) @[Mux.scala 20:36] 
    node T_2067 = bits(hitsVec, 16, 16) @[Mux.scala 20:36] 
    node T_2068 = bits(hitsVec, 17, 17) @[Mux.scala 20:36] 
    node T_2069 = bits(hitsVec, 18, 18) @[Mux.scala 20:36] 
    node T_2070 = bits(hitsVec, 19, 19) @[Mux.scala 20:36] 
    node T_2071 = bits(hitsVec, 20, 20) @[Mux.scala 20:36] 
    node T_2072 = bits(hitsVec, 21, 21) @[Mux.scala 20:36] 
    node T_2073 = bits(hitsVec, 22, 22) @[Mux.scala 20:36] 
    node T_2074 = bits(hitsVec, 23, 23) @[Mux.scala 20:36] 
    node T_2075 = bits(hitsVec, 24, 24) @[Mux.scala 20:36] 
    node T_2076 = bits(hitsVec, 25, 25) @[Mux.scala 20:36] 
    node T_2077 = bits(hitsVec, 26, 26) @[Mux.scala 20:36] 
    node T_2078 = bits(hitsVec, 27, 27) @[Mux.scala 20:36] 
    node T_2079 = bits(hitsVec, 28, 28) @[Mux.scala 20:36] 
    node T_2080 = bits(hitsVec, 29, 29) @[Mux.scala 20:36] 
    node T_2081 = bits(hitsVec, 30, 30) @[Mux.scala 20:36] 
    node T_2082 = bits(hitsVec, 31, 31) @[Mux.scala 20:36] 
    node T_2083 = bits(hitsVec, 32, 32) @[Mux.scala 20:36] 
    node T_2084 = bits(hitsVec, 33, 33) @[Mux.scala 20:36] 
    node T_2085 = bits(hitsVec, 34, 34) @[Mux.scala 20:36] 
    node T_2086 = bits(hitsVec, 35, 35) @[Mux.scala 20:36] 
    node T_2087 = bits(hitsVec, 36, 36) @[Mux.scala 20:36] 
    node T_2088 = bits(hitsVec, 37, 37) @[Mux.scala 20:36] 
    node T_2089 = bits(hitsVec, 38, 38) @[Mux.scala 20:36] 
    node T_2090 = bits(hitsVec, 39, 39) @[Mux.scala 20:36] 
    node T_2091 = bits(hitsVec, 40, 40) @[Mux.scala 20:36] 
    node T_2092 = bits(hitsVec, 41, 41) @[Mux.scala 20:36] 
    node T_2093 = bits(hitsVec, 42, 42) @[Mux.scala 20:36] 
    node T_2094 = bits(hitsVec, 43, 43) @[Mux.scala 20:36] 
    node T_2095 = bits(hitsVec, 44, 44) @[Mux.scala 20:36] 
    node T_2096 = bits(hitsVec, 45, 45) @[Mux.scala 20:36] 
    node T_2097 = bits(hitsVec, 46, 46) @[Mux.scala 20:36] 
    node T_2098 = bits(hitsVec, 47, 47) @[Mux.scala 20:36] 
    node T_2099 = bits(hitsVec, 48, 48) @[Mux.scala 20:36] 
    node T_2100 = bits(hitsVec, 49, 49) @[Mux.scala 20:36] 
    node T_2101 = bits(hitsVec, 50, 50) @[Mux.scala 20:36] 
    node T_2102 = bits(hitsVec, 51, 51) @[Mux.scala 20:36] 
    node T_2103 = bits(hitsVec, 52, 52) @[Mux.scala 20:36] 
    node T_2104 = bits(hitsVec, 53, 53) @[Mux.scala 20:36] 
    node T_2105 = bits(hitsVec, 54, 54) @[Mux.scala 20:36] 
    node T_2106 = bits(hitsVec, 55, 55) @[Mux.scala 20:36] 
    node T_2107 = bits(hitsVec, 56, 56) @[Mux.scala 20:36] 
    node T_2108 = bits(hitsVec, 57, 57) @[Mux.scala 20:36] 
    node T_2109 = bits(hitsVec, 58, 58) @[Mux.scala 20:36] 
    node T_2110 = bits(hitsVec, 59, 59) @[Mux.scala 20:36] 
    node T_2111 = bits(hitsVec, 60, 60) @[Mux.scala 20:36] 
    node T_2112 = bits(hitsVec, 61, 61) @[Mux.scala 20:36] 
    node T_2114 = mux(T_2051, tgtPagesOH_0, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2116 = mux(T_2052, tgtPagesOH_1, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2118 = mux(T_2053, tgtPagesOH_2, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2120 = mux(T_2054, tgtPagesOH_3, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2122 = mux(T_2055, tgtPagesOH_4, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2124 = mux(T_2056, tgtPagesOH_5, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2126 = mux(T_2057, tgtPagesOH_6, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2128 = mux(T_2058, tgtPagesOH_7, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2130 = mux(T_2059, tgtPagesOH_8, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2132 = mux(T_2060, tgtPagesOH_9, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2134 = mux(T_2061, tgtPagesOH_10, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2136 = mux(T_2062, tgtPagesOH_11, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2138 = mux(T_2063, tgtPagesOH_12, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2140 = mux(T_2064, tgtPagesOH_13, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2142 = mux(T_2065, tgtPagesOH_14, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2144 = mux(T_2066, tgtPagesOH_15, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2146 = mux(T_2067, tgtPagesOH_16, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2148 = mux(T_2068, tgtPagesOH_17, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2150 = mux(T_2069, tgtPagesOH_18, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2152 = mux(T_2070, tgtPagesOH_19, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2154 = mux(T_2071, tgtPagesOH_20, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2156 = mux(T_2072, tgtPagesOH_21, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2158 = mux(T_2073, tgtPagesOH_22, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2160 = mux(T_2074, tgtPagesOH_23, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2162 = mux(T_2075, tgtPagesOH_24, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2164 = mux(T_2076, tgtPagesOH_25, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2166 = mux(T_2077, tgtPagesOH_26, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2168 = mux(T_2078, tgtPagesOH_27, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2170 = mux(T_2079, tgtPagesOH_28, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2172 = mux(T_2080, tgtPagesOH_29, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2174 = mux(T_2081, tgtPagesOH_30, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2176 = mux(T_2082, tgtPagesOH_31, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2178 = mux(T_2083, tgtPagesOH_32, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2180 = mux(T_2084, tgtPagesOH_33, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2182 = mux(T_2085, tgtPagesOH_34, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2184 = mux(T_2086, tgtPagesOH_35, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2186 = mux(T_2087, tgtPagesOH_36, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2188 = mux(T_2088, tgtPagesOH_37, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2190 = mux(T_2089, tgtPagesOH_38, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2192 = mux(T_2090, tgtPagesOH_39, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2194 = mux(T_2091, tgtPagesOH_40, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2196 = mux(T_2092, tgtPagesOH_41, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2198 = mux(T_2093, tgtPagesOH_42, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2200 = mux(T_2094, tgtPagesOH_43, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2202 = mux(T_2095, tgtPagesOH_44, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2204 = mux(T_2096, tgtPagesOH_45, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2206 = mux(T_2097, tgtPagesOH_46, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2208 = mux(T_2098, tgtPagesOH_47, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2210 = mux(T_2099, tgtPagesOH_48, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2212 = mux(T_2100, tgtPagesOH_49, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2214 = mux(T_2101, tgtPagesOH_50, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2216 = mux(T_2102, tgtPagesOH_51, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2218 = mux(T_2103, tgtPagesOH_52, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2220 = mux(T_2104, tgtPagesOH_53, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2222 = mux(T_2105, tgtPagesOH_54, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2224 = mux(T_2106, tgtPagesOH_55, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2226 = mux(T_2107, tgtPagesOH_56, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2228 = mux(T_2108, tgtPagesOH_57, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2230 = mux(T_2109, tgtPagesOH_58, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2232 = mux(T_2110, tgtPagesOH_59, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2234 = mux(T_2111, tgtPagesOH_60, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2236 = mux(T_2112, tgtPagesOH_61, UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2238 = or(T_2114, T_2116) @[Mux.scala 18:72] 
    node T_2239 = or(T_2238, T_2118) @[Mux.scala 18:72] 
    node T_2240 = or(T_2239, T_2120) @[Mux.scala 18:72] 
    node T_2241 = or(T_2240, T_2122) @[Mux.scala 18:72] 
    node T_2242 = or(T_2241, T_2124) @[Mux.scala 18:72] 
    node T_2243 = or(T_2242, T_2126) @[Mux.scala 18:72] 
    node T_2244 = or(T_2243, T_2128) @[Mux.scala 18:72] 
    node T_2245 = or(T_2244, T_2130) @[Mux.scala 18:72] 
    node T_2246 = or(T_2245, T_2132) @[Mux.scala 18:72] 
    node T_2247 = or(T_2246, T_2134) @[Mux.scala 18:72] 
    node T_2248 = or(T_2247, T_2136) @[Mux.scala 18:72] 
    node T_2249 = or(T_2248, T_2138) @[Mux.scala 18:72] 
    node T_2250 = or(T_2249, T_2140) @[Mux.scala 18:72] 
    node T_2251 = or(T_2250, T_2142) @[Mux.scala 18:72] 
    node T_2252 = or(T_2251, T_2144) @[Mux.scala 18:72] 
    node T_2253 = or(T_2252, T_2146) @[Mux.scala 18:72] 
    node T_2254 = or(T_2253, T_2148) @[Mux.scala 18:72] 
    node T_2255 = or(T_2254, T_2150) @[Mux.scala 18:72] 
    node T_2256 = or(T_2255, T_2152) @[Mux.scala 18:72] 
    node T_2257 = or(T_2256, T_2154) @[Mux.scala 18:72] 
    node T_2258 = or(T_2257, T_2156) @[Mux.scala 18:72] 
    node T_2259 = or(T_2258, T_2158) @[Mux.scala 18:72] 
    node T_2260 = or(T_2259, T_2160) @[Mux.scala 18:72] 
    node T_2261 = or(T_2260, T_2162) @[Mux.scala 18:72] 
    node T_2262 = or(T_2261, T_2164) @[Mux.scala 18:72] 
    node T_2263 = or(T_2262, T_2166) @[Mux.scala 18:72] 
    node T_2264 = or(T_2263, T_2168) @[Mux.scala 18:72] 
    node T_2265 = or(T_2264, T_2170) @[Mux.scala 18:72] 
    node T_2266 = or(T_2265, T_2172) @[Mux.scala 18:72] 
    node T_2267 = or(T_2266, T_2174) @[Mux.scala 18:72] 
    node T_2268 = or(T_2267, T_2176) @[Mux.scala 18:72] 
    node T_2269 = or(T_2268, T_2178) @[Mux.scala 18:72] 
    node T_2270 = or(T_2269, T_2180) @[Mux.scala 18:72] 
    node T_2271 = or(T_2270, T_2182) @[Mux.scala 18:72] 
    node T_2272 = or(T_2271, T_2184) @[Mux.scala 18:72] 
    node T_2273 = or(T_2272, T_2186) @[Mux.scala 18:72] 
    node T_2274 = or(T_2273, T_2188) @[Mux.scala 18:72] 
    node T_2275 = or(T_2274, T_2190) @[Mux.scala 18:72] 
    node T_2276 = or(T_2275, T_2192) @[Mux.scala 18:72] 
    node T_2277 = or(T_2276, T_2194) @[Mux.scala 18:72] 
    node T_2278 = or(T_2277, T_2196) @[Mux.scala 18:72] 
    node T_2279 = or(T_2278, T_2198) @[Mux.scala 18:72] 
    node T_2280 = or(T_2279, T_2200) @[Mux.scala 18:72] 
    node T_2281 = or(T_2280, T_2202) @[Mux.scala 18:72] 
    node T_2282 = or(T_2281, T_2204) @[Mux.scala 18:72] 
    node T_2283 = or(T_2282, T_2206) @[Mux.scala 18:72] 
    node T_2284 = or(T_2283, T_2208) @[Mux.scala 18:72] 
    node T_2285 = or(T_2284, T_2210) @[Mux.scala 18:72] 
    node T_2286 = or(T_2285, T_2212) @[Mux.scala 18:72] 
    node T_2287 = or(T_2286, T_2214) @[Mux.scala 18:72] 
    node T_2288 = or(T_2287, T_2216) @[Mux.scala 18:72] 
    node T_2289 = or(T_2288, T_2218) @[Mux.scala 18:72] 
    node T_2290 = or(T_2289, T_2220) @[Mux.scala 18:72] 
    node T_2291 = or(T_2290, T_2222) @[Mux.scala 18:72] 
    node T_2292 = or(T_2291, T_2224) @[Mux.scala 18:72] 
    node T_2293 = or(T_2292, T_2226) @[Mux.scala 18:72] 
    node T_2294 = or(T_2293, T_2228) @[Mux.scala 18:72] 
    node T_2295 = or(T_2294, T_2230) @[Mux.scala 18:72] 
    node T_2296 = or(T_2295, T_2232) @[Mux.scala 18:72] 
    node T_2297 = or(T_2296, T_2234) @[Mux.scala 18:72] 
    node T_2298 = or(T_2297, T_2236) @[Mux.scala 18:72] 
    wire T_2299 : UInt<6>
    T_2299 is invalid
    T_2299 <= T_2298 @[Mux.scala 18:72] 
    node T_2300 = bits(T_2299, 0, 0) @[Mux.scala 20:36] 
    node T_2301 = bits(T_2299, 1, 1) @[Mux.scala 20:36] 
    node T_2302 = bits(T_2299, 2, 2) @[Mux.scala 20:36] 
    node T_2303 = bits(T_2299, 3, 3) @[Mux.scala 20:36] 
    node T_2304 = bits(T_2299, 4, 4) @[Mux.scala 20:36] 
    node T_2305 = bits(T_2299, 5, 5) @[Mux.scala 20:36] 
    node T_2307 = mux(T_2300, pages[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2309 = mux(T_2301, pages[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2311 = mux(T_2302, pages[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2313 = mux(T_2303, pages[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2315 = mux(T_2304, pages[4], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2317 = mux(T_2305, pages[5], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2319 = or(T_2307, T_2309) @[Mux.scala 18:72] 
    node T_2320 = or(T_2319, T_2311) @[Mux.scala 18:72] 
    node T_2321 = or(T_2320, T_2313) @[Mux.scala 18:72] 
    node T_2322 = or(T_2321, T_2315) @[Mux.scala 18:72] 
    node T_2323 = or(T_2322, T_2317) @[Mux.scala 18:72] 
    wire T_2324 : UInt<27>
    T_2324 is invalid
    T_2324 <= T_2323 @[Mux.scala 18:72] 
    node T_2325 = bits(hitsVec, 0, 0) @[Mux.scala 20:36] 
    node T_2326 = bits(hitsVec, 1, 1) @[Mux.scala 20:36] 
    node T_2327 = bits(hitsVec, 2, 2) @[Mux.scala 20:36] 
    node T_2328 = bits(hitsVec, 3, 3) @[Mux.scala 20:36] 
    node T_2329 = bits(hitsVec, 4, 4) @[Mux.scala 20:36] 
    node T_2330 = bits(hitsVec, 5, 5) @[Mux.scala 20:36] 
    node T_2331 = bits(hitsVec, 6, 6) @[Mux.scala 20:36] 
    node T_2332 = bits(hitsVec, 7, 7) @[Mux.scala 20:36] 
    node T_2333 = bits(hitsVec, 8, 8) @[Mux.scala 20:36] 
    node T_2334 = bits(hitsVec, 9, 9) @[Mux.scala 20:36] 
    node T_2335 = bits(hitsVec, 10, 10) @[Mux.scala 20:36] 
    node T_2336 = bits(hitsVec, 11, 11) @[Mux.scala 20:36] 
    node T_2337 = bits(hitsVec, 12, 12) @[Mux.scala 20:36] 
    node T_2338 = bits(hitsVec, 13, 13) @[Mux.scala 20:36] 
    node T_2339 = bits(hitsVec, 14, 14) @[Mux.scala 20:36] 
    node T_2340 = bits(hitsVec, 15, 15) @[Mux.scala 20:36] 
    node T_2341 = bits(hitsVec, 16, 16) @[Mux.scala 20:36] 
    node T_2342 = bits(hitsVec, 17, 17) @[Mux.scala 20:36] 
    node T_2343 = bits(hitsVec, 18, 18) @[Mux.scala 20:36] 
    node T_2344 = bits(hitsVec, 19, 19) @[Mux.scala 20:36] 
    node T_2345 = bits(hitsVec, 20, 20) @[Mux.scala 20:36] 
    node T_2346 = bits(hitsVec, 21, 21) @[Mux.scala 20:36] 
    node T_2347 = bits(hitsVec, 22, 22) @[Mux.scala 20:36] 
    node T_2348 = bits(hitsVec, 23, 23) @[Mux.scala 20:36] 
    node T_2349 = bits(hitsVec, 24, 24) @[Mux.scala 20:36] 
    node T_2350 = bits(hitsVec, 25, 25) @[Mux.scala 20:36] 
    node T_2351 = bits(hitsVec, 26, 26) @[Mux.scala 20:36] 
    node T_2352 = bits(hitsVec, 27, 27) @[Mux.scala 20:36] 
    node T_2353 = bits(hitsVec, 28, 28) @[Mux.scala 20:36] 
    node T_2354 = bits(hitsVec, 29, 29) @[Mux.scala 20:36] 
    node T_2355 = bits(hitsVec, 30, 30) @[Mux.scala 20:36] 
    node T_2356 = bits(hitsVec, 31, 31) @[Mux.scala 20:36] 
    node T_2357 = bits(hitsVec, 32, 32) @[Mux.scala 20:36] 
    node T_2358 = bits(hitsVec, 33, 33) @[Mux.scala 20:36] 
    node T_2359 = bits(hitsVec, 34, 34) @[Mux.scala 20:36] 
    node T_2360 = bits(hitsVec, 35, 35) @[Mux.scala 20:36] 
    node T_2361 = bits(hitsVec, 36, 36) @[Mux.scala 20:36] 
    node T_2362 = bits(hitsVec, 37, 37) @[Mux.scala 20:36] 
    node T_2363 = bits(hitsVec, 38, 38) @[Mux.scala 20:36] 
    node T_2364 = bits(hitsVec, 39, 39) @[Mux.scala 20:36] 
    node T_2365 = bits(hitsVec, 40, 40) @[Mux.scala 20:36] 
    node T_2366 = bits(hitsVec, 41, 41) @[Mux.scala 20:36] 
    node T_2367 = bits(hitsVec, 42, 42) @[Mux.scala 20:36] 
    node T_2368 = bits(hitsVec, 43, 43) @[Mux.scala 20:36] 
    node T_2369 = bits(hitsVec, 44, 44) @[Mux.scala 20:36] 
    node T_2370 = bits(hitsVec, 45, 45) @[Mux.scala 20:36] 
    node T_2371 = bits(hitsVec, 46, 46) @[Mux.scala 20:36] 
    node T_2372 = bits(hitsVec, 47, 47) @[Mux.scala 20:36] 
    node T_2373 = bits(hitsVec, 48, 48) @[Mux.scala 20:36] 
    node T_2374 = bits(hitsVec, 49, 49) @[Mux.scala 20:36] 
    node T_2375 = bits(hitsVec, 50, 50) @[Mux.scala 20:36] 
    node T_2376 = bits(hitsVec, 51, 51) @[Mux.scala 20:36] 
    node T_2377 = bits(hitsVec, 52, 52) @[Mux.scala 20:36] 
    node T_2378 = bits(hitsVec, 53, 53) @[Mux.scala 20:36] 
    node T_2379 = bits(hitsVec, 54, 54) @[Mux.scala 20:36] 
    node T_2380 = bits(hitsVec, 55, 55) @[Mux.scala 20:36] 
    node T_2381 = bits(hitsVec, 56, 56) @[Mux.scala 20:36] 
    node T_2382 = bits(hitsVec, 57, 57) @[Mux.scala 20:36] 
    node T_2383 = bits(hitsVec, 58, 58) @[Mux.scala 20:36] 
    node T_2384 = bits(hitsVec, 59, 59) @[Mux.scala 20:36] 
    node T_2385 = bits(hitsVec, 60, 60) @[Mux.scala 20:36] 
    node T_2386 = bits(hitsVec, 61, 61) @[Mux.scala 20:36] 
    node T_2388 = mux(T_2325, tgts[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2390 = mux(T_2326, tgts[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2392 = mux(T_2327, tgts[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2394 = mux(T_2328, tgts[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2396 = mux(T_2329, tgts[4], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2398 = mux(T_2330, tgts[5], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2400 = mux(T_2331, tgts[6], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2402 = mux(T_2332, tgts[7], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2404 = mux(T_2333, tgts[8], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2406 = mux(T_2334, tgts[9], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2408 = mux(T_2335, tgts[10], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2410 = mux(T_2336, tgts[11], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2412 = mux(T_2337, tgts[12], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2414 = mux(T_2338, tgts[13], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2416 = mux(T_2339, tgts[14], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2418 = mux(T_2340, tgts[15], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2420 = mux(T_2341, tgts[16], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2422 = mux(T_2342, tgts[17], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2424 = mux(T_2343, tgts[18], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2426 = mux(T_2344, tgts[19], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2428 = mux(T_2345, tgts[20], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2430 = mux(T_2346, tgts[21], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2432 = mux(T_2347, tgts[22], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2434 = mux(T_2348, tgts[23], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2436 = mux(T_2349, tgts[24], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2438 = mux(T_2350, tgts[25], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2440 = mux(T_2351, tgts[26], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2442 = mux(T_2352, tgts[27], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2444 = mux(T_2353, tgts[28], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2446 = mux(T_2354, tgts[29], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2448 = mux(T_2355, tgts[30], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2450 = mux(T_2356, tgts[31], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2452 = mux(T_2357, tgts[32], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2454 = mux(T_2358, tgts[33], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2456 = mux(T_2359, tgts[34], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2458 = mux(T_2360, tgts[35], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2460 = mux(T_2361, tgts[36], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2462 = mux(T_2362, tgts[37], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2464 = mux(T_2363, tgts[38], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2466 = mux(T_2364, tgts[39], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2468 = mux(T_2365, tgts[40], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2470 = mux(T_2366, tgts[41], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2472 = mux(T_2367, tgts[42], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2474 = mux(T_2368, tgts[43], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2476 = mux(T_2369, tgts[44], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2478 = mux(T_2370, tgts[45], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2480 = mux(T_2371, tgts[46], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2482 = mux(T_2372, tgts[47], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2484 = mux(T_2373, tgts[48], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2486 = mux(T_2374, tgts[49], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2488 = mux(T_2375, tgts[50], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2490 = mux(T_2376, tgts[51], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2492 = mux(T_2377, tgts[52], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2494 = mux(T_2378, tgts[53], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2496 = mux(T_2379, tgts[54], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2498 = mux(T_2380, tgts[55], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2500 = mux(T_2381, tgts[56], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2502 = mux(T_2382, tgts[57], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2504 = mux(T_2383, tgts[58], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2506 = mux(T_2384, tgts[59], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2508 = mux(T_2385, tgts[60], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2510 = mux(T_2386, tgts[61], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2512 = or(T_2388, T_2390) @[Mux.scala 18:72] 
    node T_2513 = or(T_2512, T_2392) @[Mux.scala 18:72] 
    node T_2514 = or(T_2513, T_2394) @[Mux.scala 18:72] 
    node T_2515 = or(T_2514, T_2396) @[Mux.scala 18:72] 
    node T_2516 = or(T_2515, T_2398) @[Mux.scala 18:72] 
    node T_2517 = or(T_2516, T_2400) @[Mux.scala 18:72] 
    node T_2518 = or(T_2517, T_2402) @[Mux.scala 18:72] 
    node T_2519 = or(T_2518, T_2404) @[Mux.scala 18:72] 
    node T_2520 = or(T_2519, T_2406) @[Mux.scala 18:72] 
    node T_2521 = or(T_2520, T_2408) @[Mux.scala 18:72] 
    node T_2522 = or(T_2521, T_2410) @[Mux.scala 18:72] 
    node T_2523 = or(T_2522, T_2412) @[Mux.scala 18:72] 
    node T_2524 = or(T_2523, T_2414) @[Mux.scala 18:72] 
    node T_2525 = or(T_2524, T_2416) @[Mux.scala 18:72] 
    node T_2526 = or(T_2525, T_2418) @[Mux.scala 18:72] 
    node T_2527 = or(T_2526, T_2420) @[Mux.scala 18:72] 
    node T_2528 = or(T_2527, T_2422) @[Mux.scala 18:72] 
    node T_2529 = or(T_2528, T_2424) @[Mux.scala 18:72] 
    node T_2530 = or(T_2529, T_2426) @[Mux.scala 18:72] 
    node T_2531 = or(T_2530, T_2428) @[Mux.scala 18:72] 
    node T_2532 = or(T_2531, T_2430) @[Mux.scala 18:72] 
    node T_2533 = or(T_2532, T_2432) @[Mux.scala 18:72] 
    node T_2534 = or(T_2533, T_2434) @[Mux.scala 18:72] 
    node T_2535 = or(T_2534, T_2436) @[Mux.scala 18:72] 
    node T_2536 = or(T_2535, T_2438) @[Mux.scala 18:72] 
    node T_2537 = or(T_2536, T_2440) @[Mux.scala 18:72] 
    node T_2538 = or(T_2537, T_2442) @[Mux.scala 18:72] 
    node T_2539 = or(T_2538, T_2444) @[Mux.scala 18:72] 
    node T_2540 = or(T_2539, T_2446) @[Mux.scala 18:72] 
    node T_2541 = or(T_2540, T_2448) @[Mux.scala 18:72] 
    node T_2542 = or(T_2541, T_2450) @[Mux.scala 18:72] 
    node T_2543 = or(T_2542, T_2452) @[Mux.scala 18:72] 
    node T_2544 = or(T_2543, T_2454) @[Mux.scala 18:72] 
    node T_2545 = or(T_2544, T_2456) @[Mux.scala 18:72] 
    node T_2546 = or(T_2545, T_2458) @[Mux.scala 18:72] 
    node T_2547 = or(T_2546, T_2460) @[Mux.scala 18:72] 
    node T_2548 = or(T_2547, T_2462) @[Mux.scala 18:72] 
    node T_2549 = or(T_2548, T_2464) @[Mux.scala 18:72] 
    node T_2550 = or(T_2549, T_2466) @[Mux.scala 18:72] 
    node T_2551 = or(T_2550, T_2468) @[Mux.scala 18:72] 
    node T_2552 = or(T_2551, T_2470) @[Mux.scala 18:72] 
    node T_2553 = or(T_2552, T_2472) @[Mux.scala 18:72] 
    node T_2554 = or(T_2553, T_2474) @[Mux.scala 18:72] 
    node T_2555 = or(T_2554, T_2476) @[Mux.scala 18:72] 
    node T_2556 = or(T_2555, T_2478) @[Mux.scala 18:72] 
    node T_2557 = or(T_2556, T_2480) @[Mux.scala 18:72] 
    node T_2558 = or(T_2557, T_2482) @[Mux.scala 18:72] 
    node T_2559 = or(T_2558, T_2484) @[Mux.scala 18:72] 
    node T_2560 = or(T_2559, T_2486) @[Mux.scala 18:72] 
    node T_2561 = or(T_2560, T_2488) @[Mux.scala 18:72] 
    node T_2562 = or(T_2561, T_2490) @[Mux.scala 18:72] 
    node T_2563 = or(T_2562, T_2492) @[Mux.scala 18:72] 
    node T_2564 = or(T_2563, T_2494) @[Mux.scala 18:72] 
    node T_2565 = or(T_2564, T_2496) @[Mux.scala 18:72] 
    node T_2566 = or(T_2565, T_2498) @[Mux.scala 18:72] 
    node T_2567 = or(T_2566, T_2500) @[Mux.scala 18:72] 
    node T_2568 = or(T_2567, T_2502) @[Mux.scala 18:72] 
    node T_2569 = or(T_2568, T_2504) @[Mux.scala 18:72] 
    node T_2570 = or(T_2569, T_2506) @[Mux.scala 18:72] 
    node T_2571 = or(T_2570, T_2508) @[Mux.scala 18:72] 
    node T_2572 = or(T_2571, T_2510) @[Mux.scala 18:72] 
    wire T_2573 : UInt<11>
    T_2573 is invalid
    T_2573 <= T_2572 @[Mux.scala 18:72] 
    node T_2574 = shl(T_2573, 1) @[btb.scala 234:93] 
    node T_2575 = cat(T_2324, T_2574) @[Cat.scala 20:58] 
    io.resp.bits.target <= T_2575 @[btb.scala 234:23] 
    node T_2576 = bits(hitsVec, 61, 32) @[OneHot.scala 22:18] 
    node T_2577 = bits(hitsVec, 31, 0) @[OneHot.scala 23:18] 
    node T_2579 = neq(T_2576, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_2580 = or(T_2576, T_2577) @[OneHot.scala 24:28] 
    node T_2581 = bits(T_2580, 31, 16) @[OneHot.scala 22:18] 
    node T_2582 = bits(T_2580, 15, 0) @[OneHot.scala 23:18] 
    node T_2584 = neq(T_2581, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_2585 = or(T_2581, T_2582) @[OneHot.scala 24:28] 
    node T_2586 = bits(T_2585, 15, 8) @[OneHot.scala 22:18] 
    node T_2587 = bits(T_2585, 7, 0) @[OneHot.scala 23:18] 
    node T_2589 = neq(T_2586, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_2590 = or(T_2586, T_2587) @[OneHot.scala 24:28] 
    node T_2591 = bits(T_2590, 7, 4) @[OneHot.scala 22:18] 
    node T_2592 = bits(T_2590, 3, 0) @[OneHot.scala 23:18] 
    node T_2594 = neq(T_2591, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_2595 = or(T_2591, T_2592) @[OneHot.scala 24:28] 
    node T_2596 = bits(T_2595, 3, 2) @[OneHot.scala 22:18] 
    node T_2597 = bits(T_2595, 1, 0) @[OneHot.scala 23:18] 
    node T_2599 = neq(T_2596, UInt<1>("h00")) @[OneHot.scala 24:14] 
    node T_2600 = or(T_2596, T_2597) @[OneHot.scala 24:28] 
    node T_2601 = bits(T_2600, 1, 1) @[CircuitMath.scala 21:8] 
    node T_2602 = cat(T_2599, T_2601) @[Cat.scala 20:58] 
    node T_2603 = cat(T_2594, T_2602) @[Cat.scala 20:58] 
    node T_2604 = cat(T_2589, T_2603) @[Cat.scala 20:58] 
    node T_2605 = cat(T_2584, T_2604) @[Cat.scala 20:58] 
    node T_2606 = cat(T_2579, T_2605) @[Cat.scala 20:58] 
    io.resp.bits.entry <= T_2606 @[btb.scala 235:22] 
    node T_2607 = bits(hitsVec, 0, 0) @[Mux.scala 20:36] 
    node T_2608 = bits(hitsVec, 1, 1) @[Mux.scala 20:36] 
    node T_2609 = bits(hitsVec, 2, 2) @[Mux.scala 20:36] 
    node T_2610 = bits(hitsVec, 3, 3) @[Mux.scala 20:36] 
    node T_2611 = bits(hitsVec, 4, 4) @[Mux.scala 20:36] 
    node T_2612 = bits(hitsVec, 5, 5) @[Mux.scala 20:36] 
    node T_2613 = bits(hitsVec, 6, 6) @[Mux.scala 20:36] 
    node T_2614 = bits(hitsVec, 7, 7) @[Mux.scala 20:36] 
    node T_2615 = bits(hitsVec, 8, 8) @[Mux.scala 20:36] 
    node T_2616 = bits(hitsVec, 9, 9) @[Mux.scala 20:36] 
    node T_2617 = bits(hitsVec, 10, 10) @[Mux.scala 20:36] 
    node T_2618 = bits(hitsVec, 11, 11) @[Mux.scala 20:36] 
    node T_2619 = bits(hitsVec, 12, 12) @[Mux.scala 20:36] 
    node T_2620 = bits(hitsVec, 13, 13) @[Mux.scala 20:36] 
    node T_2621 = bits(hitsVec, 14, 14) @[Mux.scala 20:36] 
    node T_2622 = bits(hitsVec, 15, 15) @[Mux.scala 20:36] 
    node T_2623 = bits(hitsVec, 16, 16) @[Mux.scala 20:36] 
    node T_2624 = bits(hitsVec, 17, 17) @[Mux.scala 20:36] 
    node T_2625 = bits(hitsVec, 18, 18) @[Mux.scala 20:36] 
    node T_2626 = bits(hitsVec, 19, 19) @[Mux.scala 20:36] 
    node T_2627 = bits(hitsVec, 20, 20) @[Mux.scala 20:36] 
    node T_2628 = bits(hitsVec, 21, 21) @[Mux.scala 20:36] 
    node T_2629 = bits(hitsVec, 22, 22) @[Mux.scala 20:36] 
    node T_2630 = bits(hitsVec, 23, 23) @[Mux.scala 20:36] 
    node T_2631 = bits(hitsVec, 24, 24) @[Mux.scala 20:36] 
    node T_2632 = bits(hitsVec, 25, 25) @[Mux.scala 20:36] 
    node T_2633 = bits(hitsVec, 26, 26) @[Mux.scala 20:36] 
    node T_2634 = bits(hitsVec, 27, 27) @[Mux.scala 20:36] 
    node T_2635 = bits(hitsVec, 28, 28) @[Mux.scala 20:36] 
    node T_2636 = bits(hitsVec, 29, 29) @[Mux.scala 20:36] 
    node T_2637 = bits(hitsVec, 30, 30) @[Mux.scala 20:36] 
    node T_2638 = bits(hitsVec, 31, 31) @[Mux.scala 20:36] 
    node T_2639 = bits(hitsVec, 32, 32) @[Mux.scala 20:36] 
    node T_2640 = bits(hitsVec, 33, 33) @[Mux.scala 20:36] 
    node T_2641 = bits(hitsVec, 34, 34) @[Mux.scala 20:36] 
    node T_2642 = bits(hitsVec, 35, 35) @[Mux.scala 20:36] 
    node T_2643 = bits(hitsVec, 36, 36) @[Mux.scala 20:36] 
    node T_2644 = bits(hitsVec, 37, 37) @[Mux.scala 20:36] 
    node T_2645 = bits(hitsVec, 38, 38) @[Mux.scala 20:36] 
    node T_2646 = bits(hitsVec, 39, 39) @[Mux.scala 20:36] 
    node T_2647 = bits(hitsVec, 40, 40) @[Mux.scala 20:36] 
    node T_2648 = bits(hitsVec, 41, 41) @[Mux.scala 20:36] 
    node T_2649 = bits(hitsVec, 42, 42) @[Mux.scala 20:36] 
    node T_2650 = bits(hitsVec, 43, 43) @[Mux.scala 20:36] 
    node T_2651 = bits(hitsVec, 44, 44) @[Mux.scala 20:36] 
    node T_2652 = bits(hitsVec, 45, 45) @[Mux.scala 20:36] 
    node T_2653 = bits(hitsVec, 46, 46) @[Mux.scala 20:36] 
    node T_2654 = bits(hitsVec, 47, 47) @[Mux.scala 20:36] 
    node T_2655 = bits(hitsVec, 48, 48) @[Mux.scala 20:36] 
    node T_2656 = bits(hitsVec, 49, 49) @[Mux.scala 20:36] 
    node T_2657 = bits(hitsVec, 50, 50) @[Mux.scala 20:36] 
    node T_2658 = bits(hitsVec, 51, 51) @[Mux.scala 20:36] 
    node T_2659 = bits(hitsVec, 52, 52) @[Mux.scala 20:36] 
    node T_2660 = bits(hitsVec, 53, 53) @[Mux.scala 20:36] 
    node T_2661 = bits(hitsVec, 54, 54) @[Mux.scala 20:36] 
    node T_2662 = bits(hitsVec, 55, 55) @[Mux.scala 20:36] 
    node T_2663 = bits(hitsVec, 56, 56) @[Mux.scala 20:36] 
    node T_2664 = bits(hitsVec, 57, 57) @[Mux.scala 20:36] 
    node T_2665 = bits(hitsVec, 58, 58) @[Mux.scala 20:36] 
    node T_2666 = bits(hitsVec, 59, 59) @[Mux.scala 20:36] 
    node T_2667 = bits(hitsVec, 60, 60) @[Mux.scala 20:36] 
    node T_2668 = bits(hitsVec, 61, 61) @[Mux.scala 20:36] 
    node T_2670 = mux(T_2607, brIdx[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2672 = mux(T_2608, brIdx[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2674 = mux(T_2609, brIdx[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2676 = mux(T_2610, brIdx[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2678 = mux(T_2611, brIdx[4], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2680 = mux(T_2612, brIdx[5], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2682 = mux(T_2613, brIdx[6], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2684 = mux(T_2614, brIdx[7], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2686 = mux(T_2615, brIdx[8], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2688 = mux(T_2616, brIdx[9], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2690 = mux(T_2617, brIdx[10], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2692 = mux(T_2618, brIdx[11], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2694 = mux(T_2619, brIdx[12], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2696 = mux(T_2620, brIdx[13], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2698 = mux(T_2621, brIdx[14], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2700 = mux(T_2622, brIdx[15], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2702 = mux(T_2623, brIdx[16], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2704 = mux(T_2624, brIdx[17], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2706 = mux(T_2625, brIdx[18], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2708 = mux(T_2626, brIdx[19], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2710 = mux(T_2627, brIdx[20], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2712 = mux(T_2628, brIdx[21], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2714 = mux(T_2629, brIdx[22], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2716 = mux(T_2630, brIdx[23], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2718 = mux(T_2631, brIdx[24], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2720 = mux(T_2632, brIdx[25], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2722 = mux(T_2633, brIdx[26], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2724 = mux(T_2634, brIdx[27], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2726 = mux(T_2635, brIdx[28], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2728 = mux(T_2636, brIdx[29], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2730 = mux(T_2637, brIdx[30], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2732 = mux(T_2638, brIdx[31], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2734 = mux(T_2639, brIdx[32], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2736 = mux(T_2640, brIdx[33], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2738 = mux(T_2641, brIdx[34], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2740 = mux(T_2642, brIdx[35], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2742 = mux(T_2643, brIdx[36], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2744 = mux(T_2644, brIdx[37], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2746 = mux(T_2645, brIdx[38], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2748 = mux(T_2646, brIdx[39], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2750 = mux(T_2647, brIdx[40], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2752 = mux(T_2648, brIdx[41], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2754 = mux(T_2649, brIdx[42], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2756 = mux(T_2650, brIdx[43], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2758 = mux(T_2651, brIdx[44], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2760 = mux(T_2652, brIdx[45], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2762 = mux(T_2653, brIdx[46], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2764 = mux(T_2654, brIdx[47], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2766 = mux(T_2655, brIdx[48], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2768 = mux(T_2656, brIdx[49], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2770 = mux(T_2657, brIdx[50], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2772 = mux(T_2658, brIdx[51], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2774 = mux(T_2659, brIdx[52], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2776 = mux(T_2660, brIdx[53], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2778 = mux(T_2661, brIdx[54], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2780 = mux(T_2662, brIdx[55], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2782 = mux(T_2663, brIdx[56], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2784 = mux(T_2664, brIdx[57], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2786 = mux(T_2665, brIdx[58], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2788 = mux(T_2666, brIdx[59], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2790 = mux(T_2667, brIdx[60], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2792 = mux(T_2668, brIdx[61], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2794 = or(T_2670, T_2672) @[Mux.scala 18:72] 
    node T_2795 = or(T_2794, T_2674) @[Mux.scala 18:72] 
    node T_2796 = or(T_2795, T_2676) @[Mux.scala 18:72] 
    node T_2797 = or(T_2796, T_2678) @[Mux.scala 18:72] 
    node T_2798 = or(T_2797, T_2680) @[Mux.scala 18:72] 
    node T_2799 = or(T_2798, T_2682) @[Mux.scala 18:72] 
    node T_2800 = or(T_2799, T_2684) @[Mux.scala 18:72] 
    node T_2801 = or(T_2800, T_2686) @[Mux.scala 18:72] 
    node T_2802 = or(T_2801, T_2688) @[Mux.scala 18:72] 
    node T_2803 = or(T_2802, T_2690) @[Mux.scala 18:72] 
    node T_2804 = or(T_2803, T_2692) @[Mux.scala 18:72] 
    node T_2805 = or(T_2804, T_2694) @[Mux.scala 18:72] 
    node T_2806 = or(T_2805, T_2696) @[Mux.scala 18:72] 
    node T_2807 = or(T_2806, T_2698) @[Mux.scala 18:72] 
    node T_2808 = or(T_2807, T_2700) @[Mux.scala 18:72] 
    node T_2809 = or(T_2808, T_2702) @[Mux.scala 18:72] 
    node T_2810 = or(T_2809, T_2704) @[Mux.scala 18:72] 
    node T_2811 = or(T_2810, T_2706) @[Mux.scala 18:72] 
    node T_2812 = or(T_2811, T_2708) @[Mux.scala 18:72] 
    node T_2813 = or(T_2812, T_2710) @[Mux.scala 18:72] 
    node T_2814 = or(T_2813, T_2712) @[Mux.scala 18:72] 
    node T_2815 = or(T_2814, T_2714) @[Mux.scala 18:72] 
    node T_2816 = or(T_2815, T_2716) @[Mux.scala 18:72] 
    node T_2817 = or(T_2816, T_2718) @[Mux.scala 18:72] 
    node T_2818 = or(T_2817, T_2720) @[Mux.scala 18:72] 
    node T_2819 = or(T_2818, T_2722) @[Mux.scala 18:72] 
    node T_2820 = or(T_2819, T_2724) @[Mux.scala 18:72] 
    node T_2821 = or(T_2820, T_2726) @[Mux.scala 18:72] 
    node T_2822 = or(T_2821, T_2728) @[Mux.scala 18:72] 
    node T_2823 = or(T_2822, T_2730) @[Mux.scala 18:72] 
    node T_2824 = or(T_2823, T_2732) @[Mux.scala 18:72] 
    node T_2825 = or(T_2824, T_2734) @[Mux.scala 18:72] 
    node T_2826 = or(T_2825, T_2736) @[Mux.scala 18:72] 
    node T_2827 = or(T_2826, T_2738) @[Mux.scala 18:72] 
    node T_2828 = or(T_2827, T_2740) @[Mux.scala 18:72] 
    node T_2829 = or(T_2828, T_2742) @[Mux.scala 18:72] 
    node T_2830 = or(T_2829, T_2744) @[Mux.scala 18:72] 
    node T_2831 = or(T_2830, T_2746) @[Mux.scala 18:72] 
    node T_2832 = or(T_2831, T_2748) @[Mux.scala 18:72] 
    node T_2833 = or(T_2832, T_2750) @[Mux.scala 18:72] 
    node T_2834 = or(T_2833, T_2752) @[Mux.scala 18:72] 
    node T_2835 = or(T_2834, T_2754) @[Mux.scala 18:72] 
    node T_2836 = or(T_2835, T_2756) @[Mux.scala 18:72] 
    node T_2837 = or(T_2836, T_2758) @[Mux.scala 18:72] 
    node T_2838 = or(T_2837, T_2760) @[Mux.scala 18:72] 
    node T_2839 = or(T_2838, T_2762) @[Mux.scala 18:72] 
    node T_2840 = or(T_2839, T_2764) @[Mux.scala 18:72] 
    node T_2841 = or(T_2840, T_2766) @[Mux.scala 18:72] 
    node T_2842 = or(T_2841, T_2768) @[Mux.scala 18:72] 
    node T_2843 = or(T_2842, T_2770) @[Mux.scala 18:72] 
    node T_2844 = or(T_2843, T_2772) @[Mux.scala 18:72] 
    node T_2845 = or(T_2844, T_2774) @[Mux.scala 18:72] 
    node T_2846 = or(T_2845, T_2776) @[Mux.scala 18:72] 
    node T_2847 = or(T_2846, T_2778) @[Mux.scala 18:72] 
    node T_2848 = or(T_2847, T_2780) @[Mux.scala 18:72] 
    node T_2849 = or(T_2848, T_2782) @[Mux.scala 18:72] 
    node T_2850 = or(T_2849, T_2784) @[Mux.scala 18:72] 
    node T_2851 = or(T_2850, T_2786) @[Mux.scala 18:72] 
    node T_2852 = or(T_2851, T_2788) @[Mux.scala 18:72] 
    node T_2853 = or(T_2852, T_2790) @[Mux.scala 18:72] 
    node T_2854 = or(T_2853, T_2792) @[Mux.scala 18:72] 
    wire T_2855 : UInt<1>
    T_2855 is invalid
    T_2855 <= T_2854 @[Mux.scala 18:72] 
    io.resp.bits.bridx <= T_2855 @[btb.scala 236:22] 
    node T_2857 = not(io.resp.bits.bridx) @[btb.scala 237:65] 
    node T_2859 = mux(io.resp.bits.taken, T_2857, UInt<1>("h00")) @[btb.scala 237:44] 
    node T_2860 = not(T_2859) @[btb.scala 237:40] 
    node T_2861 = dshl(UInt<1>("h01"), T_2860) @[btb.scala 237:37] 
    node T_2863 = sub(T_2861, UInt<1>("h01")) @[btb.scala 237:95] 
    node T_2864 = tail(T_2863, 1) @[btb.scala 237:95] 
    node T_2866 = cat(T_2864, UInt<1>("h01")) @[Cat.scala 20:58] 
    io.resp.bits.mask <= T_2866 @[btb.scala 237:21] 
    cmem T_2869 : UInt<2>[128] @[btb.scala 82:26] 
    reg T_2871 : UInt<7>, clk
    node T_2872 = and(hitsVec, isJump) @[btb.scala 241:27] 
    node T_2874 = neq(T_2872, UInt<1>("h00")) @[btb.scala 241:37] 
    node T_2876 = eq(T_2874, UInt<1>("h00")) @[btb.scala 241:20] 
    node T_2877 = and(io.req.valid, io.resp.valid) @[btb.scala 242:54] 
    node T_2878 = and(T_2877, T_2876) @[btb.scala 242:71] 
    wire T_2882 : {history : UInt<7>, value : UInt<2>} @[btb.scala 68:19] 
    T_2882 is invalid @[btb.scala 68:19] 
    node T_2885 = bits(io.req.bits.addr, 8, 1) @[btb.scala 69:21] 
    node T_2886 = xor(T_2885, T_2871) @[btb.scala 69:57] 
    infer mport T_2887 = T_2869[T_2886], clk
    T_2882.value <= T_2887 @[btb.scala 70:15] 
    T_2882.history <= T_2871 @[btb.scala 71:17] 
    node T_2888 = bits(T_2882.value, 0, 0) @[btb.scala 72:26] 
    when T_2878 : @[btb.scala 73:19] 
      node T_2889 = bits(T_2871, 6, 1) @[btb.scala 73:50] 
      node T_2890 = cat(T_2888, T_2889) @[Cat.scala 20:58] 
      T_2871 <= T_2890 @[btb.scala 73:29] 
      skip @[btb.scala 73:19] 
    node T_2891 = and(io.bht_update.valid, io.bht_update.bits.prediction.valid) @[btb.scala 244:31] 
    when T_2891 : @[btb.scala 244:50] 
      node T_2892 = bits(io.bht_update.bits.pc, 8, 1) @[btb.scala 77:21] 
      node T_2893 = xor(T_2892, io.bht_update.bits.prediction.bits.bht.history) @[btb.scala 77:57] 
      infer mport T_2894 = T_2869[T_2893], clk
      node T_2895 = bits(io.bht_update.bits.prediction.bits.bht.value, 1, 1) @[btb.scala 78:40] 
      node T_2896 = bits(io.bht_update.bits.prediction.bits.bht.value, 0, 0) @[btb.scala 78:53] 
      node T_2897 = and(T_2895, T_2896) @[btb.scala 78:44] 
      node T_2898 = bits(io.bht_update.bits.prediction.bits.bht.value, 1, 1) @[btb.scala 78:69] 
      node T_2899 = bits(io.bht_update.bits.prediction.bits.bht.value, 0, 0) @[btb.scala 78:82] 
      node T_2900 = or(T_2898, T_2899) @[btb.scala 78:73] 
      node T_2901 = and(T_2900, io.bht_update.bits.taken) @[btb.scala 78:87] 
      node T_2902 = or(T_2897, T_2901) @[btb.scala 78:58] 
      node T_2903 = cat(io.bht_update.bits.taken, T_2902) @[Cat.scala 20:58] 
      T_2894 <= T_2903 @[btb.scala 78:18] 
      when io.bht_update.bits.mispredict : @[btb.scala 79:23] 
        node T_2904 = bits(io.bht_update.bits.prediction.bits.bht.history, 6, 1) @[btb.scala 79:56] 
        node T_2905 = cat(io.bht_update.bits.taken, T_2904) @[Cat.scala 20:58] 
        T_2871 <= T_2905 @[btb.scala 79:33] 
        skip @[btb.scala 79:23] 
      skip @[btb.scala 244:50] 
    node T_2906 = bits(T_2882.value, 0, 0) @[btb.scala 247:21] 
    node T_2908 = eq(T_2906, UInt<1>("h00")) @[btb.scala 247:11] 
    node T_2909 = and(T_2908, T_2876) @[btb.scala 247:25] 
    when T_2909 : @[btb.scala 247:38] 
      io.resp.bits.taken <= UInt<1>("h00") @[btb.scala 247:59] 
      skip @[btb.scala 247:38] 
    io.resp.bits.bht <- T_2882 @[btb.scala 248:22] 
    reg T_2912 : UInt<2>, clk
    reg T_2914 : UInt<1>, clk
    reg T_2921 : UInt[2], clk
    node T_2923 = and(hitsVec, isReturn) @[btb.scala 253:24] 
    node T_2925 = neq(T_2923, UInt<1>("h00")) @[btb.scala 253:36] 
    node T_2927 = eq(T_2912, UInt<1>("h00")) @[btb.scala 44:29] 
    node T_2929 = eq(T_2927, UInt<1>("h00")) @[btb.scala 254:11] 
    node T_2930 = and(T_2929, T_2925) @[btb.scala 254:24] 
    when T_2930 : @[btb.scala 254:35] 
      io.resp.bits.target <= T_2921[T_2914] @[btb.scala 255:27] 
      skip @[btb.scala 254:35] 
    when io.ras_update.valid : @[btb.scala 257:32] 
      when io.ras_update.bits.isCall : @[btb.scala 258:40] 
        node T_2932 = lt(T_2912, UInt<2>("h02")) @[btb.scala 33:17] 
        when T_2932 : @[btb.scala 33:25] 
          node T_2934 = add(T_2912, UInt<1>("h01")) @[btb.scala 33:42] 
          node T_2935 = tail(T_2934, 1) @[btb.scala 33:42] 
          T_2912 <= T_2935 @[btb.scala 33:33] 
          skip @[btb.scala 33:25] 
        node T_2938 = lt(T_2914, UInt<1>("h01")) @[btb.scala 34:49] 
        node T_2939 = or(UInt<1>("h01"), T_2938) @[btb.scala 34:42] 
        node T_2941 = add(T_2914, UInt<1>("h01")) @[btb.scala 34:62] 
        node T_2942 = tail(T_2941, 1) @[btb.scala 34:62] 
        node T_2944 = mux(T_2939, T_2942, UInt<1>("h00")) @[btb.scala 34:22] 
        T_2921[T_2944] <= io.ras_update.bits.returnAddr @[btb.scala 35:20] 
        T_2914 <= T_2944 @[btb.scala 36:9] 
        when T_2925 : @[btb.scala 260:23] 
          io.resp.bits.target <= io.ras_update.bits.returnAddr @[btb.scala 261:31] 
          skip @[btb.scala 260:23] 
        skip @[btb.scala 258:40] 
      node T_2945 = and(io.ras_update.bits.isReturn, io.ras_update.bits.prediction.valid) @[btb.scala 263:47] 
      node T_2947 = eq(io.ras_update.bits.isCall, UInt<1>("h00")) @[btb.scala 258:40] 
      node T_2948 = and(T_2947, T_2945) @[btb.scala 263:87] 
      when T_2948 : @[btb.scala 263:87] 
        node T_2950 = eq(T_2912, UInt<1>("h00")) @[btb.scala 44:29] 
        node T_2952 = eq(T_2950, UInt<1>("h00")) @[btb.scala 39:27] 
        when T_2952 : @[btb.scala 39:37] 
          node T_2954 = sub(T_2912, UInt<1>("h01")) @[btb.scala 40:20] 
          node T_2955 = tail(T_2954, 1) @[btb.scala 40:20] 
          T_2912 <= T_2955 @[btb.scala 40:11] 
          node T_2958 = gt(T_2914, UInt<1>("h00")) @[btb.scala 41:42] 
          node T_2959 = or(UInt<1>("h01"), T_2958) @[btb.scala 41:35] 
          node T_2961 = sub(T_2914, UInt<1>("h01")) @[btb.scala 41:50] 
          node T_2962 = tail(T_2961, 1) @[btb.scala 41:50] 
          node T_2964 = mux(T_2959, T_2962, UInt<1>("h01")) @[btb.scala 41:15] 
          T_2914 <= T_2964 @[btb.scala 41:9] 
          skip @[btb.scala 39:37] 
        skip @[btb.scala 263:87] 
      skip @[btb.scala 257:32] 
    
  module Frontend : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip cpu : {req : {valid : UInt<1>, bits : {pc : UInt<40>, speculative : UInt<1>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {btb : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<40>, data : UInt<32>, mask : UInt<2>, xcpt_if : UInt<1>, replay : UInt<1>}}, btb_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, target : UInt<39>, taken : UInt<1>, isValid : UInt<1>, isJump : UInt<1>, isReturn : UInt<1>, br_pc : UInt<39>}}, bht_update : {valid : UInt<1>, bits : {prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}, pc : UInt<39>, taken : UInt<1>, mispredict : UInt<1>}}, ras_update : {valid : UInt<1>, bits : {isCall : UInt<1>, isReturn : UInt<1>, returnAddr : UInt<39>, prediction : {valid : UInt<1>, bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}}}}, flush_icache : UInt<1>, flush_tlb : UInt<1>, flip npc : UInt<40>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst icache of ICache @[frontend.scala 40:22] 
    icache.io is invalid
    icache.clk <= clk
    icache.reset <= reset
    inst tlb of TLB @[frontend.scala 41:19] 
    tlb.io is invalid
    tlb.clk <= clk
    tlb.reset <= reset
    reg s1_pc_ : UInt<40>, clk
    node T_1483 = not(s1_pc_) @[frontend.scala 44:17] 
    node T_1485 = or(T_1483, UInt<1>("h01")) @[frontend.scala 44:25] 
    node s1_pc = not(T_1485) @[frontend.scala 44:15] 
    reg s1_speculative : UInt<1>, clk
    reg s1_same_block : UInt<1>, clk
    reg s2_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h01")))
    reg s2_pc : UInt, clk with : (reset => (reset, UInt<13>("h01000")))
    reg s2_btb_resp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_btb_resp_bits : {taken : UInt<1>, mask : UInt<2>, bridx : UInt<1>, target : UInt<39>, entry : UInt<6>, bht : {history : UInt<7>, value : UInt<2>}}, clk
    reg s2_xcpt_if : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_speculative : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg s2_cacheable : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1511 = not(s1_pc) @[frontend.scala 55:16] 
    node T_1513 = or(T_1511, UInt<2>("h03")) @[frontend.scala 55:23] 
    node T_1514 = not(T_1513) @[frontend.scala 55:14] 
    node T_1516 = add(T_1514, UInt<3>("h04")) @[frontend.scala 55:55] 
    node ntpc = tail(T_1516, 1) @[frontend.scala 55:55] 
    node T_1518 = and(ntpc, UInt<4>("h08")) @[frontend.scala 56:31] 
    node T_1520 = and(s1_pc, UInt<4>("h08")) @[frontend.scala 56:54] 
    node ntpc_same_block = eq(T_1518, T_1520) @[frontend.scala 56:43] 
    wire predicted_npc : UInt
    predicted_npc is invalid
    predicted_npc <= ntpc
    wire predicted_taken : UInt<1>
    predicted_taken is invalid
    predicted_taken <= UInt<1>("h00")
    node T_1523 = eq(icache.io.resp.valid, UInt<1>("h00")) @[frontend.scala 59:28] 
    node icmiss = and(s2_valid, T_1523) @[frontend.scala 59:25] 
    node npc = mux(icmiss, s2_pc, predicted_npc) @[frontend.scala 60:16] 
    node T_1525 = eq(predicted_taken, UInt<1>("h00")) @[frontend.scala 61:23] 
    node T_1527 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 61:43] 
    node T_1528 = and(T_1525, T_1527) @[frontend.scala 61:40] 
    node T_1530 = eq(io.cpu.req.valid, UInt<1>("h00")) @[frontend.scala 61:54] 
    node T_1531 = and(T_1528, T_1530) @[frontend.scala 61:51] 
    node s0_same_block = and(T_1531, ntpc_same_block) @[frontend.scala 61:72] 
    node T_1533 = eq(io.cpu.resp.ready, UInt<1>("h00")) @[frontend.scala 63:36] 
    node stall = and(io.cpu.resp.valid, T_1533) @[frontend.scala 63:33] 
    node T_1535 = eq(stall, UInt<1>("h00")) @[frontend.scala 64:9] 
    when T_1535 : @[frontend.scala 64:17] 
      node T_1537 = eq(tlb.io.resp.miss, UInt<1>("h00")) @[frontend.scala 65:39] 
      node T_1538 = and(s0_same_block, T_1537) @[frontend.scala 65:36] 
      s1_same_block <= T_1538 @[frontend.scala 65:19] 
      s1_pc_ <= io.cpu.npc @[frontend.scala 66:12] 
      node T_1540 = eq(s2_speculative, UInt<1>("h00")) @[frontend.scala 70:58] 
      node T_1541 = and(s2_valid, T_1540) @[frontend.scala 70:55] 
      node T_1542 = or(s1_speculative, T_1541) @[frontend.scala 70:43] 
      node T_1543 = or(T_1542, predicted_taken) @[frontend.scala 70:74] 
      node T_1544 = mux(icmiss, s2_speculative, T_1543) @[frontend.scala 72:26] 
      s1_speculative <= T_1544 @[frontend.scala 72:20] 
      node T_1546 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 73:17] 
      s2_valid <= T_1546 @[frontend.scala 73:14] 
      node T_1548 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 74:11] 
      when T_1548 : @[frontend.scala 74:20] 
        s2_pc <= s1_pc @[frontend.scala 75:13] 
        s2_speculative <= s1_speculative @[frontend.scala 76:22] 
        s2_cacheable <= tlb.io.resp.cacheable @[frontend.scala 77:20] 
        s2_xcpt_if <= tlb.io.resp.xcpt_if @[frontend.scala 78:18] 
        skip @[frontend.scala 74:20] 
      skip @[frontend.scala 64:17] 
    when io.cpu.req.valid : @[frontend.scala 81:27] 
      s1_same_block <= UInt<1>("h00") @[frontend.scala 82:19] 
      s1_pc_ <= io.cpu.npc @[frontend.scala 83:12] 
      s1_speculative <= io.cpu.req.bits.speculative @[frontend.scala 84:20] 
      s2_valid <= UInt<1>("h00") @[frontend.scala 85:14] 
      skip @[frontend.scala 81:27] 
    inst BTB_1 of BTB @[frontend.scala 89:21] 
    BTB_1.io is invalid
    BTB_1.clk <= clk
    BTB_1.reset <= reset
    BTB_1.io.req.valid <= UInt<1>("h00") @[frontend.scala 90:22] 
    BTB_1.io.req.bits.addr <= s1_pc_ @[frontend.scala 91:26] 
    BTB_1.io.btb_update <- io.cpu.btb_update @[frontend.scala 92:23] 
    BTB_1.io.bht_update <- io.cpu.bht_update @[frontend.scala 93:23] 
    BTB_1.io.ras_update <- io.cpu.ras_update @[frontend.scala 94:23] 
    node T_1553 = eq(stall, UInt<1>("h00")) @[frontend.scala 95:11] 
    node T_1555 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 95:21] 
    node T_1556 = and(T_1553, T_1555) @[frontend.scala 95:18] 
    when T_1556 : @[frontend.scala 95:30] 
      BTB_1.io.req.valid <= UInt<1>("h01") @[frontend.scala 96:24] 
      s2_btb_resp_valid <= BTB_1.io.resp.valid @[frontend.scala 97:25] 
      s2_btb_resp_bits <- BTB_1.io.resp.bits @[frontend.scala 98:24] 
      skip @[frontend.scala 95:30] 
    node T_1558 = and(BTB_1.io.resp.valid, BTB_1.io.resp.bits.taken) @[frontend.scala 100:29] 
    when T_1558 : @[frontend.scala 100:56] 
      node T_1559 = bits(BTB_1.io.resp.bits.target, 38, 38) @[util.scala 21:38] 
      node T_1560 = cat(T_1559, BTB_1.io.resp.bits.target) @[Cat.scala 20:58] 
      predicted_npc <= T_1560 @[frontend.scala 101:21] 
      predicted_taken <= UInt<1>("h01") @[frontend.scala 102:23] 
      skip @[frontend.scala 100:56] 
    io.ptw <- tlb.io.ptw @[frontend.scala 106:10] 
    node T_1563 = eq(stall, UInt<1>("h00")) @[frontend.scala 107:23] 
    node T_1565 = eq(icmiss, UInt<1>("h00")) @[frontend.scala 107:33] 
    node T_1566 = and(T_1563, T_1565) @[frontend.scala 107:30] 
    tlb.io.req.valid <= T_1566 @[frontend.scala 107:20] 
    node T_1567 = shr(s1_pc, 12) @[frontend.scala 108:32] 
    tlb.io.req.bits.vpn <= T_1567 @[frontend.scala 108:23] 
    tlb.io.req.bits.passthrough <= UInt<1>("h00") @[frontend.scala 109:31] 
    tlb.io.req.bits.instruction <= UInt<1>("h01") @[frontend.scala 110:31] 
    tlb.io.req.bits.store <= UInt<1>("h00") @[frontend.scala 111:25] 
    io.mem <- icache.io.mem @[frontend.scala 113:10] 
    node T_1572 = eq(stall, UInt<1>("h00")) @[frontend.scala 114:26] 
    node T_1574 = eq(s0_same_block, UInt<1>("h00")) @[frontend.scala 114:36] 
    node T_1575 = and(T_1572, T_1574) @[frontend.scala 114:33] 
    icache.io.req.valid <= T_1575 @[frontend.scala 114:23] 
    icache.io.req.bits.addr <= io.cpu.npc @[frontend.scala 115:27] 
    icache.io.invalidate <= io.cpu.flush_icache @[frontend.scala 116:24] 
    icache.io.s1_ppn <= tlb.io.resp.ppn @[frontend.scala 117:20] 
    node T_1576 = or(io.cpu.req.valid, tlb.io.resp.miss) @[frontend.scala 118:41] 
    node T_1577 = or(T_1576, tlb.io.resp.xcpt_if) @[frontend.scala 118:61] 
    node T_1578 = or(T_1577, icmiss) @[frontend.scala 118:84] 
    node T_1579 = or(T_1578, io.cpu.flush_tlb) @[frontend.scala 118:94] 
    icache.io.s1_kill <= T_1579 @[frontend.scala 118:21] 
    node T_1581 = eq(s2_cacheable, UInt<1>("h00")) @[frontend.scala 119:42] 
    node T_1582 = and(s2_speculative, T_1581) @[frontend.scala 119:39] 
    icache.io.s2_kill <= T_1582 @[frontend.scala 119:21] 
    node T_1584 = eq(stall, UInt<1>("h00")) @[frontend.scala 120:27] 
    node T_1586 = eq(s1_same_block, UInt<1>("h00")) @[frontend.scala 120:37] 
    node T_1587 = and(T_1584, T_1586) @[frontend.scala 120:34] 
    icache.io.resp.ready <= T_1587 @[frontend.scala 120:24] 
    node T_1588 = or(icache.io.resp.valid, icache.io.s2_kill) @[frontend.scala 122:58] 
    node T_1589 = or(T_1588, s2_xcpt_if) @[frontend.scala 122:79] 
    node T_1590 = and(s2_valid, T_1589) @[frontend.scala 122:33] 
    io.cpu.resp.valid <= T_1590 @[frontend.scala 122:21] 
    io.cpu.resp.bits.pc <= s2_pc @[frontend.scala 123:23] 
    node T_1591 = mux(io.cpu.req.valid, io.cpu.req.bits.pc, npc) @[frontend.scala 124:20] 
    io.cpu.npc <= T_1591 @[frontend.scala 124:14] 
    node T_1592 = bits(s2_pc, 2, 2) @[util.scala 25:13] 
    node T_1593 = shl(T_1592, 5) @[frontend.scala 127:133] 
    node T_1594 = dshr(icache.io.resp.bits.datablock, T_1593) @[frontend.scala 127:58] 
    io.cpu.resp.bits.data <= T_1594 @[frontend.scala 127:25] 
    node T_1596 = bits(s2_pc, 1, 1) @[util.scala 25:13] 
    node T_1597 = dshl(UInt<2>("h03"), T_1596) @[frontend.scala 128:54] 
    io.cpu.resp.bits.mask <= T_1597 @[frontend.scala 128:25] 
    io.cpu.resp.bits.xcpt_if <= s2_xcpt_if @[frontend.scala 129:28] 
    node T_1599 = eq(icache.io.resp.valid, UInt<1>("h00")) @[frontend.scala 130:51] 
    node T_1600 = and(icache.io.s2_kill, T_1599) @[frontend.scala 130:48] 
    node T_1602 = eq(s2_xcpt_if, UInt<1>("h00")) @[frontend.scala 130:76] 
    node T_1603 = and(T_1600, T_1602) @[frontend.scala 130:73] 
    io.cpu.resp.bits.replay <= T_1603 @[frontend.scala 130:27] 
    io.cpu.resp.bits.btb.valid <= s2_btb_resp_valid @[frontend.scala 131:30] 
    io.cpu.resp.bits.btb.bits <- s2_btb_resp_bits @[frontend.scala 132:29] 
    
  module FinishQueue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {manager_xact_id : UInt<4>, manager_id : UInt<1>}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_221 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_221) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_222 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_222
    node T_223 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_223
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_224 = ram[UInt<1>("h00")], clk
      T_224 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_249 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_249 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_251 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_251 @[Decoupled.scala 138:16] 
    node T_253 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_253 @[Decoupled.scala 139:16] 
    infer mport T_254 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_254 @[Decoupled.scala 140:15] 
    node T_277 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_277, 1) @[Decoupled.scala 155:32] 
    node T_278 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_279 = cat(T_278, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_279 @[Decoupled.scala 157:14] 
    
  module MetadataArray : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip read : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}, flip write : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}, resp : {tag : UInt<20>, coh : {state : UInt<2>}}[4]}
    
    io is invalid
    wire T_44 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_44 is invalid @[Metadata.scala 158:20] 
    T_44.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire rstVal : {tag : UInt<20>, coh : {state : UInt<2>}} @[nbdcache.scala 135:20] 
    rstVal is invalid @[nbdcache.scala 135:20] 
    rstVal.tag <= UInt<1>("h00") @[nbdcache.scala 136:14] 
    rstVal.coh <- T_44 @[nbdcache.scala 137:14] 
    reg rst_cnt : UInt<7>, clk with : (reset => (reset, UInt<7>("h00")))
    node rst = lt(rst_cnt, UInt<7>("h040")) @[Cache.scala 152:21] 
    node waddr = mux(rst, rst_cnt, io.write.bits.idx) @[Cache.scala 153:18] 
    node T_2067 = mux(rst, rstVal, io.write.bits.data) @[Cache.scala 154:18] 
    node wdata = cat(T_2067.tag, T_2067.coh.state) @[Cache.scala 154:52] 
    node T_2152 = or(rst, UInt<1>("h00")) @[Cache.scala 155:23] 
    node T_2154 = asSInt(io.write.bits.way_en) @[Cache.scala 155:75] 
    node T_2155 = mux(T_2152, asSInt(UInt<1>("h01")), T_2154) @[Cache.scala 155:18] 
    node wmask_0 = bits(T_2155, 0, 0) @[Cache.scala 155:83] 
    node wmask_1 = bits(T_2155, 1, 1) @[Cache.scala 155:83] 
    node wmask_2 = bits(T_2155, 2, 2) @[Cache.scala 155:83] 
    node wmask_3 = bits(T_2155, 3, 3) @[Cache.scala 155:83] 
    node T_2157 = or(rst, UInt<1>("h00")) @[Cache.scala 156:23] 
    node T_2159 = asSInt(io.read.bits.way_en) @[Cache.scala 156:74] 
    node T_2160 = mux(T_2157, asSInt(UInt<1>("h01")), T_2159) @[Cache.scala 156:18] 
    node rmask_0 = bits(T_2160, 0, 0) @[Cache.scala 156:82] 
    node rmask_1 = bits(T_2160, 1, 1) @[Cache.scala 156:82] 
    node rmask_2 = bits(T_2160, 2, 2) @[Cache.scala 156:82] 
    node rmask_3 = bits(T_2160, 3, 3) @[Cache.scala 156:82] 
    when rst : @[Cache.scala 157:14] 
      node T_2162 = add(rst_cnt, UInt<1>("h01")) @[Cache.scala 157:34] 
      node T_2163 = tail(T_2162, 1) @[Cache.scala 157:34] 
      rst_cnt <= T_2163 @[Cache.scala 157:24] 
      skip @[Cache.scala 157:14] 
    smem T_2172 : UInt<22>[4][64] @[Cache.scala 171:25] 
    node T_2173 = or(rst, io.write.valid) @[Cache.scala 172:15] 
    when T_2173 : @[Cache.scala 172:34] 
      wire T_2179 : UInt<22>[4] @[Cache.scala 173:43] 
      T_2179 is invalid @[Cache.scala 173:43] 
      T_2179[0] <= wdata @[Cache.scala 173:43] 
      T_2179[1] <= wdata @[Cache.scala 173:43] 
      T_2179[2] <= wdata @[Cache.scala 173:43] 
      T_2179[3] <= wdata @[Cache.scala 173:43] 
      write mport T_2183 = T_2172[waddr], clk
      when wmask_0 :
        T_2183[0] <= T_2179[0]
        skip
      when wmask_1 :
        T_2183[1] <= T_2179[1]
        skip
      when wmask_2 :
        T_2183[2] <= T_2179[2]
        skip
      when wmask_3 :
        T_2183[3] <= T_2179[3]
        skip
      skip @[Cache.scala 172:34] 
    wire T_2186 : UInt
    T_2186 is invalid
    when io.read.valid :
      T_2186 <= io.read.bits.idx
      skip
    read mport T_2189 = T_2172[T_2186], clk
    wire T_2275 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 175:81] 
    T_2275 is invalid @[Cache.scala 175:81] 
    node T_2359 = bits(T_2189[0], 1, 0) @[Cache.scala 175:81] 
    T_2275.coh.state <= T_2359 @[Cache.scala 175:81] 
    node T_2360 = bits(T_2189[0], 21, 2) @[Cache.scala 175:81] 
    T_2275.tag <= T_2360 @[Cache.scala 175:81] 
    wire T_2445 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 175:81] 
    T_2445 is invalid @[Cache.scala 175:81] 
    node T_2529 = bits(T_2189[1], 1, 0) @[Cache.scala 175:81] 
    T_2445.coh.state <= T_2529 @[Cache.scala 175:81] 
    node T_2530 = bits(T_2189[1], 21, 2) @[Cache.scala 175:81] 
    T_2445.tag <= T_2530 @[Cache.scala 175:81] 
    wire T_2615 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 175:81] 
    T_2615 is invalid @[Cache.scala 175:81] 
    node T_2699 = bits(T_2189[2], 1, 0) @[Cache.scala 175:81] 
    T_2615.coh.state <= T_2699 @[Cache.scala 175:81] 
    node T_2700 = bits(T_2189[2], 21, 2) @[Cache.scala 175:81] 
    T_2615.tag <= T_2700 @[Cache.scala 175:81] 
    wire T_2785 : {tag : UInt<20>, coh : {state : UInt<2>}} @[Cache.scala 175:81] 
    T_2785 is invalid @[Cache.scala 175:81] 
    node T_2869 = bits(T_2189[3], 1, 0) @[Cache.scala 175:81] 
    T_2785.coh.state <= T_2869 @[Cache.scala 175:81] 
    node T_2870 = bits(T_2189[3], 21, 2) @[Cache.scala 175:81] 
    T_2785.tag <= T_2870 @[Cache.scala 175:81] 
    io.resp[0] <- T_2275 @[Cache.scala 175:13] 
    io.resp[1] <- T_2445 @[Cache.scala 175:13] 
    io.resp[2] <- T_2615 @[Cache.scala 175:13] 
    io.resp[3] <- T_2785 @[Cache.scala 175:13] 
    node T_2872 = eq(rst, UInt<1>("h00")) @[Cache.scala 178:20] 
    node T_2874 = eq(io.write.valid, UInt<1>("h00")) @[Cache.scala 178:28] 
    node T_2875 = and(T_2872, T_2874) @[Cache.scala 178:25] 
    io.read.ready <= T_2875 @[Cache.scala 178:17] 
    node T_2877 = eq(rst, UInt<1>("h00")) @[Cache.scala 179:21] 
    io.write.ready <= T_2877 @[Cache.scala 179:18] 
    
  module Arbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}[3], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h02") @[Arbiter.scala 106:13] 
    io.out.bits <- io.in[2].bits @[Arbiter.scala 107:15] 
    when io.in[1].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    when io.in[0].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    node T_637 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72] 
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node grant_2 = eq(T_637, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_640 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19] 
    io.in[0].ready <= T_640 @[Arbiter.scala 117:14] 
    node T_641 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[1].ready <= T_641 @[Arbiter.scala 117:14] 
    node T_642 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[2].ready <= T_642 @[Arbiter.scala 117:14] 
    node T_644 = eq(grant_2, UInt<1>("h00")) @[Arbiter.scala 118:19] 
    node T_645 = or(T_644, io.in[2].valid) @[Arbiter.scala 118:31] 
    io.out.valid <= T_645 @[Arbiter.scala 118:16] 
    
  module Arbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}[3], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {idx : UInt<6>, way_en : UInt<4>, data : {tag : UInt<20>, coh : {state : UInt<2>}}}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h02") @[Arbiter.scala 106:13] 
    io.out.bits <- io.in[2].bits @[Arbiter.scala 107:15] 
    when io.in[1].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    when io.in[0].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    node T_2821 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72] 
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node grant_2 = eq(T_2821, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_2824 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19] 
    io.in[0].ready <= T_2824 @[Arbiter.scala 117:14] 
    node T_2825 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[1].ready <= T_2825 @[Arbiter.scala 117:14] 
    node T_2826 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[2].ready <= T_2826 @[Arbiter.scala 117:14] 
    node T_2828 = eq(grant_2, UInt<1>("h00")) @[Arbiter.scala 118:19] 
    node T_2829 = or(T_2828, io.in[2].valid) @[Arbiter.scala 118:31] 
    io.out.valid <= T_2829 @[Arbiter.scala 118:16] 
    
  module DCacheDataArray : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip req : {valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}, resp : UInt<64>[4]}
    
    io is invalid
    node addr = shr(io.req.bits.addr, 3) @[dcache.scala 29:31] 
    smem T_406 : UInt<8>[8][512] @[dcache.scala 31:23] 
    node T_408 = bits(io.req.bits.way_en, 0, 0) @[dcache.scala 32:72] 
    node T_409 = or(UInt<1>("h00"), T_408) @[dcache.scala 32:51] 
    node T_410 = and(io.req.valid, T_409) @[dcache.scala 32:30] 
    node T_411 = and(T_410, io.req.bits.write) @[dcache.scala 33:17] 
    when T_411 : @[dcache.scala 33:39] 
      node T_412 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63] 
      node T_413 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63] 
      node T_414 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63] 
      node T_415 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63] 
      node T_416 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63] 
      node T_417 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63] 
      node T_418 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63] 
      node T_419 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63] 
      wire T_425 : UInt<8>[8] @[dcache.scala 34:40] 
      T_425 is invalid @[dcache.scala 34:40] 
      T_425[0] <= T_412 @[dcache.scala 34:40] 
      T_425[1] <= T_413 @[dcache.scala 34:40] 
      T_425[2] <= T_414 @[dcache.scala 34:40] 
      T_425[3] <= T_415 @[dcache.scala 34:40] 
      T_425[4] <= T_416 @[dcache.scala 34:40] 
      T_425[5] <= T_417 @[dcache.scala 34:40] 
      T_425[6] <= T_418 @[dcache.scala 34:40] 
      T_425[7] <= T_419 @[dcache.scala 34:40] 
      node T_427 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49] 
      node T_428 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49] 
      node T_429 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49] 
      node T_430 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49] 
      node T_431 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49] 
      node T_432 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49] 
      node T_433 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49] 
      node T_434 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49] 
      write mport T_437 = T_406[addr], clk
      when T_427 :
        T_437[0] <= T_425[0]
        skip
      when T_428 :
        T_437[1] <= T_425[1]
        skip
      when T_429 :
        T_437[2] <= T_425[2]
        skip
      when T_430 :
        T_437[3] <= T_425[3]
        skip
      when T_431 :
        T_437[4] <= T_425[4]
        skip
      when T_432 :
        T_437[5] <= T_425[5]
        skip
      when T_433 :
        T_437[6] <= T_425[6]
        skip
      when T_434 :
        T_437[7] <= T_425[7]
        skip
      skip @[dcache.scala 33:39] 
    node T_440 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45] 
    node T_441 = and(T_410, T_440) @[dcache.scala 37:42] 
    wire T_443 : UInt
    T_443 is invalid
    when T_441 :
      T_443 <= addr
      skip
    read mport T_446 = T_406[T_443], clk
    node T_448 = cat(T_446[1], T_446[0]) @[dcache.scala 37:65] 
    node T_449 = cat(T_446[3], T_446[2]) @[dcache.scala 37:65] 
    node T_450 = cat(T_449, T_448) @[dcache.scala 37:65] 
    node T_451 = cat(T_446[5], T_446[4]) @[dcache.scala 37:65] 
    node T_452 = cat(T_446[7], T_446[6]) @[dcache.scala 37:65] 
    node T_453 = cat(T_452, T_451) @[dcache.scala 37:65] 
    node T_454 = cat(T_453, T_450) @[dcache.scala 37:65] 
    io.resp[0] <= T_454 @[dcache.scala 37:16] 
    smem T_463 : UInt<8>[8][512] @[dcache.scala 31:23] 
    node T_465 = bits(io.req.bits.way_en, 1, 1) @[dcache.scala 32:72] 
    node T_466 = or(UInt<1>("h00"), T_465) @[dcache.scala 32:51] 
    node T_467 = and(io.req.valid, T_466) @[dcache.scala 32:30] 
    node T_468 = and(T_467, io.req.bits.write) @[dcache.scala 33:17] 
    when T_468 : @[dcache.scala 33:39] 
      node T_469 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63] 
      node T_470 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63] 
      node T_471 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63] 
      node T_472 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63] 
      node T_473 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63] 
      node T_474 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63] 
      node T_475 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63] 
      node T_476 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63] 
      wire T_482 : UInt<8>[8] @[dcache.scala 34:40] 
      T_482 is invalid @[dcache.scala 34:40] 
      T_482[0] <= T_469 @[dcache.scala 34:40] 
      T_482[1] <= T_470 @[dcache.scala 34:40] 
      T_482[2] <= T_471 @[dcache.scala 34:40] 
      T_482[3] <= T_472 @[dcache.scala 34:40] 
      T_482[4] <= T_473 @[dcache.scala 34:40] 
      T_482[5] <= T_474 @[dcache.scala 34:40] 
      T_482[6] <= T_475 @[dcache.scala 34:40] 
      T_482[7] <= T_476 @[dcache.scala 34:40] 
      node T_484 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49] 
      node T_485 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49] 
      node T_486 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49] 
      node T_487 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49] 
      node T_488 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49] 
      node T_489 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49] 
      node T_490 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49] 
      node T_491 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49] 
      write mport T_494 = T_463[addr], clk
      when T_484 :
        T_494[0] <= T_482[0]
        skip
      when T_485 :
        T_494[1] <= T_482[1]
        skip
      when T_486 :
        T_494[2] <= T_482[2]
        skip
      when T_487 :
        T_494[3] <= T_482[3]
        skip
      when T_488 :
        T_494[4] <= T_482[4]
        skip
      when T_489 :
        T_494[5] <= T_482[5]
        skip
      when T_490 :
        T_494[6] <= T_482[6]
        skip
      when T_491 :
        T_494[7] <= T_482[7]
        skip
      skip @[dcache.scala 33:39] 
    node T_497 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45] 
    node T_498 = and(T_467, T_497) @[dcache.scala 37:42] 
    wire T_500 : UInt
    T_500 is invalid
    when T_498 :
      T_500 <= addr
      skip
    read mport T_503 = T_463[T_500], clk
    node T_505 = cat(T_503[1], T_503[0]) @[dcache.scala 37:65] 
    node T_506 = cat(T_503[3], T_503[2]) @[dcache.scala 37:65] 
    node T_507 = cat(T_506, T_505) @[dcache.scala 37:65] 
    node T_508 = cat(T_503[5], T_503[4]) @[dcache.scala 37:65] 
    node T_509 = cat(T_503[7], T_503[6]) @[dcache.scala 37:65] 
    node T_510 = cat(T_509, T_508) @[dcache.scala 37:65] 
    node T_511 = cat(T_510, T_507) @[dcache.scala 37:65] 
    io.resp[1] <= T_511 @[dcache.scala 37:16] 
    smem T_520 : UInt<8>[8][512] @[dcache.scala 31:23] 
    node T_522 = bits(io.req.bits.way_en, 2, 2) @[dcache.scala 32:72] 
    node T_523 = or(UInt<1>("h00"), T_522) @[dcache.scala 32:51] 
    node T_524 = and(io.req.valid, T_523) @[dcache.scala 32:30] 
    node T_525 = and(T_524, io.req.bits.write) @[dcache.scala 33:17] 
    when T_525 : @[dcache.scala 33:39] 
      node T_526 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63] 
      node T_527 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63] 
      node T_528 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63] 
      node T_529 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63] 
      node T_530 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63] 
      node T_531 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63] 
      node T_532 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63] 
      node T_533 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63] 
      wire T_539 : UInt<8>[8] @[dcache.scala 34:40] 
      T_539 is invalid @[dcache.scala 34:40] 
      T_539[0] <= T_526 @[dcache.scala 34:40] 
      T_539[1] <= T_527 @[dcache.scala 34:40] 
      T_539[2] <= T_528 @[dcache.scala 34:40] 
      T_539[3] <= T_529 @[dcache.scala 34:40] 
      T_539[4] <= T_530 @[dcache.scala 34:40] 
      T_539[5] <= T_531 @[dcache.scala 34:40] 
      T_539[6] <= T_532 @[dcache.scala 34:40] 
      T_539[7] <= T_533 @[dcache.scala 34:40] 
      node T_541 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49] 
      node T_542 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49] 
      node T_543 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49] 
      node T_544 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49] 
      node T_545 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49] 
      node T_546 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49] 
      node T_547 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49] 
      node T_548 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49] 
      write mport T_551 = T_520[addr], clk
      when T_541 :
        T_551[0] <= T_539[0]
        skip
      when T_542 :
        T_551[1] <= T_539[1]
        skip
      when T_543 :
        T_551[2] <= T_539[2]
        skip
      when T_544 :
        T_551[3] <= T_539[3]
        skip
      when T_545 :
        T_551[4] <= T_539[4]
        skip
      when T_546 :
        T_551[5] <= T_539[5]
        skip
      when T_547 :
        T_551[6] <= T_539[6]
        skip
      when T_548 :
        T_551[7] <= T_539[7]
        skip
      skip @[dcache.scala 33:39] 
    node T_554 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45] 
    node T_555 = and(T_524, T_554) @[dcache.scala 37:42] 
    wire T_557 : UInt
    T_557 is invalid
    when T_555 :
      T_557 <= addr
      skip
    read mport T_560 = T_520[T_557], clk
    node T_562 = cat(T_560[1], T_560[0]) @[dcache.scala 37:65] 
    node T_563 = cat(T_560[3], T_560[2]) @[dcache.scala 37:65] 
    node T_564 = cat(T_563, T_562) @[dcache.scala 37:65] 
    node T_565 = cat(T_560[5], T_560[4]) @[dcache.scala 37:65] 
    node T_566 = cat(T_560[7], T_560[6]) @[dcache.scala 37:65] 
    node T_567 = cat(T_566, T_565) @[dcache.scala 37:65] 
    node T_568 = cat(T_567, T_564) @[dcache.scala 37:65] 
    io.resp[2] <= T_568 @[dcache.scala 37:16] 
    smem T_577 : UInt<8>[8][512] @[dcache.scala 31:23] 
    node T_579 = bits(io.req.bits.way_en, 3, 3) @[dcache.scala 32:72] 
    node T_580 = or(UInt<1>("h00"), T_579) @[dcache.scala 32:51] 
    node T_581 = and(io.req.valid, T_580) @[dcache.scala 32:30] 
    node T_582 = and(T_581, io.req.bits.write) @[dcache.scala 33:17] 
    when T_582 : @[dcache.scala 33:39] 
      node T_583 = bits(io.req.bits.wdata, 7, 0) @[dcache.scala 34:63] 
      node T_584 = bits(io.req.bits.wdata, 15, 8) @[dcache.scala 34:63] 
      node T_585 = bits(io.req.bits.wdata, 23, 16) @[dcache.scala 34:63] 
      node T_586 = bits(io.req.bits.wdata, 31, 24) @[dcache.scala 34:63] 
      node T_587 = bits(io.req.bits.wdata, 39, 32) @[dcache.scala 34:63] 
      node T_588 = bits(io.req.bits.wdata, 47, 40) @[dcache.scala 34:63] 
      node T_589 = bits(io.req.bits.wdata, 55, 48) @[dcache.scala 34:63] 
      node T_590 = bits(io.req.bits.wdata, 63, 56) @[dcache.scala 34:63] 
      wire T_596 : UInt<8>[8] @[dcache.scala 34:40] 
      T_596 is invalid @[dcache.scala 34:40] 
      T_596[0] <= T_583 @[dcache.scala 34:40] 
      T_596[1] <= T_584 @[dcache.scala 34:40] 
      T_596[2] <= T_585 @[dcache.scala 34:40] 
      T_596[3] <= T_586 @[dcache.scala 34:40] 
      T_596[4] <= T_587 @[dcache.scala 34:40] 
      T_596[5] <= T_588 @[dcache.scala 34:40] 
      T_596[6] <= T_589 @[dcache.scala 34:40] 
      T_596[7] <= T_590 @[dcache.scala 34:40] 
      node T_598 = bits(io.req.bits.wmask, 0, 0) @[dcache.scala 35:49] 
      node T_599 = bits(io.req.bits.wmask, 1, 1) @[dcache.scala 35:49] 
      node T_600 = bits(io.req.bits.wmask, 2, 2) @[dcache.scala 35:49] 
      node T_601 = bits(io.req.bits.wmask, 3, 3) @[dcache.scala 35:49] 
      node T_602 = bits(io.req.bits.wmask, 4, 4) @[dcache.scala 35:49] 
      node T_603 = bits(io.req.bits.wmask, 5, 5) @[dcache.scala 35:49] 
      node T_604 = bits(io.req.bits.wmask, 6, 6) @[dcache.scala 35:49] 
      node T_605 = bits(io.req.bits.wmask, 7, 7) @[dcache.scala 35:49] 
      write mport T_608 = T_577[addr], clk
      when T_598 :
        T_608[0] <= T_596[0]
        skip
      when T_599 :
        T_608[1] <= T_596[1]
        skip
      when T_600 :
        T_608[2] <= T_596[2]
        skip
      when T_601 :
        T_608[3] <= T_596[3]
        skip
      when T_602 :
        T_608[4] <= T_596[4]
        skip
      when T_603 :
        T_608[5] <= T_596[5]
        skip
      when T_604 :
        T_608[6] <= T_596[6]
        skip
      when T_605 :
        T_608[7] <= T_596[7]
        skip
      skip @[dcache.scala 33:39] 
    node T_611 = eq(io.req.bits.write, UInt<1>("h00")) @[dcache.scala 37:45] 
    node T_612 = and(T_581, T_611) @[dcache.scala 37:42] 
    wire T_614 : UInt
    T_614 is invalid
    when T_612 :
      T_614 <= addr
      skip
    read mport T_617 = T_577[T_614], clk
    node T_619 = cat(T_617[1], T_617[0]) @[dcache.scala 37:65] 
    node T_620 = cat(T_617[3], T_617[2]) @[dcache.scala 37:65] 
    node T_621 = cat(T_620, T_619) @[dcache.scala 37:65] 
    node T_622 = cat(T_617[5], T_617[4]) @[dcache.scala 37:65] 
    node T_623 = cat(T_617[7], T_617[6]) @[dcache.scala 37:65] 
    node T_624 = cat(T_623, T_622) @[dcache.scala 37:65] 
    node T_625 = cat(T_624, T_621) @[dcache.scala 37:65] 
    io.resp[3] <= T_625 @[dcache.scala 37:16] 
    
  module Arbiter_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<12>, write : UInt<1>, wdata : UInt<64>, wmask : UInt<8>, way_en : UInt<4>}}, chosen : UInt<2>}
    
    io is invalid
    io.chosen <= UInt<2>("h03") @[Arbiter.scala 106:13] 
    io.out.bits <- io.in[3].bits @[Arbiter.scala 107:15] 
    when io.in[2].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<2>("h02") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[2].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    when io.in[1].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[1].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    when io.in[0].valid : @[Arbiter.scala 109:27] 
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 110:17] 
      io.out.bits <- io.in[0].bits @[Arbiter.scala 111:19] 
      skip @[Arbiter.scala 109:27] 
    node T_2024 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_2025 = or(T_2024, io.in[2].valid) @[Arbiter.scala 23:72] 
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node grant_2 = eq(T_2024, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node grant_3 = eq(T_2025, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_2029 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 117:19] 
    io.in[0].ready <= T_2029 @[Arbiter.scala 117:14] 
    node T_2030 = and(grant_1, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[1].ready <= T_2030 @[Arbiter.scala 117:14] 
    node T_2031 = and(grant_2, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[2].ready <= T_2031 @[Arbiter.scala 117:14] 
    node T_2032 = and(grant_3, io.out.ready) @[Arbiter.scala 117:19] 
    io.in[3].ready <= T_2032 @[Arbiter.scala 117:14] 
    node T_2034 = eq(grant_3, UInt<1>("h00")) @[Arbiter.scala 118:19] 
    node T_2035 = or(T_2034, io.in[3].valid) @[Arbiter.scala 118:31] 
    io.out.valid <= T_2035 @[Arbiter.scala 118:16] 
    
  module AMOALU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<6>, flip cmd : UInt<5>, flip typ : UInt<3>, flip lhs : UInt<64>, flip rhs : UInt<64>, out : UInt<64>}
    
    io is invalid
    node T_6 = bits(io.typ, 1, 0) @[AmoAlu.scala 11:17] 
    node T_8 = eq(T_6, UInt<2>("h02")) @[AmoAlu.scala 27:19] 
    node T_9 = bits(io.rhs, 31, 0) @[AmoAlu.scala 27:66] 
    node T_10 = cat(T_9, T_9) @[Cat.scala 20:58] 
    node rhs = mux(T_8, T_10, io.rhs) @[AmoAlu.scala 27:13] 
    node T_11 = eq(io.cmd, UInt<5>("h0c")) @[AmoAlu.scala 75:22] 
    node T_12 = eq(io.cmd, UInt<5>("h0d")) @[AmoAlu.scala 75:45] 
    node sgned = or(T_11, T_12) @[AmoAlu.scala 75:35] 
    node T_13 = eq(io.cmd, UInt<5>("h0d")) @[AmoAlu.scala 76:20] 
    node T_14 = eq(io.cmd, UInt<5>("h0f")) @[AmoAlu.scala 76:43] 
    node max = or(T_13, T_14) @[AmoAlu.scala 76:33] 
    node T_15 = eq(io.cmd, UInt<5>("h0c")) @[AmoAlu.scala 77:20] 
    node T_16 = eq(io.cmd, UInt<5>("h0e")) @[AmoAlu.scala 77:43] 
    node min = or(T_15, T_16) @[AmoAlu.scala 77:33] 
    node T_17 = eq(io.typ, UInt<3>("h02")) @[AmoAlu.scala 78:21] 
    node T_18 = eq(io.typ, UInt<3>("h06")) @[AmoAlu.scala 78:40] 
    node T_19 = or(T_17, T_18) @[AmoAlu.scala 78:30] 
    node T_20 = eq(io.typ, UInt<3>("h00")) @[AmoAlu.scala 79:23] 
    node T_21 = or(T_19, T_20) @[AmoAlu.scala 78:50] 
    node T_22 = eq(io.typ, UInt<3>("h04")) @[AmoAlu.scala 79:42] 
    node word = or(T_21, T_22) @[AmoAlu.scala 79:32] 
    node T_24 = not(UInt<64>("h00")) @[AmoAlu.scala 84:18] 
    node T_25 = bits(io.addr, 2, 2) @[AmoAlu.scala 84:40] 
    node T_26 = shl(T_25, 31) @[AmoAlu.scala 84:44] 
    node T_27 = xor(T_24, T_26) @[AmoAlu.scala 84:30] 
    node T_28 = and(io.lhs, T_27) @[AmoAlu.scala 85:15] 
    node T_29 = and(rhs, T_27) @[AmoAlu.scala 85:30] 
    node T_30 = add(T_28, T_29) @[AmoAlu.scala 85:23] 
    node adder_out = tail(T_30, 1) @[AmoAlu.scala 85:23] 
    node T_31 = bits(io.addr, 2, 2) @[AmoAlu.scala 91:41] 
    node T_33 = eq(T_31, UInt<1>("h00")) @[AmoAlu.scala 91:33] 
    node T_34 = and(word, T_33) @[AmoAlu.scala 91:30] 
    node T_35 = bits(io.lhs, 31, 31) @[AmoAlu.scala 91:52] 
    node T_36 = bits(io.lhs, 63, 63) @[AmoAlu.scala 91:64] 
    node T_37 = mux(T_34, T_35, T_36) @[AmoAlu.scala 91:24] 
    node T_38 = bits(io.addr, 2, 2) @[AmoAlu.scala 92:41] 
    node T_40 = eq(T_38, UInt<1>("h00")) @[AmoAlu.scala 92:33] 
    node T_41 = and(word, T_40) @[AmoAlu.scala 92:30] 
    node T_42 = bits(rhs, 31, 31) @[AmoAlu.scala 92:49] 
    node T_43 = bits(rhs, 63, 63) @[AmoAlu.scala 92:58] 
    node T_44 = mux(T_41, T_42, T_43) @[AmoAlu.scala 92:24] 
    node T_45 = bits(io.lhs, 31, 0) @[AmoAlu.scala 93:25] 
    node T_46 = bits(rhs, 31, 0) @[AmoAlu.scala 93:37] 
    node T_47 = lt(T_45, T_46) @[AmoAlu.scala 93:32] 
    node T_48 = bits(io.lhs, 63, 32) @[AmoAlu.scala 94:25] 
    node T_49 = bits(rhs, 63, 32) @[AmoAlu.scala 94:38] 
    node T_50 = lt(T_48, T_49) @[AmoAlu.scala 94:33] 
    node T_51 = bits(io.lhs, 63, 32) @[AmoAlu.scala 95:25] 
    node T_52 = bits(rhs, 63, 32) @[AmoAlu.scala 95:40] 
    node T_53 = eq(T_51, T_52) @[AmoAlu.scala 95:33] 
    node T_54 = bits(io.addr, 2, 2) @[AmoAlu.scala 96:37] 
    node T_55 = mux(T_54, T_50, T_47) @[AmoAlu.scala 96:29] 
    node T_56 = and(T_53, T_47) @[AmoAlu.scala 96:72] 
    node T_57 = or(T_50, T_56) @[AmoAlu.scala 96:63] 
    node T_58 = mux(word, T_55, T_57) @[AmoAlu.scala 96:19] 
    node T_59 = eq(T_37, T_44) @[AmoAlu.scala 97:19] 
    node T_60 = mux(sgned, T_37, T_44) @[AmoAlu.scala 97:39] 
    node less = mux(T_59, T_58, T_60) @[AmoAlu.scala 97:10] 
    node T_61 = eq(io.cmd, UInt<5>("h08")) @[AmoAlu.scala 100:24] 
    node T_62 = eq(io.cmd, UInt<5>("h0b")) @[AmoAlu.scala 101:24] 
    node T_63 = and(io.lhs, rhs) @[AmoAlu.scala 101:45] 
    node T_64 = eq(io.cmd, UInt<5>("h0a")) @[AmoAlu.scala 102:24] 
    node T_65 = or(io.lhs, rhs) @[AmoAlu.scala 102:45] 
    node T_66 = eq(io.cmd, UInt<5>("h09")) @[AmoAlu.scala 103:24] 
    node T_67 = xor(io.lhs, rhs) @[AmoAlu.scala 103:45] 
    node T_68 = mux(less, min, max) @[AmoAlu.scala 104:20] 
    node T_70 = eq(T_6, UInt<1>("h00")) @[AmoAlu.scala 27:19] 
    node T_71 = bits(io.rhs, 7, 0) @[AmoAlu.scala 27:66] 
    node T_72 = cat(T_71, T_71) @[Cat.scala 20:58] 
    node T_73 = cat(T_72, T_72) @[Cat.scala 20:58] 
    node T_74 = cat(T_73, T_73) @[Cat.scala 20:58] 
    node T_76 = eq(T_6, UInt<1>("h01")) @[AmoAlu.scala 27:19] 
    node T_77 = bits(io.rhs, 15, 0) @[AmoAlu.scala 27:66] 
    node T_78 = cat(T_77, T_77) @[Cat.scala 20:58] 
    node T_79 = cat(T_78, T_78) @[Cat.scala 20:58] 
    node T_81 = eq(T_6, UInt<2>("h02")) @[AmoAlu.scala 27:19] 
    node T_82 = bits(io.rhs, 31, 0) @[AmoAlu.scala 27:66] 
    node T_83 = cat(T_82, T_82) @[Cat.scala 20:58] 
    node T_84 = mux(T_81, T_83, io.rhs) @[AmoAlu.scala 27:13] 
    node T_85 = mux(T_76, T_79, T_84) @[AmoAlu.scala 27:13] 
    node T_86 = mux(T_70, T_74, T_85) @[AmoAlu.scala 27:13] 
    node T_87 = mux(T_68, io.lhs, T_86) @[AmoAlu.scala 104:16] 
    node T_88 = mux(T_66, T_67, T_87) @[AmoAlu.scala 103:16] 
    node T_89 = mux(T_64, T_65, T_88) @[AmoAlu.scala 102:16] 
    node T_90 = mux(T_62, T_63, T_89) @[AmoAlu.scala 101:16] 
    node out = mux(T_61, adder_out, T_90) @[AmoAlu.scala 100:16] 
    node T_92 = bits(io.addr, 0, 0) @[AmoAlu.scala 18:27] 
    node T_94 = mux(T_92, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_96 = geq(T_6, UInt<1>("h01")) @[AmoAlu.scala 18:57] 
    node T_99 = mux(T_96, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_100 = or(T_94, T_99) @[AmoAlu.scala 18:46] 
    node T_101 = bits(io.addr, 0, 0) @[AmoAlu.scala 19:27] 
    node T_103 = mux(T_101, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22] 
    node T_104 = cat(T_100, T_103) @[Cat.scala 20:58] 
    node T_105 = bits(io.addr, 1, 1) @[AmoAlu.scala 18:27] 
    node T_107 = mux(T_105, T_104, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_109 = geq(T_6, UInt<2>("h02")) @[AmoAlu.scala 18:57] 
    node T_112 = mux(T_109, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_113 = or(T_107, T_112) @[AmoAlu.scala 18:46] 
    node T_114 = bits(io.addr, 1, 1) @[AmoAlu.scala 19:27] 
    node T_116 = mux(T_114, UInt<1>("h00"), T_104) @[AmoAlu.scala 19:22] 
    node T_117 = cat(T_113, T_116) @[Cat.scala 20:58] 
    node T_118 = bits(io.addr, 2, 2) @[AmoAlu.scala 18:27] 
    node T_120 = mux(T_118, T_117, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_122 = geq(T_6, UInt<2>("h03")) @[AmoAlu.scala 18:57] 
    node T_125 = mux(T_122, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_126 = or(T_120, T_125) @[AmoAlu.scala 18:46] 
    node T_127 = bits(io.addr, 2, 2) @[AmoAlu.scala 19:27] 
    node T_129 = mux(T_127, UInt<1>("h00"), T_117) @[AmoAlu.scala 19:22] 
    node T_130 = cat(T_126, T_129) @[Cat.scala 20:58] 
    node T_131 = bits(T_130, 0, 0) @[Bitwise.scala 13:51] 
    node T_132 = bits(T_130, 1, 1) @[Bitwise.scala 13:51] 
    node T_133 = bits(T_130, 2, 2) @[Bitwise.scala 13:51] 
    node T_134 = bits(T_130, 3, 3) @[Bitwise.scala 13:51] 
    node T_135 = bits(T_130, 4, 4) @[Bitwise.scala 13:51] 
    node T_136 = bits(T_130, 5, 5) @[Bitwise.scala 13:51] 
    node T_137 = bits(T_130, 6, 6) @[Bitwise.scala 13:51] 
    node T_138 = bits(T_130, 7, 7) @[Bitwise.scala 13:51] 
    node T_139 = bits(T_131, 0, 0) @[Bitwise.scala 33:15] 
    node T_142 = mux(T_139, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_143 = bits(T_132, 0, 0) @[Bitwise.scala 33:15] 
    node T_146 = mux(T_143, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_147 = bits(T_133, 0, 0) @[Bitwise.scala 33:15] 
    node T_150 = mux(T_147, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_151 = bits(T_134, 0, 0) @[Bitwise.scala 33:15] 
    node T_154 = mux(T_151, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_155 = bits(T_135, 0, 0) @[Bitwise.scala 33:15] 
    node T_158 = mux(T_155, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_159 = bits(T_136, 0, 0) @[Bitwise.scala 33:15] 
    node T_162 = mux(T_159, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_163 = bits(T_137, 0, 0) @[Bitwise.scala 33:15] 
    node T_166 = mux(T_163, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_167 = bits(T_138, 0, 0) @[Bitwise.scala 33:15] 
    node T_170 = mux(T_167, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_171 = cat(T_146, T_142) @[Cat.scala 20:58] 
    node T_172 = cat(T_154, T_150) @[Cat.scala 20:58] 
    node T_173 = cat(T_172, T_171) @[Cat.scala 20:58] 
    node T_174 = cat(T_162, T_158) @[Cat.scala 20:58] 
    node T_175 = cat(T_170, T_166) @[Cat.scala 20:58] 
    node T_176 = cat(T_175, T_174) @[Cat.scala 20:58] 
    node wmask = cat(T_176, T_173) @[Cat.scala 20:58] 
    node T_177 = and(wmask, out) @[AmoAlu.scala 108:19] 
    node T_178 = not(wmask) @[AmoAlu.scala 108:27] 
    node T_179 = and(T_178, io.lhs) @[AmoAlu.scala 108:34] 
    node T_180 = or(T_177, T_179) @[AmoAlu.scala 108:25] 
    io.out <= T_180 @[AmoAlu.scala 108:10] 
    
  module DCache : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip cpu : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, ptw : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}, mem : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst fq of FinishQueue @[dcache.scala 48:18] 
    fq.io is invalid
    fq.clk <= clk
    fq.reset <= reset
    wire T_1924 : UInt<1> @[Cache.scala 59:29] 
    T_1924 is invalid @[Cache.scala 59:29] 
    T_1924 <= UInt<1>("h00") @[Cache.scala 60:11] 
    reg T_1927 : UInt<16>, clk with : (reset => (reset, UInt<16>("h01")))
    when T_1924 : @[LFSR.scala 19:22] 
      node T_1928 = bits(T_1927, 0, 0) @[LFSR.scala 19:40] 
      node T_1929 = bits(T_1927, 2, 2) @[LFSR.scala 19:48] 
      node T_1930 = xor(T_1928, T_1929) @[LFSR.scala 19:43] 
      node T_1931 = bits(T_1927, 3, 3) @[LFSR.scala 19:56] 
      node T_1932 = xor(T_1930, T_1931) @[LFSR.scala 19:51] 
      node T_1933 = bits(T_1927, 5, 5) @[LFSR.scala 19:64] 
      node T_1934 = xor(T_1932, T_1933) @[LFSR.scala 19:59] 
      node T_1935 = bits(T_1927, 15, 1) @[LFSR.scala 19:73] 
      node T_1936 = cat(T_1934, T_1935) @[Cat.scala 20:58] 
      T_1927 <= T_1936 @[LFSR.scala 19:29] 
      skip @[LFSR.scala 19:22] 
    inst meta of MetadataArray @[dcache.scala 57:20] 
    meta.io is invalid
    meta.clk <= clk
    meta.reset <= reset
    inst metaReadArb of Arbiter @[dcache.scala 58:27] 
    metaReadArb.io is invalid
    metaReadArb.clk <= clk
    metaReadArb.reset <= reset
    inst metaWriteArb of Arbiter_1 @[dcache.scala 59:28] 
    metaWriteArb.io is invalid
    metaWriteArb.clk <= clk
    metaWriteArb.reset <= reset
    meta.io.read <- metaReadArb.io.out @[dcache.scala 60:16] 
    meta.io.write <- metaWriteArb.io.out @[dcache.scala 61:17] 
    inst data of DCacheDataArray @[dcache.scala 64:20] 
    data.io is invalid
    data.clk <= clk
    data.reset <= reset
    inst dataArb of Arbiter_2 @[dcache.scala 65:23] 
    dataArb.io is invalid
    dataArb.clk <= clk
    dataArb.reset <= reset
    data.io.req <- dataArb.io.out @[dcache.scala 66:15] 
    dataArb.io.out.ready <= UInt<1>("h01") @[dcache.scala 67:24] 
    node T_2218 = and(io.cpu.req.ready, io.cpu.req.valid) @[Decoupled.scala 16:42] 
    reg s1_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s1_valid <= T_2218
    node T_2220 = and(io.mem.probe.ready, io.mem.probe.valid) @[Decoupled.scala 16:42] 
    reg s1_probe : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s1_probe <= T_2220
    node T_2222 = and(io.mem.probe.ready, io.mem.probe.valid) @[Decoupled.scala 16:42] 
    reg probe_bits : {addr_block : UInt<26>, p_type : UInt<2>}, clk
    when T_2222 : @[Reg.scala 29:19] 
      probe_bits <- io.mem.probe.bits @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire s1_nack : UInt<1>
    s1_nack is invalid
    s1_nack <= UInt<1>("h00")
    node T_2247 = eq(io.cpu.s1_kill, UInt<1>("h00")) @[dcache.scala 73:37] 
    node s1_valid_masked = and(s1_valid, T_2247) @[dcache.scala 73:34] 
    node T_2249 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 74:48] 
    node s1_valid_not_nacked = and(s1_valid_masked, T_2249) @[dcache.scala 74:45] 
    reg s1_req : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}, clk
    when metaReadArb.io.out.valid : @[dcache.scala 76:35] 
      s1_req <- io.cpu.req.bits @[dcache.scala 77:12] 
      node T_2316 = shr(io.cpu.req.bits.addr, 12) @[dcache.scala 78:45] 
      node T_2317 = bits(io.cpu.req.bits.addr, 5, 0) @[dcache.scala 78:108] 
      node T_2318 = cat(T_2316, metaReadArb.io.out.bits.idx) @[Cat.scala 20:58] 
      node T_2319 = cat(T_2318, T_2317) @[Cat.scala 20:58] 
      s1_req.addr <= T_2319 @[dcache.scala 78:17] 
      skip @[dcache.scala 76:35] 
    node T_2320 = eq(s1_req.cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_2321 = eq(s1_req.cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_2322 = or(T_2320, T_2321) @[Consts.scala 46:41] 
    node T_2323 = eq(s1_req.cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_2324 = or(T_2322, T_2323) @[Consts.scala 46:58] 
    node T_2325 = bits(s1_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2326 = eq(s1_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2327 = or(T_2325, T_2326) @[Consts.scala 44:33] 
    node s1_read = or(T_2324, T_2327) @[Consts.scala 46:75] 
    node T_2328 = eq(s1_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2329 = eq(s1_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2330 = or(T_2328, T_2329) @[Consts.scala 47:42] 
    node T_2331 = bits(s1_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2332 = eq(s1_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2333 = or(T_2331, T_2332) @[Consts.scala 44:33] 
    node s1_write = or(T_2330, T_2333) @[Consts.scala 47:59] 
    node s1_readwrite = or(s1_read, s1_write) @[dcache.scala 82:30] 
    reg s1_flush_valid : UInt<1>, clk
    reg grant_wait : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg release_ack_wait : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg release_state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    wire pstore1_valid : UInt<1> @[dcache.scala 89:27] 
    pstore1_valid is invalid @[dcache.scala 89:27] 
    reg pstore2_valid : UInt<1>, clk
    node T_2340 = eq(release_state, UInt<3>("h02")) @[dcache.scala 91:35] 
    node T_2341 = eq(release_state, UInt<3>("h03")) @[dcache.scala 91:78] 
    node inWriteback = or(T_2340, T_2341) @[dcache.scala 91:61] 
    wire releaseWay : UInt @[dcache.scala 92:24] 
    releaseWay is invalid @[dcache.scala 92:24] 
    node T_2343 = eq(release_state, UInt<3>("h00")) @[dcache.scala 93:38] 
    node T_2345 = eq(grant_wait, UInt<1>("h00")) @[dcache.scala 93:54] 
    node T_2346 = and(T_2343, T_2345) @[dcache.scala 93:51] 
    node T_2348 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 93:69] 
    node T_2349 = and(T_2346, T_2348) @[dcache.scala 93:66] 
    io.cpu.req.ready <= T_2349 @[dcache.scala 93:20] 
    node T_2350 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_2351 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_2352 = or(T_2350, T_2351) @[Consts.scala 46:41] 
    node T_2353 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_2354 = or(T_2352, T_2353) @[Consts.scala 46:58] 
    node T_2355 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2356 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2357 = or(T_2355, T_2356) @[Consts.scala 44:33] 
    node T_2358 = or(T_2354, T_2357) @[Consts.scala 46:75] 
    node T_2359 = and(io.cpu.req.valid, T_2358) @[dcache.scala 96:46] 
    dataArb.io.in[3].valid <= T_2359 @[dcache.scala 96:26] 
    dataArb.io.in[3].bits.write <= UInt<1>("h00") @[dcache.scala 97:31] 
    dataArb.io.in[3].bits.addr <= io.cpu.req.bits.addr @[dcache.scala 98:30] 
    node T_2362 = not(UInt<4>("h00")) @[dcache.scala 99:35] 
    dataArb.io.in[3].bits.way_en <= T_2362 @[dcache.scala 99:32] 
    node T_2364 = eq(dataArb.io.in[3].ready, UInt<1>("h00")) @[dcache.scala 100:9] 
    node T_2365 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_2366 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_2367 = or(T_2365, T_2366) @[Consts.scala 46:41] 
    node T_2368 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_2369 = or(T_2367, T_2368) @[Consts.scala 46:58] 
    node T_2370 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2371 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2372 = or(T_2370, T_2371) @[Consts.scala 44:33] 
    node T_2373 = or(T_2369, T_2372) @[Consts.scala 46:75] 
    node T_2374 = and(T_2364, T_2373) @[dcache.scala 100:33] 
    when T_2374 : @[dcache.scala 100:65] 
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 100:84] 
      skip @[dcache.scala 100:65] 
    metaReadArb.io.in[2].valid <= io.cpu.req.valid @[dcache.scala 101:30] 
    node T_2376 = bits(io.cpu.req.bits.addr, 11, 6) @[dcache.scala 102:56] 
    metaReadArb.io.in[2].bits.idx <= T_2376 @[dcache.scala 102:33] 
    node T_2378 = not(UInt<4>("h00")) @[dcache.scala 103:39] 
    metaReadArb.io.in[2].bits.way_en <= T_2378 @[dcache.scala 103:36] 
    node T_2380 = eq(metaReadArb.io.in[2].ready, UInt<1>("h00")) @[dcache.scala 104:9] 
    when T_2380 : @[dcache.scala 104:38] 
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 104:57] 
      skip @[dcache.scala 104:38] 
    inst tlb of TLB @[dcache.scala 107:19] 
    tlb.io is invalid
    tlb.clk <= clk
    tlb.reset <= reset
    io.ptw <- tlb.io.ptw @[dcache.scala 108:10] 
    node T_2382 = and(s1_valid_masked, s1_readwrite) @[dcache.scala 109:39] 
    tlb.io.req.valid <= T_2382 @[dcache.scala 109:20] 
    tlb.io.req.bits.passthrough <= s1_req.phys @[dcache.scala 110:31] 
    node T_2383 = shr(s1_req.addr, 12) @[dcache.scala 111:38] 
    tlb.io.req.bits.vpn <= T_2383 @[dcache.scala 111:23] 
    tlb.io.req.bits.instruction <= UInt<1>("h00") @[dcache.scala 112:31] 
    tlb.io.req.bits.store <= s1_write @[dcache.scala 113:25] 
    node T_2386 = eq(tlb.io.req.ready, UInt<1>("h00")) @[dcache.scala 114:9] 
    node T_2388 = eq(io.cpu.req.bits.phys, UInt<1>("h00")) @[dcache.scala 114:30] 
    node T_2389 = and(T_2386, T_2388) @[dcache.scala 114:27] 
    when T_2389 : @[dcache.scala 114:53] 
      io.cpu.req.ready <= UInt<1>("h00") @[dcache.scala 114:72] 
      skip @[dcache.scala 114:53] 
    node T_2391 = and(s1_valid, s1_readwrite) @[dcache.scala 115:18] 
    node T_2392 = and(T_2391, tlb.io.resp.miss) @[dcache.scala 115:34] 
    when T_2392 : @[dcache.scala 115:55] 
      s1_nack <= UInt<1>("h01") @[dcache.scala 115:65] 
      skip @[dcache.scala 115:55] 
    node T_2394 = bits(s1_req.addr, 11, 0) @[dcache.scala 117:50] 
    node s1_paddr = cat(tlb.io.resp.ppn, T_2394) @[Cat.scala 20:58] 
    node T_2395 = shr(probe_bits.addr_block, 6) @[dcache.scala 118:52] 
    node T_2396 = bits(s1_paddr, 31, 12) @[dcache.scala 118:72] 
    node s1_tag = mux(s1_probe, T_2395, T_2396) @[dcache.scala 118:19] 
    node T_2397 = neq(meta.io.resp[0].coh.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2398 = eq(meta.io.resp[0].tag, s1_tag) @[dcache.scala 119:67] 
    node T_2399 = and(T_2397, T_2398) @[dcache.scala 119:58] 
    node T_2400 = neq(meta.io.resp[1].coh.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2401 = eq(meta.io.resp[1].tag, s1_tag) @[dcache.scala 119:67] 
    node T_2402 = and(T_2400, T_2401) @[dcache.scala 119:58] 
    node T_2403 = neq(meta.io.resp[2].coh.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2404 = eq(meta.io.resp[2].tag, s1_tag) @[dcache.scala 119:67] 
    node T_2405 = and(T_2403, T_2404) @[dcache.scala 119:58] 
    node T_2406 = neq(meta.io.resp[3].coh.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2407 = eq(meta.io.resp[3].tag, s1_tag) @[dcache.scala 119:67] 
    node T_2408 = and(T_2406, T_2407) @[dcache.scala 119:58] 
    node T_2409 = cat(T_2402, T_2399) @[Cat.scala 20:58] 
    node T_2410 = cat(T_2408, T_2405) @[Cat.scala 20:58] 
    node s1_hit_way = cat(T_2410, T_2409) @[Cat.scala 20:58] 
    wire T_2434 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2434 is invalid @[Metadata.scala 158:20] 
    T_2434.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    node T_2456 = eq(meta.io.resp[0].tag, s1_tag) @[dcache.scala 121:37] 
    node T_2458 = mux(T_2456, meta.io.resp[0].coh.state, UInt<1>("h00")) @[dcache.scala 121:30] 
    node T_2459 = eq(meta.io.resp[1].tag, s1_tag) @[dcache.scala 121:37] 
    node T_2461 = mux(T_2459, meta.io.resp[1].coh.state, UInt<1>("h00")) @[dcache.scala 121:30] 
    node T_2462 = eq(meta.io.resp[2].tag, s1_tag) @[dcache.scala 121:37] 
    node T_2464 = mux(T_2462, meta.io.resp[2].coh.state, UInt<1>("h00")) @[dcache.scala 121:30] 
    node T_2465 = eq(meta.io.resp[3].tag, s1_tag) @[dcache.scala 121:37] 
    node T_2467 = mux(T_2465, meta.io.resp[3].coh.state, UInt<1>("h00")) @[dcache.scala 121:30] 
    node T_2468 = or(T_2458, T_2461) @[dcache.scala 122:15] 
    node T_2469 = or(T_2468, T_2464) @[dcache.scala 122:15] 
    node T_2470 = or(T_2469, T_2467) @[dcache.scala 122:15] 
    wire s1_hit_state : {state : UInt<2>} @[dcache.scala 120:53] 
    s1_hit_state is invalid @[dcache.scala 120:53] 
    node T_2514 = bits(T_2470, 1, 0) @[dcache.scala 120:53] 
    s1_hit_state.state <= T_2514 @[dcache.scala 120:53] 
    node s1_data_way = mux(inWriteback, releaseWay, s1_hit_way) @[dcache.scala 123:24] 
    node T_2515 = bits(s1_data_way, 0, 0) @[Mux.scala 20:36] 
    node T_2516 = bits(s1_data_way, 1, 1) @[Mux.scala 20:36] 
    node T_2517 = bits(s1_data_way, 2, 2) @[Mux.scala 20:36] 
    node T_2518 = bits(s1_data_way, 3, 3) @[Mux.scala 20:36] 
    node T_2520 = mux(T_2515, data.io.resp[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2522 = mux(T_2516, data.io.resp[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2524 = mux(T_2517, data.io.resp[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2526 = mux(T_2518, data.io.resp[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2528 = or(T_2520, T_2522) @[Mux.scala 18:72] 
    node T_2529 = or(T_2528, T_2524) @[Mux.scala 18:72] 
    node T_2530 = or(T_2529, T_2526) @[Mux.scala 18:72] 
    wire s1_data : UInt<64>
    s1_data is invalid
    s1_data <= T_2530 @[Mux.scala 18:72] 
    node T_2531 = bits(T_1927, 1, 0) @[Cache.scala 63:44] 
    wire s1_victim_way : UInt
    s1_victim_way is invalid
    s1_victim_way <= T_2531
    reg s2_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s2_valid <= s1_valid_masked
    reg s2_probe : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    s2_probe <= s1_probe
    node T_2534 = or(s1_probe, s2_probe) @[dcache.scala 129:34] 
    node T_2535 = neq(release_state, UInt<3>("h00")) @[dcache.scala 129:63] 
    node releaseInFlight = or(T_2534, T_2535) @[dcache.scala 129:46] 
    node T_2537 = eq(s1_nack, UInt<1>("h00")) @[dcache.scala 130:48] 
    reg T_2538 : UInt<1>, clk
    T_2538 <= T_2537
    node s2_valid_masked = and(s2_valid, T_2538) @[dcache.scala 130:34] 
    reg s2_req : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}, clk
    reg s2_uncached : UInt<1>, clk
    node T_2606 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 133:29] 
    when T_2606 : @[dcache.scala 133:48] 
      s2_req <- s1_req @[dcache.scala 134:12] 
      s2_req.addr <= s1_paddr @[dcache.scala 135:17] 
      node T_2608 = eq(tlb.io.resp.cacheable, UInt<1>("h00")) @[dcache.scala 136:20] 
      s2_uncached <= T_2608 @[dcache.scala 136:17] 
      skip @[dcache.scala 133:48] 
    node T_2609 = eq(s2_req.cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_2610 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_2611 = or(T_2609, T_2610) @[Consts.scala 46:41] 
    node T_2612 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_2613 = or(T_2611, T_2612) @[Consts.scala 46:58] 
    node T_2614 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2615 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2616 = or(T_2614, T_2615) @[Consts.scala 44:33] 
    node s2_read = or(T_2613, T_2616) @[Consts.scala 46:75] 
    node T_2617 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2618 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2619 = or(T_2617, T_2618) @[Consts.scala 47:42] 
    node T_2620 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2621 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2622 = or(T_2620, T_2621) @[Consts.scala 44:33] 
    node s2_write = or(T_2619, T_2622) @[Consts.scala 47:59] 
    node s2_readwrite = or(s2_read, s2_write) @[dcache.scala 140:30] 
    reg s2_flush_valid : UInt<1>, clk
    s2_flush_valid <= s1_flush_valid
    node T_2623 = or(s1_valid, inWriteback) @[dcache.scala 142:45] 
    reg s2_data : UInt<64>, clk
    when T_2623 : @[Reg.scala 29:19] 
      s2_data <= s1_data @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg s2_probe_way : UInt<4>, clk
    when s1_probe : @[Reg.scala 29:19] 
      s2_probe_way <= s1_hit_way @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg s2_probe_state : {state : UInt<2>}, clk
    when s1_probe : @[Reg.scala 29:19] 
      s2_probe_state <- s1_hit_state @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg s2_hit_way : UInt<4>, clk
    when s1_valid_not_nacked : @[Reg.scala 29:19] 
      s2_hit_way <= s1_hit_way @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg s2_hit_state : {state : UInt<2>}, clk
    when s1_valid_not_nacked : @[Reg.scala 29:19] 
      s2_hit_state <- s1_hit_state @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_2666 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2667 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2668 = or(T_2666, T_2667) @[Consts.scala 47:42] 
    node T_2669 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2670 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2671 = or(T_2669, T_2670) @[Consts.scala 44:33] 
    node T_2672 = or(T_2668, T_2671) @[Consts.scala 47:59] 
    node T_2673 = eq(s2_req.cmd, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2674 = or(T_2672, T_2673) @[Consts.scala 48:47] 
    node T_2675 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2676 = or(T_2674, T_2675) @[Consts.scala 48:64] 
    node T_2677 = eq(s2_hit_state.state, UInt<2>("h01")) @[Util.scala 7:47] 
    node T_2678 = eq(s2_hit_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2679 = or(T_2677, T_2678) @[Util.scala 7:62] 
    node T_2680 = eq(s2_hit_state.state, UInt<2>("h01")) @[Util.scala 7:47] 
    node T_2681 = eq(s2_hit_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2682 = or(T_2680, T_2681) @[Util.scala 7:62] 
    node s2_hit = mux(T_2676, T_2679, T_2682) @[Policies.scala 58:8] 
    node T_2683 = and(s2_valid_masked, s2_readwrite) @[dcache.scala 148:38] 
    node s2_valid_hit = and(T_2683, s2_hit) @[dcache.scala 148:54] 
    node T_2684 = and(s2_valid_masked, s2_readwrite) @[dcache.scala 149:39] 
    node T_2686 = eq(s2_hit, UInt<1>("h00")) @[dcache.scala 149:58] 
    node T_2687 = and(T_2684, T_2686) @[dcache.scala 149:55] 
    node T_2688 = or(pstore1_valid, pstore2_valid) @[dcache.scala 149:85] 
    node T_2690 = eq(T_2688, UInt<1>("h00")) @[dcache.scala 149:69] 
    node T_2691 = and(T_2687, T_2690) @[dcache.scala 149:66] 
    node T_2693 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 149:106] 
    node s2_valid_miss = and(T_2691, T_2693) @[dcache.scala 149:103] 
    node T_2695 = eq(s2_uncached, UInt<1>("h00")) @[dcache.scala 150:47] 
    node s2_valid_cached_miss = and(s2_valid_miss, T_2695) @[dcache.scala 150:44] 
    node s2_victimize = or(s2_valid_cached_miss, s2_flush_valid) @[dcache.scala 151:43] 
    node s2_valid_uncached = and(s2_valid_miss, s2_uncached) @[dcache.scala 152:41] 
    node T_2696 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2698 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 153:53] 
    node T_2699 = and(T_2696, T_2698) @[dcache.scala 153:50] 
    node T_2700 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 153:136] 
    reg T_2701 : UInt, clk
    when T_2700 : @[Reg.scala 29:19] 
      T_2701 <= s1_victim_way @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_2703 = dshl(UInt<1>("h01"), T_2701) @[OneHot.scala 44:15] 
    node s2_victim_way = mux(T_2699, s2_hit_way, T_2703) @[dcache.scala 153:26] 
    node T_2787 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 154:86] 
    reg s2_victim_tag : UInt<20>, clk
    when T_2787 : @[Reg.scala 29:19] 
      s2_victim_tag <= meta.io.resp[s1_victim_way].tag @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_2788 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node T_2790 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 155:55] 
    node T_2791 = and(T_2788, T_2790) @[dcache.scala 155:52] 
    node T_2875 = or(s1_valid_not_nacked, s1_flush_valid) @[dcache.scala 155:149] 
    reg T_2876 : {state : UInt<2>}, clk
    when T_2875 : @[Reg.scala 29:19] 
      T_2876 <- meta.io.resp[s1_victim_way].coh @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node s2_victim_state = mux(T_2791, s2_hit_state, T_2876) @[dcache.scala 155:28] 
    node s2_victim_valid = neq(s2_victim_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
    node s2_victim_dirty = eq(s2_victim_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2919 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2920 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2921 = or(T_2919, T_2920) @[Consts.scala 47:42] 
    node T_2922 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_2923 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2924 = or(T_2922, T_2923) @[Consts.scala 44:33] 
    node T_2925 = or(T_2921, T_2924) @[Consts.scala 47:59] 
    node T_2926 = mux(T_2925, UInt<2>("h02"), s2_hit_state.state) @[Policies.scala 257:23] 
    wire s2_new_hit_state : {state : UInt<2>} @[Metadata.scala 158:20] 
    s2_new_hit_state is invalid @[Metadata.scala 158:20] 
    s2_new_hit_state.state <= T_2926 @[Metadata.scala 159:16] 
    node T_2970 = eq(s2_hit_state.state, s2_new_hit_state.state) @[Metadata.scala 30:51] 
    node s2_update_meta = eq(T_2970, UInt<1>("h00")) @[Metadata.scala 31:40] 
    node T_2973 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 160:33] 
    node T_2974 = and(s2_valid, T_2973) @[dcache.scala 160:30] 
    node T_2975 = and(s2_valid_uncached, io.mem.acquire.ready) @[dcache.scala 160:70] 
    node T_2977 = eq(T_2975, UInt<1>("h00")) @[dcache.scala 160:50] 
    node T_2978 = and(T_2974, T_2977) @[dcache.scala 160:47] 
    io.cpu.s2_nack <= T_2978 @[dcache.scala 160:18] 
    node T_2980 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 161:22] 
    node T_2981 = or(T_2980, s2_update_meta) @[dcache.scala 161:36] 
    node T_2982 = and(s2_valid, T_2981) @[dcache.scala 161:18] 
    when T_2982 : @[dcache.scala 161:56] 
      s1_nack <= UInt<1>("h01") @[dcache.scala 161:66] 
      skip @[dcache.scala 161:56] 
    node T_2985 = bits(s1_req.typ, 1, 0) @[AmoAlu.scala 11:17] 
    node T_2987 = dshl(UInt<1>("h01"), T_2985) @[AmoAlu.scala 13:23] 
    node T_2989 = sub(T_2987, UInt<1>("h01")) @[AmoAlu.scala 13:32] 
    node T_2990 = tail(T_2989, 1) @[AmoAlu.scala 13:32] 
    node T_2991 = bits(T_2990, 2, 0) @[AmoAlu.scala 13:42] 
    node T_2992 = and(s1_req.addr, T_2991) @[AmoAlu.scala 13:11] 
    node misaligned = neq(T_2992, UInt<1>("h00")) @[AmoAlu.scala 13:65] 
    node T_2994 = and(s1_read, misaligned) @[dcache.scala 165:32] 
    io.cpu.xcpt.ma.ld <= T_2994 @[dcache.scala 165:21] 
    node T_2995 = and(s1_write, misaligned) @[dcache.scala 166:33] 
    io.cpu.xcpt.ma.st <= T_2995 @[dcache.scala 166:21] 
    node T_2996 = and(s1_read, tlb.io.resp.xcpt_ld) @[dcache.scala 167:32] 
    io.cpu.xcpt.pf.ld <= T_2996 @[dcache.scala 167:21] 
    node T_2997 = and(s1_write, tlb.io.resp.xcpt_st) @[dcache.scala 168:33] 
    io.cpu.xcpt.pf.st <= T_2997 @[dcache.scala 168:21] 
    node T_2998 = or(io.cpu.xcpt.ma.ld, io.cpu.xcpt.ma.st) @[dcache.scala 170:24] 
    node T_2999 = or(T_2998, io.cpu.xcpt.pf.ld) @[dcache.scala 170:45] 
    node T_3000 = or(T_2999, io.cpu.xcpt.pf.st) @[dcache.scala 170:66] 
    reg T_3001 : UInt<1>, clk
    T_3001 <= T_3000
    node T_3002 = and(T_3001, s2_valid_masked) @[dcache.scala 170:89] 
    node T_3004 = eq(T_3002, UInt<1>("h00")) @[dcache.scala 169:10] 
    node T_3005 = or(T_3004, reset) @[dcache.scala 169:9] 
    node T_3007 = eq(T_3005, UInt<1>("h00")) @[dcache.scala 169:9] 
    when T_3007 : @[dcache.scala 169:9] 
      printf(clk, UInt<1>(1), "Assertion failed: DCache exception occurred - cache response not killed.\n    at dcache.scala:169 assert(!(Reg(next=\n") @[dcache.scala 169:9] 
      stop(clk, UInt<1>(1), 1) @[dcache.scala 169:9] 
      skip @[dcache.scala 169:9] 
    node T_3009 = eq(s2_req.cmd, UInt<5>("h06")) @[dcache.scala 175:48] 
    node s2_lr = and(UInt<1>("h01"), T_3009) @[dcache.scala 175:34] 
    node T_3011 = eq(s2_req.cmd, UInt<5>("h07")) @[dcache.scala 176:48] 
    node s2_sc = and(UInt<1>("h01"), T_3011) @[dcache.scala 176:34] 
    reg lrscCount : UInt, clk with : (reset => (reset, UInt<1>("h00")))
    node lrscValid = gt(lrscCount, UInt<1>("h00")) @[dcache.scala 178:29] 
    reg lrscAddr : UInt, clk
    node T_3015 = shr(s2_req.addr, 6) @[dcache.scala 180:70] 
    node T_3016 = eq(lrscAddr, T_3015) @[dcache.scala 180:53] 
    node T_3017 = and(lrscValid, T_3016) @[dcache.scala 180:41] 
    node T_3019 = eq(T_3017, UInt<1>("h00")) @[dcache.scala 180:29] 
    node s2_sc_fail = and(s2_sc, T_3019) @[dcache.scala 180:26] 
    node T_3020 = and(s2_valid_hit, s2_lr) @[dcache.scala 181:22] 
    when T_3020 : @[dcache.scala 181:32] 
      lrscCount <= UInt<5>("h01f") @[dcache.scala 182:15] 
      node T_3022 = shr(s2_req.addr, 6) @[dcache.scala 183:29] 
      lrscAddr <= T_3022 @[dcache.scala 183:14] 
      skip @[dcache.scala 181:32] 
    when lrscValid : @[dcache.scala 185:20] 
      node T_3024 = sub(lrscCount, UInt<1>("h01")) @[dcache.scala 185:45] 
      node T_3025 = tail(T_3024, 1) @[dcache.scala 185:45] 
      lrscCount <= T_3025 @[dcache.scala 185:32] 
      skip @[dcache.scala 185:20] 
    node T_3026 = and(s2_valid_hit, s2_sc) @[dcache.scala 186:23] 
    node T_3027 = or(T_3026, io.cpu.invalidate_lr) @[dcache.scala 186:33] 
    when T_3027 : @[dcache.scala 186:58] 
      lrscCount <= UInt<1>("h00") @[dcache.scala 186:70] 
      skip @[dcache.scala 186:58] 
    node T_3029 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 189:63] 
    reg pstore1_cmd : UInt<5>, clk
    when T_3029 : @[Reg.scala 29:19] 
      pstore1_cmd <= s1_req.cmd @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3030 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 190:63] 
    reg pstore1_typ : UInt<3>, clk
    when T_3030 : @[Reg.scala 29:19] 
      pstore1_typ <= s1_req.typ @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3031 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 191:62] 
    reg pstore1_addr : UInt<32>, clk
    when T_3031 : @[Reg.scala 29:19] 
      pstore1_addr <= s1_paddr @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3032 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 192:68] 
    reg pstore1_data : UInt<64>, clk
    when T_3032 : @[Reg.scala 29:19] 
      pstore1_data <= io.cpu.s1_data @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3033 = and(s1_valid_not_nacked, s1_write) @[dcache.scala 193:63] 
    reg pstore1_way : UInt<4>, clk
    when T_3033 : @[Reg.scala 29:19] 
      pstore1_way <= s1_hit_way @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3034 = bits(pstore1_typ, 1, 0) @[AmoAlu.scala 11:17] 
    node T_3036 = eq(T_3034, UInt<1>("h00")) @[AmoAlu.scala 27:19] 
    node T_3037 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66] 
    node T_3038 = cat(T_3037, T_3037) @[Cat.scala 20:58] 
    node T_3039 = cat(T_3038, T_3038) @[Cat.scala 20:58] 
    node T_3040 = cat(T_3039, T_3039) @[Cat.scala 20:58] 
    node T_3042 = eq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 27:19] 
    node T_3043 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66] 
    node T_3044 = cat(T_3043, T_3043) @[Cat.scala 20:58] 
    node T_3045 = cat(T_3044, T_3044) @[Cat.scala 20:58] 
    node T_3047 = eq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 27:19] 
    node T_3048 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66] 
    node T_3049 = cat(T_3048, T_3048) @[Cat.scala 20:58] 
    node T_3050 = mux(T_3047, T_3049, pstore1_data) @[AmoAlu.scala 27:13] 
    node T_3051 = mux(T_3042, T_3045, T_3050) @[AmoAlu.scala 27:13] 
    node T_3052 = mux(T_3036, T_3040, T_3051) @[AmoAlu.scala 27:13] 
    wire pstore1_storegen_data : UInt
    pstore1_storegen_data is invalid
    pstore1_storegen_data <= T_3052
    node T_3054 = eq(pstore1_cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_3055 = eq(pstore1_cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_3056 = or(T_3054, T_3055) @[Consts.scala 46:41] 
    node T_3057 = eq(pstore1_cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_3058 = or(T_3056, T_3057) @[Consts.scala 46:58] 
    node T_3059 = bits(pstore1_cmd, 3, 3) @[Consts.scala 44:29] 
    node T_3060 = eq(pstore1_cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_3061 = or(T_3059, T_3060) @[Consts.scala 44:33] 
    node T_3062 = or(T_3058, T_3061) @[Consts.scala 46:75] 
    node pstore1_amo = and(UInt<1>("h01"), T_3062) @[dcache.scala 196:40] 
    node T_3063 = and(pstore1_valid, pstore2_valid) @[dcache.scala 197:47] 
    node T_3064 = and(s1_valid, s1_write) @[dcache.scala 197:78] 
    node T_3065 = or(T_3064, pstore1_amo) @[dcache.scala 197:91] 
    node pstore_drain_structural = and(T_3063, T_3065) @[dcache.scala 197:64] 
    node T_3066 = eq(io.cpu.req.bits.cmd, UInt<5>("h00")) @[Consts.scala 46:31] 
    node T_3067 = eq(io.cpu.req.bits.cmd, UInt<5>("h06")) @[Consts.scala 46:48] 
    node T_3068 = or(T_3066, T_3067) @[Consts.scala 46:41] 
    node T_3069 = eq(io.cpu.req.bits.cmd, UInt<5>("h07")) @[Consts.scala 46:65] 
    node T_3070 = or(T_3068, T_3069) @[Consts.scala 46:58] 
    node T_3071 = bits(io.cpu.req.bits.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_3072 = eq(io.cpu.req.bits.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_3073 = or(T_3071, T_3072) @[Consts.scala 44:33] 
    node T_3074 = or(T_3070, T_3073) @[Consts.scala 46:75] 
    node T_3075 = and(io.cpu.req.valid, T_3074) @[dcache.scala 198:55] 
    node pstore_drain_opportunistic = eq(T_3075, UInt<1>("h00")) @[dcache.scala 198:36] 
    node pstore_drain_on_miss = or(releaseInFlight, io.cpu.s2_nack) @[dcache.scala 199:46] 
    node T_3078 = and(UInt<1>("h01"), pstore_drain_structural) @[dcache.scala 201:24] 
    node T_3080 = eq(pstore1_amo, UInt<1>("h00")) @[dcache.scala 202:25] 
    node T_3081 = and(pstore1_valid, T_3080) @[dcache.scala 202:22] 
    node T_3082 = or(T_3081, pstore2_valid) @[dcache.scala 202:39] 
    node T_3083 = or(pstore_drain_opportunistic, pstore_drain_on_miss) @[dcache.scala 202:88] 
    node T_3084 = and(T_3082, T_3083) @[dcache.scala 202:57] 
    node pstore_drain = or(T_3078, T_3084) @[dcache.scala 201:51] 
    node T_3085 = and(s2_valid_hit, s2_write) @[dcache.scala 204:39] 
    node T_3087 = eq(s2_sc_fail, UInt<1>("h00")) @[dcache.scala 204:54] 
    node T_3088 = and(T_3085, T_3087) @[dcache.scala 204:51] 
    reg T_3090 : UInt<1>, clk
    node T_3092 = eq(T_3088, UInt<1>("h00")) @[dcache.scala 206:12] 
    node T_3094 = eq(T_3090, UInt<1>("h00")) @[dcache.scala 206:31] 
    node T_3095 = or(T_3092, T_3094) @[dcache.scala 206:28] 
    node T_3096 = or(T_3095, reset) @[dcache.scala 206:11] 
    node T_3098 = eq(T_3096, UInt<1>("h00")) @[dcache.scala 206:11] 
    when T_3098 : @[dcache.scala 206:11] 
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:206 assert(!s2_store_valid || !pstore1_held)\n") @[dcache.scala 206:11] 
      stop(clk, UInt<1>(1), 1) @[dcache.scala 206:11] 
      skip @[dcache.scala 206:11] 
    node T_3099 = or(T_3088, T_3090) @[dcache.scala 207:37] 
    node T_3100 = and(T_3099, pstore2_valid) @[dcache.scala 207:54] 
    node T_3102 = eq(pstore_drain, UInt<1>("h00")) @[dcache.scala 207:74] 
    node T_3103 = and(T_3100, T_3102) @[dcache.scala 207:71] 
    T_3090 <= T_3103 @[dcache.scala 207:18] 
    node T_3104 = or(T_3088, T_3090) @[dcache.scala 208:20] 
    pstore1_valid <= T_3104 @[dcache.scala 203:17] 
    node T_3105 = eq(pstore2_valid, pstore_drain) @[dcache.scala 210:57] 
    node advance_pstore1 = and(pstore1_valid, T_3105) @[dcache.scala 210:39] 
    node T_3107 = eq(pstore_drain, UInt<1>("h00")) @[dcache.scala 211:37] 
    node T_3108 = and(pstore2_valid, T_3107) @[dcache.scala 211:34] 
    node T_3109 = or(T_3108, advance_pstore1) @[dcache.scala 211:51] 
    pstore2_valid <= T_3109 @[dcache.scala 211:17] 
    reg pstore2_addr : UInt<32>, clk
    when advance_pstore1 : @[Reg.scala 29:19] 
      pstore2_addr <= pstore1_addr @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg pstore2_way : UInt<4>, clk
    when advance_pstore1 : @[Reg.scala 29:19] 
      pstore2_way <= pstore1_way @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg pstore2_storegen_data : UInt, clk
    when advance_pstore1 : @[Reg.scala 29:19] 
      pstore2_storegen_data <= pstore1_storegen_data @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_3111 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27] 
    node T_3113 = mux(T_3111, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3115 = geq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 18:57] 
    node T_3118 = mux(T_3115, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3119 = or(T_3113, T_3118) @[AmoAlu.scala 18:46] 
    node T_3120 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27] 
    node T_3122 = mux(T_3120, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22] 
    node T_3123 = cat(T_3119, T_3122) @[Cat.scala 20:58] 
    node T_3124 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27] 
    node T_3126 = mux(T_3124, T_3123, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3128 = geq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 18:57] 
    node T_3131 = mux(T_3128, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3132 = or(T_3126, T_3131) @[AmoAlu.scala 18:46] 
    node T_3133 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27] 
    node T_3135 = mux(T_3133, UInt<1>("h00"), T_3123) @[AmoAlu.scala 19:22] 
    node T_3136 = cat(T_3132, T_3135) @[Cat.scala 20:58] 
    node T_3137 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27] 
    node T_3139 = mux(T_3137, T_3136, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3141 = geq(T_3034, UInt<2>("h03")) @[AmoAlu.scala 18:57] 
    node T_3144 = mux(T_3141, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3145 = or(T_3139, T_3144) @[AmoAlu.scala 18:46] 
    node T_3146 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27] 
    node T_3148 = mux(T_3146, UInt<1>("h00"), T_3136) @[AmoAlu.scala 19:22] 
    node T_3149 = cat(T_3145, T_3148) @[Cat.scala 20:58] 
    reg pstore2_storegen_mask : UInt<8>, clk
    when advance_pstore1 : @[Reg.scala 29:19] 
      pstore2_storegen_mask <= T_3149 @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    dataArb.io.in[0].valid <= pstore_drain @[dcache.scala 216:26] 
    dataArb.io.in[0].bits.write <= UInt<1>("h01") @[dcache.scala 217:31] 
    node T_3151 = mux(pstore2_valid, pstore2_addr, pstore1_addr) @[dcache.scala 218:36] 
    dataArb.io.in[0].bits.addr <= T_3151 @[dcache.scala 218:30] 
    node T_3152 = mux(pstore2_valid, pstore2_way, pstore1_way) @[dcache.scala 219:38] 
    dataArb.io.in[0].bits.way_en <= T_3152 @[dcache.scala 219:32] 
    node T_3153 = mux(pstore2_valid, pstore2_storegen_data, pstore1_storegen_data) @[dcache.scala 220:52] 
    dataArb.io.in[0].bits.wdata <= T_3153 @[dcache.scala 220:31] 
    node T_3154 = mux(pstore2_valid, pstore2_addr, pstore1_addr) @[dcache.scala 221:30] 
    node pstore_mask_shift = shl(UInt<1>("h00"), 3) @[dcache.scala 221:106] 
    node T_3157 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27] 
    node T_3159 = mux(T_3157, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3161 = geq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 18:57] 
    node T_3164 = mux(T_3161, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3165 = or(T_3159, T_3164) @[AmoAlu.scala 18:46] 
    node T_3166 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27] 
    node T_3168 = mux(T_3166, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22] 
    node T_3169 = cat(T_3165, T_3168) @[Cat.scala 20:58] 
    node T_3170 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27] 
    node T_3172 = mux(T_3170, T_3169, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3174 = geq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 18:57] 
    node T_3177 = mux(T_3174, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3178 = or(T_3172, T_3177) @[AmoAlu.scala 18:46] 
    node T_3179 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27] 
    node T_3181 = mux(T_3179, UInt<1>("h00"), T_3169) @[AmoAlu.scala 19:22] 
    node T_3182 = cat(T_3178, T_3181) @[Cat.scala 20:58] 
    node T_3183 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27] 
    node T_3185 = mux(T_3183, T_3182, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3187 = geq(T_3034, UInt<2>("h03")) @[AmoAlu.scala 18:57] 
    node T_3190 = mux(T_3187, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3191 = or(T_3185, T_3190) @[AmoAlu.scala 18:46] 
    node T_3192 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27] 
    node T_3194 = mux(T_3192, UInt<1>("h00"), T_3182) @[AmoAlu.scala 19:22] 
    node T_3195 = cat(T_3191, T_3194) @[Cat.scala 20:58] 
    node T_3196 = mux(pstore2_valid, pstore2_storegen_mask, T_3195) @[dcache.scala 222:37] 
    node T_3197 = dshl(T_3196, pstore_mask_shift) @[dcache.scala 222:99] 
    dataArb.io.in[0].bits.wmask <= T_3197 @[dcache.scala 222:31] 
    node s1_idx = bits(s1_req.addr, 11, 3) @[dcache.scala 225:27] 
    node T_3198 = bits(pstore1_addr, 11, 3) @[dcache.scala 227:36] 
    node T_3199 = eq(T_3198, s1_idx) @[dcache.scala 227:58] 
    node T_3200 = and(pstore1_valid, T_3199) @[dcache.scala 227:21] 
    node T_3201 = bits(pstore2_addr, 11, 3) @[dcache.scala 228:36] 
    node T_3202 = eq(T_3201, s1_idx) @[dcache.scala 228:58] 
    node T_3203 = and(pstore2_valid, T_3202) @[dcache.scala 228:21] 
    node T_3204 = or(T_3200, T_3203) @[dcache.scala 227:70] 
    node s1_raw_hazard = and(s1_read, T_3204) @[dcache.scala 226:31] 
    node T_3205 = and(s1_valid, s1_raw_hazard) @[dcache.scala 229:18] 
    when T_3205 : @[dcache.scala 229:36] 
      s1_nack <= UInt<1>("h01") @[dcache.scala 229:46] 
      skip @[dcache.scala 229:36] 
    node T_3207 = and(s2_valid_hit, s2_update_meta) @[dcache.scala 231:48] 
    node T_3209 = eq(s2_victim_dirty, UInt<1>("h00")) @[dcache.scala 231:87] 
    node T_3210 = and(s2_victimize, T_3209) @[dcache.scala 231:84] 
    node T_3211 = or(T_3207, T_3210) @[dcache.scala 231:67] 
    metaWriteArb.io.in[0].valid <= T_3211 @[dcache.scala 231:31] 
    metaWriteArb.io.in[0].bits.way_en <= s2_victim_way @[dcache.scala 232:37] 
    node T_3212 = bits(s2_req.addr, 11, 6) @[dcache.scala 233:48] 
    metaWriteArb.io.in[0].bits.idx <= T_3212 @[dcache.scala 233:34] 
    wire T_3236 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_3236 is invalid @[Metadata.scala 158:20] 
    T_3236.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    node T_3258 = mux(s2_hit, s2_new_hit_state, T_3236) @[dcache.scala 234:45] 
    metaWriteArb.io.in[0].bits.data.coh <- T_3258 @[dcache.scala 234:39] 
    node T_3280 = bits(s2_req.addr, 31, 12) @[dcache.scala 235:53] 
    metaWriteArb.io.in[0].bits.data.tag <= T_3280 @[dcache.scala 235:39] 
    node T_3282 = bits(s2_req.addr, 31, 6) @[dcache.scala 240:29] 
    node T_3284 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_3285 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_3286 = or(T_3284, T_3285) @[Consts.scala 47:42] 
    node T_3287 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_3288 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_3289 = or(T_3287, T_3288) @[Consts.scala 44:33] 
    node T_3290 = or(T_3286, T_3289) @[Consts.scala 47:59] 
    node T_3291 = eq(s2_req.cmd, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_3292 = or(T_3290, T_3291) @[Consts.scala 48:47] 
    node T_3293 = eq(s2_req.cmd, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_3294 = or(T_3292, T_3293) @[Consts.scala 48:64] 
    node T_3295 = mux(T_3294, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_3297 = cat(s2_req.cmd, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire cachedGetMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    cachedGetMessage is invalid @[Definitions.scala 412:19] 
    cachedGetMessage.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    cachedGetMessage.a_type <= T_3295 @[Definitions.scala 414:16] 
    cachedGetMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    cachedGetMessage.addr_block <= T_3282 @[Definitions.scala 416:20] 
    cachedGetMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    cachedGetMessage.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    cachedGetMessage.union <= T_3297 @[Definitions.scala 419:15] 
    node T_3356 = bits(s2_req.addr, 31, 6) @[dcache.scala 244:29] 
    node T_3357 = bits(s2_req.addr, 5, 3) @[dcache.scala 245:28] 
    node T_3358 = bits(s2_req.addr, 2, 0) @[dcache.scala 246:28] 
    node T_3385 = or(UInt<3>("h00"), T_3358) @[Definitions.scala 385:49] 
    node T_3386 = bits(T_3385, 2, 0) @[Definitions.scala 385:61] 
    node T_3388 = or(UInt<3>("h00"), s2_req.typ) @[Definitions.scala 386:43] 
    node T_3389 = bits(T_3388, 2, 0) @[Definitions.scala 386:58] 
    node T_3391 = or(UInt<5>("h00"), UInt<5>("h00")) @[Definitions.scala 387:36] 
    node T_3392 = bits(T_3391, 4, 0) @[Definitions.scala 387:45] 
    node T_3394 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 388:46] 
    node T_3395 = bits(T_3394, 7, 0) @[Definitions.scala 388:54] 
    node T_3398 = cat(T_3392, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3399 = cat(T_3386, T_3389) @[Cat.scala 20:58] 
    node T_3400 = cat(T_3399, T_3398) @[Cat.scala 20:58] 
    node T_3402 = cat(T_3389, T_3392) @[Cat.scala 20:58] 
    node T_3403 = cat(T_3402, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3405 = cat(T_3395, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3407 = cat(T_3395, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3409 = cat(T_3392, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3410 = cat(T_3386, T_3389) @[Cat.scala 20:58] 
    node T_3411 = cat(T_3410, T_3409) @[Cat.scala 20:58] 
    node T_3413 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3415 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3416 = eq(UInt<3>("h06"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, T_3415, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h05"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, T_3413, T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h04"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, T_3411, T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h03"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, T_3407, T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h02"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, T_3405, T_3423) @[Mux.scala 46:16] 
    node T_3426 = eq(UInt<3>("h01"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3427 = mux(T_3426, T_3403, T_3425) @[Mux.scala 46:16] 
    node T_3428 = eq(UInt<3>("h00"), UInt<3>("h00")) @[Mux.scala 46:19] 
    node T_3429 = mux(T_3428, T_3400, T_3427) @[Mux.scala 46:16] 
    wire uncachedGetMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    uncachedGetMessage is invalid @[Definitions.scala 412:19] 
    uncachedGetMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    uncachedGetMessage.a_type <= UInt<3>("h00") @[Definitions.scala 414:16] 
    uncachedGetMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    uncachedGetMessage.addr_block <= T_3356 @[Definitions.scala 416:20] 
    uncachedGetMessage.addr_beat <= T_3357 @[Definitions.scala 417:19] 
    uncachedGetMessage.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    uncachedGetMessage.union <= T_3429 @[Definitions.scala 419:15] 
    node T_3486 = bits(s2_req.addr, 31, 6) @[dcache.scala 252:29] 
    node T_3487 = bits(s2_req.addr, 5, 3) @[dcache.scala 253:28] 
    node T_3489 = eq(T_3034, UInt<1>("h00")) @[AmoAlu.scala 27:19] 
    node T_3490 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66] 
    node T_3491 = cat(T_3490, T_3490) @[Cat.scala 20:58] 
    node T_3492 = cat(T_3491, T_3491) @[Cat.scala 20:58] 
    node T_3493 = cat(T_3492, T_3492) @[Cat.scala 20:58] 
    node T_3495 = eq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 27:19] 
    node T_3496 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66] 
    node T_3497 = cat(T_3496, T_3496) @[Cat.scala 20:58] 
    node T_3498 = cat(T_3497, T_3497) @[Cat.scala 20:58] 
    node T_3500 = eq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 27:19] 
    node T_3501 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66] 
    node T_3502 = cat(T_3501, T_3501) @[Cat.scala 20:58] 
    node T_3503 = mux(T_3500, T_3502, pstore1_data) @[AmoAlu.scala 27:13] 
    node T_3504 = mux(T_3495, T_3498, T_3503) @[AmoAlu.scala 27:13] 
    node T_3505 = mux(T_3489, T_3493, T_3504) @[AmoAlu.scala 27:13] 
    node T_3507 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 18:27] 
    node T_3509 = mux(T_3507, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3511 = geq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 18:57] 
    node T_3514 = mux(T_3511, UInt<1>("h01"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3515 = or(T_3509, T_3514) @[AmoAlu.scala 18:46] 
    node T_3516 = bits(pstore1_addr, 0, 0) @[AmoAlu.scala 19:27] 
    node T_3518 = mux(T_3516, UInt<1>("h00"), UInt<1>("h01")) @[AmoAlu.scala 19:22] 
    node T_3519 = cat(T_3515, T_3518) @[Cat.scala 20:58] 
    node T_3520 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 18:27] 
    node T_3522 = mux(T_3520, T_3519, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3524 = geq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 18:57] 
    node T_3527 = mux(T_3524, UInt<2>("h03"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3528 = or(T_3522, T_3527) @[AmoAlu.scala 18:46] 
    node T_3529 = bits(pstore1_addr, 1, 1) @[AmoAlu.scala 19:27] 
    node T_3531 = mux(T_3529, UInt<1>("h00"), T_3519) @[AmoAlu.scala 19:22] 
    node T_3532 = cat(T_3528, T_3531) @[Cat.scala 20:58] 
    node T_3533 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 18:27] 
    node T_3535 = mux(T_3533, T_3532, UInt<1>("h00")) @[AmoAlu.scala 18:22] 
    node T_3537 = geq(T_3034, UInt<2>("h03")) @[AmoAlu.scala 18:57] 
    node T_3540 = mux(T_3537, UInt<4>("h0f"), UInt<1>("h00")) @[AmoAlu.scala 18:51] 
    node T_3541 = or(T_3535, T_3540) @[AmoAlu.scala 18:46] 
    node T_3542 = bits(pstore1_addr, 2, 2) @[AmoAlu.scala 19:27] 
    node T_3544 = mux(T_3542, UInt<1>("h00"), T_3532) @[AmoAlu.scala 19:22] 
    node T_3545 = cat(T_3541, T_3544) @[Cat.scala 20:58] 
    node T_3546 = shl(UInt<1>("h00"), 3) @[dcache.scala 255:62] 
    node T_3547 = dshl(T_3545, T_3546) @[dcache.scala 255:40] 
    node T_3574 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 385:49] 
    node T_3575 = bits(T_3574, 2, 0) @[Definitions.scala 385:61] 
    node T_3577 = or(UInt<3>("h00"), UInt<3>("h07")) @[Definitions.scala 386:43] 
    node T_3578 = bits(T_3577, 2, 0) @[Definitions.scala 386:58] 
    node T_3580 = or(UInt<5>("h00"), UInt<1>("h00")) @[Definitions.scala 387:36] 
    node T_3581 = bits(T_3580, 4, 0) @[Definitions.scala 387:45] 
    node T_3583 = or(UInt<8>("h00"), T_3547) @[Definitions.scala 388:46] 
    node T_3584 = bits(T_3583, 7, 0) @[Definitions.scala 388:54] 
    node T_3587 = cat(T_3581, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3588 = cat(T_3575, T_3578) @[Cat.scala 20:58] 
    node T_3589 = cat(T_3588, T_3587) @[Cat.scala 20:58] 
    node T_3591 = cat(T_3578, T_3581) @[Cat.scala 20:58] 
    node T_3592 = cat(T_3591, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3594 = cat(T_3584, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3596 = cat(T_3584, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3598 = cat(T_3581, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3599 = cat(T_3575, T_3578) @[Cat.scala 20:58] 
    node T_3600 = cat(T_3599, T_3598) @[Cat.scala 20:58] 
    node T_3602 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3604 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3605 = eq(UInt<3>("h06"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3606 = mux(T_3605, T_3604, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3607 = eq(UInt<3>("h05"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3608 = mux(T_3607, T_3602, T_3606) @[Mux.scala 46:16] 
    node T_3609 = eq(UInt<3>("h04"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3610 = mux(T_3609, T_3600, T_3608) @[Mux.scala 46:16] 
    node T_3611 = eq(UInt<3>("h03"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3612 = mux(T_3611, T_3596, T_3610) @[Mux.scala 46:16] 
    node T_3613 = eq(UInt<3>("h02"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3614 = mux(T_3613, T_3594, T_3612) @[Mux.scala 46:16] 
    node T_3615 = eq(UInt<3>("h01"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3616 = mux(T_3615, T_3592, T_3614) @[Mux.scala 46:16] 
    node T_3617 = eq(UInt<3>("h00"), UInt<3>("h02")) @[Mux.scala 46:19] 
    node T_3618 = mux(T_3617, T_3589, T_3616) @[Mux.scala 46:16] 
    wire uncachedPutMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    uncachedPutMessage is invalid @[Definitions.scala 412:19] 
    uncachedPutMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    uncachedPutMessage.a_type <= UInt<3>("h02") @[Definitions.scala 414:16] 
    uncachedPutMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    uncachedPutMessage.addr_block <= T_3486 @[Definitions.scala 416:20] 
    uncachedPutMessage.addr_beat <= T_3487 @[Definitions.scala 417:19] 
    uncachedPutMessage.data <= T_3505 @[Definitions.scala 418:14] 
    uncachedPutMessage.union <= T_3618 @[Definitions.scala 419:15] 
    node T_3675 = bits(s2_req.addr, 31, 6) @[dcache.scala 259:29] 
    node T_3676 = bits(s2_req.addr, 5, 3) @[dcache.scala 260:28] 
    node T_3677 = bits(s2_req.addr, 2, 0) @[dcache.scala 261:28] 
    node T_3679 = eq(T_3034, UInt<1>("h00")) @[AmoAlu.scala 27:19] 
    node T_3680 = bits(pstore1_data, 7, 0) @[AmoAlu.scala 27:66] 
    node T_3681 = cat(T_3680, T_3680) @[Cat.scala 20:58] 
    node T_3682 = cat(T_3681, T_3681) @[Cat.scala 20:58] 
    node T_3683 = cat(T_3682, T_3682) @[Cat.scala 20:58] 
    node T_3685 = eq(T_3034, UInt<1>("h01")) @[AmoAlu.scala 27:19] 
    node T_3686 = bits(pstore1_data, 15, 0) @[AmoAlu.scala 27:66] 
    node T_3687 = cat(T_3686, T_3686) @[Cat.scala 20:58] 
    node T_3688 = cat(T_3687, T_3687) @[Cat.scala 20:58] 
    node T_3690 = eq(T_3034, UInt<2>("h02")) @[AmoAlu.scala 27:19] 
    node T_3691 = bits(pstore1_data, 31, 0) @[AmoAlu.scala 27:66] 
    node T_3692 = cat(T_3691, T_3691) @[Cat.scala 20:58] 
    node T_3693 = mux(T_3690, T_3692, pstore1_data) @[AmoAlu.scala 27:13] 
    node T_3694 = mux(T_3685, T_3688, T_3693) @[AmoAlu.scala 27:13] 
    node T_3695 = mux(T_3679, T_3683, T_3694) @[AmoAlu.scala 27:13] 
    node T_3721 = or(UInt<3>("h00"), T_3677) @[Definitions.scala 385:49] 
    node T_3722 = bits(T_3721, 2, 0) @[Definitions.scala 385:61] 
    node T_3724 = or(UInt<3>("h00"), s2_req.typ) @[Definitions.scala 386:43] 
    node T_3725 = bits(T_3724, 2, 0) @[Definitions.scala 386:58] 
    node T_3727 = or(UInt<5>("h00"), s2_req.cmd) @[Definitions.scala 387:36] 
    node T_3728 = bits(T_3727, 4, 0) @[Definitions.scala 387:45] 
    node T_3730 = or(UInt<8>("h00"), UInt<1>("h00")) @[Definitions.scala 388:46] 
    node T_3731 = bits(T_3730, 7, 0) @[Definitions.scala 388:54] 
    node T_3734 = cat(T_3728, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3735 = cat(T_3722, T_3725) @[Cat.scala 20:58] 
    node T_3736 = cat(T_3735, T_3734) @[Cat.scala 20:58] 
    node T_3738 = cat(T_3725, T_3728) @[Cat.scala 20:58] 
    node T_3739 = cat(T_3738, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3741 = cat(T_3731, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3743 = cat(T_3731, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3745 = cat(T_3728, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3746 = cat(T_3722, T_3725) @[Cat.scala 20:58] 
    node T_3747 = cat(T_3746, T_3745) @[Cat.scala 20:58] 
    node T_3749 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3751 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_3752 = eq(UInt<3>("h06"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3753 = mux(T_3752, T_3751, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3754 = eq(UInt<3>("h05"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3755 = mux(T_3754, T_3749, T_3753) @[Mux.scala 46:16] 
    node T_3756 = eq(UInt<3>("h04"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3757 = mux(T_3756, T_3747, T_3755) @[Mux.scala 46:16] 
    node T_3758 = eq(UInt<3>("h03"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3759 = mux(T_3758, T_3743, T_3757) @[Mux.scala 46:16] 
    node T_3760 = eq(UInt<3>("h02"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3761 = mux(T_3760, T_3741, T_3759) @[Mux.scala 46:16] 
    node T_3762 = eq(UInt<3>("h01"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3763 = mux(T_3762, T_3739, T_3761) @[Mux.scala 46:16] 
    node T_3764 = eq(UInt<3>("h00"), UInt<3>("h04")) @[Mux.scala 46:19] 
    node T_3765 = mux(T_3764, T_3736, T_3763) @[Mux.scala 46:16] 
    wire uncachedPutAtomicMessage : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    uncachedPutAtomicMessage is invalid @[Definitions.scala 412:19] 
    uncachedPutAtomicMessage.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    uncachedPutAtomicMessage.a_type <= UInt<3>("h04") @[Definitions.scala 414:16] 
    uncachedPutAtomicMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    uncachedPutAtomicMessage.addr_block <= T_3675 @[Definitions.scala 416:20] 
    uncachedPutAtomicMessage.addr_beat <= T_3676 @[Definitions.scala 417:19] 
    uncachedPutAtomicMessage.data <= T_3695 @[Definitions.scala 418:14] 
    uncachedPutAtomicMessage.union <= T_3765 @[Definitions.scala 419:15] 
    node T_3822 = eq(s2_victim_dirty, UInt<1>("h00")) @[dcache.scala 265:53] 
    node T_3823 = and(s2_valid_cached_miss, T_3822) @[dcache.scala 265:50] 
    node T_3824 = or(T_3823, s2_valid_uncached) @[dcache.scala 265:71] 
    node T_3825 = and(T_3824, fq.io.enq.ready) @[dcache.scala 265:93] 
    io.mem.acquire.valid <= T_3825 @[dcache.scala 265:24] 
    io.mem.acquire.bits <- cachedGetMessage @[dcache.scala 266:23] 
    when s2_uncached : @[dcache.scala 267:22] 
      node T_3827 = eq(s2_valid_masked, UInt<1>("h00")) @[dcache.scala 268:12] 
      node T_3828 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
      node T_3830 = eq(T_3828, UInt<1>("h00")) @[dcache.scala 268:32] 
      node T_3831 = or(T_3827, T_3830) @[dcache.scala 268:29] 
      node T_3832 = or(T_3831, reset) @[dcache.scala 268:11] 
      node T_3834 = eq(T_3832, UInt<1>("h00")) @[dcache.scala 268:11] 
      when T_3834 : @[dcache.scala 268:11] 
        printf(clk, UInt<1>(1), "Assertion failed: cache hit on uncached access\n    at dcache.scala:268 assert(!s2_valid_masked || !s2_hit_state.isValid(), \"cache hit on uncached access\")\n") @[dcache.scala 268:11] 
        stop(clk, UInt<1>(1), 1) @[dcache.scala 268:11] 
        skip @[dcache.scala 268:11] 
      io.mem.acquire.bits <- uncachedGetMessage @[dcache.scala 269:25] 
      when s2_write : @[dcache.scala 270:21] 
        io.mem.acquire.bits <- uncachedPutMessage @[dcache.scala 271:27] 
        when pstore1_amo : @[dcache.scala 272:26] 
          io.mem.acquire.bits <- uncachedPutAtomicMessage @[dcache.scala 273:29] 
          skip @[dcache.scala 272:26] 
        skip @[dcache.scala 270:21] 
      skip @[dcache.scala 267:22] 
    node T_3835 = and(io.mem.acquire.ready, io.mem.acquire.valid) @[Decoupled.scala 16:42] 
    when T_3835 : @[dcache.scala 277:32] 
      grant_wait <= UInt<1>("h01") @[dcache.scala 277:45] 
      skip @[dcache.scala 277:32] 
    wire T_3844 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3844 is invalid @[Definitions.scala 846:34] 
    T_3844[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3846 = eq(io.mem.grant.bits.g_type, T_3844[0]) @[Util.scala 7:47] 
    node T_3847 = eq(io.mem.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3848 = mux(io.mem.grant.bits.is_builtin_type, T_3846, T_3847) @[Definitions.scala 274:33] 
    node grantIsRefill = and(UInt<1>("h01"), T_3848) @[Definitions.scala 274:27] 
    node T_3850 = eq(io.mem.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node grantIsVoluntary = and(io.mem.grant.bits.is_builtin_type, T_3850) @[Definitions.scala 277:59] 
    node T_3852 = eq(grantIsRefill, UInt<1>("h00")) @[dcache.scala 282:25] 
    node T_3854 = eq(grantIsVoluntary, UInt<1>("h00")) @[dcache.scala 282:43] 
    node grantIsUncached = and(T_3852, T_3854) @[dcache.scala 282:40] 
    when io.mem.grant.valid : @[dcache.scala 283:29] 
      node T_3855 = and(grantIsVoluntary, release_ack_wait) @[dcache.scala 284:43] 
      node T_3856 = or(grant_wait, T_3855) @[dcache.scala 284:23] 
      node T_3857 = or(T_3856, reset) @[dcache.scala 284:11] 
      node T_3859 = eq(T_3857, UInt<1>("h00")) @[dcache.scala 284:11] 
      when T_3859 : @[dcache.scala 284:11] 
        printf(clk, UInt<1>(1), "Assertion failed: unexpected grant\n    at dcache.scala:284 assert(grant_wait || grantIsVoluntary && release_ack_wait, \"unexpected grant\")\n") @[dcache.scala 284:11] 
        stop(clk, UInt<1>(1), 1) @[dcache.scala 284:11] 
        skip @[dcache.scala 284:11] 
      when grantIsUncached : @[dcache.scala 285:28] 
        s2_data <= io.mem.grant.bits.data @[dcache.scala 285:38] 
        skip @[dcache.scala 285:28] 
      when grantIsVoluntary : @[dcache.scala 286:29] 
        release_ack_wait <= UInt<1>("h00") @[dcache.scala 286:48] 
        skip @[dcache.scala 286:29] 
      skip @[dcache.scala 283:29] 
    node T_3861 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 16:42] 
    node T_3862 = and(T_3861, grantIsRefill) @[dcache.scala 288:63] 
    reg refillCount : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3862 : @[Counter.scala 43:17] 
      node T_3865 = eq(refillCount, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3867 = add(refillCount, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3868 = tail(T_3867, 1) @[Counter.scala 21:22] 
      refillCount <= T_3868 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node refillDone = and(T_3862, T_3865) @[Counter.scala 44:20] 
    node grantDone = or(refillDone, grantIsUncached) @[dcache.scala 289:30] 
    node T_3869 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 16:42] 
    node T_3870 = and(T_3869, grantDone) @[dcache.scala 290:29] 
    when T_3870 : @[dcache.scala 290:43] 
      grant_wait <= UInt<1>("h00") @[dcache.scala 290:56] 
      skip @[dcache.scala 290:43] 
    node T_3872 = and(grantIsRefill, io.mem.grant.valid) @[dcache.scala 293:43] 
    dataArb.io.in[1].valid <= T_3872 @[dcache.scala 293:26] 
    io.mem.grant.ready <= UInt<1>("h01") @[dcache.scala 294:22] 
    node T_3875 = eq(dataArb.io.in[1].valid, UInt<1>("h00")) @[dcache.scala 295:36] 
    node T_3876 = or(dataArb.io.in[1].ready, T_3875) @[dcache.scala 295:33] 
    node T_3877 = or(T_3876, reset) @[dcache.scala 295:9] 
    node T_3879 = eq(T_3877, UInt<1>("h00")) @[dcache.scala 295:9] 
    when T_3879 : @[dcache.scala 295:9] 
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:295 assert(dataArb.io.in(1).ready || !dataArb.io.in(1).valid)\n") @[dcache.scala 295:9] 
      stop(clk, UInt<1>(1), 1) @[dcache.scala 295:9] 
      skip @[dcache.scala 295:9] 
    dataArb.io.in[1].bits.write <= UInt<1>("h01") @[dcache.scala 296:31] 
    node T_3881 = bits(s2_req.addr, 31, 6) @[dcache.scala 297:48] 
    node T_3882 = cat(T_3881, io.mem.grant.bits.addr_beat) @[Cat.scala 20:58] 
    node T_3883 = shl(T_3882, 3) @[dcache.scala 297:106] 
    dataArb.io.in[1].bits.addr <= T_3883 @[dcache.scala 297:30] 
    dataArb.io.in[1].bits.way_en <= s2_victim_way @[dcache.scala 298:32] 
    dataArb.io.in[1].bits.wdata <= io.mem.grant.bits.data @[dcache.scala 299:31] 
    node T_3885 = not(UInt<8>("h00")) @[dcache.scala 300:34] 
    dataArb.io.in[1].bits.wmask <= T_3885 @[dcache.scala 300:31] 
    metaWriteArb.io.in[1].valid <= refillDone @[dcache.scala 302:31] 
    node T_3887 = eq(metaWriteArb.io.in[1].valid, UInt<1>("h00")) @[dcache.scala 303:10] 
    node T_3888 = or(T_3887, metaWriteArb.io.in[1].ready) @[dcache.scala 303:39] 
    node T_3889 = or(T_3888, reset) @[dcache.scala 303:9] 
    node T_3891 = eq(T_3889, UInt<1>("h00")) @[dcache.scala 303:9] 
    when T_3891 : @[dcache.scala 303:9] 
      printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:303 assert(!metaWriteArb.io.in(1).valid || metaWriteArb.io.in(1).ready)\n") @[dcache.scala 303:9] 
      stop(clk, UInt<1>(1), 1) @[dcache.scala 303:9] 
      skip @[dcache.scala 303:9] 
    metaWriteArb.io.in[1].bits.way_en <= s2_victim_way @[dcache.scala 304:37] 
    node T_3892 = bits(s2_req.addr, 11, 6) @[dcache.scala 305:48] 
    metaWriteArb.io.in[1].bits.idx <= T_3892 @[dcache.scala 305:34] 
    node T_3893 = eq(s2_req.cmd, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_3894 = eq(s2_req.cmd, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_3895 = or(T_3893, T_3894) @[Consts.scala 47:42] 
    node T_3896 = bits(s2_req.cmd, 3, 3) @[Consts.scala 44:29] 
    node T_3897 = eq(s2_req.cmd, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_3898 = or(T_3896, T_3897) @[Consts.scala 44:33] 
    node T_3899 = or(T_3895, T_3898) @[Consts.scala 47:59] 
    node T_3900 = mux(T_3899, UInt<2>("h02"), UInt<2>("h01")) @[Policies.scala 268:12] 
    node T_3901 = mux(io.mem.grant.bits.is_builtin_type, UInt<2>("h00"), T_3900) @[Policies.scala 267:10] 
    wire T_3924 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_3924 is invalid @[Metadata.scala 158:20] 
    T_3924.state <= T_3901 @[Metadata.scala 159:16] 
    metaWriteArb.io.in[1].bits.data.coh <- T_3924 @[dcache.scala 306:39] 
    node T_3946 = bits(s2_req.addr, 31, 12) @[dcache.scala 307:53] 
    metaWriteArb.io.in[1].bits.data.tag <= T_3946 @[dcache.scala 307:39] 
    node T_3947 = and(io.mem.grant.ready, io.mem.grant.valid) @[Decoupled.scala 16:42] 
    node T_3950 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3952 = eq(io.mem.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3953 = and(io.mem.grant.bits.is_builtin_type, T_3952) @[Definitions.scala 277:59] 
    node T_3955 = eq(T_3953, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3956 = and(T_3950, T_3955) @[Definitions.scala 278:89] 
    node T_3957 = and(T_3947, T_3956) @[dcache.scala 310:42] 
    node T_3959 = eq(grantIsRefill, UInt<1>("h00")) @[dcache.scala 310:81] 
    node T_3960 = or(T_3959, refillDone) @[dcache.scala 310:96] 
    node T_3961 = and(T_3957, T_3960) @[dcache.scala 310:77] 
    fq.io.enq.valid <= T_3961 @[dcache.scala 310:19] 
    wire T_3985 : {manager_xact_id : UInt<4>, manager_id : UInt<1>} @[Definitions.scala 809:17] 
    T_3985 is invalid @[Definitions.scala 809:17] 
    T_3985.manager_xact_id <= io.mem.grant.bits.manager_xact_id @[Definitions.scala 810:23] 
    T_3985.manager_id <= io.mem.grant.bits.manager_id @[Definitions.scala 811:18] 
    fq.io.enq.bits <- T_3985 @[dcache.scala 311:18] 
    io.mem.finish <- fq.io.deq @[dcache.scala 312:17] 
    when fq.io.enq.valid : @[dcache.scala 313:26] 
      node T_4008 = or(fq.io.enq.ready, reset) @[dcache.scala 313:34] 
      node T_4010 = eq(T_4008, UInt<1>("h00")) @[dcache.scala 313:34] 
      when T_4010 : @[dcache.scala 313:34] 
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:313 when (fq.io.enq.valid) { assert(fq.io.enq.ready) }\n") @[dcache.scala 313:34] 
        stop(clk, UInt<1>(1), 1) @[dcache.scala 313:34] 
        skip @[dcache.scala 313:34] 
      skip @[dcache.scala 313:26] 
    when refillDone : @[dcache.scala 314:21] 
      T_1924 <= UInt<1>("h01") @[Cache.scala 64:22] 
      skip @[dcache.scala 314:21] 
    node T_4012 = or(releaseInFlight, lrscValid) @[dcache.scala 317:37] 
    node T_4013 = and(s2_valid_hit, s2_lr) @[dcache.scala 317:67] 
    node block_probe = or(T_4012, T_4013) @[dcache.scala 317:50] 
    node T_4015 = eq(block_probe, UInt<1>("h00")) @[dcache.scala 318:55] 
    node T_4016 = and(io.mem.probe.valid, T_4015) @[dcache.scala 318:52] 
    metaReadArb.io.in[1].valid <= T_4016 @[dcache.scala 318:30] 
    node T_4018 = eq(block_probe, UInt<1>("h00")) @[dcache.scala 319:55] 
    node T_4019 = and(metaReadArb.io.in[1].ready, T_4018) @[dcache.scala 319:52] 
    node T_4021 = eq(s1_valid, UInt<1>("h00")) @[dcache.scala 319:71] 
    node T_4022 = and(T_4019, T_4021) @[dcache.scala 319:68] 
    node T_4024 = eq(s2_valid, UInt<1>("h00")) @[dcache.scala 319:85] 
    node T_4025 = or(T_4024, s2_valid_hit) @[dcache.scala 319:95] 
    node T_4026 = and(T_4022, T_4025) @[dcache.scala 319:81] 
    io.mem.probe.ready <= T_4026 @[dcache.scala 319:22] 
    metaReadArb.io.in[1].bits.idx <= io.mem.probe.bits.addr_block @[dcache.scala 320:33] 
    node T_4028 = not(UInt<4>("h00")) @[dcache.scala 321:39] 
    metaReadArb.io.in[1].bits.way_en <= T_4028 @[dcache.scala 321:36] 
    node T_4029 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 16:42] 
    node T_4030 = and(T_4029, inWriteback) @[dcache.scala 324:71] 
    reg writebackCount : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_4030 : @[Counter.scala 43:17] 
      node T_4033 = eq(writebackCount, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_4035 = add(writebackCount, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_4036 = tail(T_4035, 1) @[Counter.scala 21:22] 
      writebackCount <= T_4036 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node writebackDone = and(T_4030, T_4033) @[Counter.scala 44:20] 
    node T_4037 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 16:42] 
    node T_4039 = eq(inWriteback, UInt<1>("h00")) @[dcache.scala 325:64] 
    node T_4040 = and(T_4037, T_4039) @[dcache.scala 325:61] 
    node releaseDone = or(writebackDone, T_4040) @[dcache.scala 325:35] 
    node T_4042 = eq(io.mem.release.ready, UInt<1>("h00")) @[dcache.scala 326:49] 
    node releaseRejected = and(io.mem.release.valid, T_4042) @[dcache.scala 326:46] 
    node T_4043 = and(dataArb.io.in[2].ready, dataArb.io.in[2].valid) @[Decoupled.scala 16:42] 
    reg s1_release_data_valid : UInt<1>, clk
    s1_release_data_valid <= T_4043
    node T_4045 = eq(releaseRejected, UInt<1>("h00")) @[dcache.scala 328:67] 
    node T_4046 = and(s1_release_data_valid, T_4045) @[dcache.scala 328:64] 
    reg s2_release_data_valid : UInt<1>, clk
    s2_release_data_valid <= T_4046
    node T_4048 = cat(UInt<1>("h00"), writebackCount) @[Cat.scala 20:58] 
    node T_4051 = cat(UInt<1>("h00"), s2_release_data_valid) @[Cat.scala 20:58] 
    node T_4052 = add(s1_release_data_valid, T_4051) @[dcache.scala 329:108] 
    node T_4053 = tail(T_4052, 1) @[dcache.scala 329:108] 
    node T_4054 = mux(releaseRejected, UInt<1>("h00"), T_4053) @[dcache.scala 329:59] 
    node T_4055 = add(T_4048, T_4054) @[dcache.scala 329:54] 
    node releaseDataBeat = tail(T_4055, 1) @[dcache.scala 329:54] 
    io.mem.release.valid <= s2_release_data_valid @[dcache.scala 330:24] 
    wire T_4079 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_4079 is invalid @[Metadata.scala 158:20] 
    T_4079.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    node T_4104 = eq(T_4079.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4105 = mux(T_4104, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4106 = mux(T_4104, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4107 = mux(T_4104, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4108 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4109 = mux(T_4108, T_4107, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4110 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4111 = mux(T_4110, T_4106, T_4109) @[Mux.scala 46:16] 
    node T_4112 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4113 = mux(T_4112, T_4105, T_4111) @[Mux.scala 46:16] 
    node T_4114 = eq(T_4079.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4115 = mux(T_4114, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4116 = mux(T_4114, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4117 = mux(T_4114, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4118 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4119 = mux(T_4118, T_4117, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4120 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4121 = mux(T_4120, T_4116, T_4119) @[Mux.scala 46:16] 
    node T_4122 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4123 = mux(T_4122, T_4115, T_4121) @[Mux.scala 46:16] 
    node T_4124 = eq(T_4079.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4125 = mux(T_4124, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4126 = mux(T_4124, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4127 = mux(T_4124, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4128 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4129 = mux(T_4128, T_4127, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4130 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4131 = mux(T_4130, T_4126, T_4129) @[Mux.scala 46:16] 
    node T_4132 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4133 = mux(T_4132, T_4125, T_4131) @[Mux.scala 46:16] 
    node T_4134 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4135 = mux(T_4134, T_4133, UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_4136 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4137 = mux(T_4136, T_4123, T_4135) @[Mux.scala 46:16] 
    node T_4138 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4139 = mux(T_4138, T_4113, T_4137) @[Mux.scala 46:16] 
    wire T_4168 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_4168 is invalid @[Definitions.scala 747:19] 
    T_4168.r_type <= T_4139 @[Definitions.scala 748:16] 
    T_4168.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_4168.addr_block <= probe_bits.addr_block @[Definitions.scala 750:20] 
    T_4168.addr_beat <= UInt<1>("h00") @[Definitions.scala 751:19] 
    T_4168.data <= UInt<1>("h00") @[Definitions.scala 752:14] 
    T_4168.voluntary <= UInt<1>("h00") @[Definitions.scala 753:19] 
    io.mem.release.bits <- T_4168 @[dcache.scala 331:23] 
    node T_4200 = eq(s2_victim_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4201 = mux(T_4200, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4202 = mux(T_4200, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4203 = mux(T_4200, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4204 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4205 = mux(T_4204, T_4203, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4206 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4207 = mux(T_4206, T_4202, T_4205) @[Mux.scala 46:16] 
    node T_4208 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4209 = mux(T_4208, T_4201, T_4207) @[Mux.scala 46:16] 
    wire voluntaryReleaseMessage : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    voluntaryReleaseMessage is invalid @[Definitions.scala 747:19] 
    voluntaryReleaseMessage.r_type <= T_4209 @[Definitions.scala 748:16] 
    voluntaryReleaseMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    voluntaryReleaseMessage.addr_block <= UInt<1>("h00") @[Definitions.scala 750:20] 
    voluntaryReleaseMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 751:19] 
    voluntaryReleaseMessage.data <= UInt<1>("h00") @[Definitions.scala 752:14] 
    voluntaryReleaseMessage.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    node T_4263 = eq(s2_victim_state.state, UInt<2>("h02")) @[Policies.scala 263:35] 
    node T_4264 = mux(T_4263, UInt<2>("h01"), s2_victim_state.state) @[Policies.scala 263:23] 
    node T_4265 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4266 = mux(T_4265, T_4264, s2_victim_state.state) @[Mux.scala 46:16] 
    node T_4267 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4268 = mux(T_4267, UInt<2>("h00"), T_4266) @[Mux.scala 46:16] 
    wire voluntaryNewCoh : {state : UInt<2>} @[Metadata.scala 158:20] 
    voluntaryNewCoh is invalid @[Metadata.scala 158:20] 
    voluntaryNewCoh.state <= T_4268 @[Metadata.scala 159:16] 
    node T_4315 = eq(s2_probe_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4316 = mux(T_4315, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4317 = mux(T_4315, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4318 = mux(T_4315, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4319 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4320 = mux(T_4319, T_4318, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4321 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4322 = mux(T_4321, T_4317, T_4320) @[Mux.scala 46:16] 
    node T_4323 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4324 = mux(T_4323, T_4316, T_4322) @[Mux.scala 46:16] 
    node T_4325 = eq(s2_probe_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4326 = mux(T_4325, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4327 = mux(T_4325, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4328 = mux(T_4325, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4329 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4330 = mux(T_4329, T_4328, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4331 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4332 = mux(T_4331, T_4327, T_4330) @[Mux.scala 46:16] 
    node T_4333 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4334 = mux(T_4333, T_4326, T_4332) @[Mux.scala 46:16] 
    node T_4335 = eq(s2_probe_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_4336 = mux(T_4335, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_4337 = mux(T_4335, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_4338 = mux(T_4335, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_4339 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4340 = mux(T_4339, T_4338, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_4341 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4342 = mux(T_4341, T_4337, T_4340) @[Mux.scala 46:16] 
    node T_4343 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_4344 = mux(T_4343, T_4336, T_4342) @[Mux.scala 46:16] 
    node T_4345 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4346 = mux(T_4345, T_4344, UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_4347 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4348 = mux(T_4347, T_4334, T_4346) @[Mux.scala 46:16] 
    node T_4349 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4350 = mux(T_4349, T_4324, T_4348) @[Mux.scala 46:16] 
    wire probeResponseMessage : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    probeResponseMessage is invalid @[Definitions.scala 747:19] 
    probeResponseMessage.r_type <= T_4350 @[Definitions.scala 748:16] 
    probeResponseMessage.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    probeResponseMessage.addr_block <= probe_bits.addr_block @[Definitions.scala 750:20] 
    probeResponseMessage.addr_beat <= UInt<1>("h00") @[Definitions.scala 751:19] 
    probeResponseMessage.data <= UInt<1>("h00") @[Definitions.scala 752:14] 
    probeResponseMessage.voluntary <= UInt<1>("h00") @[Definitions.scala 753:19] 
    node T_4405 = eq(UInt<2>("h02"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4406 = mux(T_4405, UInt<2>("h00"), s2_probe_state.state) @[Mux.scala 46:16] 
    node T_4407 = eq(UInt<2>("h01"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4408 = mux(T_4407, UInt<2>("h00"), T_4406) @[Mux.scala 46:16] 
    node T_4409 = eq(UInt<2>("h00"), probe_bits.p_type) @[Mux.scala 46:19] 
    node T_4410 = mux(T_4409, UInt<2>("h00"), T_4408) @[Mux.scala 46:16] 
    wire probeNewCoh : {state : UInt<2>} @[Metadata.scala 158:20] 
    probeNewCoh is invalid @[Metadata.scala 158:20] 
    probeNewCoh.state <= T_4410 @[Metadata.scala 159:16] 
    wire newCoh : {state : UInt<2>}
    newCoh is invalid
    newCoh <- probeNewCoh
    releaseWay <= s2_probe_way @[dcache.scala 337:14] 
    node T_4475 = and(s2_victimize, s2_victim_dirty) @[dcache.scala 338:22] 
    when T_4475 : @[dcache.scala 338:42] 
      node T_4476 = neq(s2_hit_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
      node T_4478 = eq(T_4476, UInt<1>("h00")) @[dcache.scala 339:12] 
      node T_4479 = or(T_4478, reset) @[dcache.scala 339:11] 
      node T_4481 = eq(T_4479, UInt<1>("h00")) @[dcache.scala 339:11] 
      when T_4481 : @[dcache.scala 339:11] 
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:339 assert(!s2_hit_state.isValid())\n") @[dcache.scala 339:11] 
        stop(clk, UInt<1>(1), 1) @[dcache.scala 339:11] 
        skip @[dcache.scala 339:11] 
      release_state <= UInt<3>("h02") @[dcache.scala 340:19] 
      node T_4482 = bits(s2_req.addr, 11, 6) @[dcache.scala 341:60] 
      node T_4483 = cat(s2_victim_tag, T_4482) @[Cat.scala 20:58] 
      probe_bits.addr_block <= T_4483 @[dcache.scala 341:27] 
      skip @[dcache.scala 338:42] 
    when s2_probe : @[dcache.scala 343:19] 
      node T_4484 = eq(s2_probe_state.state, UInt<2>("h02")) @[Util.scala 7:47] 
      when T_4484 : @[dcache.scala 344:56] 
        release_state <= UInt<3>("h03") @[dcache.scala 344:72] 
        skip @[dcache.scala 344:56] 
      node T_4485 = neq(s2_probe_state.state, UInt<2>("h00")) @[Policies.scala 237:51] 
      node T_4487 = eq(T_4484, UInt<1>("h00")) @[dcache.scala 344:56] 
      node T_4488 = and(T_4487, T_4485) @[dcache.scala 345:42] 
      when T_4488 : @[dcache.scala 345:42] 
        release_state <= UInt<3>("h04") @[dcache.scala 345:58] 
        skip @[dcache.scala 345:42] 
      node T_4490 = eq(T_4484, UInt<1>("h00")) @[dcache.scala 344:56] 
      node T_4492 = eq(T_4485, UInt<1>("h00")) @[dcache.scala 345:42] 
      node T_4493 = and(T_4490, T_4492) @[dcache.scala 345:42] 
      when T_4493 : @[dcache.scala 346:16] 
        io.mem.release.valid <= UInt<1>("h01") @[dcache.scala 347:28] 
        release_state <= UInt<3>("h05") @[dcache.scala 348:21] 
        skip @[dcache.scala 346:16] 
      skip @[dcache.scala 343:19] 
    when releaseDone : @[dcache.scala 351:22] 
      release_state <= UInt<3>("h00") @[dcache.scala 351:38] 
      skip @[dcache.scala 351:22] 
    node T_4495 = eq(release_state, UInt<3>("h05")) @[dcache.scala 352:23] 
    node T_4496 = eq(release_state, UInt<3>("h04")) @[dcache.scala 352:61] 
    node T_4497 = or(T_4495, T_4496) @[dcache.scala 352:44] 
    when T_4497 : @[dcache.scala 352:84] 
      io.mem.release.valid <= UInt<1>("h01") @[dcache.scala 353:26] 
      skip @[dcache.scala 352:84] 
    node T_4499 = eq(release_state, UInt<3>("h04")) @[dcache.scala 355:23] 
    node T_4500 = eq(release_state, UInt<3>("h03")) @[dcache.scala 355:62] 
    node T_4501 = or(T_4499, T_4500) @[dcache.scala 355:45] 
    when T_4501 : @[dcache.scala 355:85] 
      io.mem.release.bits <- probeResponseMessage @[dcache.scala 356:25] 
      when releaseDone : @[dcache.scala 357:24] 
        release_state <= UInt<3>("h07") @[dcache.scala 357:40] 
        skip @[dcache.scala 357:24] 
      skip @[dcache.scala 355:85] 
    node T_4502 = eq(release_state, UInt<3>("h02")) @[dcache.scala 359:23] 
    node T_4503 = eq(release_state, UInt<3>("h06")) @[dcache.scala 359:66] 
    node T_4504 = or(T_4502, T_4503) @[dcache.scala 359:49] 
    when T_4504 : @[dcache.scala 359:94] 
      io.mem.release.bits <- voluntaryReleaseMessage @[dcache.scala 360:25] 
      newCoh <- voluntaryNewCoh @[dcache.scala 361:12] 
      releaseWay <= s2_victim_way @[dcache.scala 362:16] 
      when releaseDone : @[dcache.scala 363:24] 
        release_state <= UInt<3>("h06") @[dcache.scala 364:21] 
        release_ack_wait <= UInt<1>("h01") @[dcache.scala 365:24] 
        skip @[dcache.scala 363:24] 
      skip @[dcache.scala 359:94] 
    node T_4506 = and(io.mem.release.ready, io.mem.release.valid) @[Decoupled.scala 16:42] 
    node T_4508 = eq(T_4506, UInt<1>("h00")) @[dcache.scala 368:21] 
    node T_4509 = and(s2_probe, T_4508) @[dcache.scala 368:18] 
    when T_4509 : @[dcache.scala 368:45] 
      s1_nack <= UInt<1>("h01") @[dcache.scala 368:55] 
      skip @[dcache.scala 368:45] 
    io.mem.release.bits.addr_block <= probe_bits.addr_block @[dcache.scala 369:34] 
    io.mem.release.bits.addr_beat <= writebackCount @[dcache.scala 370:33] 
    io.mem.release.bits.data <= s2_data @[dcache.scala 371:28] 
    node T_4512 = lt(releaseDataBeat, UInt<4>("h08")) @[dcache.scala 373:60] 
    node T_4513 = and(inWriteback, T_4512) @[dcache.scala 373:41] 
    dataArb.io.in[2].valid <= T_4513 @[dcache.scala 373:26] 
    dataArb.io.in[2].bits.write <= UInt<1>("h00") @[dcache.scala 374:31] 
    node T_4515 = bits(releaseDataBeat, 2, 0) @[dcache.scala 375:84] 
    node T_4516 = cat(io.mem.release.bits.addr_block, T_4515) @[Cat.scala 20:58] 
    node T_4517 = shl(T_4516, 3) @[dcache.scala 375:112] 
    dataArb.io.in[2].bits.addr <= T_4517 @[dcache.scala 375:30] 
    node T_4519 = not(UInt<4>("h00")) @[dcache.scala 376:35] 
    dataArb.io.in[2].bits.way_en <= T_4519 @[dcache.scala 376:32] 
    node T_4520 = eq(release_state, UInt<3>("h06")) @[dcache.scala 378:49] 
    node T_4521 = eq(release_state, UInt<3>("h07")) @[dcache.scala 378:93] 
    node T_4522 = or(T_4520, T_4521) @[dcache.scala 378:76] 
    metaWriteArb.io.in[2].valid <= T_4522 @[dcache.scala 378:31] 
    metaWriteArb.io.in[2].bits.way_en <= releaseWay @[dcache.scala 379:37] 
    node T_4524 = cat(io.mem.release.bits.addr_block, io.mem.release.bits.addr_beat) @[Cat.scala 20:58] 
    node T_4525 = cat(T_4524, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_4526 = bits(T_4525, 11, 6) @[dcache.scala 380:68] 
    metaWriteArb.io.in[2].bits.idx <= T_4526 @[dcache.scala 380:34] 
    metaWriteArb.io.in[2].bits.data.coh <- newCoh @[dcache.scala 381:39] 
    node T_4528 = cat(io.mem.release.bits.addr_block, io.mem.release.bits.addr_beat) @[Cat.scala 20:58] 
    node T_4529 = cat(T_4528, UInt<3>("h00")) @[Cat.scala 20:58] 
    node T_4530 = bits(T_4529, 31, 12) @[dcache.scala 382:73] 
    metaWriteArb.io.in[2].bits.data.tag <= T_4530 @[dcache.scala 382:39] 
    node T_4531 = and(metaWriteArb.io.in[2].ready, metaWriteArb.io.in[2].valid) @[Decoupled.scala 16:42] 
    when T_4531 : @[dcache.scala 383:39] 
      release_state <= UInt<3>("h00") @[dcache.scala 383:55] 
      skip @[dcache.scala 383:39] 
    io.cpu.resp.valid <= s2_valid_hit @[dcache.scala 386:21] 
    io.cpu.resp.bits <- s2_req @[dcache.scala 387:20] 
    io.cpu.resp.bits.has_data <= s2_read @[dcache.scala 388:29] 
    io.cpu.resp.bits.replay <= UInt<1>("h00") @[dcache.scala 389:27] 
    node T_4533 = or(s1_valid, s2_valid) @[dcache.scala 390:32] 
    node T_4534 = or(T_4533, grant_wait) @[dcache.scala 390:44] 
    node T_4536 = eq(T_4534, UInt<1>("h00")) @[dcache.scala 390:21] 
    io.cpu.ordered <= T_4536 @[dcache.scala 390:18] 
    node T_4537 = and(io.mem.grant.valid, grantIsUncached) @[dcache.scala 393:44] 
    io.cpu.replay_next <= T_4537 @[dcache.scala 393:22] 
    reg doUncachedResp : UInt<1>, clk
    doUncachedResp <= io.cpu.replay_next
    when doUncachedResp : @[dcache.scala 395:25] 
      node T_4539 = eq(s2_valid_hit, UInt<1>("h00")) @[dcache.scala 396:12] 
      node T_4540 = or(T_4539, reset) @[dcache.scala 396:11] 
      node T_4542 = eq(T_4540, UInt<1>("h00")) @[dcache.scala 396:11] 
      when T_4542 : @[dcache.scala 396:11] 
        printf(clk, UInt<1>(1), "Assertion failed\n    at dcache.scala:396 assert(!s2_valid_hit)\n") @[dcache.scala 396:11] 
        stop(clk, UInt<1>(1), 1) @[dcache.scala 396:11] 
        skip @[dcache.scala 396:11] 
      io.cpu.resp.valid <= UInt<1>("h01") @[dcache.scala 397:23] 
      io.cpu.resp.bits.replay <= UInt<1>("h01") @[dcache.scala 398:29] 
      skip @[dcache.scala 395:25] 
    node T_4546 = cat(UInt<1>("h00"), UInt<6>("h00")) @[Cat.scala 20:58] 
    node s2_data_word = dshr(s2_data, T_4546) @[dcache.scala 403:30] 
    node T_4547 = bits(s2_req.typ, 1, 0) @[AmoAlu.scala 11:17] 
    node T_4548 = asSInt(s2_req.typ) @[AmoAlu.scala 39:28] 
    node T_4550 = geq(T_4548, asSInt(UInt<1>("h00"))) @[AmoAlu.scala 39:35] 
    node T_4551 = bits(s2_req.addr, 2, 2) @[AmoAlu.scala 45:29] 
    node T_4552 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 45:37] 
    node T_4553 = bits(s2_data_word, 31, 0) @[AmoAlu.scala 45:55] 
    node T_4554 = mux(T_4551, T_4552, T_4553) @[AmoAlu.scala 45:24] 
    node T_4556 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 46:33] 
    node T_4558 = mux(T_4556, UInt<1>("h00"), T_4554) @[AmoAlu.scala 47:23] 
    node T_4560 = eq(T_4547, UInt<2>("h02")) @[AmoAlu.scala 48:28] 
    node T_4561 = or(T_4560, T_4556) @[AmoAlu.scala 48:40] 
    node T_4562 = bits(T_4558, 31, 31) @[AmoAlu.scala 48:87] 
    node T_4563 = and(T_4550, T_4562) @[AmoAlu.scala 48:78] 
    node T_4564 = bits(T_4563, 0, 0) @[Bitwise.scala 33:15] 
    node T_4567 = mux(T_4564, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_4568 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 48:100] 
    node T_4569 = mux(T_4561, T_4567, T_4568) @[AmoAlu.scala 48:20] 
    node T_4570 = cat(T_4569, T_4558) @[Cat.scala 20:58] 
    node T_4571 = bits(s2_req.addr, 1, 1) @[AmoAlu.scala 45:29] 
    node T_4572 = bits(T_4570, 31, 16) @[AmoAlu.scala 45:37] 
    node T_4573 = bits(T_4570, 15, 0) @[AmoAlu.scala 45:55] 
    node T_4574 = mux(T_4571, T_4572, T_4573) @[AmoAlu.scala 45:24] 
    node T_4576 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 46:33] 
    node T_4578 = mux(T_4576, UInt<1>("h00"), T_4574) @[AmoAlu.scala 47:23] 
    node T_4580 = eq(T_4547, UInt<1>("h01")) @[AmoAlu.scala 48:28] 
    node T_4581 = or(T_4580, T_4576) @[AmoAlu.scala 48:40] 
    node T_4582 = bits(T_4578, 15, 15) @[AmoAlu.scala 48:87] 
    node T_4583 = and(T_4550, T_4582) @[AmoAlu.scala 48:78] 
    node T_4584 = bits(T_4583, 0, 0) @[Bitwise.scala 33:15] 
    node T_4587 = mux(T_4584, UInt<48>("h0ffffffffffff"), UInt<48>("h00")) @[Bitwise.scala 33:12] 
    node T_4588 = bits(T_4570, 63, 16) @[AmoAlu.scala 48:100] 
    node T_4589 = mux(T_4581, T_4587, T_4588) @[AmoAlu.scala 48:20] 
    node T_4590 = cat(T_4589, T_4578) @[Cat.scala 20:58] 
    node T_4591 = bits(s2_req.addr, 0, 0) @[AmoAlu.scala 45:29] 
    node T_4592 = bits(T_4590, 15, 8) @[AmoAlu.scala 45:37] 
    node T_4593 = bits(T_4590, 7, 0) @[AmoAlu.scala 45:55] 
    node T_4594 = mux(T_4591, T_4592, T_4593) @[AmoAlu.scala 45:24] 
    node T_4596 = and(UInt<1>("h01"), s2_sc) @[AmoAlu.scala 46:33] 
    node T_4598 = mux(T_4596, UInt<1>("h00"), T_4594) @[AmoAlu.scala 47:23] 
    node T_4600 = eq(T_4547, UInt<1>("h00")) @[AmoAlu.scala 48:28] 
    node T_4601 = or(T_4600, T_4596) @[AmoAlu.scala 48:40] 
    node T_4602 = bits(T_4598, 7, 7) @[AmoAlu.scala 48:87] 
    node T_4603 = and(T_4550, T_4602) @[AmoAlu.scala 48:78] 
    node T_4604 = bits(T_4603, 0, 0) @[Bitwise.scala 33:15] 
    node T_4607 = mux(T_4604, UInt<56>("h0ffffffffffffff"), UInt<56>("h00")) @[Bitwise.scala 33:12] 
    node T_4608 = bits(T_4590, 63, 8) @[AmoAlu.scala 48:100] 
    node T_4609 = mux(T_4601, T_4607, T_4608) @[AmoAlu.scala 48:20] 
    node T_4610 = cat(T_4609, T_4598) @[Cat.scala 20:58] 
    node T_4611 = or(T_4610, s2_sc_fail) @[dcache.scala 405:41] 
    io.cpu.resp.bits.data <= T_4611 @[dcache.scala 405:25] 
    node T_4612 = bits(s2_req.addr, 2, 2) @[AmoAlu.scala 45:29] 
    node T_4613 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 45:37] 
    node T_4614 = bits(s2_data_word, 31, 0) @[AmoAlu.scala 45:55] 
    node T_4615 = mux(T_4612, T_4613, T_4614) @[AmoAlu.scala 45:24] 
    node T_4617 = and(UInt<1>("h00"), s2_sc) @[AmoAlu.scala 46:33] 
    node T_4619 = mux(T_4617, UInt<1>("h00"), T_4615) @[AmoAlu.scala 47:23] 
    node T_4621 = eq(T_4547, UInt<2>("h02")) @[AmoAlu.scala 48:28] 
    node T_4622 = or(T_4621, T_4617) @[AmoAlu.scala 48:40] 
    node T_4623 = bits(T_4619, 31, 31) @[AmoAlu.scala 48:87] 
    node T_4624 = and(T_4550, T_4623) @[AmoAlu.scala 48:78] 
    node T_4625 = bits(T_4624, 0, 0) @[Bitwise.scala 33:15] 
    node T_4628 = mux(T_4625, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_4629 = bits(s2_data_word, 63, 32) @[AmoAlu.scala 48:100] 
    node T_4630 = mux(T_4622, T_4628, T_4629) @[AmoAlu.scala 48:20] 
    node T_4631 = cat(T_4630, T_4619) @[Cat.scala 20:58] 
    io.cpu.resp.bits.data_word_bypass <= T_4631 @[dcache.scala 406:37] 
    io.cpu.resp.bits.store_data <= pstore1_data @[dcache.scala 407:31] 
    inst AMOALU_1 of AMOALU @[dcache.scala 411:24] 
    AMOALU_1.io is invalid
    AMOALU_1.clk <= clk
    AMOALU_1.reset <= reset
    AMOALU_1.io.addr <= pstore1_addr @[dcache.scala 412:20] 
    AMOALU_1.io.cmd <= pstore1_cmd @[dcache.scala 413:19] 
    AMOALU_1.io.typ <= pstore1_typ @[dcache.scala 414:19] 
    AMOALU_1.io.lhs <= s2_data_word @[dcache.scala 415:19] 
    AMOALU_1.io.rhs <= pstore1_data @[dcache.scala 416:19] 
    pstore1_storegen_data <= AMOALU_1.io.out @[dcache.scala 417:27] 
    reg flushed : UInt<1>, clk with : (reset => (reset, UInt<1>("h01")))
    reg flushing : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_4635 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    node T_4636 = and(io.mem.acquire.ready, io.mem.acquire.valid) @[Decoupled.scala 16:42] 
    when T_4636 : @[dcache.scala 426:32] 
      flushed <= UInt<1>("h00") @[dcache.scala 426:42] 
      skip @[dcache.scala 426:32] 
    node T_4638 = eq(s2_req.cmd, UInt<5>("h05")) @[dcache.scala 427:39] 
    node T_4639 = and(s2_valid_masked, T_4638) @[dcache.scala 427:25] 
    when T_4639 : @[dcache.scala 427:56] 
      node T_4641 = eq(flushed, UInt<1>("h00")) @[dcache.scala 428:23] 
      io.cpu.s2_nack <= T_4641 @[dcache.scala 428:20] 
      node T_4643 = eq(flushed, UInt<1>("h00")) @[dcache.scala 429:11] 
      when T_4643 : @[dcache.scala 429:21] 
        node T_4645 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 430:19] 
        flushing <= T_4645 @[dcache.scala 430:16] 
        skip @[dcache.scala 429:21] 
      skip @[dcache.scala 427:56] 
    node T_4646 = and(metaReadArb.io.in[0].ready, metaReadArb.io.in[0].valid) @[Decoupled.scala 16:42] 
    node T_4648 = eq(s1_flush_valid, UInt<1>("h00")) @[dcache.scala 433:52] 
    node T_4649 = and(T_4646, T_4648) @[dcache.scala 433:49] 
    node T_4651 = eq(s2_flush_valid, UInt<1>("h00")) @[dcache.scala 433:71] 
    node T_4652 = and(T_4649, T_4651) @[dcache.scala 433:68] 
    node T_4653 = eq(release_state, UInt<3>("h00")) @[dcache.scala 433:104] 
    node T_4654 = and(T_4652, T_4653) @[dcache.scala 433:87] 
    node T_4656 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 433:119] 
    node T_4657 = and(T_4654, T_4656) @[dcache.scala 433:116] 
    s1_flush_valid <= T_4657 @[dcache.scala 433:18] 
    metaReadArb.io.in[0].valid <= flushing @[dcache.scala 434:30] 
    metaReadArb.io.in[0].bits.idx <= T_4635 @[dcache.scala 435:33] 
    node T_4659 = not(UInt<4>("h00")) @[dcache.scala 436:39] 
    metaReadArb.io.in[0].bits.way_en <= T_4659 @[dcache.scala 436:36] 
    when flushing : @[dcache.scala 437:19] 
      node T_4660 = shr(T_4635, 6) @[dcache.scala 438:41] 
      s1_victim_way <= T_4660 @[dcache.scala 438:19] 
      when s2_flush_valid : @[dcache.scala 439:27] 
        node T_4662 = eq(T_4635, UInt<8>("h0ff")) @[Counter.scala 20:24] 
        node T_4664 = add(T_4635, UInt<1>("h01")) @[Counter.scala 21:22] 
        node T_4665 = tail(T_4664, 1) @[Counter.scala 21:22] 
        T_4635 <= T_4665 @[Counter.scala 21:13] 
        when T_4662 : @[dcache.scala 440:33] 
          flushed <= UInt<1>("h01") @[dcache.scala 441:17] 
          skip @[dcache.scala 440:33] 
        skip @[dcache.scala 439:27] 
      node T_4667 = eq(release_state, UInt<3>("h00")) @[dcache.scala 444:36] 
      node T_4668 = and(flushed, T_4667) @[dcache.scala 444:19] 
      node T_4670 = eq(release_ack_wait, UInt<1>("h00")) @[dcache.scala 444:51] 
      node T_4671 = and(T_4668, T_4670) @[dcache.scala 444:48] 
      when T_4671 : @[dcache.scala 444:70] 
        flushing <= UInt<1>("h00") @[dcache.scala 445:16] 
        skip @[dcache.scala 444:70] 
      skip @[dcache.scala 437:19] 
    
  module FPUDecoder : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, sigs : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}}
    
    io is invalid
    node T_20 = and(io.inst, UInt<32>("h04")) @[decode.scala 13:65] 
    node T_22 = eq(T_20, UInt<32>("h04")) @[decode.scala 13:121] 
    node T_24 = and(io.inst, UInt<32>("h08000010")) @[decode.scala 13:65] 
    node T_26 = eq(T_24, UInt<32>("h08000010")) @[decode.scala 13:121] 
    node T_28 = or(UInt<1>("h00"), T_22) @[decode.scala 14:30] 
    node T_29 = or(T_28, T_26) @[decode.scala 14:30] 
    node T_31 = and(io.inst, UInt<32>("h08")) @[decode.scala 13:65] 
    node T_33 = eq(T_31, UInt<32>("h08")) @[decode.scala 13:121] 
    node T_35 = and(io.inst, UInt<32>("h010000010")) @[decode.scala 13:65] 
    node T_37 = eq(T_35, UInt<32>("h010000010")) @[decode.scala 13:121] 
    node T_39 = or(UInt<1>("h00"), T_33) @[decode.scala 14:30] 
    node T_40 = or(T_39, T_37) @[decode.scala 14:30] 
    node T_42 = and(io.inst, UInt<32>("h040")) @[decode.scala 13:65] 
    node T_44 = eq(T_42, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_46 = and(io.inst, UInt<32>("h020000000")) @[decode.scala 13:65] 
    node T_48 = eq(T_46, UInt<32>("h020000000")) @[decode.scala 13:121] 
    node T_50 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30] 
    node T_51 = or(T_50, T_48) @[decode.scala 14:30] 
    node T_53 = and(io.inst, UInt<32>("h040000000")) @[decode.scala 13:65] 
    node T_55 = eq(T_53, UInt<32>("h040000000")) @[decode.scala 13:121] 
    node T_57 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30] 
    node T_58 = or(T_57, T_55) @[decode.scala 14:30] 
    node T_60 = and(io.inst, UInt<32>("h010")) @[decode.scala 13:65] 
    node T_62 = eq(T_60, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_64 = or(UInt<1>("h00"), T_62) @[decode.scala 14:30] 
    node T_65 = cat(T_40, T_29) @[Cat.scala 20:58] 
    node T_66 = cat(T_64, T_58) @[Cat.scala 20:58] 
    node T_67 = cat(T_66, T_51) @[Cat.scala 20:58] 
    node decoder_0 = cat(T_67, T_65) @[Cat.scala 20:58] 
    node decoder_1 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30] 
    node T_70 = and(io.inst, UInt<32>("h080000020")) @[decode.scala 13:65] 
    node T_72 = eq(T_70, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_74 = and(io.inst, UInt<32>("h030")) @[decode.scala 13:65] 
    node T_76 = eq(T_74, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_78 = and(io.inst, UInt<32>("h010000020")) @[decode.scala 13:65] 
    node T_80 = eq(T_78, UInt<32>("h010000000")) @[decode.scala 13:121] 
    node T_82 = or(UInt<1>("h00"), T_72) @[decode.scala 14:30] 
    node T_83 = or(T_82, T_76) @[decode.scala 14:30] 
    node decoder_2 = or(T_83, T_80) @[decode.scala 14:30] 
    node T_85 = and(io.inst, UInt<32>("h080000004")) @[decode.scala 13:65] 
    node T_87 = eq(T_85, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_89 = and(io.inst, UInt<32>("h010000004")) @[decode.scala 13:65] 
    node T_91 = eq(T_89, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_93 = and(io.inst, UInt<32>("h050")) @[decode.scala 13:65] 
    node T_95 = eq(T_93, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_97 = or(UInt<1>("h00"), T_87) @[decode.scala 14:30] 
    node T_98 = or(T_97, T_91) @[decode.scala 14:30] 
    node decoder_3 = or(T_98, T_95) @[decode.scala 14:30] 
    node T_100 = and(io.inst, UInt<32>("h040000004")) @[decode.scala 13:65] 
    node T_102 = eq(T_100, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_104 = and(io.inst, UInt<32>("h020")) @[decode.scala 13:65] 
    node T_106 = eq(T_104, UInt<32>("h020")) @[decode.scala 13:121] 
    node T_108 = or(UInt<1>("h00"), T_102) @[decode.scala 14:30] 
    node T_109 = or(T_108, T_106) @[decode.scala 14:30] 
    node decoder_4 = or(T_109, T_95) @[decode.scala 14:30] 
    node decoder_5 = or(UInt<1>("h00"), T_95) @[decode.scala 14:30] 
    node T_112 = and(io.inst, UInt<32>("h050000010")) @[decode.scala 13:65] 
    node T_114 = eq(T_112, UInt<32>("h050000010")) @[decode.scala 13:121] 
    node T_116 = or(UInt<1>("h00"), T_44) @[decode.scala 14:30] 
    node decoder_6 = or(T_116, T_114) @[decode.scala 14:30] 
    node T_118 = and(io.inst, UInt<32>("h030000010")) @[decode.scala 13:65] 
    node T_120 = eq(T_118, UInt<32>("h010")) @[decode.scala 13:121] 
    node decoder_7 = or(UInt<1>("h00"), T_120) @[decode.scala 14:30] 
    node T_123 = and(io.inst, UInt<32>("h01040")) @[decode.scala 13:65] 
    node T_125 = eq(T_123, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_127 = and(io.inst, UInt<32>("h02000040")) @[decode.scala 13:65] 
    node T_129 = eq(T_127, UInt<32>("h040")) @[decode.scala 13:121] 
    node T_131 = or(UInt<1>("h00"), T_125) @[decode.scala 14:30] 
    node decoder_8 = or(T_131, T_129) @[decode.scala 14:30] 
    node T_133 = and(io.inst, UInt<32>("h090000010")) @[decode.scala 13:65] 
    node T_135 = eq(T_133, UInt<32>("h090000010")) @[decode.scala 13:121] 
    node decoder_9 = or(UInt<1>("h00"), T_135) @[decode.scala 14:30] 
    node T_138 = and(io.inst, UInt<32>("h090000010")) @[decode.scala 13:65] 
    node T_140 = eq(T_138, UInt<32>("h080000010")) @[decode.scala 13:121] 
    node T_142 = or(UInt<1>("h00"), T_106) @[decode.scala 14:30] 
    node decoder_10 = or(T_142, T_140) @[decode.scala 14:30] 
    node T_144 = and(io.inst, UInt<32>("h0a0000010")) @[decode.scala 13:65] 
    node T_146 = eq(T_144, UInt<32>("h020000010")) @[decode.scala 13:121] 
    node T_148 = and(io.inst, UInt<32>("h0d0000010")) @[decode.scala 13:65] 
    node T_150 = eq(T_148, UInt<32>("h040000010")) @[decode.scala 13:121] 
    node T_152 = or(UInt<1>("h00"), T_146) @[decode.scala 14:30] 
    node decoder_11 = or(T_152, T_150) @[decode.scala 14:30] 
    node T_154 = and(io.inst, UInt<32>("h070000004")) @[decode.scala 13:65] 
    node T_156 = eq(T_154, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_158 = and(io.inst, UInt<32>("h068000004")) @[decode.scala 13:65] 
    node T_160 = eq(T_158, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_162 = or(UInt<1>("h00"), T_156) @[decode.scala 14:30] 
    node T_163 = or(T_162, T_160) @[decode.scala 14:30] 
    node decoder_12 = or(T_163, T_95) @[decode.scala 14:30] 
    node T_165 = and(io.inst, UInt<32>("h058000010")) @[decode.scala 13:65] 
    node T_167 = eq(T_165, UInt<32>("h018000010")) @[decode.scala 13:121] 
    node decoder_13 = or(UInt<1>("h00"), T_167) @[decode.scala 14:30] 
    node T_170 = and(io.inst, UInt<32>("h0d0000010")) @[decode.scala 13:65] 
    node T_172 = eq(T_170, UInt<32>("h050000010")) @[decode.scala 13:121] 
    node decoder_14 = or(UInt<1>("h00"), T_172) @[decode.scala 14:30] 
    node T_175 = and(io.inst, UInt<32>("h020000004")) @[decode.scala 13:65] 
    node T_177 = eq(T_175, UInt<32>("h00")) @[decode.scala 13:121] 
    node T_179 = and(io.inst, UInt<32>("h040002000")) @[decode.scala 13:65] 
    node T_181 = eq(T_179, UInt<32>("h040000000")) @[decode.scala 13:121] 
    node T_183 = or(UInt<1>("h00"), T_177) @[decode.scala 14:30] 
    node T_184 = or(T_183, T_95) @[decode.scala 14:30] 
    node decoder_15 = or(T_184, T_181) @[decode.scala 14:30] 
    node T_186 = and(io.inst, UInt<32>("h08002000")) @[decode.scala 13:65] 
    node T_188 = eq(T_186, UInt<32>("h08000000")) @[decode.scala 13:121] 
    node T_190 = and(io.inst, UInt<32>("h0c0000004")) @[decode.scala 13:65] 
    node T_192 = eq(T_190, UInt<32>("h080000000")) @[decode.scala 13:121] 
    node T_194 = or(UInt<1>("h00"), T_177) @[decode.scala 14:30] 
    node T_195 = or(T_194, T_95) @[decode.scala 14:30] 
    node T_196 = or(T_195, T_188) @[decode.scala 14:30] 
    node decoder_16 = or(T_196, T_192) @[decode.scala 14:30] 
    io.sigs.cmd <= decoder_0 @[fpu.scala 138:40] 
    io.sigs.ldst <= decoder_1 @[fpu.scala 138:40] 
    io.sigs.wen <= decoder_2 @[fpu.scala 138:40] 
    io.sigs.ren1 <= decoder_3 @[fpu.scala 138:40] 
    io.sigs.ren2 <= decoder_4 @[fpu.scala 138:40] 
    io.sigs.ren3 <= decoder_5 @[fpu.scala 138:40] 
    io.sigs.swap12 <= decoder_6 @[fpu.scala 138:40] 
    io.sigs.swap23 <= decoder_7 @[fpu.scala 138:40] 
    io.sigs.single <= decoder_8 @[fpu.scala 138:40] 
    io.sigs.fromint <= decoder_9 @[fpu.scala 138:40] 
    io.sigs.toint <= decoder_10 @[fpu.scala 138:40] 
    io.sigs.fastpipe <= decoder_11 @[fpu.scala 138:40] 
    io.sigs.fma <= decoder_12 @[fpu.scala 138:40] 
    io.sigs.div <= decoder_13 @[fpu.scala 138:40] 
    io.sigs.sqrt <= decoder_14 @[fpu.scala 138:40] 
    io.sigs.round <= decoder_15 @[fpu.scala 138:40] 
    io.sigs.wflags <= decoder_16 @[fpu.scala 138:40] 
    
  module MulAddRecFN_preMul : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, flip roundingMode : UInt<2>, mulAddA : UInt<24>, mulAddB : UInt<24>, mulAddC : UInt<48>, toPostMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<7>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<26>, sExpSum : UInt<11>, roundingMode : UInt<2>}}
    
    io is invalid
    node signA = bits(io.a, 32, 32) @[MulAddRecFN.scala 102:22] 
    node expA = bits(io.a, 31, 23) @[MulAddRecFN.scala 103:22] 
    node fractA = bits(io.a, 22, 0) @[MulAddRecFN.scala 104:22] 
    node T_42 = bits(expA, 8, 6) @[MulAddRecFN.scala 105:24] 
    node isZeroA = eq(T_42, UInt<1>("h00")) @[MulAddRecFN.scala 105:49] 
    node T_45 = eq(isZeroA, UInt<1>("h00")) @[MulAddRecFN.scala 106:20] 
    node sigA = cat(T_45, fractA) @[Cat.scala 20:58] 
    node signB = bits(io.b, 32, 32) @[MulAddRecFN.scala 108:22] 
    node expB = bits(io.b, 31, 23) @[MulAddRecFN.scala 109:22] 
    node fractB = bits(io.b, 22, 0) @[MulAddRecFN.scala 110:22] 
    node T_46 = bits(expB, 8, 6) @[MulAddRecFN.scala 111:24] 
    node isZeroB = eq(T_46, UInt<1>("h00")) @[MulAddRecFN.scala 111:49] 
    node T_49 = eq(isZeroB, UInt<1>("h00")) @[MulAddRecFN.scala 112:20] 
    node sigB = cat(T_49, fractB) @[Cat.scala 20:58] 
    node T_50 = bits(io.c, 32, 32) @[MulAddRecFN.scala 114:23] 
    node T_51 = bits(io.op, 0, 0) @[MulAddRecFN.scala 114:52] 
    node opSignC = xor(T_50, T_51) @[MulAddRecFN.scala 114:45] 
    node expC = bits(io.c, 31, 23) @[MulAddRecFN.scala 115:22] 
    node fractC = bits(io.c, 22, 0) @[MulAddRecFN.scala 116:22] 
    node T_52 = bits(expC, 8, 6) @[MulAddRecFN.scala 117:24] 
    node isZeroC = eq(T_52, UInt<1>("h00")) @[MulAddRecFN.scala 117:49] 
    node T_55 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 118:20] 
    node sigC = cat(T_55, fractC) @[Cat.scala 20:58] 
    node T_56 = xor(signA, signB) @[MulAddRecFN.scala 122:26] 
    node T_57 = bits(io.op, 1, 1) @[MulAddRecFN.scala 122:41] 
    node signProd = xor(T_56, T_57) @[MulAddRecFN.scala 122:34] 
    node isZeroProd = or(isZeroA, isZeroB) @[MulAddRecFN.scala 123:30] 
    node T_58 = bits(expB, 8, 8) @[MulAddRecFN.scala 125:34] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 125:28] 
    node T_61 = bits(T_60, 0, 0) @[Bitwise.scala 33:15] 
    node T_64 = mux(T_61, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_65 = bits(expB, 7, 0) @[MulAddRecFN.scala 125:51] 
    node T_66 = cat(T_64, T_65) @[Cat.scala 20:58] 
    node T_67 = add(expA, T_66) @[MulAddRecFN.scala 125:14] 
    node T_68 = tail(T_67, 1) @[MulAddRecFN.scala 125:14] 
    node T_70 = add(T_68, UInt<5>("h01b")) @[MulAddRecFN.scala 125:70] 
    node sExpAlignedProd = tail(T_70, 1) @[MulAddRecFN.scala 125:70] 
    node doSubMags = xor(signProd, opSignC) @[MulAddRecFN.scala 130:30] 
    node T_71 = sub(sExpAlignedProd, expC) @[MulAddRecFN.scala 132:42] 
    node sNatCAlignDist = tail(T_71, 1) @[MulAddRecFN.scala 132:42] 
    node T_72 = bits(sNatCAlignDist, 10, 10) @[MulAddRecFN.scala 133:56] 
    node CAlignDist_floor = or(isZeroProd, T_72) @[MulAddRecFN.scala 133:39] 
    node T_73 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 135:44] 
    node T_75 = eq(T_73, UInt<1>("h00")) @[MulAddRecFN.scala 135:62] 
    node CAlignDist_0 = or(CAlignDist_floor, T_75) @[MulAddRecFN.scala 135:26] 
    node T_77 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 137:9] 
    node T_78 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 139:33] 
    node T_80 = lt(T_78, UInt<5>("h019")) @[MulAddRecFN.scala 139:51] 
    node T_81 = or(CAlignDist_floor, T_80) @[MulAddRecFN.scala 138:31] 
    node isCDominant = and(T_77, T_81) @[MulAddRecFN.scala 137:19] 
    node T_83 = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 143:31] 
    node T_85 = lt(T_83, UInt<7>("h04a")) @[MulAddRecFN.scala 143:49] 
    node T_86 = bits(sNatCAlignDist, 6, 0) @[MulAddRecFN.scala 144:31] 
    node T_88 = mux(T_85, T_86, UInt<7>("h04a")) @[MulAddRecFN.scala 143:16] 
    node CAlignDist = mux(CAlignDist_floor, UInt<1>("h00"), T_88) @[MulAddRecFN.scala 141:12] 
    node sExpSum = mux(CAlignDist_floor, expC, sExpAlignedProd) @[MulAddRecFN.scala 148:22] 
    node T_89 = bits(CAlignDist, 6, 6) @[primitives.scala 56:25] 
    node T_90 = bits(CAlignDist, 5, 0) @[primitives.scala 57:26] 
    node T_92 = dshr(asSInt(UInt<65>("h010000000000000000")), T_90) @[primitives.scala 68:52] 
    node T_93 = bits(T_92, 63, 54) @[primitives.scala 69:26] 
    node T_94 = bits(T_93, 7, 0) @[Bitwise.scala 65:18] 
    node T_97 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47] 
    node T_98 = xor(UInt<8>("h0ff"), T_97) @[Bitwise.scala 58:21] 
    node T_99 = shr(T_94, 4) @[Bitwise.scala 59:21] 
    node T_100 = and(T_99, T_98) @[Bitwise.scala 59:31] 
    node T_101 = bits(T_94, 3, 0) @[Bitwise.scala 59:46] 
    node T_102 = shl(T_101, 4) @[Bitwise.scala 59:65] 
    node T_103 = not(T_98) @[Bitwise.scala 59:77] 
    node T_104 = and(T_102, T_103) @[Bitwise.scala 59:75] 
    node T_105 = or(T_100, T_104) @[Bitwise.scala 59:39] 
    node T_106 = bits(T_98, 5, 0) @[Bitwise.scala 58:28] 
    node T_107 = shl(T_106, 2) @[Bitwise.scala 58:47] 
    node T_108 = xor(T_98, T_107) @[Bitwise.scala 58:21] 
    node T_109 = shr(T_105, 2) @[Bitwise.scala 59:21] 
    node T_110 = and(T_109, T_108) @[Bitwise.scala 59:31] 
    node T_111 = bits(T_105, 5, 0) @[Bitwise.scala 59:46] 
    node T_112 = shl(T_111, 2) @[Bitwise.scala 59:65] 
    node T_113 = not(T_108) @[Bitwise.scala 59:77] 
    node T_114 = and(T_112, T_113) @[Bitwise.scala 59:75] 
    node T_115 = or(T_110, T_114) @[Bitwise.scala 59:39] 
    node T_116 = bits(T_108, 6, 0) @[Bitwise.scala 58:28] 
    node T_117 = shl(T_116, 1) @[Bitwise.scala 58:47] 
    node T_118 = xor(T_108, T_117) @[Bitwise.scala 58:21] 
    node T_119 = shr(T_115, 1) @[Bitwise.scala 59:21] 
    node T_120 = and(T_119, T_118) @[Bitwise.scala 59:31] 
    node T_121 = bits(T_115, 6, 0) @[Bitwise.scala 59:46] 
    node T_122 = shl(T_121, 1) @[Bitwise.scala 59:65] 
    node T_123 = not(T_118) @[Bitwise.scala 59:77] 
    node T_124 = and(T_122, T_123) @[Bitwise.scala 59:75] 
    node T_125 = or(T_120, T_124) @[Bitwise.scala 59:39] 
    node T_126 = bits(T_93, 9, 8) @[Bitwise.scala 65:44] 
    node T_127 = bits(T_126, 0, 0) @[Bitwise.scala 65:18] 
    node T_128 = bits(T_126, 1, 1) @[Bitwise.scala 65:44] 
    node T_129 = cat(T_127, T_128) @[Cat.scala 20:58] 
    node T_130 = cat(T_125, T_129) @[Cat.scala 20:58] 
    node T_132 = cat(T_130, UInt<14>("h03fff")) @[Cat.scala 20:58] 
    node T_134 = dshr(asSInt(UInt<65>("h010000000000000000")), T_90) @[primitives.scala 68:52] 
    node T_135 = bits(T_134, 13, 0) @[primitives.scala 69:26] 
    node T_136 = bits(T_135, 7, 0) @[Bitwise.scala 65:18] 
    node T_139 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47] 
    node T_140 = xor(UInt<8>("h0ff"), T_139) @[Bitwise.scala 58:21] 
    node T_141 = shr(T_136, 4) @[Bitwise.scala 59:21] 
    node T_142 = and(T_141, T_140) @[Bitwise.scala 59:31] 
    node T_143 = bits(T_136, 3, 0) @[Bitwise.scala 59:46] 
    node T_144 = shl(T_143, 4) @[Bitwise.scala 59:65] 
    node T_145 = not(T_140) @[Bitwise.scala 59:77] 
    node T_146 = and(T_144, T_145) @[Bitwise.scala 59:75] 
    node T_147 = or(T_142, T_146) @[Bitwise.scala 59:39] 
    node T_148 = bits(T_140, 5, 0) @[Bitwise.scala 58:28] 
    node T_149 = shl(T_148, 2) @[Bitwise.scala 58:47] 
    node T_150 = xor(T_140, T_149) @[Bitwise.scala 58:21] 
    node T_151 = shr(T_147, 2) @[Bitwise.scala 59:21] 
    node T_152 = and(T_151, T_150) @[Bitwise.scala 59:31] 
    node T_153 = bits(T_147, 5, 0) @[Bitwise.scala 59:46] 
    node T_154 = shl(T_153, 2) @[Bitwise.scala 59:65] 
    node T_155 = not(T_150) @[Bitwise.scala 59:77] 
    node T_156 = and(T_154, T_155) @[Bitwise.scala 59:75] 
    node T_157 = or(T_152, T_156) @[Bitwise.scala 59:39] 
    node T_158 = bits(T_150, 6, 0) @[Bitwise.scala 58:28] 
    node T_159 = shl(T_158, 1) @[Bitwise.scala 58:47] 
    node T_160 = xor(T_150, T_159) @[Bitwise.scala 58:21] 
    node T_161 = shr(T_157, 1) @[Bitwise.scala 59:21] 
    node T_162 = and(T_161, T_160) @[Bitwise.scala 59:31] 
    node T_163 = bits(T_157, 6, 0) @[Bitwise.scala 59:46] 
    node T_164 = shl(T_163, 1) @[Bitwise.scala 59:65] 
    node T_165 = not(T_160) @[Bitwise.scala 59:77] 
    node T_166 = and(T_164, T_165) @[Bitwise.scala 59:75] 
    node T_167 = or(T_162, T_166) @[Bitwise.scala 59:39] 
    node T_168 = bits(T_135, 13, 8) @[Bitwise.scala 65:44] 
    node T_169 = bits(T_168, 3, 0) @[Bitwise.scala 65:18] 
    node T_170 = bits(T_169, 1, 0) @[Bitwise.scala 65:18] 
    node T_171 = bits(T_170, 0, 0) @[Bitwise.scala 65:18] 
    node T_172 = bits(T_170, 1, 1) @[Bitwise.scala 65:44] 
    node T_173 = cat(T_171, T_172) @[Cat.scala 20:58] 
    node T_174 = bits(T_169, 3, 2) @[Bitwise.scala 65:44] 
    node T_175 = bits(T_174, 0, 0) @[Bitwise.scala 65:18] 
    node T_176 = bits(T_174, 1, 1) @[Bitwise.scala 65:44] 
    node T_177 = cat(T_175, T_176) @[Cat.scala 20:58] 
    node T_178 = cat(T_173, T_177) @[Cat.scala 20:58] 
    node T_179 = bits(T_168, 5, 4) @[Bitwise.scala 65:44] 
    node T_180 = bits(T_179, 0, 0) @[Bitwise.scala 65:18] 
    node T_181 = bits(T_179, 1, 1) @[Bitwise.scala 65:44] 
    node T_182 = cat(T_180, T_181) @[Cat.scala 20:58] 
    node T_183 = cat(T_178, T_182) @[Cat.scala 20:58] 
    node T_184 = cat(T_167, T_183) @[Cat.scala 20:58] 
    node CExtraMask = mux(T_89, T_132, T_184) @[primitives.scala 61:20] 
    node T_185 = not(sigC) @[MulAddRecFN.scala 151:34] 
    node negSigC = mux(doSubMags, T_185, sigC) @[MulAddRecFN.scala 151:22] 
    node T_186 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_189 = mux(T_186, UInt<50>("h03ffffffffffff"), UInt<50>("h00")) @[Bitwise.scala 33:12] 
    node T_190 = cat(doSubMags, negSigC) @[Cat.scala 20:58] 
    node T_191 = cat(T_190, T_189) @[Cat.scala 20:58] 
    node T_192 = asSInt(T_191) @[MulAddRecFN.scala 154:64] 
    node T_193 = dshr(T_192, CAlignDist) @[MulAddRecFN.scala 154:70] 
    node T_194 = and(sigC, CExtraMask) @[MulAddRecFN.scala 156:19] 
    node T_196 = neq(T_194, UInt<1>("h00")) @[MulAddRecFN.scala 156:33] 
    node T_197 = xor(T_196, doSubMags) @[MulAddRecFN.scala 156:37] 
    node T_198 = asUInt(T_193) @[Cat.scala 20:58] 
    node T_199 = cat(T_198, T_197) @[Cat.scala 20:58] 
    node alignedNegSigC = bits(T_199, 74, 0) @[MulAddRecFN.scala 157:10] 
    io.mulAddA <= sigA @[MulAddRecFN.scala 159:16] 
    io.mulAddB <= sigB @[MulAddRecFN.scala 160:16] 
    node T_200 = bits(alignedNegSigC, 48, 1) @[MulAddRecFN.scala 161:33] 
    io.mulAddC <= T_200 @[MulAddRecFN.scala 161:16] 
    node T_201 = bits(expA, 8, 6) @[MulAddRecFN.scala 163:44] 
    io.toPostMul.highExpA <= T_201 @[MulAddRecFN.scala 163:37] 
    node T_202 = bits(fractA, 22, 22) @[MulAddRecFN.scala 164:46] 
    io.toPostMul.isNaN_isQuietNaNA <= T_202 @[MulAddRecFN.scala 164:37] 
    node T_203 = bits(expB, 8, 6) @[MulAddRecFN.scala 165:44] 
    io.toPostMul.highExpB <= T_203 @[MulAddRecFN.scala 165:37] 
    node T_204 = bits(fractB, 22, 22) @[MulAddRecFN.scala 166:46] 
    io.toPostMul.isNaN_isQuietNaNB <= T_204 @[MulAddRecFN.scala 166:37] 
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 167:37] 
    io.toPostMul.isZeroProd <= isZeroProd @[MulAddRecFN.scala 168:37] 
    io.toPostMul.opSignC <= opSignC @[MulAddRecFN.scala 169:37] 
    node T_205 = bits(expC, 8, 6) @[MulAddRecFN.scala 170:44] 
    io.toPostMul.highExpC <= T_205 @[MulAddRecFN.scala 170:37] 
    node T_206 = bits(fractC, 22, 22) @[MulAddRecFN.scala 171:46] 
    io.toPostMul.isNaN_isQuietNaNC <= T_206 @[MulAddRecFN.scala 171:37] 
    io.toPostMul.isCDominant <= isCDominant @[MulAddRecFN.scala 172:37] 
    io.toPostMul.CAlignDist_0 <= CAlignDist_0 @[MulAddRecFN.scala 173:37] 
    io.toPostMul.CAlignDist <= CAlignDist @[MulAddRecFN.scala 174:37] 
    node T_207 = bits(alignedNegSigC, 0, 0) @[MulAddRecFN.scala 175:54] 
    io.toPostMul.bit0AlignedNegSigC <= T_207 @[MulAddRecFN.scala 175:37] 
    node T_208 = bits(alignedNegSigC, 74, 49) @[MulAddRecFN.scala 177:23] 
    io.toPostMul.highAlignedNegSigC <= T_208 @[MulAddRecFN.scala 176:37] 
    io.toPostMul.sExpSum <= sExpSum @[MulAddRecFN.scala 178:37] 
    io.toPostMul.roundingMode <= io.roundingMode @[MulAddRecFN.scala 179:37] 
    
  module MulAddRecFN_postMul : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip fromPreMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<7>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<26>, sExpSum : UInt<11>, roundingMode : UInt<2>}, flip mulAddResult : UInt<49>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node isZeroA = eq(io.fromPreMul.highExpA, UInt<1>("h00")) @[MulAddRecFN.scala 207:46] 
    node T_38 = bits(io.fromPreMul.highExpA, 2, 1) @[MulAddRecFN.scala 208:45] 
    node isSpecialA = eq(T_38, UInt<2>("h03")) @[MulAddRecFN.scala 208:52] 
    node T_40 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 209:56] 
    node T_42 = eq(T_40, UInt<1>("h00")) @[MulAddRecFN.scala 209:32] 
    node isInfA = and(isSpecialA, T_42) @[MulAddRecFN.scala 209:29] 
    node T_43 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 210:56] 
    node isNaNA = and(isSpecialA, T_43) @[MulAddRecFN.scala 210:29] 
    node T_45 = eq(io.fromPreMul.isNaN_isQuietNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 211:31] 
    node isSigNaNA = and(isNaNA, T_45) @[MulAddRecFN.scala 211:28] 
    node isZeroB = eq(io.fromPreMul.highExpB, UInt<1>("h00")) @[MulAddRecFN.scala 213:46] 
    node T_47 = bits(io.fromPreMul.highExpB, 2, 1) @[MulAddRecFN.scala 214:45] 
    node isSpecialB = eq(T_47, UInt<2>("h03")) @[MulAddRecFN.scala 214:52] 
    node T_49 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 215:56] 
    node T_51 = eq(T_49, UInt<1>("h00")) @[MulAddRecFN.scala 215:32] 
    node isInfB = and(isSpecialB, T_51) @[MulAddRecFN.scala 215:29] 
    node T_52 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 216:56] 
    node isNaNB = and(isSpecialB, T_52) @[MulAddRecFN.scala 216:29] 
    node T_54 = eq(io.fromPreMul.isNaN_isQuietNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 217:31] 
    node isSigNaNB = and(isNaNB, T_54) @[MulAddRecFN.scala 217:28] 
    node isZeroC = eq(io.fromPreMul.highExpC, UInt<1>("h00")) @[MulAddRecFN.scala 219:46] 
    node T_56 = bits(io.fromPreMul.highExpC, 2, 1) @[MulAddRecFN.scala 220:45] 
    node isSpecialC = eq(T_56, UInt<2>("h03")) @[MulAddRecFN.scala 220:52] 
    node T_58 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 221:56] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 221:32] 
    node isInfC = and(isSpecialC, T_60) @[MulAddRecFN.scala 221:29] 
    node T_61 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 222:56] 
    node isNaNC = and(isSpecialC, T_61) @[MulAddRecFN.scala 222:29] 
    node T_63 = eq(io.fromPreMul.isNaN_isQuietNaNC, UInt<1>("h00")) @[MulAddRecFN.scala 223:31] 
    node isSigNaNC = and(isNaNC, T_63) @[MulAddRecFN.scala 223:28] 
    node roundingMode_nearest_even = eq(io.fromPreMul.roundingMode, UInt<2>("h00")) @[MulAddRecFN.scala 226:37] 
    node roundingMode_minMag = eq(io.fromPreMul.roundingMode, UInt<2>("h01")) @[MulAddRecFN.scala 227:59] 
    node roundingMode_min = eq(io.fromPreMul.roundingMode, UInt<2>("h02")) @[MulAddRecFN.scala 228:59] 
    node roundingMode_max = eq(io.fromPreMul.roundingMode, UInt<2>("h03")) @[MulAddRecFN.scala 229:59] 
    node signZeroNotEqOpSigns = mux(roundingMode_min, UInt<1>("h01"), UInt<1>("h00")) @[MulAddRecFN.scala 231:35] 
    node doSubMags = xor(io.fromPreMul.signProd, io.fromPreMul.opSignC) @[MulAddRecFN.scala 232:44] 
    node T_70 = bits(io.mulAddResult, 48, 48) @[MulAddRecFN.scala 237:32] 
    node T_72 = add(io.fromPreMul.highAlignedNegSigC, UInt<1>("h01")) @[MulAddRecFN.scala 238:50] 
    node T_73 = tail(T_72, 1) @[MulAddRecFN.scala 238:50] 
    node T_74 = mux(T_70, T_73, io.fromPreMul.highAlignedNegSigC) @[MulAddRecFN.scala 237:16] 
    node T_75 = bits(io.mulAddResult, 47, 0) @[MulAddRecFN.scala 241:28] 
    node T_76 = cat(T_74, T_75) @[Cat.scala 20:58] 
    node sigSum = cat(T_76, io.fromPreMul.bit0AlignedNegSigC) @[Cat.scala 20:58] 
    node T_78 = bits(sigSum, 50, 1) @[MulAddRecFN.scala 248:38] 
    node T_79 = xor(UInt<50>("h00"), T_78) @[MulAddRecFN.scala 191:27] 
    node T_80 = or(UInt<50>("h00"), T_78) @[MulAddRecFN.scala 191:37] 
    node T_81 = shl(T_80, 1) @[MulAddRecFN.scala 191:41] 
    node T_82 = xor(T_79, T_81) @[MulAddRecFN.scala 191:32] 
    node T_84 = bits(T_82, 49, 0) @[primitives.scala 79:35] 
    node T_85 = bits(T_84, 49, 32) @[CircuitMath.scala 26:17] 
    node T_86 = bits(T_84, 31, 0) @[CircuitMath.scala 27:17] 
    node T_88 = neq(T_85, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_89 = bits(T_85, 17, 16) @[CircuitMath.scala 26:17] 
    node T_90 = bits(T_85, 15, 0) @[CircuitMath.scala 27:17] 
    node T_92 = neq(T_89, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_93 = bits(T_89, 1, 1) @[CircuitMath.scala 21:8] 
    node T_94 = bits(T_90, 15, 8) @[CircuitMath.scala 26:17] 
    node T_95 = bits(T_90, 7, 0) @[CircuitMath.scala 27:17] 
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_98 = bits(T_94, 7, 4) @[CircuitMath.scala 26:17] 
    node T_99 = bits(T_94, 3, 0) @[CircuitMath.scala 27:17] 
    node T_101 = neq(T_98, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_102 = bits(T_98, 3, 3) @[CircuitMath.scala 23:12] 
    node T_104 = bits(T_98, 2, 2) @[CircuitMath.scala 23:12] 
    node T_106 = bits(T_98, 1, 1) @[CircuitMath.scala 21:8] 
    node T_107 = shl(T_106, 0) @[CircuitMath.scala 23:10] 
    node T_108 = mux(T_104, UInt<2>("h02"), T_107) @[CircuitMath.scala 23:10] 
    node T_109 = mux(T_102, UInt<2>("h03"), T_108) @[CircuitMath.scala 23:10] 
    node T_110 = bits(T_99, 3, 3) @[CircuitMath.scala 23:12] 
    node T_112 = bits(T_99, 2, 2) @[CircuitMath.scala 23:12] 
    node T_114 = bits(T_99, 1, 1) @[CircuitMath.scala 21:8] 
    node T_115 = shl(T_114, 0) @[CircuitMath.scala 23:10] 
    node T_116 = mux(T_112, UInt<2>("h02"), T_115) @[CircuitMath.scala 23:10] 
    node T_117 = mux(T_110, UInt<2>("h03"), T_116) @[CircuitMath.scala 23:10] 
    node T_118 = mux(T_101, T_109, T_117) @[CircuitMath.scala 29:21] 
    node T_119 = cat(T_101, T_118) @[Cat.scala 20:58] 
    node T_120 = bits(T_95, 7, 4) @[CircuitMath.scala 26:17] 
    node T_121 = bits(T_95, 3, 0) @[CircuitMath.scala 27:17] 
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_124 = bits(T_120, 3, 3) @[CircuitMath.scala 23:12] 
    node T_126 = bits(T_120, 2, 2) @[CircuitMath.scala 23:12] 
    node T_128 = bits(T_120, 1, 1) @[CircuitMath.scala 21:8] 
    node T_129 = shl(T_128, 0) @[CircuitMath.scala 23:10] 
    node T_130 = mux(T_126, UInt<2>("h02"), T_129) @[CircuitMath.scala 23:10] 
    node T_131 = mux(T_124, UInt<2>("h03"), T_130) @[CircuitMath.scala 23:10] 
    node T_132 = bits(T_121, 3, 3) @[CircuitMath.scala 23:12] 
    node T_134 = bits(T_121, 2, 2) @[CircuitMath.scala 23:12] 
    node T_136 = bits(T_121, 1, 1) @[CircuitMath.scala 21:8] 
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10] 
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10] 
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10] 
    node T_140 = mux(T_123, T_131, T_139) @[CircuitMath.scala 29:21] 
    node T_141 = cat(T_123, T_140) @[Cat.scala 20:58] 
    node T_142 = mux(T_97, T_119, T_141) @[CircuitMath.scala 29:21] 
    node T_143 = cat(T_97, T_142) @[Cat.scala 20:58] 
    node T_144 = shl(T_93, 0) @[CircuitMath.scala 29:21] 
    node T_145 = mux(T_92, T_144, T_143) @[CircuitMath.scala 29:21] 
    node T_146 = cat(T_92, T_145) @[Cat.scala 20:58] 
    node T_147 = bits(T_86, 31, 16) @[CircuitMath.scala 26:17] 
    node T_148 = bits(T_86, 15, 0) @[CircuitMath.scala 27:17] 
    node T_150 = neq(T_147, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_151 = bits(T_147, 15, 8) @[CircuitMath.scala 26:17] 
    node T_152 = bits(T_147, 7, 0) @[CircuitMath.scala 27:17] 
    node T_154 = neq(T_151, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_155 = bits(T_151, 7, 4) @[CircuitMath.scala 26:17] 
    node T_156 = bits(T_151, 3, 0) @[CircuitMath.scala 27:17] 
    node T_158 = neq(T_155, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_159 = bits(T_155, 3, 3) @[CircuitMath.scala 23:12] 
    node T_161 = bits(T_155, 2, 2) @[CircuitMath.scala 23:12] 
    node T_163 = bits(T_155, 1, 1) @[CircuitMath.scala 21:8] 
    node T_164 = shl(T_163, 0) @[CircuitMath.scala 23:10] 
    node T_165 = mux(T_161, UInt<2>("h02"), T_164) @[CircuitMath.scala 23:10] 
    node T_166 = mux(T_159, UInt<2>("h03"), T_165) @[CircuitMath.scala 23:10] 
    node T_167 = bits(T_156, 3, 3) @[CircuitMath.scala 23:12] 
    node T_169 = bits(T_156, 2, 2) @[CircuitMath.scala 23:12] 
    node T_171 = bits(T_156, 1, 1) @[CircuitMath.scala 21:8] 
    node T_172 = shl(T_171, 0) @[CircuitMath.scala 23:10] 
    node T_173 = mux(T_169, UInt<2>("h02"), T_172) @[CircuitMath.scala 23:10] 
    node T_174 = mux(T_167, UInt<2>("h03"), T_173) @[CircuitMath.scala 23:10] 
    node T_175 = mux(T_158, T_166, T_174) @[CircuitMath.scala 29:21] 
    node T_176 = cat(T_158, T_175) @[Cat.scala 20:58] 
    node T_177 = bits(T_152, 7, 4) @[CircuitMath.scala 26:17] 
    node T_178 = bits(T_152, 3, 0) @[CircuitMath.scala 27:17] 
    node T_180 = neq(T_177, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_181 = bits(T_177, 3, 3) @[CircuitMath.scala 23:12] 
    node T_183 = bits(T_177, 2, 2) @[CircuitMath.scala 23:12] 
    node T_185 = bits(T_177, 1, 1) @[CircuitMath.scala 21:8] 
    node T_186 = shl(T_185, 0) @[CircuitMath.scala 23:10] 
    node T_187 = mux(T_183, UInt<2>("h02"), T_186) @[CircuitMath.scala 23:10] 
    node T_188 = mux(T_181, UInt<2>("h03"), T_187) @[CircuitMath.scala 23:10] 
    node T_189 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12] 
    node T_191 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12] 
    node T_193 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8] 
    node T_194 = shl(T_193, 0) @[CircuitMath.scala 23:10] 
    node T_195 = mux(T_191, UInt<2>("h02"), T_194) @[CircuitMath.scala 23:10] 
    node T_196 = mux(T_189, UInt<2>("h03"), T_195) @[CircuitMath.scala 23:10] 
    node T_197 = mux(T_180, T_188, T_196) @[CircuitMath.scala 29:21] 
    node T_198 = cat(T_180, T_197) @[Cat.scala 20:58] 
    node T_199 = mux(T_154, T_176, T_198) @[CircuitMath.scala 29:21] 
    node T_200 = cat(T_154, T_199) @[Cat.scala 20:58] 
    node T_201 = bits(T_148, 15, 8) @[CircuitMath.scala 26:17] 
    node T_202 = bits(T_148, 7, 0) @[CircuitMath.scala 27:17] 
    node T_204 = neq(T_201, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_205 = bits(T_201, 7, 4) @[CircuitMath.scala 26:17] 
    node T_206 = bits(T_201, 3, 0) @[CircuitMath.scala 27:17] 
    node T_208 = neq(T_205, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_209 = bits(T_205, 3, 3) @[CircuitMath.scala 23:12] 
    node T_211 = bits(T_205, 2, 2) @[CircuitMath.scala 23:12] 
    node T_213 = bits(T_205, 1, 1) @[CircuitMath.scala 21:8] 
    node T_214 = shl(T_213, 0) @[CircuitMath.scala 23:10] 
    node T_215 = mux(T_211, UInt<2>("h02"), T_214) @[CircuitMath.scala 23:10] 
    node T_216 = mux(T_209, UInt<2>("h03"), T_215) @[CircuitMath.scala 23:10] 
    node T_217 = bits(T_206, 3, 3) @[CircuitMath.scala 23:12] 
    node T_219 = bits(T_206, 2, 2) @[CircuitMath.scala 23:12] 
    node T_221 = bits(T_206, 1, 1) @[CircuitMath.scala 21:8] 
    node T_222 = shl(T_221, 0) @[CircuitMath.scala 23:10] 
    node T_223 = mux(T_219, UInt<2>("h02"), T_222) @[CircuitMath.scala 23:10] 
    node T_224 = mux(T_217, UInt<2>("h03"), T_223) @[CircuitMath.scala 23:10] 
    node T_225 = mux(T_208, T_216, T_224) @[CircuitMath.scala 29:21] 
    node T_226 = cat(T_208, T_225) @[Cat.scala 20:58] 
    node T_227 = bits(T_202, 7, 4) @[CircuitMath.scala 26:17] 
    node T_228 = bits(T_202, 3, 0) @[CircuitMath.scala 27:17] 
    node T_230 = neq(T_227, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_231 = bits(T_227, 3, 3) @[CircuitMath.scala 23:12] 
    node T_233 = bits(T_227, 2, 2) @[CircuitMath.scala 23:12] 
    node T_235 = bits(T_227, 1, 1) @[CircuitMath.scala 21:8] 
    node T_236 = shl(T_235, 0) @[CircuitMath.scala 23:10] 
    node T_237 = mux(T_233, UInt<2>("h02"), T_236) @[CircuitMath.scala 23:10] 
    node T_238 = mux(T_231, UInt<2>("h03"), T_237) @[CircuitMath.scala 23:10] 
    node T_239 = bits(T_228, 3, 3) @[CircuitMath.scala 23:12] 
    node T_241 = bits(T_228, 2, 2) @[CircuitMath.scala 23:12] 
    node T_243 = bits(T_228, 1, 1) @[CircuitMath.scala 21:8] 
    node T_244 = shl(T_243, 0) @[CircuitMath.scala 23:10] 
    node T_245 = mux(T_241, UInt<2>("h02"), T_244) @[CircuitMath.scala 23:10] 
    node T_246 = mux(T_239, UInt<2>("h03"), T_245) @[CircuitMath.scala 23:10] 
    node T_247 = mux(T_230, T_238, T_246) @[CircuitMath.scala 29:21] 
    node T_248 = cat(T_230, T_247) @[Cat.scala 20:58] 
    node T_249 = mux(T_204, T_226, T_248) @[CircuitMath.scala 29:21] 
    node T_250 = cat(T_204, T_249) @[Cat.scala 20:58] 
    node T_251 = mux(T_150, T_200, T_250) @[CircuitMath.scala 29:21] 
    node T_252 = cat(T_150, T_251) @[Cat.scala 20:58] 
    node T_253 = mux(T_88, T_146, T_252) @[CircuitMath.scala 29:21] 
    node T_254 = cat(T_88, T_253) @[Cat.scala 20:58] 
    node T_255 = sub(UInt<7>("h049"), T_254) @[primitives.scala 79:25] 
    node estNormPos_dist = tail(T_255, 1) @[primitives.scala 79:25] 
    node T_256 = bits(sigSum, 33, 18) @[MulAddRecFN.scala 252:19] 
    node T_258 = neq(T_256, UInt<1>("h00")) @[MulAddRecFN.scala 254:15] 
    node T_259 = bits(sigSum, 17, 0) @[MulAddRecFN.scala 255:19] 
    node T_261 = neq(T_259, UInt<1>("h00")) @[MulAddRecFN.scala 255:57] 
    node firstReduceSigSum = cat(T_258, T_261) @[Cat.scala 20:58] 
    node complSigSum = not(sigSum) @[MulAddRecFN.scala 257:23] 
    node T_262 = bits(complSigSum, 33, 18) @[MulAddRecFN.scala 259:24] 
    node T_264 = neq(T_262, UInt<1>("h00")) @[MulAddRecFN.scala 261:15] 
    node T_265 = bits(complSigSum, 17, 0) @[MulAddRecFN.scala 262:24] 
    node T_267 = neq(T_265, UInt<1>("h00")) @[MulAddRecFN.scala 262:62] 
    node firstReduceComplSigSum = cat(T_264, T_267) @[Cat.scala 20:58] 
    node T_268 = or(io.fromPreMul.CAlignDist_0, doSubMags) @[MulAddRecFN.scala 266:40] 
    node T_270 = sub(io.fromPreMul.CAlignDist, UInt<1>("h01")) @[MulAddRecFN.scala 268:39] 
    node T_271 = tail(T_270, 1) @[MulAddRecFN.scala 268:39] 
    node T_272 = bits(T_271, 4, 0) @[MulAddRecFN.scala 268:49] 
    node CDom_estNormDist = mux(T_268, io.fromPreMul.CAlignDist, T_272) @[MulAddRecFN.scala 266:12] 
    node T_274 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 271:13] 
    node T_275 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 271:46] 
    node T_277 = eq(T_275, UInt<1>("h00")) @[MulAddRecFN.scala 271:28] 
    node T_278 = and(T_274, T_277) @[MulAddRecFN.scala 271:25] 
    node T_279 = bits(sigSum, 74, 34) @[MulAddRecFN.scala 272:23] 
    node T_281 = neq(firstReduceSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 273:35] 
    node T_282 = cat(T_279, T_281) @[Cat.scala 20:58] 
    node T_284 = mux(T_278, T_282, UInt<1>("h00")) @[MulAddRecFN.scala 271:12] 
    node T_286 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 277:13] 
    node T_287 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 277:44] 
    node T_288 = and(T_286, T_287) @[MulAddRecFN.scala 277:25] 
    node T_289 = bits(sigSum, 58, 18) @[MulAddRecFN.scala 278:23] 
    node T_290 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 282:34] 
    node T_291 = cat(T_289, T_290) @[Cat.scala 20:58] 
    node T_293 = mux(T_288, T_291, UInt<1>("h00")) @[MulAddRecFN.scala 277:12] 
    node T_294 = or(T_284, T_293) @[MulAddRecFN.scala 276:11] 
    node T_295 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 286:44] 
    node T_297 = eq(T_295, UInt<1>("h00")) @[MulAddRecFN.scala 286:26] 
    node T_298 = and(doSubMags, T_297) @[MulAddRecFN.scala 286:23] 
    node T_299 = bits(complSigSum, 74, 34) @[MulAddRecFN.scala 287:28] 
    node T_301 = neq(firstReduceComplSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 288:40] 
    node T_302 = cat(T_299, T_301) @[Cat.scala 20:58] 
    node T_304 = mux(T_298, T_302, UInt<1>("h00")) @[MulAddRecFN.scala 286:12] 
    node T_305 = or(T_294, T_304) @[MulAddRecFN.scala 285:11] 
    node T_306 = bits(CDom_estNormDist, 4, 4) @[MulAddRecFN.scala 292:42] 
    node T_307 = and(doSubMags, T_306) @[MulAddRecFN.scala 292:23] 
    node T_308 = bits(complSigSum, 58, 18) @[MulAddRecFN.scala 293:28] 
    node T_309 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 297:39] 
    node T_310 = cat(T_308, T_309) @[Cat.scala 20:58] 
    node T_312 = mux(T_307, T_310, UInt<1>("h00")) @[MulAddRecFN.scala 292:12] 
    node CDom_firstNormAbsSigSum = or(T_305, T_312) @[MulAddRecFN.scala 291:11] 
    node T_313 = bits(sigSum, 50, 18) @[MulAddRecFN.scala 308:23] 
    node T_314 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 310:45] 
    node T_316 = eq(T_314, UInt<1>("h00")) @[MulAddRecFN.scala 310:21] 
    node T_317 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 311:38] 
    node T_318 = mux(doSubMags, T_316, T_317) @[MulAddRecFN.scala 309:20] 
    node T_319 = cat(T_313, T_318) @[Cat.scala 20:58] 
    node T_320 = bits(sigSum, 42, 1) @[MulAddRecFN.scala 314:24] 
    node T_321 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 338:28] 
    node T_322 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 339:33] 
    node T_323 = bits(sigSum, 26, 1) @[MulAddRecFN.scala 340:28] 
    node T_324 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_327 = mux(T_324, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 33:12] 
    node T_328 = cat(T_323, T_327) @[Cat.scala 20:58] 
    node T_329 = mux(T_322, T_328, T_320) @[MulAddRecFN.scala 339:17] 
    node T_330 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 345:33] 
    node T_331 = bits(sigSum, 10, 1) @[MulAddRecFN.scala 347:28] 
    node T_332 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_335 = mux(T_332, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_336 = cat(T_331, T_335) @[Cat.scala 20:58] 
    node T_337 = mux(T_330, T_319, T_336) @[MulAddRecFN.scala 345:17] 
    node notCDom_pos_firstNormAbsSigSum = mux(T_321, T_329, T_337) @[MulAddRecFN.scala 338:12] 
    node T_338 = bits(complSigSum, 49, 18) @[MulAddRecFN.scala 360:28] 
    node T_339 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 361:39] 
    node T_340 = cat(T_338, T_339) @[Cat.scala 20:58] 
    node T_341 = bits(complSigSum, 42, 1) @[MulAddRecFN.scala 363:29] 
    node T_342 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 379:28] 
    node T_343 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 380:33] 
    node T_344 = bits(complSigSum, 27, 1) @[MulAddRecFN.scala 381:29] 
    node T_345 = shl(T_344, 16) @[MulAddRecFN.scala 381:64] 
    node T_346 = mux(T_343, T_345, T_341) @[MulAddRecFN.scala 380:17] 
    node T_347 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 385:33] 
    node T_348 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 387:29] 
    node T_349 = shl(T_348, 32) @[MulAddRecFN.scala 387:64] 
    node T_350 = mux(T_347, T_340, T_349) @[MulAddRecFN.scala 385:17] 
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_342, T_346, T_350) @[MulAddRecFN.scala 379:12] 
    node notCDom_signSigSum = bits(sigSum, 51, 51) @[MulAddRecFN.scala 392:36] 
    node T_352 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 395:26] 
    node T_353 = and(doSubMags, T_352) @[MulAddRecFN.scala 395:23] 
    node doNegSignSum = mux(io.fromPreMul.isCDominant, T_353, notCDom_signSigSum) @[MulAddRecFN.scala 394:12] 
    node T_354 = mux(notCDom_signSigSum, estNormPos_dist, estNormPos_dist) @[MulAddRecFN.scala 401:16] 
    node estNormDist = mux(io.fromPreMul.isCDominant, CDom_estNormDist, T_354) @[MulAddRecFN.scala 399:12] 
    node T_355 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_neg_cFirstNormAbsSigSum) @[MulAddRecFN.scala 408:16] 
    node T_356 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum) @[MulAddRecFN.scala 412:16] 
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_355, T_356) @[MulAddRecFN.scala 407:12] 
    node T_358 = eq(io.fromPreMul.isCDominant, UInt<1>("h00")) @[MulAddRecFN.scala 418:9] 
    node T_360 = eq(notCDom_signSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 418:40] 
    node T_361 = and(T_358, T_360) @[MulAddRecFN.scala 418:37] 
    node doIncrSig = and(T_361, doSubMags) @[MulAddRecFN.scala 418:61] 
    node estNormDist_5 = bits(estNormDist, 3, 0) @[MulAddRecFN.scala 419:36] 
    node normTo2ShiftDist = not(estNormDist_5) @[MulAddRecFN.scala 420:28] 
    node T_363 = dshr(asSInt(UInt<17>("h010000")), normTo2ShiftDist) @[primitives.scala 68:52] 
    node T_364 = bits(T_363, 15, 1) @[primitives.scala 69:26] 
    node T_365 = bits(T_364, 7, 0) @[Bitwise.scala 65:18] 
    node T_368 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47] 
    node T_369 = xor(UInt<8>("h0ff"), T_368) @[Bitwise.scala 58:21] 
    node T_370 = shr(T_365, 4) @[Bitwise.scala 59:21] 
    node T_371 = and(T_370, T_369) @[Bitwise.scala 59:31] 
    node T_372 = bits(T_365, 3, 0) @[Bitwise.scala 59:46] 
    node T_373 = shl(T_372, 4) @[Bitwise.scala 59:65] 
    node T_374 = not(T_369) @[Bitwise.scala 59:77] 
    node T_375 = and(T_373, T_374) @[Bitwise.scala 59:75] 
    node T_376 = or(T_371, T_375) @[Bitwise.scala 59:39] 
    node T_377 = bits(T_369, 5, 0) @[Bitwise.scala 58:28] 
    node T_378 = shl(T_377, 2) @[Bitwise.scala 58:47] 
    node T_379 = xor(T_369, T_378) @[Bitwise.scala 58:21] 
    node T_380 = shr(T_376, 2) @[Bitwise.scala 59:21] 
    node T_381 = and(T_380, T_379) @[Bitwise.scala 59:31] 
    node T_382 = bits(T_376, 5, 0) @[Bitwise.scala 59:46] 
    node T_383 = shl(T_382, 2) @[Bitwise.scala 59:65] 
    node T_384 = not(T_379) @[Bitwise.scala 59:77] 
    node T_385 = and(T_383, T_384) @[Bitwise.scala 59:75] 
    node T_386 = or(T_381, T_385) @[Bitwise.scala 59:39] 
    node T_387 = bits(T_379, 6, 0) @[Bitwise.scala 58:28] 
    node T_388 = shl(T_387, 1) @[Bitwise.scala 58:47] 
    node T_389 = xor(T_379, T_388) @[Bitwise.scala 58:21] 
    node T_390 = shr(T_386, 1) @[Bitwise.scala 59:21] 
    node T_391 = and(T_390, T_389) @[Bitwise.scala 59:31] 
    node T_392 = bits(T_386, 6, 0) @[Bitwise.scala 59:46] 
    node T_393 = shl(T_392, 1) @[Bitwise.scala 59:65] 
    node T_394 = not(T_389) @[Bitwise.scala 59:77] 
    node T_395 = and(T_393, T_394) @[Bitwise.scala 59:75] 
    node T_396 = or(T_391, T_395) @[Bitwise.scala 59:39] 
    node T_397 = bits(T_364, 14, 8) @[Bitwise.scala 65:44] 
    node T_398 = bits(T_397, 3, 0) @[Bitwise.scala 65:18] 
    node T_399 = bits(T_398, 1, 0) @[Bitwise.scala 65:18] 
    node T_400 = bits(T_399, 0, 0) @[Bitwise.scala 65:18] 
    node T_401 = bits(T_399, 1, 1) @[Bitwise.scala 65:44] 
    node T_402 = cat(T_400, T_401) @[Cat.scala 20:58] 
    node T_403 = bits(T_398, 3, 2) @[Bitwise.scala 65:44] 
    node T_404 = bits(T_403, 0, 0) @[Bitwise.scala 65:18] 
    node T_405 = bits(T_403, 1, 1) @[Bitwise.scala 65:44] 
    node T_406 = cat(T_404, T_405) @[Cat.scala 20:58] 
    node T_407 = cat(T_402, T_406) @[Cat.scala 20:58] 
    node T_408 = bits(T_397, 6, 4) @[Bitwise.scala 65:44] 
    node T_409 = bits(T_408, 1, 0) @[Bitwise.scala 65:18] 
    node T_410 = bits(T_409, 0, 0) @[Bitwise.scala 65:18] 
    node T_411 = bits(T_409, 1, 1) @[Bitwise.scala 65:44] 
    node T_412 = cat(T_410, T_411) @[Cat.scala 20:58] 
    node T_413 = bits(T_408, 2, 2) @[Bitwise.scala 65:44] 
    node T_414 = cat(T_412, T_413) @[Cat.scala 20:58] 
    node T_415 = cat(T_407, T_414) @[Cat.scala 20:58] 
    node T_416 = cat(T_396, T_415) @[Cat.scala 20:58] 
    node absSigSumExtraMask = cat(T_416, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_418 = bits(cFirstNormAbsSigSum, 42, 1) @[MulAddRecFN.scala 424:32] 
    node T_419 = dshr(T_418, normTo2ShiftDist) @[MulAddRecFN.scala 424:65] 
    node T_420 = bits(cFirstNormAbsSigSum, 15, 0) @[MulAddRecFN.scala 427:39] 
    node T_421 = not(T_420) @[MulAddRecFN.scala 427:19] 
    node T_422 = and(T_421, absSigSumExtraMask) @[MulAddRecFN.scala 427:62] 
    node T_424 = eq(T_422, UInt<1>("h00")) @[MulAddRecFN.scala 428:43] 
    node T_425 = bits(cFirstNormAbsSigSum, 15, 0) @[MulAddRecFN.scala 430:38] 
    node T_426 = and(T_425, absSigSumExtraMask) @[MulAddRecFN.scala 430:61] 
    node T_428 = neq(T_426, UInt<1>("h00")) @[MulAddRecFN.scala 431:43] 
    node T_429 = mux(doIncrSig, T_424, T_428) @[MulAddRecFN.scala 426:16] 
    node T_430 = cat(T_419, T_429) @[Cat.scala 20:58] 
    node sigX3 = bits(T_430, 27, 0) @[MulAddRecFN.scala 434:10] 
    node T_431 = bits(sigX3, 27, 26) @[MulAddRecFN.scala 436:29] 
    node sigX3Shift1 = eq(T_431, UInt<1>("h00")) @[MulAddRecFN.scala 436:58] 
    node T_433 = sub(io.fromPreMul.sExpSum, estNormDist) @[MulAddRecFN.scala 437:40] 
    node sExpX3 = tail(T_433, 1) @[MulAddRecFN.scala 437:40] 
    node T_434 = bits(sigX3, 27, 25) @[MulAddRecFN.scala 439:25] 
    node isZeroY = eq(T_434, UInt<1>("h00")) @[MulAddRecFN.scala 439:54] 
    node T_436 = xor(io.fromPreMul.signProd, doNegSignSum) @[MulAddRecFN.scala 444:36] 
    node signY = mux(isZeroY, signZeroNotEqOpSigns, T_436) @[MulAddRecFN.scala 442:12] 
    node sExpX3_13 = bits(sExpX3, 9, 0) @[MulAddRecFN.scala 446:27] 
    node T_437 = bits(sExpX3, 10, 10) @[MulAddRecFN.scala 448:34] 
    node T_438 = bits(T_437, 0, 0) @[Bitwise.scala 33:15] 
    node T_441 = mux(T_438, UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 33:12] 
    node T_442 = not(sExpX3_13) @[primitives.scala 50:21] 
    node T_443 = bits(T_442, 9, 9) @[primitives.scala 56:25] 
    node T_444 = bits(T_442, 8, 0) @[primitives.scala 57:26] 
    node T_445 = bits(T_444, 8, 8) @[primitives.scala 56:25] 
    node T_446 = bits(T_444, 7, 0) @[primitives.scala 57:26] 
    node T_447 = bits(T_446, 7, 7) @[primitives.scala 56:25] 
    node T_448 = bits(T_446, 6, 0) @[primitives.scala 57:26] 
    node T_449 = bits(T_448, 6, 6) @[primitives.scala 56:25] 
    node T_450 = bits(T_448, 5, 0) @[primitives.scala 57:26] 
    node T_453 = dshr(asSInt(UInt<65>("h010000000000000000")), T_450) @[primitives.scala 68:52] 
    node T_454 = bits(T_453, 63, 43) @[primitives.scala 69:26] 
    node T_455 = bits(T_454, 15, 0) @[Bitwise.scala 65:18] 
    node T_458 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_459 = xor(UInt<16>("h0ffff"), T_458) @[Bitwise.scala 58:21] 
    node T_460 = shr(T_455, 8) @[Bitwise.scala 59:21] 
    node T_461 = and(T_460, T_459) @[Bitwise.scala 59:31] 
    node T_462 = bits(T_455, 7, 0) @[Bitwise.scala 59:46] 
    node T_463 = shl(T_462, 8) @[Bitwise.scala 59:65] 
    node T_464 = not(T_459) @[Bitwise.scala 59:77] 
    node T_465 = and(T_463, T_464) @[Bitwise.scala 59:75] 
    node T_466 = or(T_461, T_465) @[Bitwise.scala 59:39] 
    node T_467 = bits(T_459, 11, 0) @[Bitwise.scala 58:28] 
    node T_468 = shl(T_467, 4) @[Bitwise.scala 58:47] 
    node T_469 = xor(T_459, T_468) @[Bitwise.scala 58:21] 
    node T_470 = shr(T_466, 4) @[Bitwise.scala 59:21] 
    node T_471 = and(T_470, T_469) @[Bitwise.scala 59:31] 
    node T_472 = bits(T_466, 11, 0) @[Bitwise.scala 59:46] 
    node T_473 = shl(T_472, 4) @[Bitwise.scala 59:65] 
    node T_474 = not(T_469) @[Bitwise.scala 59:77] 
    node T_475 = and(T_473, T_474) @[Bitwise.scala 59:75] 
    node T_476 = or(T_471, T_475) @[Bitwise.scala 59:39] 
    node T_477 = bits(T_469, 13, 0) @[Bitwise.scala 58:28] 
    node T_478 = shl(T_477, 2) @[Bitwise.scala 58:47] 
    node T_479 = xor(T_469, T_478) @[Bitwise.scala 58:21] 
    node T_480 = shr(T_476, 2) @[Bitwise.scala 59:21] 
    node T_481 = and(T_480, T_479) @[Bitwise.scala 59:31] 
    node T_482 = bits(T_476, 13, 0) @[Bitwise.scala 59:46] 
    node T_483 = shl(T_482, 2) @[Bitwise.scala 59:65] 
    node T_484 = not(T_479) @[Bitwise.scala 59:77] 
    node T_485 = and(T_483, T_484) @[Bitwise.scala 59:75] 
    node T_486 = or(T_481, T_485) @[Bitwise.scala 59:39] 
    node T_487 = bits(T_479, 14, 0) @[Bitwise.scala 58:28] 
    node T_488 = shl(T_487, 1) @[Bitwise.scala 58:47] 
    node T_489 = xor(T_479, T_488) @[Bitwise.scala 58:21] 
    node T_490 = shr(T_486, 1) @[Bitwise.scala 59:21] 
    node T_491 = and(T_490, T_489) @[Bitwise.scala 59:31] 
    node T_492 = bits(T_486, 14, 0) @[Bitwise.scala 59:46] 
    node T_493 = shl(T_492, 1) @[Bitwise.scala 59:65] 
    node T_494 = not(T_489) @[Bitwise.scala 59:77] 
    node T_495 = and(T_493, T_494) @[Bitwise.scala 59:75] 
    node T_496 = or(T_491, T_495) @[Bitwise.scala 59:39] 
    node T_497 = bits(T_454, 20, 16) @[Bitwise.scala 65:44] 
    node T_498 = bits(T_497, 3, 0) @[Bitwise.scala 65:18] 
    node T_499 = bits(T_498, 1, 0) @[Bitwise.scala 65:18] 
    node T_500 = bits(T_499, 0, 0) @[Bitwise.scala 65:18] 
    node T_501 = bits(T_499, 1, 1) @[Bitwise.scala 65:44] 
    node T_502 = cat(T_500, T_501) @[Cat.scala 20:58] 
    node T_503 = bits(T_498, 3, 2) @[Bitwise.scala 65:44] 
    node T_504 = bits(T_503, 0, 0) @[Bitwise.scala 65:18] 
    node T_505 = bits(T_503, 1, 1) @[Bitwise.scala 65:44] 
    node T_506 = cat(T_504, T_505) @[Cat.scala 20:58] 
    node T_507 = cat(T_502, T_506) @[Cat.scala 20:58] 
    node T_508 = bits(T_497, 4, 4) @[Bitwise.scala 65:44] 
    node T_509 = cat(T_507, T_508) @[Cat.scala 20:58] 
    node T_510 = cat(T_496, T_509) @[Cat.scala 20:58] 
    node T_511 = not(T_510) @[primitives.scala 65:36] 
    node T_512 = mux(T_449, UInt<1>("h00"), T_511) @[primitives.scala 65:21] 
    node T_513 = not(T_512) @[primitives.scala 65:17] 
    node T_515 = cat(T_513, UInt<4>("h0f")) @[Cat.scala 20:58] 
    node T_516 = bits(T_448, 6, 6) @[primitives.scala 56:25] 
    node T_517 = bits(T_448, 5, 0) @[primitives.scala 57:26] 
    node T_519 = dshr(asSInt(UInt<65>("h010000000000000000")), T_517) @[primitives.scala 68:52] 
    node T_520 = bits(T_519, 3, 0) @[primitives.scala 69:26] 
    node T_521 = bits(T_520, 1, 0) @[Bitwise.scala 65:18] 
    node T_522 = bits(T_521, 0, 0) @[Bitwise.scala 65:18] 
    node T_523 = bits(T_521, 1, 1) @[Bitwise.scala 65:44] 
    node T_524 = cat(T_522, T_523) @[Cat.scala 20:58] 
    node T_525 = bits(T_520, 3, 2) @[Bitwise.scala 65:44] 
    node T_526 = bits(T_525, 0, 0) @[Bitwise.scala 65:18] 
    node T_527 = bits(T_525, 1, 1) @[Bitwise.scala 65:44] 
    node T_528 = cat(T_526, T_527) @[Cat.scala 20:58] 
    node T_529 = cat(T_524, T_528) @[Cat.scala 20:58] 
    node T_531 = mux(T_516, T_529, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_532 = mux(T_447, T_515, T_531) @[primitives.scala 61:20] 
    node T_534 = mux(T_445, T_532, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_536 = mux(T_443, T_534, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_537 = bits(sigX3, 26, 26) @[MulAddRecFN.scala 450:26] 
    node T_538 = or(T_536, T_537) @[MulAddRecFN.scala 449:75] 
    node T_540 = cat(T_538, UInt<2>("h03")) @[Cat.scala 20:58] 
    node roundMask = or(T_441, T_540) @[MulAddRecFN.scala 448:50] 
    node T_541 = shr(roundMask, 1) @[MulAddRecFN.scala 454:35] 
    node T_542 = not(T_541) @[MulAddRecFN.scala 454:24] 
    node roundPosMask = and(T_542, roundMask) @[MulAddRecFN.scala 454:40] 
    node T_543 = and(sigX3, roundPosMask) @[MulAddRecFN.scala 455:30] 
    node roundPosBit = neq(T_543, UInt<1>("h00")) @[MulAddRecFN.scala 455:46] 
    node T_545 = shr(roundMask, 1) @[MulAddRecFN.scala 456:45] 
    node T_546 = and(sigX3, T_545) @[MulAddRecFN.scala 456:34] 
    node anyRoundExtra = neq(T_546, UInt<1>("h00")) @[MulAddRecFN.scala 456:50] 
    node T_548 = not(sigX3) @[MulAddRecFN.scala 457:27] 
    node T_549 = shr(roundMask, 1) @[MulAddRecFN.scala 457:45] 
    node T_550 = and(T_548, T_549) @[MulAddRecFN.scala 457:34] 
    node allRoundExtra = eq(T_550, UInt<1>("h00")) @[MulAddRecFN.scala 457:50] 
    node anyRound = or(roundPosBit, anyRoundExtra) @[MulAddRecFN.scala 458:32] 
    node allRound = and(roundPosBit, allRoundExtra) @[MulAddRecFN.scala 459:32] 
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max) @[MulAddRecFN.scala 460:28] 
    node T_553 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 462:10] 
    node T_554 = and(T_553, roundingMode_nearest_even) @[MulAddRecFN.scala 462:22] 
    node T_555 = and(T_554, roundPosBit) @[MulAddRecFN.scala 462:51] 
    node T_556 = and(T_555, anyRoundExtra) @[MulAddRecFN.scala 463:60] 
    node T_558 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 464:10] 
    node T_559 = and(T_558, roundDirectUp) @[MulAddRecFN.scala 464:22] 
    node T_560 = and(T_559, anyRound) @[MulAddRecFN.scala 464:49] 
    node T_561 = or(T_556, T_560) @[MulAddRecFN.scala 463:78] 
    node T_562 = and(doIncrSig, allRound) @[MulAddRecFN.scala 465:49] 
    node T_563 = or(T_561, T_562) @[MulAddRecFN.scala 464:65] 
    node T_564 = and(doIncrSig, roundingMode_nearest_even) @[MulAddRecFN.scala 466:20] 
    node T_565 = and(T_564, roundPosBit) @[MulAddRecFN.scala 466:49] 
    node T_566 = or(T_563, T_565) @[MulAddRecFN.scala 465:65] 
    node T_567 = and(doIncrSig, roundDirectUp) @[MulAddRecFN.scala 467:20] 
    node T_569 = and(T_567, UInt<1>("h01")) @[MulAddRecFN.scala 467:49] 
    node roundUp = or(T_566, T_569) @[MulAddRecFN.scala 466:65] 
    node T_571 = eq(roundPosBit, UInt<1>("h00")) @[MulAddRecFN.scala 470:42] 
    node T_572 = and(roundingMode_nearest_even, T_571) @[MulAddRecFN.scala 470:39] 
    node T_573 = and(T_572, allRoundExtra) @[MulAddRecFN.scala 470:56] 
    node T_574 = and(roundingMode_nearest_even, roundPosBit) @[MulAddRecFN.scala 471:39] 
    node T_576 = eq(anyRoundExtra, UInt<1>("h00")) @[MulAddRecFN.scala 471:59] 
    node T_577 = and(T_574, T_576) @[MulAddRecFN.scala 471:56] 
    node roundEven = mux(doIncrSig, T_573, T_577) @[MulAddRecFN.scala 469:12] 
    node T_579 = eq(allRound, UInt<1>("h00")) @[MulAddRecFN.scala 473:39] 
    node roundInexact = mux(doIncrSig, T_579, anyRound) @[MulAddRecFN.scala 473:27] 
    node T_580 = or(sigX3, roundMask) @[MulAddRecFN.scala 475:18] 
    node T_581 = shr(T_580, 2) @[MulAddRecFN.scala 475:30] 
    node T_583 = add(T_581, UInt<1>("h01")) @[MulAddRecFN.scala 475:35] 
    node T_584 = tail(T_583, 1) @[MulAddRecFN.scala 475:35] 
    node roundUp_sigY3 = bits(T_584, 25, 0) @[MulAddRecFN.scala 475:45] 
    node T_586 = eq(roundUp, UInt<1>("h00")) @[MulAddRecFN.scala 477:13] 
    node T_588 = eq(roundEven, UInt<1>("h00")) @[MulAddRecFN.scala 477:26] 
    node T_589 = and(T_586, T_588) @[MulAddRecFN.scala 477:23] 
    node T_590 = not(roundMask) @[MulAddRecFN.scala 477:48] 
    node T_591 = and(sigX3, T_590) @[MulAddRecFN.scala 477:46] 
    node T_592 = shr(T_591, 2) @[MulAddRecFN.scala 477:59] 
    node T_594 = mux(T_589, T_592, UInt<1>("h00")) @[MulAddRecFN.scala 477:12] 
    node T_596 = mux(roundUp, roundUp_sigY3, UInt<1>("h00")) @[MulAddRecFN.scala 478:12] 
    node T_597 = or(T_594, T_596) @[MulAddRecFN.scala 477:79] 
    node T_598 = shr(roundMask, 1) @[MulAddRecFN.scala 479:64] 
    node T_599 = not(T_598) @[MulAddRecFN.scala 479:53] 
    node T_600 = and(roundUp_sigY3, T_599) @[MulAddRecFN.scala 479:51] 
    node T_602 = mux(roundEven, T_600, UInt<1>("h00")) @[MulAddRecFN.scala 479:12] 
    node sigY3 = or(T_597, T_602) @[MulAddRecFN.scala 478:79] 
    node T_603 = bits(sigY3, 25, 25) @[MulAddRecFN.scala 482:18] 
    node T_605 = add(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 482:41] 
    node T_606 = tail(T_605, 1) @[MulAddRecFN.scala 482:41] 
    node T_608 = mux(T_603, T_606, UInt<1>("h00")) @[MulAddRecFN.scala 482:12] 
    node T_609 = bits(sigY3, 24, 24) @[MulAddRecFN.scala 483:18] 
    node T_611 = mux(T_609, sExpX3, UInt<1>("h00")) @[MulAddRecFN.scala 483:12] 
    node T_612 = or(T_608, T_611) @[MulAddRecFN.scala 482:61] 
    node T_613 = bits(sigY3, 25, 24) @[MulAddRecFN.scala 484:19] 
    node T_615 = eq(T_613, UInt<1>("h00")) @[MulAddRecFN.scala 484:44] 
    node T_617 = sub(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 485:20] 
    node T_618 = tail(T_617, 1) @[MulAddRecFN.scala 485:20] 
    node T_620 = mux(T_615, T_618, UInt<1>("h00")) @[MulAddRecFN.scala 484:12] 
    node sExpY = or(T_612, T_620) @[MulAddRecFN.scala 483:61] 
    node expY = bits(sExpY, 8, 0) @[MulAddRecFN.scala 488:21] 
    node T_621 = bits(sigY3, 22, 0) @[MulAddRecFN.scala 490:31] 
    node T_622 = bits(sigY3, 23, 1) @[MulAddRecFN.scala 490:55] 
    node fractY = mux(sigX3Shift1, T_621, T_622) @[MulAddRecFN.scala 490:12] 
    node T_623 = bits(sExpY, 9, 7) @[MulAddRecFN.scala 492:27] 
    node overflowY = eq(T_623, UInt<2>("h03")) @[MulAddRecFN.scala 492:56] 
    node T_626 = eq(isZeroY, UInt<1>("h00")) @[MulAddRecFN.scala 495:9] 
    node T_627 = bits(sExpY, 9, 9) @[MulAddRecFN.scala 496:19] 
    node T_628 = bits(sExpY, 8, 0) @[MulAddRecFN.scala 496:43] 
    node T_630 = lt(T_628, UInt<7>("h06b")) @[MulAddRecFN.scala 496:57] 
    node T_631 = or(T_627, T_630) @[MulAddRecFN.scala 496:34] 
    node totalUnderflowY = and(T_626, T_631) @[MulAddRecFN.scala 495:19] 
    node T_632 = bits(sExpX3, 10, 10) @[MulAddRecFN.scala 499:20] 
    node T_635 = mux(sigX3Shift1, UInt<8>("h082"), UInt<8>("h081")) @[MulAddRecFN.scala 501:26] 
    node T_636 = leq(sExpX3_13, T_635) @[MulAddRecFN.scala 500:29] 
    node T_637 = or(T_632, T_636) @[MulAddRecFN.scala 499:35] 
    node underflowY = and(roundInexact, T_637) @[MulAddRecFN.scala 498:22] 
    node T_638 = and(roundingMode_min, signY) @[MulAddRecFN.scala 506:27] 
    node T_640 = eq(signY, UInt<1>("h00")) @[MulAddRecFN.scala 506:61] 
    node T_641 = and(roundingMode_max, T_640) @[MulAddRecFN.scala 506:58] 
    node roundMagUp = or(T_638, T_641) @[MulAddRecFN.scala 506:37] 
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[MulAddRecFN.scala 507:58] 
    node mulSpecial = or(isSpecialA, isSpecialB) @[MulAddRecFN.scala 511:33] 
    node addSpecial = or(mulSpecial, isSpecialC) @[MulAddRecFN.scala 512:33] 
    node notSpecial_addZeros = and(io.fromPreMul.isZeroProd, isZeroC) @[MulAddRecFN.scala 513:56] 
    node T_643 = eq(addSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 514:22] 
    node T_645 = eq(notSpecial_addZeros, UInt<1>("h00")) @[MulAddRecFN.scala 514:38] 
    node commonCase = and(T_643, T_645) @[MulAddRecFN.scala 514:35] 
    node T_646 = and(isInfA, isZeroB) @[MulAddRecFN.scala 517:17] 
    node T_647 = and(isZeroA, isInfB) @[MulAddRecFN.scala 517:41] 
    node T_648 = or(T_646, T_647) @[MulAddRecFN.scala 517:29] 
    node T_650 = eq(isNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 518:14] 
    node T_652 = eq(isNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 518:26] 
    node T_653 = and(T_650, T_652) @[MulAddRecFN.scala 518:23] 
    node T_654 = or(isInfA, isInfB) @[MulAddRecFN.scala 518:46] 
    node T_655 = and(T_653, T_654) @[MulAddRecFN.scala 518:35] 
    node T_656 = and(T_655, isInfC) @[MulAddRecFN.scala 518:57] 
    node T_657 = and(T_656, doSubMags) @[MulAddRecFN.scala 518:67] 
    node notSigNaN_invalid = or(T_648, T_657) @[MulAddRecFN.scala 517:52] 
    node T_658 = or(isSigNaNA, isSigNaNB) @[MulAddRecFN.scala 519:29] 
    node T_659 = or(T_658, isSigNaNC) @[MulAddRecFN.scala 519:42] 
    node invalid = or(T_659, notSigNaN_invalid) @[MulAddRecFN.scala 519:55] 
    node overflow = and(commonCase, overflowY) @[MulAddRecFN.scala 520:32] 
    node underflow = and(commonCase, underflowY) @[MulAddRecFN.scala 521:32] 
    node T_660 = and(commonCase, roundInexact) @[MulAddRecFN.scala 522:43] 
    node inexact = or(overflow, T_660) @[MulAddRecFN.scala 522:28] 
    node T_661 = or(notSpecial_addZeros, isZeroY) @[MulAddRecFN.scala 525:29] 
    node notSpecial_isZeroOut = or(T_661, totalUnderflowY) @[MulAddRecFN.scala 525:40] 
    node T_662 = and(commonCase, totalUnderflowY) @[MulAddRecFN.scala 526:41] 
    node pegMinFiniteMagOut = and(T_662, roundMagUp) @[MulAddRecFN.scala 526:60] 
    node T_664 = eq(overflowY_roundMagUp, UInt<1>("h00")) @[MulAddRecFN.scala 527:42] 
    node pegMaxFiniteMagOut = and(overflow, T_664) @[MulAddRecFN.scala 527:39] 
    node T_665 = or(isInfA, isInfB) @[MulAddRecFN.scala 529:16] 
    node T_666 = or(T_665, isInfC) @[MulAddRecFN.scala 529:26] 
    node T_667 = and(overflow, overflowY_roundMagUp) @[MulAddRecFN.scala 529:49] 
    node notNaN_isInfOut = or(T_666, T_667) @[MulAddRecFN.scala 529:36] 
    node T_668 = or(isNaNA, isNaNB) @[MulAddRecFN.scala 530:27] 
    node T_669 = or(T_668, isNaNC) @[MulAddRecFN.scala 530:37] 
    node isNaNOut = or(T_669, notSigNaN_invalid) @[MulAddRecFN.scala 530:47] 
    node T_671 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 533:10] 
    node T_672 = and(T_671, io.fromPreMul.opSignC) @[MulAddRecFN.scala 533:51] 
    node T_674 = eq(isSpecialC, UInt<1>("h00")) @[MulAddRecFN.scala 534:24] 
    node T_675 = and(mulSpecial, T_674) @[MulAddRecFN.scala 534:21] 
    node T_676 = and(T_675, io.fromPreMul.signProd) @[MulAddRecFN.scala 534:51] 
    node T_677 = or(T_672, T_676) @[MulAddRecFN.scala 533:78] 
    node T_679 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 535:10] 
    node T_680 = and(T_679, isSpecialC) @[MulAddRecFN.scala 535:23] 
    node T_681 = and(T_680, io.fromPreMul.opSignC) @[MulAddRecFN.scala 535:51] 
    node T_682 = or(T_677, T_681) @[MulAddRecFN.scala 534:78] 
    node T_684 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 536:10] 
    node T_685 = and(T_684, notSpecial_addZeros) @[MulAddRecFN.scala 536:23] 
    node T_686 = and(T_685, doSubMags) @[MulAddRecFN.scala 536:46] 
    node T_687 = and(T_686, signZeroNotEqOpSigns) @[MulAddRecFN.scala 536:59] 
    node uncommonCaseSignOut = or(T_682, T_687) @[MulAddRecFN.scala 535:78] 
    node T_689 = eq(isNaNOut, UInt<1>("h00")) @[MulAddRecFN.scala 538:20] 
    node T_690 = and(T_689, uncommonCaseSignOut) @[MulAddRecFN.scala 538:31] 
    node T_691 = and(commonCase, signY) @[MulAddRecFN.scala 538:70] 
    node signOut = or(T_690, T_691) @[MulAddRecFN.scala 538:55] 
    node T_694 = mux(notSpecial_isZeroOut, UInt<9>("h01c0"), UInt<9>("h00")) @[MulAddRecFN.scala 541:18] 
    node T_695 = not(T_694) @[MulAddRecFN.scala 541:14] 
    node T_696 = and(expY, T_695) @[MulAddRecFN.scala 540:15] 
    node T_698 = not(UInt<9>("h06b")) @[MulAddRecFN.scala 546:19] 
    node T_700 = mux(pegMinFiniteMagOut, T_698, UInt<9>("h00")) @[MulAddRecFN.scala 545:18] 
    node T_701 = not(T_700) @[MulAddRecFN.scala 545:14] 
    node T_702 = and(T_696, T_701) @[MulAddRecFN.scala 544:17] 
    node T_705 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<9>("h00")) @[MulAddRecFN.scala 549:18] 
    node T_706 = not(T_705) @[MulAddRecFN.scala 549:14] 
    node T_707 = and(T_702, T_706) @[MulAddRecFN.scala 548:17] 
    node T_710 = mux(notNaN_isInfOut, UInt<7>("h040"), UInt<9>("h00")) @[MulAddRecFN.scala 553:18] 
    node T_711 = not(T_710) @[MulAddRecFN.scala 553:14] 
    node T_712 = and(T_707, T_711) @[MulAddRecFN.scala 552:17] 
    node T_715 = mux(pegMinFiniteMagOut, UInt<7>("h06b"), UInt<9>("h00")) @[MulAddRecFN.scala 557:16] 
    node T_716 = or(T_712, T_715) @[MulAddRecFN.scala 556:18] 
    node T_719 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<9>("h00")) @[MulAddRecFN.scala 558:16] 
    node T_720 = or(T_716, T_719) @[MulAddRecFN.scala 557:74] 
    node T_723 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<9>("h00")) @[MulAddRecFN.scala 562:16] 
    node T_724 = or(T_720, T_723) @[MulAddRecFN.scala 561:15] 
    node T_727 = mux(isNaNOut, UInt<9>("h01c0"), UInt<9>("h00")) @[MulAddRecFN.scala 566:16] 
    node expOut = or(T_724, T_727) @[MulAddRecFN.scala 565:15] 
    node T_728 = and(totalUnderflowY, roundMagUp) @[MulAddRecFN.scala 568:30] 
    node T_729 = or(T_728, isNaNOut) @[MulAddRecFN.scala 568:45] 
    node T_731 = shl(UInt<1>("h01"), 22) @[MulAddRecFN.scala 569:34] 
    node T_733 = mux(isNaNOut, T_731, UInt<1>("h00")) @[MulAddRecFN.scala 569:16] 
    node T_734 = mux(T_729, T_733, fractY) @[MulAddRecFN.scala 568:12] 
    node T_735 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15] 
    node T_738 = mux(T_735, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 33:12] 
    node fractOut = or(T_734, T_738) @[MulAddRecFN.scala 571:11] 
    node T_739 = cat(signOut, expOut) @[Cat.scala 20:58] 
    node T_740 = cat(T_739, fractOut) @[Cat.scala 20:58] 
    io.out <= T_740 @[MulAddRecFN.scala 574:12] 
    node T_742 = cat(underflow, inexact) @[Cat.scala 20:58] 
    node T_743 = cat(invalid, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_744 = cat(T_743, overflow) @[Cat.scala 20:58] 
    node T_745 = cat(T_744, T_742) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_745 @[MulAddRecFN.scala 575:23] 
    
  module MulAddRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst mulAddRecFN_preMul of MulAddRecFN_preMul @[MulAddRecFN.scala 598:15] 
    mulAddRecFN_preMul.io is invalid
    mulAddRecFN_preMul.clk <= clk
    mulAddRecFN_preMul.reset <= reset
    inst mulAddRecFN_postMul of MulAddRecFN_postMul @[MulAddRecFN.scala 600:15] 
    mulAddRecFN_postMul.io is invalid
    mulAddRecFN_postMul.clk <= clk
    mulAddRecFN_postMul.reset <= reset
    mulAddRecFN_preMul.io.op <= io.op @[MulAddRecFN.scala 602:30] 
    mulAddRecFN_preMul.io.a <= io.a @[MulAddRecFN.scala 603:30] 
    mulAddRecFN_preMul.io.b <= io.b @[MulAddRecFN.scala 604:30] 
    mulAddRecFN_preMul.io.c <= io.c @[MulAddRecFN.scala 605:30] 
    mulAddRecFN_preMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 606:40] 
    mulAddRecFN_postMul.io.fromPreMul <- mulAddRecFN_preMul.io.toPostMul @[MulAddRecFN.scala 608:39] 
    node T_7 = mul(mulAddRecFN_preMul.io.mulAddA, mulAddRecFN_preMul.io.mulAddB) @[MulAddRecFN.scala 610:39] 
    node T_9 = cat(UInt<1>("h00"), mulAddRecFN_preMul.io.mulAddC) @[Cat.scala 20:58] 
    node T_10 = add(T_7, T_9) @[MulAddRecFN.scala 610:71] 
    node T_11 = tail(T_10, 1) @[MulAddRecFN.scala 610:71] 
    mulAddRecFN_postMul.io.mulAddResult <= T_11 @[MulAddRecFN.scala 609:41] 
    io.out <= mulAddRecFN_postMul.io.out @[MulAddRecFN.scala 613:12] 
    io.exceptionFlags <= mulAddRecFN_postMul.io.exceptionFlags @[MulAddRecFN.scala 614:23] 
    
  module FPUFMAPipe : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    node one = shl(UInt<1>("h01"), 31) @[fpu.scala 389:21] 
    node T_131 = bits(io.in.bits.in1, 32, 32) @[fpu.scala 390:29] 
    node T_132 = bits(io.in.bits.in2, 32, 32) @[fpu.scala 390:53] 
    node T_133 = xor(T_131, T_132) @[fpu.scala 390:37] 
    node zero = shl(T_133, 32) @[fpu.scala 390:62] 
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[fpu.scala 394:22] 
      in <- io.in.bits @[fpu.scala 395:8] 
      node T_179 = bits(io.in.bits.cmd, 1, 1) @[fpu.scala 398:33] 
      node T_180 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 398:48] 
      node T_181 = and(T_179, T_180) @[fpu.scala 398:37] 
      node T_182 = bits(io.in.bits.cmd, 0, 0) @[fpu.scala 398:78] 
      node T_183 = cat(T_181, T_182) @[Cat.scala 20:58] 
      in.cmd <= T_183 @[fpu.scala 398:12] 
      when io.in.bits.swap23 : @[fpu.scala 399:23] 
        in.in2 <= one @[fpu.scala 399:32] 
        skip @[fpu.scala 399:23] 
      node T_184 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 400:21] 
      node T_186 = eq(T_184, UInt<1>("h00")) @[Conditional.scala 18:11] 
      when T_186 : @[Conditional.scala 18:15] 
        in.in3 <= zero @[fpu.scala 400:45] 
        skip @[Conditional.scala 18:15] 
      skip @[fpu.scala 394:22] 
    inst fma of MulAddRecFN @[fpu.scala 403:19] 
    fma.io is invalid
    fma.clk <= clk
    fma.reset <= reset
    fma.io.op <= in.cmd @[fpu.scala 404:13] 
    fma.io.roundingMode <= in.rm @[fpu.scala 405:23] 
    fma.io.a <= in.in1 @[fpu.scala 406:12] 
    fma.io.b <= in.in2 @[fpu.scala 407:12] 
    fma.io.c <= in.in3 @[fpu.scala 408:12] 
    wire res : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 410:17] 
    res is invalid @[fpu.scala 410:17] 
    node T_193 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
    node T_194 = cat(T_193, fma.io.out) @[Cat.scala 20:58] 
    res.data <= T_194 @[fpu.scala 411:12] 
    res.exc <= fma.io.exceptionFlags @[fpu.scala 412:11] 
    reg T_197 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_197 <= valid
    reg T_198 : {data : UInt<65>, exc : UInt<5>}, clk
    when valid : @[Reg.scala 29:19] 
      T_198 <- res @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire T_209 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21] 
    T_209 is invalid @[Valid.scala 39:21] 
    T_209.valid <= T_197 @[Valid.scala 40:17] 
    T_209.bits <- T_198 @[Valid.scala 41:16] 
    io.out <- T_209 @[fpu.scala 413:10] 
    
  module MulAddRecFN_preMul_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<65>, flip b : UInt<65>, flip c : UInt<65>, flip roundingMode : UInt<2>, mulAddA : UInt<53>, mulAddB : UInt<53>, mulAddC : UInt<106>, toPostMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<8>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<55>, sExpSum : UInt<14>, roundingMode : UInt<2>}}
    
    io is invalid
    node signA = bits(io.a, 64, 64) @[MulAddRecFN.scala 102:22] 
    node expA = bits(io.a, 63, 52) @[MulAddRecFN.scala 103:22] 
    node fractA = bits(io.a, 51, 0) @[MulAddRecFN.scala 104:22] 
    node T_42 = bits(expA, 11, 9) @[MulAddRecFN.scala 105:24] 
    node isZeroA = eq(T_42, UInt<1>("h00")) @[MulAddRecFN.scala 105:49] 
    node T_45 = eq(isZeroA, UInt<1>("h00")) @[MulAddRecFN.scala 106:20] 
    node sigA = cat(T_45, fractA) @[Cat.scala 20:58] 
    node signB = bits(io.b, 64, 64) @[MulAddRecFN.scala 108:22] 
    node expB = bits(io.b, 63, 52) @[MulAddRecFN.scala 109:22] 
    node fractB = bits(io.b, 51, 0) @[MulAddRecFN.scala 110:22] 
    node T_46 = bits(expB, 11, 9) @[MulAddRecFN.scala 111:24] 
    node isZeroB = eq(T_46, UInt<1>("h00")) @[MulAddRecFN.scala 111:49] 
    node T_49 = eq(isZeroB, UInt<1>("h00")) @[MulAddRecFN.scala 112:20] 
    node sigB = cat(T_49, fractB) @[Cat.scala 20:58] 
    node T_50 = bits(io.c, 64, 64) @[MulAddRecFN.scala 114:23] 
    node T_51 = bits(io.op, 0, 0) @[MulAddRecFN.scala 114:52] 
    node opSignC = xor(T_50, T_51) @[MulAddRecFN.scala 114:45] 
    node expC = bits(io.c, 63, 52) @[MulAddRecFN.scala 115:22] 
    node fractC = bits(io.c, 51, 0) @[MulAddRecFN.scala 116:22] 
    node T_52 = bits(expC, 11, 9) @[MulAddRecFN.scala 117:24] 
    node isZeroC = eq(T_52, UInt<1>("h00")) @[MulAddRecFN.scala 117:49] 
    node T_55 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 118:20] 
    node sigC = cat(T_55, fractC) @[Cat.scala 20:58] 
    node T_56 = xor(signA, signB) @[MulAddRecFN.scala 122:26] 
    node T_57 = bits(io.op, 1, 1) @[MulAddRecFN.scala 122:41] 
    node signProd = xor(T_56, T_57) @[MulAddRecFN.scala 122:34] 
    node isZeroProd = or(isZeroA, isZeroB) @[MulAddRecFN.scala 123:30] 
    node T_58 = bits(expB, 11, 11) @[MulAddRecFN.scala 125:34] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 125:28] 
    node T_61 = bits(T_60, 0, 0) @[Bitwise.scala 33:15] 
    node T_64 = mux(T_61, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_65 = bits(expB, 10, 0) @[MulAddRecFN.scala 125:51] 
    node T_66 = cat(T_64, T_65) @[Cat.scala 20:58] 
    node T_67 = add(expA, T_66) @[MulAddRecFN.scala 125:14] 
    node T_68 = tail(T_67, 1) @[MulAddRecFN.scala 125:14] 
    node T_70 = add(T_68, UInt<6>("h038")) @[MulAddRecFN.scala 125:70] 
    node sExpAlignedProd = tail(T_70, 1) @[MulAddRecFN.scala 125:70] 
    node doSubMags = xor(signProd, opSignC) @[MulAddRecFN.scala 130:30] 
    node T_71 = sub(sExpAlignedProd, expC) @[MulAddRecFN.scala 132:42] 
    node sNatCAlignDist = tail(T_71, 1) @[MulAddRecFN.scala 132:42] 
    node T_72 = bits(sNatCAlignDist, 13, 13) @[MulAddRecFN.scala 133:56] 
    node CAlignDist_floor = or(isZeroProd, T_72) @[MulAddRecFN.scala 133:39] 
    node T_73 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 135:44] 
    node T_75 = eq(T_73, UInt<1>("h00")) @[MulAddRecFN.scala 135:62] 
    node CAlignDist_0 = or(CAlignDist_floor, T_75) @[MulAddRecFN.scala 135:26] 
    node T_77 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 137:9] 
    node T_78 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 139:33] 
    node T_80 = lt(T_78, UInt<6>("h036")) @[MulAddRecFN.scala 139:51] 
    node T_81 = or(CAlignDist_floor, T_80) @[MulAddRecFN.scala 138:31] 
    node isCDominant = and(T_77, T_81) @[MulAddRecFN.scala 137:19] 
    node T_83 = bits(sNatCAlignDist, 12, 0) @[MulAddRecFN.scala 143:31] 
    node T_85 = lt(T_83, UInt<8>("h0a1")) @[MulAddRecFN.scala 143:49] 
    node T_86 = bits(sNatCAlignDist, 7, 0) @[MulAddRecFN.scala 144:31] 
    node T_88 = mux(T_85, T_86, UInt<8>("h0a1")) @[MulAddRecFN.scala 143:16] 
    node CAlignDist = mux(CAlignDist_floor, UInt<1>("h00"), T_88) @[MulAddRecFN.scala 141:12] 
    node sExpSum = mux(CAlignDist_floor, expC, sExpAlignedProd) @[MulAddRecFN.scala 148:22] 
    node T_89 = bits(CAlignDist, 7, 7) @[primitives.scala 56:25] 
    node T_90 = bits(CAlignDist, 6, 0) @[primitives.scala 57:26] 
    node T_91 = bits(T_90, 6, 6) @[primitives.scala 56:25] 
    node T_92 = bits(T_90, 5, 0) @[primitives.scala 57:26] 
    node T_95 = dshr(asSInt(UInt<65>("h010000000000000000")), T_92) @[primitives.scala 68:52] 
    node T_96 = bits(T_95, 63, 31) @[primitives.scala 69:26] 
    node T_97 = bits(T_96, 31, 0) @[Bitwise.scala 65:18] 
    node T_100 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47] 
    node T_101 = xor(UInt<32>("h0ffffffff"), T_100) @[Bitwise.scala 58:21] 
    node T_102 = shr(T_97, 16) @[Bitwise.scala 59:21] 
    node T_103 = and(T_102, T_101) @[Bitwise.scala 59:31] 
    node T_104 = bits(T_97, 15, 0) @[Bitwise.scala 59:46] 
    node T_105 = shl(T_104, 16) @[Bitwise.scala 59:65] 
    node T_106 = not(T_101) @[Bitwise.scala 59:77] 
    node T_107 = and(T_105, T_106) @[Bitwise.scala 59:75] 
    node T_108 = or(T_103, T_107) @[Bitwise.scala 59:39] 
    node T_109 = bits(T_101, 23, 0) @[Bitwise.scala 58:28] 
    node T_110 = shl(T_109, 8) @[Bitwise.scala 58:47] 
    node T_111 = xor(T_101, T_110) @[Bitwise.scala 58:21] 
    node T_112 = shr(T_108, 8) @[Bitwise.scala 59:21] 
    node T_113 = and(T_112, T_111) @[Bitwise.scala 59:31] 
    node T_114 = bits(T_108, 23, 0) @[Bitwise.scala 59:46] 
    node T_115 = shl(T_114, 8) @[Bitwise.scala 59:65] 
    node T_116 = not(T_111) @[Bitwise.scala 59:77] 
    node T_117 = and(T_115, T_116) @[Bitwise.scala 59:75] 
    node T_118 = or(T_113, T_117) @[Bitwise.scala 59:39] 
    node T_119 = bits(T_111, 27, 0) @[Bitwise.scala 58:28] 
    node T_120 = shl(T_119, 4) @[Bitwise.scala 58:47] 
    node T_121 = xor(T_111, T_120) @[Bitwise.scala 58:21] 
    node T_122 = shr(T_118, 4) @[Bitwise.scala 59:21] 
    node T_123 = and(T_122, T_121) @[Bitwise.scala 59:31] 
    node T_124 = bits(T_118, 27, 0) @[Bitwise.scala 59:46] 
    node T_125 = shl(T_124, 4) @[Bitwise.scala 59:65] 
    node T_126 = not(T_121) @[Bitwise.scala 59:77] 
    node T_127 = and(T_125, T_126) @[Bitwise.scala 59:75] 
    node T_128 = or(T_123, T_127) @[Bitwise.scala 59:39] 
    node T_129 = bits(T_121, 29, 0) @[Bitwise.scala 58:28] 
    node T_130 = shl(T_129, 2) @[Bitwise.scala 58:47] 
    node T_131 = xor(T_121, T_130) @[Bitwise.scala 58:21] 
    node T_132 = shr(T_128, 2) @[Bitwise.scala 59:21] 
    node T_133 = and(T_132, T_131) @[Bitwise.scala 59:31] 
    node T_134 = bits(T_128, 29, 0) @[Bitwise.scala 59:46] 
    node T_135 = shl(T_134, 2) @[Bitwise.scala 59:65] 
    node T_136 = not(T_131) @[Bitwise.scala 59:77] 
    node T_137 = and(T_135, T_136) @[Bitwise.scala 59:75] 
    node T_138 = or(T_133, T_137) @[Bitwise.scala 59:39] 
    node T_139 = bits(T_131, 30, 0) @[Bitwise.scala 58:28] 
    node T_140 = shl(T_139, 1) @[Bitwise.scala 58:47] 
    node T_141 = xor(T_131, T_140) @[Bitwise.scala 58:21] 
    node T_142 = shr(T_138, 1) @[Bitwise.scala 59:21] 
    node T_143 = and(T_142, T_141) @[Bitwise.scala 59:31] 
    node T_144 = bits(T_138, 30, 0) @[Bitwise.scala 59:46] 
    node T_145 = shl(T_144, 1) @[Bitwise.scala 59:65] 
    node T_146 = not(T_141) @[Bitwise.scala 59:77] 
    node T_147 = and(T_145, T_146) @[Bitwise.scala 59:75] 
    node T_148 = or(T_143, T_147) @[Bitwise.scala 59:39] 
    node T_149 = bits(T_96, 32, 32) @[Bitwise.scala 65:44] 
    node T_150 = cat(T_148, T_149) @[Cat.scala 20:58] 
    node T_151 = not(T_150) @[primitives.scala 65:36] 
    node T_152 = mux(T_91, UInt<1>("h00"), T_151) @[primitives.scala 65:21] 
    node T_153 = not(T_152) @[primitives.scala 65:17] 
    node T_155 = cat(T_153, UInt<20>("h0fffff")) @[Cat.scala 20:58] 
    node T_156 = bits(T_90, 6, 6) @[primitives.scala 56:25] 
    node T_157 = bits(T_90, 5, 0) @[primitives.scala 57:26] 
    node T_159 = dshr(asSInt(UInt<65>("h010000000000000000")), T_157) @[primitives.scala 68:52] 
    node T_160 = bits(T_159, 19, 0) @[primitives.scala 69:26] 
    node T_161 = bits(T_160, 15, 0) @[Bitwise.scala 65:18] 
    node T_164 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_165 = xor(UInt<16>("h0ffff"), T_164) @[Bitwise.scala 58:21] 
    node T_166 = shr(T_161, 8) @[Bitwise.scala 59:21] 
    node T_167 = and(T_166, T_165) @[Bitwise.scala 59:31] 
    node T_168 = bits(T_161, 7, 0) @[Bitwise.scala 59:46] 
    node T_169 = shl(T_168, 8) @[Bitwise.scala 59:65] 
    node T_170 = not(T_165) @[Bitwise.scala 59:77] 
    node T_171 = and(T_169, T_170) @[Bitwise.scala 59:75] 
    node T_172 = or(T_167, T_171) @[Bitwise.scala 59:39] 
    node T_173 = bits(T_165, 11, 0) @[Bitwise.scala 58:28] 
    node T_174 = shl(T_173, 4) @[Bitwise.scala 58:47] 
    node T_175 = xor(T_165, T_174) @[Bitwise.scala 58:21] 
    node T_176 = shr(T_172, 4) @[Bitwise.scala 59:21] 
    node T_177 = and(T_176, T_175) @[Bitwise.scala 59:31] 
    node T_178 = bits(T_172, 11, 0) @[Bitwise.scala 59:46] 
    node T_179 = shl(T_178, 4) @[Bitwise.scala 59:65] 
    node T_180 = not(T_175) @[Bitwise.scala 59:77] 
    node T_181 = and(T_179, T_180) @[Bitwise.scala 59:75] 
    node T_182 = or(T_177, T_181) @[Bitwise.scala 59:39] 
    node T_183 = bits(T_175, 13, 0) @[Bitwise.scala 58:28] 
    node T_184 = shl(T_183, 2) @[Bitwise.scala 58:47] 
    node T_185 = xor(T_175, T_184) @[Bitwise.scala 58:21] 
    node T_186 = shr(T_182, 2) @[Bitwise.scala 59:21] 
    node T_187 = and(T_186, T_185) @[Bitwise.scala 59:31] 
    node T_188 = bits(T_182, 13, 0) @[Bitwise.scala 59:46] 
    node T_189 = shl(T_188, 2) @[Bitwise.scala 59:65] 
    node T_190 = not(T_185) @[Bitwise.scala 59:77] 
    node T_191 = and(T_189, T_190) @[Bitwise.scala 59:75] 
    node T_192 = or(T_187, T_191) @[Bitwise.scala 59:39] 
    node T_193 = bits(T_185, 14, 0) @[Bitwise.scala 58:28] 
    node T_194 = shl(T_193, 1) @[Bitwise.scala 58:47] 
    node T_195 = xor(T_185, T_194) @[Bitwise.scala 58:21] 
    node T_196 = shr(T_192, 1) @[Bitwise.scala 59:21] 
    node T_197 = and(T_196, T_195) @[Bitwise.scala 59:31] 
    node T_198 = bits(T_192, 14, 0) @[Bitwise.scala 59:46] 
    node T_199 = shl(T_198, 1) @[Bitwise.scala 59:65] 
    node T_200 = not(T_195) @[Bitwise.scala 59:77] 
    node T_201 = and(T_199, T_200) @[Bitwise.scala 59:75] 
    node T_202 = or(T_197, T_201) @[Bitwise.scala 59:39] 
    node T_203 = bits(T_160, 19, 16) @[Bitwise.scala 65:44] 
    node T_204 = bits(T_203, 1, 0) @[Bitwise.scala 65:18] 
    node T_205 = bits(T_204, 0, 0) @[Bitwise.scala 65:18] 
    node T_206 = bits(T_204, 1, 1) @[Bitwise.scala 65:44] 
    node T_207 = cat(T_205, T_206) @[Cat.scala 20:58] 
    node T_208 = bits(T_203, 3, 2) @[Bitwise.scala 65:44] 
    node T_209 = bits(T_208, 0, 0) @[Bitwise.scala 65:18] 
    node T_210 = bits(T_208, 1, 1) @[Bitwise.scala 65:44] 
    node T_211 = cat(T_209, T_210) @[Cat.scala 20:58] 
    node T_212 = cat(T_207, T_211) @[Cat.scala 20:58] 
    node T_213 = cat(T_202, T_212) @[Cat.scala 20:58] 
    node T_215 = mux(T_156, T_213, UInt<1>("h00")) @[primitives.scala 59:20] 
    node CExtraMask = mux(T_89, T_155, T_215) @[primitives.scala 61:20] 
    node T_216 = not(sigC) @[MulAddRecFN.scala 151:34] 
    node negSigC = mux(doSubMags, T_216, sigC) @[MulAddRecFN.scala 151:22] 
    node T_217 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_220 = mux(T_217, UInt<108>("h0fffffffffffffffffffffffffff"), UInt<108>("h00")) @[Bitwise.scala 33:12] 
    node T_221 = cat(doSubMags, negSigC) @[Cat.scala 20:58] 
    node T_222 = cat(T_221, T_220) @[Cat.scala 20:58] 
    node T_223 = asSInt(T_222) @[MulAddRecFN.scala 154:64] 
    node T_224 = dshr(T_223, CAlignDist) @[MulAddRecFN.scala 154:70] 
    node T_225 = and(sigC, CExtraMask) @[MulAddRecFN.scala 156:19] 
    node T_227 = neq(T_225, UInt<1>("h00")) @[MulAddRecFN.scala 156:33] 
    node T_228 = xor(T_227, doSubMags) @[MulAddRecFN.scala 156:37] 
    node T_229 = asUInt(T_224) @[Cat.scala 20:58] 
    node T_230 = cat(T_229, T_228) @[Cat.scala 20:58] 
    node alignedNegSigC = bits(T_230, 161, 0) @[MulAddRecFN.scala 157:10] 
    io.mulAddA <= sigA @[MulAddRecFN.scala 159:16] 
    io.mulAddB <= sigB @[MulAddRecFN.scala 160:16] 
    node T_231 = bits(alignedNegSigC, 106, 1) @[MulAddRecFN.scala 161:33] 
    io.mulAddC <= T_231 @[MulAddRecFN.scala 161:16] 
    node T_232 = bits(expA, 11, 9) @[MulAddRecFN.scala 163:44] 
    io.toPostMul.highExpA <= T_232 @[MulAddRecFN.scala 163:37] 
    node T_233 = bits(fractA, 51, 51) @[MulAddRecFN.scala 164:46] 
    io.toPostMul.isNaN_isQuietNaNA <= T_233 @[MulAddRecFN.scala 164:37] 
    node T_234 = bits(expB, 11, 9) @[MulAddRecFN.scala 165:44] 
    io.toPostMul.highExpB <= T_234 @[MulAddRecFN.scala 165:37] 
    node T_235 = bits(fractB, 51, 51) @[MulAddRecFN.scala 166:46] 
    io.toPostMul.isNaN_isQuietNaNB <= T_235 @[MulAddRecFN.scala 166:37] 
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 167:37] 
    io.toPostMul.isZeroProd <= isZeroProd @[MulAddRecFN.scala 168:37] 
    io.toPostMul.opSignC <= opSignC @[MulAddRecFN.scala 169:37] 
    node T_236 = bits(expC, 11, 9) @[MulAddRecFN.scala 170:44] 
    io.toPostMul.highExpC <= T_236 @[MulAddRecFN.scala 170:37] 
    node T_237 = bits(fractC, 51, 51) @[MulAddRecFN.scala 171:46] 
    io.toPostMul.isNaN_isQuietNaNC <= T_237 @[MulAddRecFN.scala 171:37] 
    io.toPostMul.isCDominant <= isCDominant @[MulAddRecFN.scala 172:37] 
    io.toPostMul.CAlignDist_0 <= CAlignDist_0 @[MulAddRecFN.scala 173:37] 
    io.toPostMul.CAlignDist <= CAlignDist @[MulAddRecFN.scala 174:37] 
    node T_238 = bits(alignedNegSigC, 0, 0) @[MulAddRecFN.scala 175:54] 
    io.toPostMul.bit0AlignedNegSigC <= T_238 @[MulAddRecFN.scala 175:37] 
    node T_239 = bits(alignedNegSigC, 161, 107) @[MulAddRecFN.scala 177:23] 
    io.toPostMul.highAlignedNegSigC <= T_239 @[MulAddRecFN.scala 176:37] 
    io.toPostMul.sExpSum <= sExpSum @[MulAddRecFN.scala 178:37] 
    io.toPostMul.roundingMode <= io.roundingMode @[MulAddRecFN.scala 179:37] 
    
  module MulAddRecFN_postMul_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip fromPreMul : {highExpA : UInt<3>, isNaN_isQuietNaNA : UInt<1>, highExpB : UInt<3>, isNaN_isQuietNaNB : UInt<1>, signProd : UInt<1>, isZeroProd : UInt<1>, opSignC : UInt<1>, highExpC : UInt<3>, isNaN_isQuietNaNC : UInt<1>, isCDominant : UInt<1>, CAlignDist_0 : UInt<1>, CAlignDist : UInt<8>, bit0AlignedNegSigC : UInt<1>, highAlignedNegSigC : UInt<55>, sExpSum : UInt<14>, roundingMode : UInt<2>}, flip mulAddResult : UInt<107>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node isZeroA = eq(io.fromPreMul.highExpA, UInt<1>("h00")) @[MulAddRecFN.scala 207:46] 
    node T_38 = bits(io.fromPreMul.highExpA, 2, 1) @[MulAddRecFN.scala 208:45] 
    node isSpecialA = eq(T_38, UInt<2>("h03")) @[MulAddRecFN.scala 208:52] 
    node T_40 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 209:56] 
    node T_42 = eq(T_40, UInt<1>("h00")) @[MulAddRecFN.scala 209:32] 
    node isInfA = and(isSpecialA, T_42) @[MulAddRecFN.scala 209:29] 
    node T_43 = bits(io.fromPreMul.highExpA, 0, 0) @[MulAddRecFN.scala 210:56] 
    node isNaNA = and(isSpecialA, T_43) @[MulAddRecFN.scala 210:29] 
    node T_45 = eq(io.fromPreMul.isNaN_isQuietNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 211:31] 
    node isSigNaNA = and(isNaNA, T_45) @[MulAddRecFN.scala 211:28] 
    node isZeroB = eq(io.fromPreMul.highExpB, UInt<1>("h00")) @[MulAddRecFN.scala 213:46] 
    node T_47 = bits(io.fromPreMul.highExpB, 2, 1) @[MulAddRecFN.scala 214:45] 
    node isSpecialB = eq(T_47, UInt<2>("h03")) @[MulAddRecFN.scala 214:52] 
    node T_49 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 215:56] 
    node T_51 = eq(T_49, UInt<1>("h00")) @[MulAddRecFN.scala 215:32] 
    node isInfB = and(isSpecialB, T_51) @[MulAddRecFN.scala 215:29] 
    node T_52 = bits(io.fromPreMul.highExpB, 0, 0) @[MulAddRecFN.scala 216:56] 
    node isNaNB = and(isSpecialB, T_52) @[MulAddRecFN.scala 216:29] 
    node T_54 = eq(io.fromPreMul.isNaN_isQuietNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 217:31] 
    node isSigNaNB = and(isNaNB, T_54) @[MulAddRecFN.scala 217:28] 
    node isZeroC = eq(io.fromPreMul.highExpC, UInt<1>("h00")) @[MulAddRecFN.scala 219:46] 
    node T_56 = bits(io.fromPreMul.highExpC, 2, 1) @[MulAddRecFN.scala 220:45] 
    node isSpecialC = eq(T_56, UInt<2>("h03")) @[MulAddRecFN.scala 220:52] 
    node T_58 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 221:56] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[MulAddRecFN.scala 221:32] 
    node isInfC = and(isSpecialC, T_60) @[MulAddRecFN.scala 221:29] 
    node T_61 = bits(io.fromPreMul.highExpC, 0, 0) @[MulAddRecFN.scala 222:56] 
    node isNaNC = and(isSpecialC, T_61) @[MulAddRecFN.scala 222:29] 
    node T_63 = eq(io.fromPreMul.isNaN_isQuietNaNC, UInt<1>("h00")) @[MulAddRecFN.scala 223:31] 
    node isSigNaNC = and(isNaNC, T_63) @[MulAddRecFN.scala 223:28] 
    node roundingMode_nearest_even = eq(io.fromPreMul.roundingMode, UInt<2>("h00")) @[MulAddRecFN.scala 226:37] 
    node roundingMode_minMag = eq(io.fromPreMul.roundingMode, UInt<2>("h01")) @[MulAddRecFN.scala 227:59] 
    node roundingMode_min = eq(io.fromPreMul.roundingMode, UInt<2>("h02")) @[MulAddRecFN.scala 228:59] 
    node roundingMode_max = eq(io.fromPreMul.roundingMode, UInt<2>("h03")) @[MulAddRecFN.scala 229:59] 
    node signZeroNotEqOpSigns = mux(roundingMode_min, UInt<1>("h01"), UInt<1>("h00")) @[MulAddRecFN.scala 231:35] 
    node doSubMags = xor(io.fromPreMul.signProd, io.fromPreMul.opSignC) @[MulAddRecFN.scala 232:44] 
    node T_66 = bits(io.mulAddResult, 106, 106) @[MulAddRecFN.scala 237:32] 
    node T_68 = add(io.fromPreMul.highAlignedNegSigC, UInt<1>("h01")) @[MulAddRecFN.scala 238:50] 
    node T_69 = tail(T_68, 1) @[MulAddRecFN.scala 238:50] 
    node T_70 = mux(T_66, T_69, io.fromPreMul.highAlignedNegSigC) @[MulAddRecFN.scala 237:16] 
    node T_71 = bits(io.mulAddResult, 105, 0) @[MulAddRecFN.scala 241:28] 
    node T_72 = cat(T_70, T_71) @[Cat.scala 20:58] 
    node sigSum = cat(T_72, io.fromPreMul.bit0AlignedNegSigC) @[Cat.scala 20:58] 
    node T_74 = bits(sigSum, 108, 1) @[MulAddRecFN.scala 248:38] 
    node T_75 = xor(UInt<108>("h00"), T_74) @[MulAddRecFN.scala 191:27] 
    node T_76 = or(UInt<108>("h00"), T_74) @[MulAddRecFN.scala 191:37] 
    node T_77 = shl(T_76, 1) @[MulAddRecFN.scala 191:41] 
    node T_78 = xor(T_75, T_77) @[MulAddRecFN.scala 191:32] 
    node T_80 = bits(T_78, 107, 0) @[primitives.scala 79:35] 
    node T_81 = bits(T_80, 107, 64) @[CircuitMath.scala 26:17] 
    node T_82 = bits(T_80, 63, 0) @[CircuitMath.scala 27:17] 
    node T_84 = neq(T_81, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_85 = bits(T_81, 43, 32) @[CircuitMath.scala 26:17] 
    node T_86 = bits(T_81, 31, 0) @[CircuitMath.scala 27:17] 
    node T_88 = neq(T_85, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_89 = bits(T_85, 11, 8) @[CircuitMath.scala 26:17] 
    node T_90 = bits(T_85, 7, 0) @[CircuitMath.scala 27:17] 
    node T_92 = neq(T_89, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_93 = bits(T_89, 3, 3) @[CircuitMath.scala 23:12] 
    node T_95 = bits(T_89, 2, 2) @[CircuitMath.scala 23:12] 
    node T_97 = bits(T_89, 1, 1) @[CircuitMath.scala 21:8] 
    node T_98 = shl(T_97, 0) @[CircuitMath.scala 23:10] 
    node T_99 = mux(T_95, UInt<2>("h02"), T_98) @[CircuitMath.scala 23:10] 
    node T_100 = mux(T_93, UInt<2>("h03"), T_99) @[CircuitMath.scala 23:10] 
    node T_101 = bits(T_90, 7, 4) @[CircuitMath.scala 26:17] 
    node T_102 = bits(T_90, 3, 0) @[CircuitMath.scala 27:17] 
    node T_104 = neq(T_101, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_105 = bits(T_101, 3, 3) @[CircuitMath.scala 23:12] 
    node T_107 = bits(T_101, 2, 2) @[CircuitMath.scala 23:12] 
    node T_109 = bits(T_101, 1, 1) @[CircuitMath.scala 21:8] 
    node T_110 = shl(T_109, 0) @[CircuitMath.scala 23:10] 
    node T_111 = mux(T_107, UInt<2>("h02"), T_110) @[CircuitMath.scala 23:10] 
    node T_112 = mux(T_105, UInt<2>("h03"), T_111) @[CircuitMath.scala 23:10] 
    node T_113 = bits(T_102, 3, 3) @[CircuitMath.scala 23:12] 
    node T_115 = bits(T_102, 2, 2) @[CircuitMath.scala 23:12] 
    node T_117 = bits(T_102, 1, 1) @[CircuitMath.scala 21:8] 
    node T_118 = shl(T_117, 0) @[CircuitMath.scala 23:10] 
    node T_119 = mux(T_115, UInt<2>("h02"), T_118) @[CircuitMath.scala 23:10] 
    node T_120 = mux(T_113, UInt<2>("h03"), T_119) @[CircuitMath.scala 23:10] 
    node T_121 = mux(T_104, T_112, T_120) @[CircuitMath.scala 29:21] 
    node T_122 = cat(T_104, T_121) @[Cat.scala 20:58] 
    node T_123 = mux(T_92, T_100, T_122) @[CircuitMath.scala 29:21] 
    node T_124 = cat(T_92, T_123) @[Cat.scala 20:58] 
    node T_125 = bits(T_86, 31, 16) @[CircuitMath.scala 26:17] 
    node T_126 = bits(T_86, 15, 0) @[CircuitMath.scala 27:17] 
    node T_128 = neq(T_125, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_129 = bits(T_125, 15, 8) @[CircuitMath.scala 26:17] 
    node T_130 = bits(T_125, 7, 0) @[CircuitMath.scala 27:17] 
    node T_132 = neq(T_129, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_133 = bits(T_129, 7, 4) @[CircuitMath.scala 26:17] 
    node T_134 = bits(T_129, 3, 0) @[CircuitMath.scala 27:17] 
    node T_136 = neq(T_133, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_137 = bits(T_133, 3, 3) @[CircuitMath.scala 23:12] 
    node T_139 = bits(T_133, 2, 2) @[CircuitMath.scala 23:12] 
    node T_141 = bits(T_133, 1, 1) @[CircuitMath.scala 21:8] 
    node T_142 = shl(T_141, 0) @[CircuitMath.scala 23:10] 
    node T_143 = mux(T_139, UInt<2>("h02"), T_142) @[CircuitMath.scala 23:10] 
    node T_144 = mux(T_137, UInt<2>("h03"), T_143) @[CircuitMath.scala 23:10] 
    node T_145 = bits(T_134, 3, 3) @[CircuitMath.scala 23:12] 
    node T_147 = bits(T_134, 2, 2) @[CircuitMath.scala 23:12] 
    node T_149 = bits(T_134, 1, 1) @[CircuitMath.scala 21:8] 
    node T_150 = shl(T_149, 0) @[CircuitMath.scala 23:10] 
    node T_151 = mux(T_147, UInt<2>("h02"), T_150) @[CircuitMath.scala 23:10] 
    node T_152 = mux(T_145, UInt<2>("h03"), T_151) @[CircuitMath.scala 23:10] 
    node T_153 = mux(T_136, T_144, T_152) @[CircuitMath.scala 29:21] 
    node T_154 = cat(T_136, T_153) @[Cat.scala 20:58] 
    node T_155 = bits(T_130, 7, 4) @[CircuitMath.scala 26:17] 
    node T_156 = bits(T_130, 3, 0) @[CircuitMath.scala 27:17] 
    node T_158 = neq(T_155, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_159 = bits(T_155, 3, 3) @[CircuitMath.scala 23:12] 
    node T_161 = bits(T_155, 2, 2) @[CircuitMath.scala 23:12] 
    node T_163 = bits(T_155, 1, 1) @[CircuitMath.scala 21:8] 
    node T_164 = shl(T_163, 0) @[CircuitMath.scala 23:10] 
    node T_165 = mux(T_161, UInt<2>("h02"), T_164) @[CircuitMath.scala 23:10] 
    node T_166 = mux(T_159, UInt<2>("h03"), T_165) @[CircuitMath.scala 23:10] 
    node T_167 = bits(T_156, 3, 3) @[CircuitMath.scala 23:12] 
    node T_169 = bits(T_156, 2, 2) @[CircuitMath.scala 23:12] 
    node T_171 = bits(T_156, 1, 1) @[CircuitMath.scala 21:8] 
    node T_172 = shl(T_171, 0) @[CircuitMath.scala 23:10] 
    node T_173 = mux(T_169, UInt<2>("h02"), T_172) @[CircuitMath.scala 23:10] 
    node T_174 = mux(T_167, UInt<2>("h03"), T_173) @[CircuitMath.scala 23:10] 
    node T_175 = mux(T_158, T_166, T_174) @[CircuitMath.scala 29:21] 
    node T_176 = cat(T_158, T_175) @[Cat.scala 20:58] 
    node T_177 = mux(T_132, T_154, T_176) @[CircuitMath.scala 29:21] 
    node T_178 = cat(T_132, T_177) @[Cat.scala 20:58] 
    node T_179 = bits(T_126, 15, 8) @[CircuitMath.scala 26:17] 
    node T_180 = bits(T_126, 7, 0) @[CircuitMath.scala 27:17] 
    node T_182 = neq(T_179, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_183 = bits(T_179, 7, 4) @[CircuitMath.scala 26:17] 
    node T_184 = bits(T_179, 3, 0) @[CircuitMath.scala 27:17] 
    node T_186 = neq(T_183, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_187 = bits(T_183, 3, 3) @[CircuitMath.scala 23:12] 
    node T_189 = bits(T_183, 2, 2) @[CircuitMath.scala 23:12] 
    node T_191 = bits(T_183, 1, 1) @[CircuitMath.scala 21:8] 
    node T_192 = shl(T_191, 0) @[CircuitMath.scala 23:10] 
    node T_193 = mux(T_189, UInt<2>("h02"), T_192) @[CircuitMath.scala 23:10] 
    node T_194 = mux(T_187, UInt<2>("h03"), T_193) @[CircuitMath.scala 23:10] 
    node T_195 = bits(T_184, 3, 3) @[CircuitMath.scala 23:12] 
    node T_197 = bits(T_184, 2, 2) @[CircuitMath.scala 23:12] 
    node T_199 = bits(T_184, 1, 1) @[CircuitMath.scala 21:8] 
    node T_200 = shl(T_199, 0) @[CircuitMath.scala 23:10] 
    node T_201 = mux(T_197, UInt<2>("h02"), T_200) @[CircuitMath.scala 23:10] 
    node T_202 = mux(T_195, UInt<2>("h03"), T_201) @[CircuitMath.scala 23:10] 
    node T_203 = mux(T_186, T_194, T_202) @[CircuitMath.scala 29:21] 
    node T_204 = cat(T_186, T_203) @[Cat.scala 20:58] 
    node T_205 = bits(T_180, 7, 4) @[CircuitMath.scala 26:17] 
    node T_206 = bits(T_180, 3, 0) @[CircuitMath.scala 27:17] 
    node T_208 = neq(T_205, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_209 = bits(T_205, 3, 3) @[CircuitMath.scala 23:12] 
    node T_211 = bits(T_205, 2, 2) @[CircuitMath.scala 23:12] 
    node T_213 = bits(T_205, 1, 1) @[CircuitMath.scala 21:8] 
    node T_214 = shl(T_213, 0) @[CircuitMath.scala 23:10] 
    node T_215 = mux(T_211, UInt<2>("h02"), T_214) @[CircuitMath.scala 23:10] 
    node T_216 = mux(T_209, UInt<2>("h03"), T_215) @[CircuitMath.scala 23:10] 
    node T_217 = bits(T_206, 3, 3) @[CircuitMath.scala 23:12] 
    node T_219 = bits(T_206, 2, 2) @[CircuitMath.scala 23:12] 
    node T_221 = bits(T_206, 1, 1) @[CircuitMath.scala 21:8] 
    node T_222 = shl(T_221, 0) @[CircuitMath.scala 23:10] 
    node T_223 = mux(T_219, UInt<2>("h02"), T_222) @[CircuitMath.scala 23:10] 
    node T_224 = mux(T_217, UInt<2>("h03"), T_223) @[CircuitMath.scala 23:10] 
    node T_225 = mux(T_208, T_216, T_224) @[CircuitMath.scala 29:21] 
    node T_226 = cat(T_208, T_225) @[Cat.scala 20:58] 
    node T_227 = mux(T_182, T_204, T_226) @[CircuitMath.scala 29:21] 
    node T_228 = cat(T_182, T_227) @[Cat.scala 20:58] 
    node T_229 = mux(T_128, T_178, T_228) @[CircuitMath.scala 29:21] 
    node T_230 = cat(T_128, T_229) @[Cat.scala 20:58] 
    node T_231 = mux(T_88, T_124, T_230) @[CircuitMath.scala 29:21] 
    node T_232 = cat(T_88, T_231) @[Cat.scala 20:58] 
    node T_233 = bits(T_82, 63, 32) @[CircuitMath.scala 26:17] 
    node T_234 = bits(T_82, 31, 0) @[CircuitMath.scala 27:17] 
    node T_236 = neq(T_233, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_237 = bits(T_233, 31, 16) @[CircuitMath.scala 26:17] 
    node T_238 = bits(T_233, 15, 0) @[CircuitMath.scala 27:17] 
    node T_240 = neq(T_237, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_241 = bits(T_237, 15, 8) @[CircuitMath.scala 26:17] 
    node T_242 = bits(T_237, 7, 0) @[CircuitMath.scala 27:17] 
    node T_244 = neq(T_241, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_245 = bits(T_241, 7, 4) @[CircuitMath.scala 26:17] 
    node T_246 = bits(T_241, 3, 0) @[CircuitMath.scala 27:17] 
    node T_248 = neq(T_245, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_249 = bits(T_245, 3, 3) @[CircuitMath.scala 23:12] 
    node T_251 = bits(T_245, 2, 2) @[CircuitMath.scala 23:12] 
    node T_253 = bits(T_245, 1, 1) @[CircuitMath.scala 21:8] 
    node T_254 = shl(T_253, 0) @[CircuitMath.scala 23:10] 
    node T_255 = mux(T_251, UInt<2>("h02"), T_254) @[CircuitMath.scala 23:10] 
    node T_256 = mux(T_249, UInt<2>("h03"), T_255) @[CircuitMath.scala 23:10] 
    node T_257 = bits(T_246, 3, 3) @[CircuitMath.scala 23:12] 
    node T_259 = bits(T_246, 2, 2) @[CircuitMath.scala 23:12] 
    node T_261 = bits(T_246, 1, 1) @[CircuitMath.scala 21:8] 
    node T_262 = shl(T_261, 0) @[CircuitMath.scala 23:10] 
    node T_263 = mux(T_259, UInt<2>("h02"), T_262) @[CircuitMath.scala 23:10] 
    node T_264 = mux(T_257, UInt<2>("h03"), T_263) @[CircuitMath.scala 23:10] 
    node T_265 = mux(T_248, T_256, T_264) @[CircuitMath.scala 29:21] 
    node T_266 = cat(T_248, T_265) @[Cat.scala 20:58] 
    node T_267 = bits(T_242, 7, 4) @[CircuitMath.scala 26:17] 
    node T_268 = bits(T_242, 3, 0) @[CircuitMath.scala 27:17] 
    node T_270 = neq(T_267, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_271 = bits(T_267, 3, 3) @[CircuitMath.scala 23:12] 
    node T_273 = bits(T_267, 2, 2) @[CircuitMath.scala 23:12] 
    node T_275 = bits(T_267, 1, 1) @[CircuitMath.scala 21:8] 
    node T_276 = shl(T_275, 0) @[CircuitMath.scala 23:10] 
    node T_277 = mux(T_273, UInt<2>("h02"), T_276) @[CircuitMath.scala 23:10] 
    node T_278 = mux(T_271, UInt<2>("h03"), T_277) @[CircuitMath.scala 23:10] 
    node T_279 = bits(T_268, 3, 3) @[CircuitMath.scala 23:12] 
    node T_281 = bits(T_268, 2, 2) @[CircuitMath.scala 23:12] 
    node T_283 = bits(T_268, 1, 1) @[CircuitMath.scala 21:8] 
    node T_284 = shl(T_283, 0) @[CircuitMath.scala 23:10] 
    node T_285 = mux(T_281, UInt<2>("h02"), T_284) @[CircuitMath.scala 23:10] 
    node T_286 = mux(T_279, UInt<2>("h03"), T_285) @[CircuitMath.scala 23:10] 
    node T_287 = mux(T_270, T_278, T_286) @[CircuitMath.scala 29:21] 
    node T_288 = cat(T_270, T_287) @[Cat.scala 20:58] 
    node T_289 = mux(T_244, T_266, T_288) @[CircuitMath.scala 29:21] 
    node T_290 = cat(T_244, T_289) @[Cat.scala 20:58] 
    node T_291 = bits(T_238, 15, 8) @[CircuitMath.scala 26:17] 
    node T_292 = bits(T_238, 7, 0) @[CircuitMath.scala 27:17] 
    node T_294 = neq(T_291, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_295 = bits(T_291, 7, 4) @[CircuitMath.scala 26:17] 
    node T_296 = bits(T_291, 3, 0) @[CircuitMath.scala 27:17] 
    node T_298 = neq(T_295, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_299 = bits(T_295, 3, 3) @[CircuitMath.scala 23:12] 
    node T_301 = bits(T_295, 2, 2) @[CircuitMath.scala 23:12] 
    node T_303 = bits(T_295, 1, 1) @[CircuitMath.scala 21:8] 
    node T_304 = shl(T_303, 0) @[CircuitMath.scala 23:10] 
    node T_305 = mux(T_301, UInt<2>("h02"), T_304) @[CircuitMath.scala 23:10] 
    node T_306 = mux(T_299, UInt<2>("h03"), T_305) @[CircuitMath.scala 23:10] 
    node T_307 = bits(T_296, 3, 3) @[CircuitMath.scala 23:12] 
    node T_309 = bits(T_296, 2, 2) @[CircuitMath.scala 23:12] 
    node T_311 = bits(T_296, 1, 1) @[CircuitMath.scala 21:8] 
    node T_312 = shl(T_311, 0) @[CircuitMath.scala 23:10] 
    node T_313 = mux(T_309, UInt<2>("h02"), T_312) @[CircuitMath.scala 23:10] 
    node T_314 = mux(T_307, UInt<2>("h03"), T_313) @[CircuitMath.scala 23:10] 
    node T_315 = mux(T_298, T_306, T_314) @[CircuitMath.scala 29:21] 
    node T_316 = cat(T_298, T_315) @[Cat.scala 20:58] 
    node T_317 = bits(T_292, 7, 4) @[CircuitMath.scala 26:17] 
    node T_318 = bits(T_292, 3, 0) @[CircuitMath.scala 27:17] 
    node T_320 = neq(T_317, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_321 = bits(T_317, 3, 3) @[CircuitMath.scala 23:12] 
    node T_323 = bits(T_317, 2, 2) @[CircuitMath.scala 23:12] 
    node T_325 = bits(T_317, 1, 1) @[CircuitMath.scala 21:8] 
    node T_326 = shl(T_325, 0) @[CircuitMath.scala 23:10] 
    node T_327 = mux(T_323, UInt<2>("h02"), T_326) @[CircuitMath.scala 23:10] 
    node T_328 = mux(T_321, UInt<2>("h03"), T_327) @[CircuitMath.scala 23:10] 
    node T_329 = bits(T_318, 3, 3) @[CircuitMath.scala 23:12] 
    node T_331 = bits(T_318, 2, 2) @[CircuitMath.scala 23:12] 
    node T_333 = bits(T_318, 1, 1) @[CircuitMath.scala 21:8] 
    node T_334 = shl(T_333, 0) @[CircuitMath.scala 23:10] 
    node T_335 = mux(T_331, UInt<2>("h02"), T_334) @[CircuitMath.scala 23:10] 
    node T_336 = mux(T_329, UInt<2>("h03"), T_335) @[CircuitMath.scala 23:10] 
    node T_337 = mux(T_320, T_328, T_336) @[CircuitMath.scala 29:21] 
    node T_338 = cat(T_320, T_337) @[Cat.scala 20:58] 
    node T_339 = mux(T_294, T_316, T_338) @[CircuitMath.scala 29:21] 
    node T_340 = cat(T_294, T_339) @[Cat.scala 20:58] 
    node T_341 = mux(T_240, T_290, T_340) @[CircuitMath.scala 29:21] 
    node T_342 = cat(T_240, T_341) @[Cat.scala 20:58] 
    node T_343 = bits(T_234, 31, 16) @[CircuitMath.scala 26:17] 
    node T_344 = bits(T_234, 15, 0) @[CircuitMath.scala 27:17] 
    node T_346 = neq(T_343, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_347 = bits(T_343, 15, 8) @[CircuitMath.scala 26:17] 
    node T_348 = bits(T_343, 7, 0) @[CircuitMath.scala 27:17] 
    node T_350 = neq(T_347, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_351 = bits(T_347, 7, 4) @[CircuitMath.scala 26:17] 
    node T_352 = bits(T_347, 3, 0) @[CircuitMath.scala 27:17] 
    node T_354 = neq(T_351, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_355 = bits(T_351, 3, 3) @[CircuitMath.scala 23:12] 
    node T_357 = bits(T_351, 2, 2) @[CircuitMath.scala 23:12] 
    node T_359 = bits(T_351, 1, 1) @[CircuitMath.scala 21:8] 
    node T_360 = shl(T_359, 0) @[CircuitMath.scala 23:10] 
    node T_361 = mux(T_357, UInt<2>("h02"), T_360) @[CircuitMath.scala 23:10] 
    node T_362 = mux(T_355, UInt<2>("h03"), T_361) @[CircuitMath.scala 23:10] 
    node T_363 = bits(T_352, 3, 3) @[CircuitMath.scala 23:12] 
    node T_365 = bits(T_352, 2, 2) @[CircuitMath.scala 23:12] 
    node T_367 = bits(T_352, 1, 1) @[CircuitMath.scala 21:8] 
    node T_368 = shl(T_367, 0) @[CircuitMath.scala 23:10] 
    node T_369 = mux(T_365, UInt<2>("h02"), T_368) @[CircuitMath.scala 23:10] 
    node T_370 = mux(T_363, UInt<2>("h03"), T_369) @[CircuitMath.scala 23:10] 
    node T_371 = mux(T_354, T_362, T_370) @[CircuitMath.scala 29:21] 
    node T_372 = cat(T_354, T_371) @[Cat.scala 20:58] 
    node T_373 = bits(T_348, 7, 4) @[CircuitMath.scala 26:17] 
    node T_374 = bits(T_348, 3, 0) @[CircuitMath.scala 27:17] 
    node T_376 = neq(T_373, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_377 = bits(T_373, 3, 3) @[CircuitMath.scala 23:12] 
    node T_379 = bits(T_373, 2, 2) @[CircuitMath.scala 23:12] 
    node T_381 = bits(T_373, 1, 1) @[CircuitMath.scala 21:8] 
    node T_382 = shl(T_381, 0) @[CircuitMath.scala 23:10] 
    node T_383 = mux(T_379, UInt<2>("h02"), T_382) @[CircuitMath.scala 23:10] 
    node T_384 = mux(T_377, UInt<2>("h03"), T_383) @[CircuitMath.scala 23:10] 
    node T_385 = bits(T_374, 3, 3) @[CircuitMath.scala 23:12] 
    node T_387 = bits(T_374, 2, 2) @[CircuitMath.scala 23:12] 
    node T_389 = bits(T_374, 1, 1) @[CircuitMath.scala 21:8] 
    node T_390 = shl(T_389, 0) @[CircuitMath.scala 23:10] 
    node T_391 = mux(T_387, UInt<2>("h02"), T_390) @[CircuitMath.scala 23:10] 
    node T_392 = mux(T_385, UInt<2>("h03"), T_391) @[CircuitMath.scala 23:10] 
    node T_393 = mux(T_376, T_384, T_392) @[CircuitMath.scala 29:21] 
    node T_394 = cat(T_376, T_393) @[Cat.scala 20:58] 
    node T_395 = mux(T_350, T_372, T_394) @[CircuitMath.scala 29:21] 
    node T_396 = cat(T_350, T_395) @[Cat.scala 20:58] 
    node T_397 = bits(T_344, 15, 8) @[CircuitMath.scala 26:17] 
    node T_398 = bits(T_344, 7, 0) @[CircuitMath.scala 27:17] 
    node T_400 = neq(T_397, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_401 = bits(T_397, 7, 4) @[CircuitMath.scala 26:17] 
    node T_402 = bits(T_397, 3, 0) @[CircuitMath.scala 27:17] 
    node T_404 = neq(T_401, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_405 = bits(T_401, 3, 3) @[CircuitMath.scala 23:12] 
    node T_407 = bits(T_401, 2, 2) @[CircuitMath.scala 23:12] 
    node T_409 = bits(T_401, 1, 1) @[CircuitMath.scala 21:8] 
    node T_410 = shl(T_409, 0) @[CircuitMath.scala 23:10] 
    node T_411 = mux(T_407, UInt<2>("h02"), T_410) @[CircuitMath.scala 23:10] 
    node T_412 = mux(T_405, UInt<2>("h03"), T_411) @[CircuitMath.scala 23:10] 
    node T_413 = bits(T_402, 3, 3) @[CircuitMath.scala 23:12] 
    node T_415 = bits(T_402, 2, 2) @[CircuitMath.scala 23:12] 
    node T_417 = bits(T_402, 1, 1) @[CircuitMath.scala 21:8] 
    node T_418 = shl(T_417, 0) @[CircuitMath.scala 23:10] 
    node T_419 = mux(T_415, UInt<2>("h02"), T_418) @[CircuitMath.scala 23:10] 
    node T_420 = mux(T_413, UInt<2>("h03"), T_419) @[CircuitMath.scala 23:10] 
    node T_421 = mux(T_404, T_412, T_420) @[CircuitMath.scala 29:21] 
    node T_422 = cat(T_404, T_421) @[Cat.scala 20:58] 
    node T_423 = bits(T_398, 7, 4) @[CircuitMath.scala 26:17] 
    node T_424 = bits(T_398, 3, 0) @[CircuitMath.scala 27:17] 
    node T_426 = neq(T_423, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_427 = bits(T_423, 3, 3) @[CircuitMath.scala 23:12] 
    node T_429 = bits(T_423, 2, 2) @[CircuitMath.scala 23:12] 
    node T_431 = bits(T_423, 1, 1) @[CircuitMath.scala 21:8] 
    node T_432 = shl(T_431, 0) @[CircuitMath.scala 23:10] 
    node T_433 = mux(T_429, UInt<2>("h02"), T_432) @[CircuitMath.scala 23:10] 
    node T_434 = mux(T_427, UInt<2>("h03"), T_433) @[CircuitMath.scala 23:10] 
    node T_435 = bits(T_424, 3, 3) @[CircuitMath.scala 23:12] 
    node T_437 = bits(T_424, 2, 2) @[CircuitMath.scala 23:12] 
    node T_439 = bits(T_424, 1, 1) @[CircuitMath.scala 21:8] 
    node T_440 = shl(T_439, 0) @[CircuitMath.scala 23:10] 
    node T_441 = mux(T_437, UInt<2>("h02"), T_440) @[CircuitMath.scala 23:10] 
    node T_442 = mux(T_435, UInt<2>("h03"), T_441) @[CircuitMath.scala 23:10] 
    node T_443 = mux(T_426, T_434, T_442) @[CircuitMath.scala 29:21] 
    node T_444 = cat(T_426, T_443) @[Cat.scala 20:58] 
    node T_445 = mux(T_400, T_422, T_444) @[CircuitMath.scala 29:21] 
    node T_446 = cat(T_400, T_445) @[Cat.scala 20:58] 
    node T_447 = mux(T_346, T_396, T_446) @[CircuitMath.scala 29:21] 
    node T_448 = cat(T_346, T_447) @[Cat.scala 20:58] 
    node T_449 = mux(T_236, T_342, T_448) @[CircuitMath.scala 29:21] 
    node T_450 = cat(T_236, T_449) @[Cat.scala 20:58] 
    node T_451 = mux(T_84, T_232, T_450) @[CircuitMath.scala 29:21] 
    node T_452 = cat(T_84, T_451) @[Cat.scala 20:58] 
    node T_453 = sub(UInt<8>("h0a0"), T_452) @[primitives.scala 79:25] 
    node estNormPos_dist = tail(T_453, 1) @[primitives.scala 79:25] 
    node T_454 = bits(sigSum, 75, 44) @[MulAddRecFN.scala 252:19] 
    node T_456 = neq(T_454, UInt<1>("h00")) @[MulAddRecFN.scala 254:15] 
    node T_457 = bits(sigSum, 43, 0) @[MulAddRecFN.scala 255:19] 
    node T_459 = neq(T_457, UInt<1>("h00")) @[MulAddRecFN.scala 255:57] 
    node firstReduceSigSum = cat(T_456, T_459) @[Cat.scala 20:58] 
    node complSigSum = not(sigSum) @[MulAddRecFN.scala 257:23] 
    node T_460 = bits(complSigSum, 75, 44) @[MulAddRecFN.scala 259:24] 
    node T_462 = neq(T_460, UInt<1>("h00")) @[MulAddRecFN.scala 261:15] 
    node T_463 = bits(complSigSum, 43, 0) @[MulAddRecFN.scala 262:24] 
    node T_465 = neq(T_463, UInt<1>("h00")) @[MulAddRecFN.scala 262:62] 
    node firstReduceComplSigSum = cat(T_462, T_465) @[Cat.scala 20:58] 
    node T_466 = or(io.fromPreMul.CAlignDist_0, doSubMags) @[MulAddRecFN.scala 266:40] 
    node T_468 = sub(io.fromPreMul.CAlignDist, UInt<1>("h01")) @[MulAddRecFN.scala 268:39] 
    node T_469 = tail(T_468, 1) @[MulAddRecFN.scala 268:39] 
    node T_470 = bits(T_469, 5, 0) @[MulAddRecFN.scala 268:49] 
    node CDom_estNormDist = mux(T_466, io.fromPreMul.CAlignDist, T_470) @[MulAddRecFN.scala 266:12] 
    node T_472 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 271:13] 
    node T_473 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 271:46] 
    node T_475 = eq(T_473, UInt<1>("h00")) @[MulAddRecFN.scala 271:28] 
    node T_476 = and(T_472, T_475) @[MulAddRecFN.scala 271:25] 
    node T_477 = bits(sigSum, 161, 76) @[MulAddRecFN.scala 272:23] 
    node T_479 = neq(firstReduceSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 273:35] 
    node T_480 = cat(T_477, T_479) @[Cat.scala 20:58] 
    node T_482 = mux(T_476, T_480, UInt<1>("h00")) @[MulAddRecFN.scala 271:12] 
    node T_484 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 277:13] 
    node T_485 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 277:44] 
    node T_486 = and(T_484, T_485) @[MulAddRecFN.scala 277:25] 
    node T_487 = bits(sigSum, 129, 44) @[MulAddRecFN.scala 278:23] 
    node T_488 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 282:34] 
    node T_489 = cat(T_487, T_488) @[Cat.scala 20:58] 
    node T_491 = mux(T_486, T_489, UInt<1>("h00")) @[MulAddRecFN.scala 277:12] 
    node T_492 = or(T_482, T_491) @[MulAddRecFN.scala 276:11] 
    node T_493 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 286:44] 
    node T_495 = eq(T_493, UInt<1>("h00")) @[MulAddRecFN.scala 286:26] 
    node T_496 = and(doSubMags, T_495) @[MulAddRecFN.scala 286:23] 
    node T_497 = bits(complSigSum, 161, 76) @[MulAddRecFN.scala 287:28] 
    node T_499 = neq(firstReduceComplSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 288:40] 
    node T_500 = cat(T_497, T_499) @[Cat.scala 20:58] 
    node T_502 = mux(T_496, T_500, UInt<1>("h00")) @[MulAddRecFN.scala 286:12] 
    node T_503 = or(T_492, T_502) @[MulAddRecFN.scala 285:11] 
    node T_504 = bits(CDom_estNormDist, 5, 5) @[MulAddRecFN.scala 292:42] 
    node T_505 = and(doSubMags, T_504) @[MulAddRecFN.scala 292:23] 
    node T_506 = bits(complSigSum, 129, 44) @[MulAddRecFN.scala 293:28] 
    node T_507 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 297:39] 
    node T_508 = cat(T_506, T_507) @[Cat.scala 20:58] 
    node T_510 = mux(T_505, T_508, UInt<1>("h00")) @[MulAddRecFN.scala 292:12] 
    node CDom_firstNormAbsSigSum = or(T_503, T_510) @[MulAddRecFN.scala 291:11] 
    node T_511 = bits(sigSum, 108, 44) @[MulAddRecFN.scala 308:23] 
    node T_512 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 310:45] 
    node T_514 = eq(T_512, UInt<1>("h00")) @[MulAddRecFN.scala 310:21] 
    node T_515 = bits(firstReduceSigSum, 0, 0) @[MulAddRecFN.scala 311:38] 
    node T_516 = mux(doSubMags, T_514, T_515) @[MulAddRecFN.scala 309:20] 
    node T_517 = cat(T_511, T_516) @[Cat.scala 20:58] 
    node T_518 = bits(sigSum, 97, 1) @[MulAddRecFN.scala 314:24] 
    node T_519 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 316:37] 
    node T_520 = bits(sigSum, 1, 1) @[MulAddRecFN.scala 318:32] 
    node T_521 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_524 = mux(T_521, UInt<86>("h03fffffffffffffffffffff"), UInt<86>("h00")) @[Bitwise.scala 33:12] 
    node T_525 = cat(T_520, T_524) @[Cat.scala 20:58] 
    node T_526 = mux(T_519, T_517, T_525) @[MulAddRecFN.scala 316:21] 
    node T_527 = bits(sigSum, 97, 12) @[MulAddRecFN.scala 324:28] 
    node T_528 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 329:39] 
    node T_530 = eq(T_528, UInt<1>("h00")) @[MulAddRecFN.scala 329:77] 
    node T_531 = bits(sigSum, 11, 1) @[MulAddRecFN.scala 331:34] 
    node T_533 = neq(T_531, UInt<1>("h00")) @[MulAddRecFN.scala 331:72] 
    node T_534 = mux(doSubMags, T_530, T_533) @[MulAddRecFN.scala 328:26] 
    node T_535 = cat(T_527, T_534) @[Cat.scala 20:58] 
    node T_536 = bits(estNormPos_dist, 6, 6) @[MulAddRecFN.scala 338:28] 
    node T_537 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 339:33] 
    node T_538 = bits(sigSum, 65, 1) @[MulAddRecFN.scala 340:28] 
    node T_539 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_542 = mux(T_539, UInt<22>("h03fffff"), UInt<22>("h00")) @[Bitwise.scala 33:12] 
    node T_543 = cat(T_538, T_542) @[Cat.scala 20:58] 
    node T_544 = mux(T_537, T_543, T_535) @[MulAddRecFN.scala 339:17] 
    node T_545 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 345:33] 
    node T_546 = bits(sigSum, 33, 1) @[MulAddRecFN.scala 347:28] 
    node T_547 = bits(doSubMags, 0, 0) @[Bitwise.scala 33:15] 
    node T_550 = mux(T_547, UInt<54>("h03fffffffffffff"), UInt<54>("h00")) @[Bitwise.scala 33:12] 
    node T_551 = cat(T_546, T_550) @[Cat.scala 20:58] 
    node T_552 = mux(T_545, T_526, T_551) @[MulAddRecFN.scala 345:17] 
    node notCDom_pos_firstNormAbsSigSum = mux(T_536, T_544, T_552) @[MulAddRecFN.scala 338:12] 
    node T_553 = bits(complSigSum, 107, 44) @[MulAddRecFN.scala 360:28] 
    node T_554 = bits(firstReduceComplSigSum, 0, 0) @[MulAddRecFN.scala 361:39] 
    node T_555 = cat(T_553, T_554) @[Cat.scala 20:58] 
    node T_556 = bits(complSigSum, 97, 1) @[MulAddRecFN.scala 363:29] 
    node T_557 = bits(estNormPos_dist, 4, 4) @[MulAddRecFN.scala 365:37] 
    node T_558 = bits(complSigSum, 2, 1) @[MulAddRecFN.scala 367:33] 
    node T_559 = shl(T_558, 86) @[MulAddRecFN.scala 367:68] 
    node T_560 = mux(T_557, T_555, T_559) @[MulAddRecFN.scala 365:21] 
    node T_561 = bits(complSigSum, 98, 12) @[MulAddRecFN.scala 372:33] 
    node T_562 = bits(complSigSum, 11, 1) @[MulAddRecFN.scala 376:33] 
    node T_564 = neq(T_562, UInt<1>("h00")) @[MulAddRecFN.scala 376:71] 
    node T_565 = cat(T_561, T_564) @[Cat.scala 20:58] 
    node T_566 = bits(estNormPos_dist, 6, 6) @[MulAddRecFN.scala 379:28] 
    node T_567 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 380:33] 
    node T_568 = bits(complSigSum, 66, 1) @[MulAddRecFN.scala 381:29] 
    node T_569 = shl(T_568, 22) @[MulAddRecFN.scala 381:64] 
    node T_570 = mux(T_567, T_569, T_565) @[MulAddRecFN.scala 380:17] 
    node T_571 = bits(estNormPos_dist, 5, 5) @[MulAddRecFN.scala 385:33] 
    node T_572 = bits(complSigSum, 34, 1) @[MulAddRecFN.scala 387:29] 
    node T_573 = shl(T_572, 54) @[MulAddRecFN.scala 387:64] 
    node T_574 = mux(T_571, T_560, T_573) @[MulAddRecFN.scala 385:17] 
    node notCDom_neg_cFirstNormAbsSigSum = mux(T_566, T_570, T_574) @[MulAddRecFN.scala 379:12] 
    node notCDom_signSigSum = bits(sigSum, 109, 109) @[MulAddRecFN.scala 392:36] 
    node T_576 = eq(isZeroC, UInt<1>("h00")) @[MulAddRecFN.scala 395:26] 
    node T_577 = and(doSubMags, T_576) @[MulAddRecFN.scala 395:23] 
    node doNegSignSum = mux(io.fromPreMul.isCDominant, T_577, notCDom_signSigSum) @[MulAddRecFN.scala 394:12] 
    node T_578 = mux(notCDom_signSigSum, estNormPos_dist, estNormPos_dist) @[MulAddRecFN.scala 401:16] 
    node estNormDist = mux(io.fromPreMul.isCDominant, CDom_estNormDist, T_578) @[MulAddRecFN.scala 399:12] 
    node T_579 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_neg_cFirstNormAbsSigSum) @[MulAddRecFN.scala 408:16] 
    node T_580 = mux(io.fromPreMul.isCDominant, CDom_firstNormAbsSigSum, notCDom_pos_firstNormAbsSigSum) @[MulAddRecFN.scala 412:16] 
    node cFirstNormAbsSigSum = mux(notCDom_signSigSum, T_579, T_580) @[MulAddRecFN.scala 407:12] 
    node T_582 = eq(io.fromPreMul.isCDominant, UInt<1>("h00")) @[MulAddRecFN.scala 418:9] 
    node T_584 = eq(notCDom_signSigSum, UInt<1>("h00")) @[MulAddRecFN.scala 418:40] 
    node T_585 = and(T_582, T_584) @[MulAddRecFN.scala 418:37] 
    node doIncrSig = and(T_585, doSubMags) @[MulAddRecFN.scala 418:61] 
    node estNormDist_5 = bits(estNormDist, 4, 0) @[MulAddRecFN.scala 419:36] 
    node normTo2ShiftDist = not(estNormDist_5) @[MulAddRecFN.scala 420:28] 
    node T_587 = dshr(asSInt(UInt<33>("h0100000000")), normTo2ShiftDist) @[primitives.scala 68:52] 
    node T_588 = bits(T_587, 31, 1) @[primitives.scala 69:26] 
    node T_589 = bits(T_588, 15, 0) @[Bitwise.scala 65:18] 
    node T_592 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_593 = xor(UInt<16>("h0ffff"), T_592) @[Bitwise.scala 58:21] 
    node T_594 = shr(T_589, 8) @[Bitwise.scala 59:21] 
    node T_595 = and(T_594, T_593) @[Bitwise.scala 59:31] 
    node T_596 = bits(T_589, 7, 0) @[Bitwise.scala 59:46] 
    node T_597 = shl(T_596, 8) @[Bitwise.scala 59:65] 
    node T_598 = not(T_593) @[Bitwise.scala 59:77] 
    node T_599 = and(T_597, T_598) @[Bitwise.scala 59:75] 
    node T_600 = or(T_595, T_599) @[Bitwise.scala 59:39] 
    node T_601 = bits(T_593, 11, 0) @[Bitwise.scala 58:28] 
    node T_602 = shl(T_601, 4) @[Bitwise.scala 58:47] 
    node T_603 = xor(T_593, T_602) @[Bitwise.scala 58:21] 
    node T_604 = shr(T_600, 4) @[Bitwise.scala 59:21] 
    node T_605 = and(T_604, T_603) @[Bitwise.scala 59:31] 
    node T_606 = bits(T_600, 11, 0) @[Bitwise.scala 59:46] 
    node T_607 = shl(T_606, 4) @[Bitwise.scala 59:65] 
    node T_608 = not(T_603) @[Bitwise.scala 59:77] 
    node T_609 = and(T_607, T_608) @[Bitwise.scala 59:75] 
    node T_610 = or(T_605, T_609) @[Bitwise.scala 59:39] 
    node T_611 = bits(T_603, 13, 0) @[Bitwise.scala 58:28] 
    node T_612 = shl(T_611, 2) @[Bitwise.scala 58:47] 
    node T_613 = xor(T_603, T_612) @[Bitwise.scala 58:21] 
    node T_614 = shr(T_610, 2) @[Bitwise.scala 59:21] 
    node T_615 = and(T_614, T_613) @[Bitwise.scala 59:31] 
    node T_616 = bits(T_610, 13, 0) @[Bitwise.scala 59:46] 
    node T_617 = shl(T_616, 2) @[Bitwise.scala 59:65] 
    node T_618 = not(T_613) @[Bitwise.scala 59:77] 
    node T_619 = and(T_617, T_618) @[Bitwise.scala 59:75] 
    node T_620 = or(T_615, T_619) @[Bitwise.scala 59:39] 
    node T_621 = bits(T_613, 14, 0) @[Bitwise.scala 58:28] 
    node T_622 = shl(T_621, 1) @[Bitwise.scala 58:47] 
    node T_623 = xor(T_613, T_622) @[Bitwise.scala 58:21] 
    node T_624 = shr(T_620, 1) @[Bitwise.scala 59:21] 
    node T_625 = and(T_624, T_623) @[Bitwise.scala 59:31] 
    node T_626 = bits(T_620, 14, 0) @[Bitwise.scala 59:46] 
    node T_627 = shl(T_626, 1) @[Bitwise.scala 59:65] 
    node T_628 = not(T_623) @[Bitwise.scala 59:77] 
    node T_629 = and(T_627, T_628) @[Bitwise.scala 59:75] 
    node T_630 = or(T_625, T_629) @[Bitwise.scala 59:39] 
    node T_631 = bits(T_588, 30, 16) @[Bitwise.scala 65:44] 
    node T_632 = bits(T_631, 7, 0) @[Bitwise.scala 65:18] 
    node T_635 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 58:47] 
    node T_636 = xor(UInt<8>("h0ff"), T_635) @[Bitwise.scala 58:21] 
    node T_637 = shr(T_632, 4) @[Bitwise.scala 59:21] 
    node T_638 = and(T_637, T_636) @[Bitwise.scala 59:31] 
    node T_639 = bits(T_632, 3, 0) @[Bitwise.scala 59:46] 
    node T_640 = shl(T_639, 4) @[Bitwise.scala 59:65] 
    node T_641 = not(T_636) @[Bitwise.scala 59:77] 
    node T_642 = and(T_640, T_641) @[Bitwise.scala 59:75] 
    node T_643 = or(T_638, T_642) @[Bitwise.scala 59:39] 
    node T_644 = bits(T_636, 5, 0) @[Bitwise.scala 58:28] 
    node T_645 = shl(T_644, 2) @[Bitwise.scala 58:47] 
    node T_646 = xor(T_636, T_645) @[Bitwise.scala 58:21] 
    node T_647 = shr(T_643, 2) @[Bitwise.scala 59:21] 
    node T_648 = and(T_647, T_646) @[Bitwise.scala 59:31] 
    node T_649 = bits(T_643, 5, 0) @[Bitwise.scala 59:46] 
    node T_650 = shl(T_649, 2) @[Bitwise.scala 59:65] 
    node T_651 = not(T_646) @[Bitwise.scala 59:77] 
    node T_652 = and(T_650, T_651) @[Bitwise.scala 59:75] 
    node T_653 = or(T_648, T_652) @[Bitwise.scala 59:39] 
    node T_654 = bits(T_646, 6, 0) @[Bitwise.scala 58:28] 
    node T_655 = shl(T_654, 1) @[Bitwise.scala 58:47] 
    node T_656 = xor(T_646, T_655) @[Bitwise.scala 58:21] 
    node T_657 = shr(T_653, 1) @[Bitwise.scala 59:21] 
    node T_658 = and(T_657, T_656) @[Bitwise.scala 59:31] 
    node T_659 = bits(T_653, 6, 0) @[Bitwise.scala 59:46] 
    node T_660 = shl(T_659, 1) @[Bitwise.scala 59:65] 
    node T_661 = not(T_656) @[Bitwise.scala 59:77] 
    node T_662 = and(T_660, T_661) @[Bitwise.scala 59:75] 
    node T_663 = or(T_658, T_662) @[Bitwise.scala 59:39] 
    node T_664 = bits(T_631, 14, 8) @[Bitwise.scala 65:44] 
    node T_665 = bits(T_664, 3, 0) @[Bitwise.scala 65:18] 
    node T_666 = bits(T_665, 1, 0) @[Bitwise.scala 65:18] 
    node T_667 = bits(T_666, 0, 0) @[Bitwise.scala 65:18] 
    node T_668 = bits(T_666, 1, 1) @[Bitwise.scala 65:44] 
    node T_669 = cat(T_667, T_668) @[Cat.scala 20:58] 
    node T_670 = bits(T_665, 3, 2) @[Bitwise.scala 65:44] 
    node T_671 = bits(T_670, 0, 0) @[Bitwise.scala 65:18] 
    node T_672 = bits(T_670, 1, 1) @[Bitwise.scala 65:44] 
    node T_673 = cat(T_671, T_672) @[Cat.scala 20:58] 
    node T_674 = cat(T_669, T_673) @[Cat.scala 20:58] 
    node T_675 = bits(T_664, 6, 4) @[Bitwise.scala 65:44] 
    node T_676 = bits(T_675, 1, 0) @[Bitwise.scala 65:18] 
    node T_677 = bits(T_676, 0, 0) @[Bitwise.scala 65:18] 
    node T_678 = bits(T_676, 1, 1) @[Bitwise.scala 65:44] 
    node T_679 = cat(T_677, T_678) @[Cat.scala 20:58] 
    node T_680 = bits(T_675, 2, 2) @[Bitwise.scala 65:44] 
    node T_681 = cat(T_679, T_680) @[Cat.scala 20:58] 
    node T_682 = cat(T_674, T_681) @[Cat.scala 20:58] 
    node T_683 = cat(T_663, T_682) @[Cat.scala 20:58] 
    node T_684 = cat(T_630, T_683) @[Cat.scala 20:58] 
    node absSigSumExtraMask = cat(T_684, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_686 = bits(cFirstNormAbsSigSum, 87, 1) @[MulAddRecFN.scala 424:32] 
    node T_687 = dshr(T_686, normTo2ShiftDist) @[MulAddRecFN.scala 424:65] 
    node T_688 = bits(cFirstNormAbsSigSum, 31, 0) @[MulAddRecFN.scala 427:39] 
    node T_689 = not(T_688) @[MulAddRecFN.scala 427:19] 
    node T_690 = and(T_689, absSigSumExtraMask) @[MulAddRecFN.scala 427:62] 
    node T_692 = eq(T_690, UInt<1>("h00")) @[MulAddRecFN.scala 428:43] 
    node T_693 = bits(cFirstNormAbsSigSum, 31, 0) @[MulAddRecFN.scala 430:38] 
    node T_694 = and(T_693, absSigSumExtraMask) @[MulAddRecFN.scala 430:61] 
    node T_696 = neq(T_694, UInt<1>("h00")) @[MulAddRecFN.scala 431:43] 
    node T_697 = mux(doIncrSig, T_692, T_696) @[MulAddRecFN.scala 426:16] 
    node T_698 = cat(T_687, T_697) @[Cat.scala 20:58] 
    node sigX3 = bits(T_698, 56, 0) @[MulAddRecFN.scala 434:10] 
    node T_699 = bits(sigX3, 56, 55) @[MulAddRecFN.scala 436:29] 
    node sigX3Shift1 = eq(T_699, UInt<1>("h00")) @[MulAddRecFN.scala 436:58] 
    node T_701 = sub(io.fromPreMul.sExpSum, estNormDist) @[MulAddRecFN.scala 437:40] 
    node sExpX3 = tail(T_701, 1) @[MulAddRecFN.scala 437:40] 
    node T_702 = bits(sigX3, 56, 54) @[MulAddRecFN.scala 439:25] 
    node isZeroY = eq(T_702, UInt<1>("h00")) @[MulAddRecFN.scala 439:54] 
    node T_704 = xor(io.fromPreMul.signProd, doNegSignSum) @[MulAddRecFN.scala 444:36] 
    node signY = mux(isZeroY, signZeroNotEqOpSigns, T_704) @[MulAddRecFN.scala 442:12] 
    node sExpX3_13 = bits(sExpX3, 12, 0) @[MulAddRecFN.scala 446:27] 
    node T_705 = bits(sExpX3, 13, 13) @[MulAddRecFN.scala 448:34] 
    node T_706 = bits(T_705, 0, 0) @[Bitwise.scala 33:15] 
    node T_709 = mux(T_706, UInt<56>("h0ffffffffffffff"), UInt<56>("h00")) @[Bitwise.scala 33:12] 
    node T_710 = not(sExpX3_13) @[primitives.scala 50:21] 
    node T_711 = bits(T_710, 12, 12) @[primitives.scala 56:25] 
    node T_712 = bits(T_710, 11, 0) @[primitives.scala 57:26] 
    node T_713 = bits(T_712, 11, 11) @[primitives.scala 56:25] 
    node T_714 = bits(T_712, 10, 0) @[primitives.scala 57:26] 
    node T_715 = bits(T_714, 10, 10) @[primitives.scala 56:25] 
    node T_716 = bits(T_714, 9, 0) @[primitives.scala 57:26] 
    node T_717 = bits(T_716, 9, 9) @[primitives.scala 56:25] 
    node T_718 = bits(T_716, 8, 0) @[primitives.scala 57:26] 
    node T_720 = bits(T_718, 8, 8) @[primitives.scala 56:25] 
    node T_721 = bits(T_718, 7, 0) @[primitives.scala 57:26] 
    node T_723 = bits(T_721, 7, 7) @[primitives.scala 56:25] 
    node T_724 = bits(T_721, 6, 0) @[primitives.scala 57:26] 
    node T_726 = bits(T_724, 6, 6) @[primitives.scala 56:25] 
    node T_727 = bits(T_724, 5, 0) @[primitives.scala 57:26] 
    node T_730 = dshr(asSInt(UInt<65>("h010000000000000000")), T_727) @[primitives.scala 68:52] 
    node T_731 = bits(T_730, 63, 14) @[primitives.scala 69:26] 
    node T_732 = bits(T_731, 31, 0) @[Bitwise.scala 65:18] 
    node T_735 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47] 
    node T_736 = xor(UInt<32>("h0ffffffff"), T_735) @[Bitwise.scala 58:21] 
    node T_737 = shr(T_732, 16) @[Bitwise.scala 59:21] 
    node T_738 = and(T_737, T_736) @[Bitwise.scala 59:31] 
    node T_739 = bits(T_732, 15, 0) @[Bitwise.scala 59:46] 
    node T_740 = shl(T_739, 16) @[Bitwise.scala 59:65] 
    node T_741 = not(T_736) @[Bitwise.scala 59:77] 
    node T_742 = and(T_740, T_741) @[Bitwise.scala 59:75] 
    node T_743 = or(T_738, T_742) @[Bitwise.scala 59:39] 
    node T_744 = bits(T_736, 23, 0) @[Bitwise.scala 58:28] 
    node T_745 = shl(T_744, 8) @[Bitwise.scala 58:47] 
    node T_746 = xor(T_736, T_745) @[Bitwise.scala 58:21] 
    node T_747 = shr(T_743, 8) @[Bitwise.scala 59:21] 
    node T_748 = and(T_747, T_746) @[Bitwise.scala 59:31] 
    node T_749 = bits(T_743, 23, 0) @[Bitwise.scala 59:46] 
    node T_750 = shl(T_749, 8) @[Bitwise.scala 59:65] 
    node T_751 = not(T_746) @[Bitwise.scala 59:77] 
    node T_752 = and(T_750, T_751) @[Bitwise.scala 59:75] 
    node T_753 = or(T_748, T_752) @[Bitwise.scala 59:39] 
    node T_754 = bits(T_746, 27, 0) @[Bitwise.scala 58:28] 
    node T_755 = shl(T_754, 4) @[Bitwise.scala 58:47] 
    node T_756 = xor(T_746, T_755) @[Bitwise.scala 58:21] 
    node T_757 = shr(T_753, 4) @[Bitwise.scala 59:21] 
    node T_758 = and(T_757, T_756) @[Bitwise.scala 59:31] 
    node T_759 = bits(T_753, 27, 0) @[Bitwise.scala 59:46] 
    node T_760 = shl(T_759, 4) @[Bitwise.scala 59:65] 
    node T_761 = not(T_756) @[Bitwise.scala 59:77] 
    node T_762 = and(T_760, T_761) @[Bitwise.scala 59:75] 
    node T_763 = or(T_758, T_762) @[Bitwise.scala 59:39] 
    node T_764 = bits(T_756, 29, 0) @[Bitwise.scala 58:28] 
    node T_765 = shl(T_764, 2) @[Bitwise.scala 58:47] 
    node T_766 = xor(T_756, T_765) @[Bitwise.scala 58:21] 
    node T_767 = shr(T_763, 2) @[Bitwise.scala 59:21] 
    node T_768 = and(T_767, T_766) @[Bitwise.scala 59:31] 
    node T_769 = bits(T_763, 29, 0) @[Bitwise.scala 59:46] 
    node T_770 = shl(T_769, 2) @[Bitwise.scala 59:65] 
    node T_771 = not(T_766) @[Bitwise.scala 59:77] 
    node T_772 = and(T_770, T_771) @[Bitwise.scala 59:75] 
    node T_773 = or(T_768, T_772) @[Bitwise.scala 59:39] 
    node T_774 = bits(T_766, 30, 0) @[Bitwise.scala 58:28] 
    node T_775 = shl(T_774, 1) @[Bitwise.scala 58:47] 
    node T_776 = xor(T_766, T_775) @[Bitwise.scala 58:21] 
    node T_777 = shr(T_773, 1) @[Bitwise.scala 59:21] 
    node T_778 = and(T_777, T_776) @[Bitwise.scala 59:31] 
    node T_779 = bits(T_773, 30, 0) @[Bitwise.scala 59:46] 
    node T_780 = shl(T_779, 1) @[Bitwise.scala 59:65] 
    node T_781 = not(T_776) @[Bitwise.scala 59:77] 
    node T_782 = and(T_780, T_781) @[Bitwise.scala 59:75] 
    node T_783 = or(T_778, T_782) @[Bitwise.scala 59:39] 
    node T_784 = bits(T_731, 49, 32) @[Bitwise.scala 65:44] 
    node T_785 = bits(T_784, 15, 0) @[Bitwise.scala 65:18] 
    node T_788 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_789 = xor(UInt<16>("h0ffff"), T_788) @[Bitwise.scala 58:21] 
    node T_790 = shr(T_785, 8) @[Bitwise.scala 59:21] 
    node T_791 = and(T_790, T_789) @[Bitwise.scala 59:31] 
    node T_792 = bits(T_785, 7, 0) @[Bitwise.scala 59:46] 
    node T_793 = shl(T_792, 8) @[Bitwise.scala 59:65] 
    node T_794 = not(T_789) @[Bitwise.scala 59:77] 
    node T_795 = and(T_793, T_794) @[Bitwise.scala 59:75] 
    node T_796 = or(T_791, T_795) @[Bitwise.scala 59:39] 
    node T_797 = bits(T_789, 11, 0) @[Bitwise.scala 58:28] 
    node T_798 = shl(T_797, 4) @[Bitwise.scala 58:47] 
    node T_799 = xor(T_789, T_798) @[Bitwise.scala 58:21] 
    node T_800 = shr(T_796, 4) @[Bitwise.scala 59:21] 
    node T_801 = and(T_800, T_799) @[Bitwise.scala 59:31] 
    node T_802 = bits(T_796, 11, 0) @[Bitwise.scala 59:46] 
    node T_803 = shl(T_802, 4) @[Bitwise.scala 59:65] 
    node T_804 = not(T_799) @[Bitwise.scala 59:77] 
    node T_805 = and(T_803, T_804) @[Bitwise.scala 59:75] 
    node T_806 = or(T_801, T_805) @[Bitwise.scala 59:39] 
    node T_807 = bits(T_799, 13, 0) @[Bitwise.scala 58:28] 
    node T_808 = shl(T_807, 2) @[Bitwise.scala 58:47] 
    node T_809 = xor(T_799, T_808) @[Bitwise.scala 58:21] 
    node T_810 = shr(T_806, 2) @[Bitwise.scala 59:21] 
    node T_811 = and(T_810, T_809) @[Bitwise.scala 59:31] 
    node T_812 = bits(T_806, 13, 0) @[Bitwise.scala 59:46] 
    node T_813 = shl(T_812, 2) @[Bitwise.scala 59:65] 
    node T_814 = not(T_809) @[Bitwise.scala 59:77] 
    node T_815 = and(T_813, T_814) @[Bitwise.scala 59:75] 
    node T_816 = or(T_811, T_815) @[Bitwise.scala 59:39] 
    node T_817 = bits(T_809, 14, 0) @[Bitwise.scala 58:28] 
    node T_818 = shl(T_817, 1) @[Bitwise.scala 58:47] 
    node T_819 = xor(T_809, T_818) @[Bitwise.scala 58:21] 
    node T_820 = shr(T_816, 1) @[Bitwise.scala 59:21] 
    node T_821 = and(T_820, T_819) @[Bitwise.scala 59:31] 
    node T_822 = bits(T_816, 14, 0) @[Bitwise.scala 59:46] 
    node T_823 = shl(T_822, 1) @[Bitwise.scala 59:65] 
    node T_824 = not(T_819) @[Bitwise.scala 59:77] 
    node T_825 = and(T_823, T_824) @[Bitwise.scala 59:75] 
    node T_826 = or(T_821, T_825) @[Bitwise.scala 59:39] 
    node T_827 = bits(T_784, 17, 16) @[Bitwise.scala 65:44] 
    node T_828 = bits(T_827, 0, 0) @[Bitwise.scala 65:18] 
    node T_829 = bits(T_827, 1, 1) @[Bitwise.scala 65:44] 
    node T_830 = cat(T_828, T_829) @[Cat.scala 20:58] 
    node T_831 = cat(T_826, T_830) @[Cat.scala 20:58] 
    node T_832 = cat(T_783, T_831) @[Cat.scala 20:58] 
    node T_833 = not(T_832) @[primitives.scala 65:36] 
    node T_834 = mux(T_726, UInt<1>("h00"), T_833) @[primitives.scala 65:21] 
    node T_835 = not(T_834) @[primitives.scala 65:17] 
    node T_836 = not(T_835) @[primitives.scala 65:36] 
    node T_837 = mux(T_723, UInt<1>("h00"), T_836) @[primitives.scala 65:21] 
    node T_838 = not(T_837) @[primitives.scala 65:17] 
    node T_839 = not(T_838) @[primitives.scala 65:36] 
    node T_840 = mux(T_720, UInt<1>("h00"), T_839) @[primitives.scala 65:21] 
    node T_841 = not(T_840) @[primitives.scala 65:17] 
    node T_842 = not(T_841) @[primitives.scala 65:36] 
    node T_843 = mux(T_717, UInt<1>("h00"), T_842) @[primitives.scala 65:21] 
    node T_844 = not(T_843) @[primitives.scala 65:17] 
    node T_846 = cat(T_844, UInt<4>("h0f")) @[Cat.scala 20:58] 
    node T_847 = bits(T_716, 9, 9) @[primitives.scala 56:25] 
    node T_848 = bits(T_716, 8, 0) @[primitives.scala 57:26] 
    node T_849 = bits(T_848, 8, 8) @[primitives.scala 56:25] 
    node T_850 = bits(T_848, 7, 0) @[primitives.scala 57:26] 
    node T_851 = bits(T_850, 7, 7) @[primitives.scala 56:25] 
    node T_852 = bits(T_850, 6, 0) @[primitives.scala 57:26] 
    node T_853 = bits(T_852, 6, 6) @[primitives.scala 56:25] 
    node T_854 = bits(T_852, 5, 0) @[primitives.scala 57:26] 
    node T_856 = dshr(asSInt(UInt<65>("h010000000000000000")), T_854) @[primitives.scala 68:52] 
    node T_857 = bits(T_856, 3, 0) @[primitives.scala 69:26] 
    node T_858 = bits(T_857, 1, 0) @[Bitwise.scala 65:18] 
    node T_859 = bits(T_858, 0, 0) @[Bitwise.scala 65:18] 
    node T_860 = bits(T_858, 1, 1) @[Bitwise.scala 65:44] 
    node T_861 = cat(T_859, T_860) @[Cat.scala 20:58] 
    node T_862 = bits(T_857, 3, 2) @[Bitwise.scala 65:44] 
    node T_863 = bits(T_862, 0, 0) @[Bitwise.scala 65:18] 
    node T_864 = bits(T_862, 1, 1) @[Bitwise.scala 65:44] 
    node T_865 = cat(T_863, T_864) @[Cat.scala 20:58] 
    node T_866 = cat(T_861, T_865) @[Cat.scala 20:58] 
    node T_868 = mux(T_853, T_866, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_870 = mux(T_851, T_868, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_872 = mux(T_849, T_870, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_874 = mux(T_847, T_872, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_875 = mux(T_715, T_846, T_874) @[primitives.scala 61:20] 
    node T_877 = mux(T_713, T_875, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_879 = mux(T_711, T_877, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_880 = bits(sigX3, 55, 55) @[MulAddRecFN.scala 450:26] 
    node T_881 = or(T_879, T_880) @[MulAddRecFN.scala 449:75] 
    node T_883 = cat(T_881, UInt<2>("h03")) @[Cat.scala 20:58] 
    node roundMask = or(T_709, T_883) @[MulAddRecFN.scala 448:50] 
    node T_884 = shr(roundMask, 1) @[MulAddRecFN.scala 454:35] 
    node T_885 = not(T_884) @[MulAddRecFN.scala 454:24] 
    node roundPosMask = and(T_885, roundMask) @[MulAddRecFN.scala 454:40] 
    node T_886 = and(sigX3, roundPosMask) @[MulAddRecFN.scala 455:30] 
    node roundPosBit = neq(T_886, UInt<1>("h00")) @[MulAddRecFN.scala 455:46] 
    node T_888 = shr(roundMask, 1) @[MulAddRecFN.scala 456:45] 
    node T_889 = and(sigX3, T_888) @[MulAddRecFN.scala 456:34] 
    node anyRoundExtra = neq(T_889, UInt<1>("h00")) @[MulAddRecFN.scala 456:50] 
    node T_891 = not(sigX3) @[MulAddRecFN.scala 457:27] 
    node T_892 = shr(roundMask, 1) @[MulAddRecFN.scala 457:45] 
    node T_893 = and(T_891, T_892) @[MulAddRecFN.scala 457:34] 
    node allRoundExtra = eq(T_893, UInt<1>("h00")) @[MulAddRecFN.scala 457:50] 
    node anyRound = or(roundPosBit, anyRoundExtra) @[MulAddRecFN.scala 458:32] 
    node allRound = and(roundPosBit, allRoundExtra) @[MulAddRecFN.scala 459:32] 
    node roundDirectUp = mux(signY, roundingMode_min, roundingMode_max) @[MulAddRecFN.scala 460:28] 
    node T_896 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 462:10] 
    node T_897 = and(T_896, roundingMode_nearest_even) @[MulAddRecFN.scala 462:22] 
    node T_898 = and(T_897, roundPosBit) @[MulAddRecFN.scala 462:51] 
    node T_899 = and(T_898, anyRoundExtra) @[MulAddRecFN.scala 463:60] 
    node T_901 = eq(doIncrSig, UInt<1>("h00")) @[MulAddRecFN.scala 464:10] 
    node T_902 = and(T_901, roundDirectUp) @[MulAddRecFN.scala 464:22] 
    node T_903 = and(T_902, anyRound) @[MulAddRecFN.scala 464:49] 
    node T_904 = or(T_899, T_903) @[MulAddRecFN.scala 463:78] 
    node T_905 = and(doIncrSig, allRound) @[MulAddRecFN.scala 465:49] 
    node T_906 = or(T_904, T_905) @[MulAddRecFN.scala 464:65] 
    node T_907 = and(doIncrSig, roundingMode_nearest_even) @[MulAddRecFN.scala 466:20] 
    node T_908 = and(T_907, roundPosBit) @[MulAddRecFN.scala 466:49] 
    node T_909 = or(T_906, T_908) @[MulAddRecFN.scala 465:65] 
    node T_910 = and(doIncrSig, roundDirectUp) @[MulAddRecFN.scala 467:20] 
    node T_912 = and(T_910, UInt<1>("h01")) @[MulAddRecFN.scala 467:49] 
    node roundUp = or(T_909, T_912) @[MulAddRecFN.scala 466:65] 
    node T_914 = eq(roundPosBit, UInt<1>("h00")) @[MulAddRecFN.scala 470:42] 
    node T_915 = and(roundingMode_nearest_even, T_914) @[MulAddRecFN.scala 470:39] 
    node T_916 = and(T_915, allRoundExtra) @[MulAddRecFN.scala 470:56] 
    node T_917 = and(roundingMode_nearest_even, roundPosBit) @[MulAddRecFN.scala 471:39] 
    node T_919 = eq(anyRoundExtra, UInt<1>("h00")) @[MulAddRecFN.scala 471:59] 
    node T_920 = and(T_917, T_919) @[MulAddRecFN.scala 471:56] 
    node roundEven = mux(doIncrSig, T_916, T_920) @[MulAddRecFN.scala 469:12] 
    node T_922 = eq(allRound, UInt<1>("h00")) @[MulAddRecFN.scala 473:39] 
    node roundInexact = mux(doIncrSig, T_922, anyRound) @[MulAddRecFN.scala 473:27] 
    node T_923 = or(sigX3, roundMask) @[MulAddRecFN.scala 475:18] 
    node T_924 = shr(T_923, 2) @[MulAddRecFN.scala 475:30] 
    node T_926 = add(T_924, UInt<1>("h01")) @[MulAddRecFN.scala 475:35] 
    node T_927 = tail(T_926, 1) @[MulAddRecFN.scala 475:35] 
    node roundUp_sigY3 = bits(T_927, 54, 0) @[MulAddRecFN.scala 475:45] 
    node T_929 = eq(roundUp, UInt<1>("h00")) @[MulAddRecFN.scala 477:13] 
    node T_931 = eq(roundEven, UInt<1>("h00")) @[MulAddRecFN.scala 477:26] 
    node T_932 = and(T_929, T_931) @[MulAddRecFN.scala 477:23] 
    node T_933 = not(roundMask) @[MulAddRecFN.scala 477:48] 
    node T_934 = and(sigX3, T_933) @[MulAddRecFN.scala 477:46] 
    node T_935 = shr(T_934, 2) @[MulAddRecFN.scala 477:59] 
    node T_937 = mux(T_932, T_935, UInt<1>("h00")) @[MulAddRecFN.scala 477:12] 
    node T_939 = mux(roundUp, roundUp_sigY3, UInt<1>("h00")) @[MulAddRecFN.scala 478:12] 
    node T_940 = or(T_937, T_939) @[MulAddRecFN.scala 477:79] 
    node T_941 = shr(roundMask, 1) @[MulAddRecFN.scala 479:64] 
    node T_942 = not(T_941) @[MulAddRecFN.scala 479:53] 
    node T_943 = and(roundUp_sigY3, T_942) @[MulAddRecFN.scala 479:51] 
    node T_945 = mux(roundEven, T_943, UInt<1>("h00")) @[MulAddRecFN.scala 479:12] 
    node sigY3 = or(T_940, T_945) @[MulAddRecFN.scala 478:79] 
    node T_946 = bits(sigY3, 54, 54) @[MulAddRecFN.scala 482:18] 
    node T_948 = add(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 482:41] 
    node T_949 = tail(T_948, 1) @[MulAddRecFN.scala 482:41] 
    node T_951 = mux(T_946, T_949, UInt<1>("h00")) @[MulAddRecFN.scala 482:12] 
    node T_952 = bits(sigY3, 53, 53) @[MulAddRecFN.scala 483:18] 
    node T_954 = mux(T_952, sExpX3, UInt<1>("h00")) @[MulAddRecFN.scala 483:12] 
    node T_955 = or(T_951, T_954) @[MulAddRecFN.scala 482:61] 
    node T_956 = bits(sigY3, 54, 53) @[MulAddRecFN.scala 484:19] 
    node T_958 = eq(T_956, UInt<1>("h00")) @[MulAddRecFN.scala 484:44] 
    node T_960 = sub(sExpX3, UInt<1>("h01")) @[MulAddRecFN.scala 485:20] 
    node T_961 = tail(T_960, 1) @[MulAddRecFN.scala 485:20] 
    node T_963 = mux(T_958, T_961, UInt<1>("h00")) @[MulAddRecFN.scala 484:12] 
    node sExpY = or(T_955, T_963) @[MulAddRecFN.scala 483:61] 
    node expY = bits(sExpY, 11, 0) @[MulAddRecFN.scala 488:21] 
    node T_964 = bits(sigY3, 51, 0) @[MulAddRecFN.scala 490:31] 
    node T_965 = bits(sigY3, 52, 1) @[MulAddRecFN.scala 490:55] 
    node fractY = mux(sigX3Shift1, T_964, T_965) @[MulAddRecFN.scala 490:12] 
    node T_966 = bits(sExpY, 12, 10) @[MulAddRecFN.scala 492:27] 
    node overflowY = eq(T_966, UInt<2>("h03")) @[MulAddRecFN.scala 492:56] 
    node T_969 = eq(isZeroY, UInt<1>("h00")) @[MulAddRecFN.scala 495:9] 
    node T_970 = bits(sExpY, 12, 12) @[MulAddRecFN.scala 496:19] 
    node T_971 = bits(sExpY, 11, 0) @[MulAddRecFN.scala 496:43] 
    node T_973 = lt(T_971, UInt<10>("h03ce")) @[MulAddRecFN.scala 496:57] 
    node T_974 = or(T_970, T_973) @[MulAddRecFN.scala 496:34] 
    node totalUnderflowY = and(T_969, T_974) @[MulAddRecFN.scala 495:19] 
    node T_975 = bits(sExpX3, 13, 13) @[MulAddRecFN.scala 499:20] 
    node T_978 = mux(sigX3Shift1, UInt<11>("h0402"), UInt<11>("h0401")) @[MulAddRecFN.scala 501:26] 
    node T_979 = leq(sExpX3_13, T_978) @[MulAddRecFN.scala 500:29] 
    node T_980 = or(T_975, T_979) @[MulAddRecFN.scala 499:35] 
    node underflowY = and(roundInexact, T_980) @[MulAddRecFN.scala 498:22] 
    node T_981 = and(roundingMode_min, signY) @[MulAddRecFN.scala 506:27] 
    node T_983 = eq(signY, UInt<1>("h00")) @[MulAddRecFN.scala 506:61] 
    node T_984 = and(roundingMode_max, T_983) @[MulAddRecFN.scala 506:58] 
    node roundMagUp = or(T_981, T_984) @[MulAddRecFN.scala 506:37] 
    node overflowY_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[MulAddRecFN.scala 507:58] 
    node mulSpecial = or(isSpecialA, isSpecialB) @[MulAddRecFN.scala 511:33] 
    node addSpecial = or(mulSpecial, isSpecialC) @[MulAddRecFN.scala 512:33] 
    node notSpecial_addZeros = and(io.fromPreMul.isZeroProd, isZeroC) @[MulAddRecFN.scala 513:56] 
    node T_986 = eq(addSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 514:22] 
    node T_988 = eq(notSpecial_addZeros, UInt<1>("h00")) @[MulAddRecFN.scala 514:38] 
    node commonCase = and(T_986, T_988) @[MulAddRecFN.scala 514:35] 
    node T_989 = and(isInfA, isZeroB) @[MulAddRecFN.scala 517:17] 
    node T_990 = and(isZeroA, isInfB) @[MulAddRecFN.scala 517:41] 
    node T_991 = or(T_989, T_990) @[MulAddRecFN.scala 517:29] 
    node T_993 = eq(isNaNA, UInt<1>("h00")) @[MulAddRecFN.scala 518:14] 
    node T_995 = eq(isNaNB, UInt<1>("h00")) @[MulAddRecFN.scala 518:26] 
    node T_996 = and(T_993, T_995) @[MulAddRecFN.scala 518:23] 
    node T_997 = or(isInfA, isInfB) @[MulAddRecFN.scala 518:46] 
    node T_998 = and(T_996, T_997) @[MulAddRecFN.scala 518:35] 
    node T_999 = and(T_998, isInfC) @[MulAddRecFN.scala 518:57] 
    node T_1000 = and(T_999, doSubMags) @[MulAddRecFN.scala 518:67] 
    node notSigNaN_invalid = or(T_991, T_1000) @[MulAddRecFN.scala 517:52] 
    node T_1001 = or(isSigNaNA, isSigNaNB) @[MulAddRecFN.scala 519:29] 
    node T_1002 = or(T_1001, isSigNaNC) @[MulAddRecFN.scala 519:42] 
    node invalid = or(T_1002, notSigNaN_invalid) @[MulAddRecFN.scala 519:55] 
    node overflow = and(commonCase, overflowY) @[MulAddRecFN.scala 520:32] 
    node underflow = and(commonCase, underflowY) @[MulAddRecFN.scala 521:32] 
    node T_1003 = and(commonCase, roundInexact) @[MulAddRecFN.scala 522:43] 
    node inexact = or(overflow, T_1003) @[MulAddRecFN.scala 522:28] 
    node T_1004 = or(notSpecial_addZeros, isZeroY) @[MulAddRecFN.scala 525:29] 
    node notSpecial_isZeroOut = or(T_1004, totalUnderflowY) @[MulAddRecFN.scala 525:40] 
    node T_1005 = and(commonCase, totalUnderflowY) @[MulAddRecFN.scala 526:41] 
    node pegMinFiniteMagOut = and(T_1005, roundMagUp) @[MulAddRecFN.scala 526:60] 
    node T_1007 = eq(overflowY_roundMagUp, UInt<1>("h00")) @[MulAddRecFN.scala 527:42] 
    node pegMaxFiniteMagOut = and(overflow, T_1007) @[MulAddRecFN.scala 527:39] 
    node T_1008 = or(isInfA, isInfB) @[MulAddRecFN.scala 529:16] 
    node T_1009 = or(T_1008, isInfC) @[MulAddRecFN.scala 529:26] 
    node T_1010 = and(overflow, overflowY_roundMagUp) @[MulAddRecFN.scala 529:49] 
    node notNaN_isInfOut = or(T_1009, T_1010) @[MulAddRecFN.scala 529:36] 
    node T_1011 = or(isNaNA, isNaNB) @[MulAddRecFN.scala 530:27] 
    node T_1012 = or(T_1011, isNaNC) @[MulAddRecFN.scala 530:37] 
    node isNaNOut = or(T_1012, notSigNaN_invalid) @[MulAddRecFN.scala 530:47] 
    node T_1014 = eq(doSubMags, UInt<1>("h00")) @[MulAddRecFN.scala 533:10] 
    node T_1015 = and(T_1014, io.fromPreMul.opSignC) @[MulAddRecFN.scala 533:51] 
    node T_1017 = eq(isSpecialC, UInt<1>("h00")) @[MulAddRecFN.scala 534:24] 
    node T_1018 = and(mulSpecial, T_1017) @[MulAddRecFN.scala 534:21] 
    node T_1019 = and(T_1018, io.fromPreMul.signProd) @[MulAddRecFN.scala 534:51] 
    node T_1020 = or(T_1015, T_1019) @[MulAddRecFN.scala 533:78] 
    node T_1022 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 535:10] 
    node T_1023 = and(T_1022, isSpecialC) @[MulAddRecFN.scala 535:23] 
    node T_1024 = and(T_1023, io.fromPreMul.opSignC) @[MulAddRecFN.scala 535:51] 
    node T_1025 = or(T_1020, T_1024) @[MulAddRecFN.scala 534:78] 
    node T_1027 = eq(mulSpecial, UInt<1>("h00")) @[MulAddRecFN.scala 536:10] 
    node T_1028 = and(T_1027, notSpecial_addZeros) @[MulAddRecFN.scala 536:23] 
    node T_1029 = and(T_1028, doSubMags) @[MulAddRecFN.scala 536:46] 
    node T_1030 = and(T_1029, signZeroNotEqOpSigns) @[MulAddRecFN.scala 536:59] 
    node uncommonCaseSignOut = or(T_1025, T_1030) @[MulAddRecFN.scala 535:78] 
    node T_1032 = eq(isNaNOut, UInt<1>("h00")) @[MulAddRecFN.scala 538:20] 
    node T_1033 = and(T_1032, uncommonCaseSignOut) @[MulAddRecFN.scala 538:31] 
    node T_1034 = and(commonCase, signY) @[MulAddRecFN.scala 538:70] 
    node signOut = or(T_1033, T_1034) @[MulAddRecFN.scala 538:55] 
    node T_1037 = mux(notSpecial_isZeroOut, UInt<12>("h0e00"), UInt<12>("h00")) @[MulAddRecFN.scala 541:18] 
    node T_1038 = not(T_1037) @[MulAddRecFN.scala 541:14] 
    node T_1039 = and(expY, T_1038) @[MulAddRecFN.scala 540:15] 
    node T_1041 = not(UInt<12>("h03ce")) @[MulAddRecFN.scala 546:19] 
    node T_1043 = mux(pegMinFiniteMagOut, T_1041, UInt<12>("h00")) @[MulAddRecFN.scala 545:18] 
    node T_1044 = not(T_1043) @[MulAddRecFN.scala 545:14] 
    node T_1045 = and(T_1039, T_1044) @[MulAddRecFN.scala 544:17] 
    node T_1048 = mux(pegMaxFiniteMagOut, UInt<12>("h0400"), UInt<12>("h00")) @[MulAddRecFN.scala 549:18] 
    node T_1049 = not(T_1048) @[MulAddRecFN.scala 549:14] 
    node T_1050 = and(T_1045, T_1049) @[MulAddRecFN.scala 548:17] 
    node T_1053 = mux(notNaN_isInfOut, UInt<10>("h0200"), UInt<12>("h00")) @[MulAddRecFN.scala 553:18] 
    node T_1054 = not(T_1053) @[MulAddRecFN.scala 553:14] 
    node T_1055 = and(T_1050, T_1054) @[MulAddRecFN.scala 552:17] 
    node T_1058 = mux(pegMinFiniteMagOut, UInt<10>("h03ce"), UInt<12>("h00")) @[MulAddRecFN.scala 557:16] 
    node T_1059 = or(T_1055, T_1058) @[MulAddRecFN.scala 556:18] 
    node T_1062 = mux(pegMaxFiniteMagOut, UInt<12>("h0bff"), UInt<12>("h00")) @[MulAddRecFN.scala 558:16] 
    node T_1063 = or(T_1059, T_1062) @[MulAddRecFN.scala 557:74] 
    node T_1066 = mux(notNaN_isInfOut, UInt<12>("h0c00"), UInt<12>("h00")) @[MulAddRecFN.scala 562:16] 
    node T_1067 = or(T_1063, T_1066) @[MulAddRecFN.scala 561:15] 
    node T_1070 = mux(isNaNOut, UInt<12>("h0e00"), UInt<12>("h00")) @[MulAddRecFN.scala 566:16] 
    node expOut = or(T_1067, T_1070) @[MulAddRecFN.scala 565:15] 
    node T_1071 = and(totalUnderflowY, roundMagUp) @[MulAddRecFN.scala 568:30] 
    node T_1072 = or(T_1071, isNaNOut) @[MulAddRecFN.scala 568:45] 
    node T_1074 = shl(UInt<1>("h01"), 51) @[MulAddRecFN.scala 569:34] 
    node T_1076 = mux(isNaNOut, T_1074, UInt<1>("h00")) @[MulAddRecFN.scala 569:16] 
    node T_1077 = mux(T_1072, T_1076, fractY) @[MulAddRecFN.scala 568:12] 
    node T_1078 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15] 
    node T_1081 = mux(T_1078, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 33:12] 
    node fractOut = or(T_1077, T_1081) @[MulAddRecFN.scala 571:11] 
    node T_1082 = cat(signOut, expOut) @[Cat.scala 20:58] 
    node T_1083 = cat(T_1082, fractOut) @[Cat.scala 20:58] 
    io.out <= T_1083 @[MulAddRecFN.scala 574:12] 
    node T_1085 = cat(underflow, inexact) @[Cat.scala 20:58] 
    node T_1086 = cat(invalid, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_1087 = cat(T_1086, overflow) @[Cat.scala 20:58] 
    node T_1088 = cat(T_1087, T_1085) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_1088 @[MulAddRecFN.scala 575:23] 
    
  module MulAddRecFN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip op : UInt<2>, flip a : UInt<65>, flip b : UInt<65>, flip c : UInt<65>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst mulAddRecFN_preMul of MulAddRecFN_preMul_1 @[MulAddRecFN.scala 598:15] 
    mulAddRecFN_preMul.io is invalid
    mulAddRecFN_preMul.clk <= clk
    mulAddRecFN_preMul.reset <= reset
    inst mulAddRecFN_postMul of MulAddRecFN_postMul_1 @[MulAddRecFN.scala 600:15] 
    mulAddRecFN_postMul.io is invalid
    mulAddRecFN_postMul.clk <= clk
    mulAddRecFN_postMul.reset <= reset
    mulAddRecFN_preMul.io.op <= io.op @[MulAddRecFN.scala 602:30] 
    mulAddRecFN_preMul.io.a <= io.a @[MulAddRecFN.scala 603:30] 
    mulAddRecFN_preMul.io.b <= io.b @[MulAddRecFN.scala 604:30] 
    mulAddRecFN_preMul.io.c <= io.c @[MulAddRecFN.scala 605:30] 
    mulAddRecFN_preMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 606:40] 
    mulAddRecFN_postMul.io.fromPreMul <- mulAddRecFN_preMul.io.toPostMul @[MulAddRecFN.scala 608:39] 
    node T_7 = mul(mulAddRecFN_preMul.io.mulAddA, mulAddRecFN_preMul.io.mulAddB) @[MulAddRecFN.scala 610:39] 
    node T_9 = cat(UInt<1>("h00"), mulAddRecFN_preMul.io.mulAddC) @[Cat.scala 20:58] 
    node T_10 = add(T_7, T_9) @[MulAddRecFN.scala 610:71] 
    node T_11 = tail(T_10, 1) @[MulAddRecFN.scala 610:71] 
    mulAddRecFN_postMul.io.mulAddResult <= T_11 @[MulAddRecFN.scala 609:41] 
    io.out <= mulAddRecFN_postMul.io.out @[MulAddRecFN.scala 613:12] 
    io.exceptionFlags <= mulAddRecFN_postMul.io.exceptionFlags @[MulAddRecFN.scala 614:23] 
    
  module FPUFMAPipe_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    node one = shl(UInt<1>("h01"), 63) @[fpu.scala 389:21] 
    node T_131 = bits(io.in.bits.in1, 64, 64) @[fpu.scala 390:29] 
    node T_132 = bits(io.in.bits.in2, 64, 64) @[fpu.scala 390:53] 
    node T_133 = xor(T_131, T_132) @[fpu.scala 390:37] 
    node zero = shl(T_133, 64) @[fpu.scala 390:62] 
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[fpu.scala 394:22] 
      in <- io.in.bits @[fpu.scala 395:8] 
      node T_179 = bits(io.in.bits.cmd, 1, 1) @[fpu.scala 398:33] 
      node T_180 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 398:48] 
      node T_181 = and(T_179, T_180) @[fpu.scala 398:37] 
      node T_182 = bits(io.in.bits.cmd, 0, 0) @[fpu.scala 398:78] 
      node T_183 = cat(T_181, T_182) @[Cat.scala 20:58] 
      in.cmd <= T_183 @[fpu.scala 398:12] 
      when io.in.bits.swap23 : @[fpu.scala 399:23] 
        in.in2 <= one @[fpu.scala 399:32] 
        skip @[fpu.scala 399:23] 
      node T_184 = or(io.in.bits.ren3, io.in.bits.swap23) @[fpu.scala 400:21] 
      node T_186 = eq(T_184, UInt<1>("h00")) @[Conditional.scala 18:11] 
      when T_186 : @[Conditional.scala 18:15] 
        in.in3 <= zero @[fpu.scala 400:45] 
        skip @[Conditional.scala 18:15] 
      skip @[fpu.scala 394:22] 
    inst fma of MulAddRecFN_1 @[fpu.scala 403:19] 
    fma.io is invalid
    fma.clk <= clk
    fma.reset <= reset
    fma.io.op <= in.cmd @[fpu.scala 404:13] 
    fma.io.roundingMode <= in.rm @[fpu.scala 405:23] 
    fma.io.a <= in.in1 @[fpu.scala 406:12] 
    fma.io.b <= in.in2 @[fpu.scala 407:12] 
    fma.io.c <= in.in3 @[fpu.scala 408:12] 
    wire res : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 410:17] 
    res is invalid @[fpu.scala 410:17] 
    node T_193 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
    node T_194 = cat(T_193, fma.io.out) @[Cat.scala 20:58] 
    res.data <= T_194 @[fpu.scala 411:12] 
    res.exc <= fma.io.exceptionFlags @[fpu.scala 412:11] 
    reg T_197 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_197 <= valid
    reg T_198 : {data : UInt<65>, exc : UInt<5>}, clk
    when valid : @[Reg.scala 29:19] 
      T_198 <- res @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg T_203 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_203 <= T_197
    reg T_204 : {data : UInt<65>, exc : UInt<5>}, clk
    when T_197 : @[Reg.scala 29:19] 
      T_204 <- T_198 @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire T_215 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21] 
    T_215 is invalid @[Valid.scala 39:21] 
    T_215.valid <= T_203 @[Valid.scala 40:17] 
    T_215.bits <- T_204 @[Valid.scala 41:16] 
    io.out <- T_215 @[fpu.scala 413:10] 
    
  module RecFNToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<33>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 31, 23) @[rawFNFromRecFN.scala 50:21] 
    node T_5 = bits(T_4, 8, 6) @[rawFNFromRecFN.scala 51:29] 
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54] 
    node T_8 = bits(T_4, 8, 7) @[rawFNFromRecFN.scala 52:29] 
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54] 
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[rawFNFromRecFN.scala 54:23] 
    T_18 is invalid @[rawFNFromRecFN.scala 54:23] 
    node T_25 = bits(io.in, 32, 32) @[rawFNFromRecFN.scala 55:23] 
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18] 
    node T_26 = bits(T_4, 6, 6) @[rawFNFromRecFN.scala 56:40] 
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32] 
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19] 
    node T_28 = bits(T_4, 6, 6) @[rawFNFromRecFN.scala 57:40] 
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35] 
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32] 
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19] 
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20] 
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25] 
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18] 
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36] 
    node T_36 = bits(io.in, 22, 0) @[rawFNFromRecFN.scala 60:48] 
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58] 
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58] 
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17] 
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0700"))) @[resizeRawFN.scala 49:31] 
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[resizeRawFN.scala 51:23] 
    outRawFloat is invalid @[resizeRawFN.scala 51:23] 
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20] 
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20] 
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20] 
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20] 
    outRawFloat.sExp <= T_42 @[resizeRawFN.scala 56:18] 
    node T_56 = shl(T_18.sig, 29) @[resizeRawFN.scala 69:24] 
    outRawFloat.sig <= T_56 @[resizeRawFN.scala 67:17] 
    node T_57 = bits(outRawFloat.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57] 
    node T_59 = eq(T_57, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49] 
    node invalidExc = and(outRawFloat.isNaN, T_59) @[RoundRawFNToRecFN.scala 61:46] 
    node T_61 = eq(outRawFloat.isNaN, UInt<1>("h00")) @[RecFNToRecFN.scala 69:40] 
    node T_62 = and(outRawFloat.sign, T_61) @[RecFNToRecFN.scala 69:37] 
    node T_63 = bits(outRawFloat.sExp, 11, 0) @[RecFNToRecFN.scala 71:30] 
    node T_66 = mux(outRawFloat.isZero, UInt<12>("h0c00"), UInt<1>("h00")) @[RecFNToRecFN.scala 72:22] 
    node T_67 = not(T_66) @[RecFNToRecFN.scala 72:18] 
    node T_68 = and(T_63, T_67) @[RecFNToRecFN.scala 71:47] 
    node T_69 = or(outRawFloat.isZero, outRawFloat.isInf) @[RecFNToRecFN.scala 76:42] 
    node T_72 = mux(T_69, UInt<12>("h0200"), UInt<1>("h00")) @[RecFNToRecFN.scala 76:22] 
    node T_73 = not(T_72) @[RecFNToRecFN.scala 76:18] 
    node T_74 = and(T_68, T_73) @[RecFNToRecFN.scala 75:21] 
    node T_77 = mux(outRawFloat.isInf, UInt<12>("h0c00"), UInt<1>("h00")) @[RecFNToRecFN.scala 80:20] 
    node T_78 = or(T_74, T_77) @[RecFNToRecFN.scala 79:22] 
    node T_81 = mux(outRawFloat.isNaN, UInt<12>("h0e00"), UInt<1>("h00")) @[RecFNToRecFN.scala 84:20] 
    node T_82 = or(T_78, T_81) @[RecFNToRecFN.scala 83:19] 
    node T_84 = shl(UInt<1>("h01"), 51) @[RecFNToRecFN.scala 90:24] 
    node T_85 = bits(outRawFloat.sig, 53, 2) @[RecFNToRecFN.scala 91:32] 
    node T_86 = mux(outRawFloat.isNaN, T_84, T_85) @[RecFNToRecFN.scala 89:16] 
    node T_87 = cat(T_62, T_82) @[Cat.scala 20:58] 
    node T_88 = cat(T_87, T_86) @[Cat.scala 20:58] 
    io.out <= T_88 @[RecFNToRecFN.scala 93:16] 
    node T_90 = cat(invalidExc, UInt<4>("h00")) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_90 @[RecFNToRecFN.scala 94:27] 
    
  module CompareRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<65>, flip b : UInt<65>, flip signaling : UInt<1>, lt : UInt<1>, eq : UInt<1>, gt : UInt<1>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_7 = bits(io.a, 63, 52) @[rawFNFromRecFN.scala 50:21] 
    node T_8 = bits(T_7, 11, 9) @[rawFNFromRecFN.scala 51:29] 
    node T_10 = eq(T_8, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54] 
    node T_11 = bits(T_7, 11, 10) @[rawFNFromRecFN.scala 52:29] 
    node T_13 = eq(T_11, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54] 
    wire rawA : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23] 
    rawA is invalid @[rawFNFromRecFN.scala 54:23] 
    node T_27 = bits(io.a, 64, 64) @[rawFNFromRecFN.scala 55:23] 
    rawA.sign <= T_27 @[rawFNFromRecFN.scala 55:18] 
    node T_28 = bits(T_7, 9, 9) @[rawFNFromRecFN.scala 56:40] 
    node T_29 = and(T_13, T_28) @[rawFNFromRecFN.scala 56:32] 
    rawA.isNaN <= T_29 @[rawFNFromRecFN.scala 56:19] 
    node T_30 = bits(T_7, 9, 9) @[rawFNFromRecFN.scala 57:40] 
    node T_32 = eq(T_30, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35] 
    node T_33 = and(T_13, T_32) @[rawFNFromRecFN.scala 57:32] 
    rawA.isInf <= T_33 @[rawFNFromRecFN.scala 57:19] 
    rawA.isZero <= T_10 @[rawFNFromRecFN.scala 58:20] 
    node T_34 = cvt(T_7) @[rawFNFromRecFN.scala 59:25] 
    rawA.sExp <= T_34 @[rawFNFromRecFN.scala 59:18] 
    node T_37 = eq(T_10, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36] 
    node T_38 = bits(io.a, 51, 0) @[rawFNFromRecFN.scala 60:48] 
    node T_40 = cat(T_38, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_41 = cat(UInt<1>("h00"), T_37) @[Cat.scala 20:58] 
    node T_42 = cat(T_41, T_40) @[Cat.scala 20:58] 
    rawA.sig <= T_42 @[rawFNFromRecFN.scala 60:17] 
    node T_43 = bits(io.b, 63, 52) @[rawFNFromRecFN.scala 50:21] 
    node T_44 = bits(T_43, 11, 9) @[rawFNFromRecFN.scala 51:29] 
    node T_46 = eq(T_44, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54] 
    node T_47 = bits(T_43, 11, 10) @[rawFNFromRecFN.scala 52:29] 
    node T_49 = eq(T_47, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54] 
    wire rawB : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23] 
    rawB is invalid @[rawFNFromRecFN.scala 54:23] 
    node T_63 = bits(io.b, 64, 64) @[rawFNFromRecFN.scala 55:23] 
    rawB.sign <= T_63 @[rawFNFromRecFN.scala 55:18] 
    node T_64 = bits(T_43, 9, 9) @[rawFNFromRecFN.scala 56:40] 
    node T_65 = and(T_49, T_64) @[rawFNFromRecFN.scala 56:32] 
    rawB.isNaN <= T_65 @[rawFNFromRecFN.scala 56:19] 
    node T_66 = bits(T_43, 9, 9) @[rawFNFromRecFN.scala 57:40] 
    node T_68 = eq(T_66, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35] 
    node T_69 = and(T_49, T_68) @[rawFNFromRecFN.scala 57:32] 
    rawB.isInf <= T_69 @[rawFNFromRecFN.scala 57:19] 
    rawB.isZero <= T_46 @[rawFNFromRecFN.scala 58:20] 
    node T_70 = cvt(T_43) @[rawFNFromRecFN.scala 59:25] 
    rawB.sExp <= T_70 @[rawFNFromRecFN.scala 59:18] 
    node T_73 = eq(T_46, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36] 
    node T_74 = bits(io.b, 51, 0) @[rawFNFromRecFN.scala 60:48] 
    node T_76 = cat(T_74, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_77 = cat(UInt<1>("h00"), T_73) @[Cat.scala 20:58] 
    node T_78 = cat(T_77, T_76) @[Cat.scala 20:58] 
    rawB.sig <= T_78 @[rawFNFromRecFN.scala 60:17] 
    node T_80 = eq(rawA.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:19] 
    node T_82 = eq(rawB.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:35] 
    node ordered = and(T_80, T_82) @[CompareRecFN.scala 57:32] 
    node bothInfs = and(rawA.isInf, rawB.isInf) @[CompareRecFN.scala 58:33] 
    node bothZeros = and(rawA.isZero, rawB.isZero) @[CompareRecFN.scala 59:33] 
    node eqExps = eq(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 60:29] 
    node T_83 = lt(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 62:20] 
    node T_84 = lt(rawA.sig, rawB.sig) @[CompareRecFN.scala 62:57] 
    node T_85 = and(eqExps, T_84) @[CompareRecFN.scala 62:44] 
    node common_ltMags = or(T_83, T_85) @[CompareRecFN.scala 62:33] 
    node T_86 = eq(rawA.sig, rawB.sig) @[CompareRecFN.scala 63:45] 
    node common_eqMags = and(eqExps, T_86) @[CompareRecFN.scala 63:32] 
    node T_88 = eq(bothZeros, UInt<1>("h00")) @[CompareRecFN.scala 66:9] 
    node T_90 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 67:28] 
    node T_91 = and(rawA.sign, T_90) @[CompareRecFN.scala 67:25] 
    node T_93 = eq(bothInfs, UInt<1>("h00")) @[CompareRecFN.scala 68:19] 
    node T_95 = eq(common_ltMags, UInt<1>("h00")) @[CompareRecFN.scala 69:38] 
    node T_96 = and(rawA.sign, T_95) @[CompareRecFN.scala 69:35] 
    node T_98 = eq(common_eqMags, UInt<1>("h00")) @[CompareRecFN.scala 69:57] 
    node T_99 = and(T_96, T_98) @[CompareRecFN.scala 69:54] 
    node T_101 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 70:29] 
    node T_102 = and(T_101, common_ltMags) @[CompareRecFN.scala 70:41] 
    node T_103 = or(T_99, T_102) @[CompareRecFN.scala 69:74] 
    node T_104 = and(T_93, T_103) @[CompareRecFN.scala 68:30] 
    node T_105 = or(T_91, T_104) @[CompareRecFN.scala 67:41] 
    node ordered_lt = and(T_88, T_105) @[CompareRecFN.scala 66:21] 
    node T_106 = eq(rawA.sign, rawB.sign) @[CompareRecFN.scala 72:34] 
    node T_107 = or(bothInfs, common_eqMags) @[CompareRecFN.scala 72:62] 
    node T_108 = and(T_106, T_107) @[CompareRecFN.scala 72:49] 
    node ordered_eq = or(bothZeros, T_108) @[CompareRecFN.scala 72:19] 
    node T_109 = bits(rawA.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57] 
    node T_111 = eq(T_109, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49] 
    node T_112 = and(rawA.isNaN, T_111) @[RoundRawFNToRecFN.scala 61:46] 
    node T_113 = bits(rawB.sig, 53, 53) @[RoundRawFNToRecFN.scala 61:57] 
    node T_115 = eq(T_113, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49] 
    node T_116 = and(rawB.isNaN, T_115) @[RoundRawFNToRecFN.scala 61:46] 
    node T_117 = or(T_112, T_116) @[CompareRecFN.scala 75:29] 
    node T_119 = eq(ordered, UInt<1>("h00")) @[CompareRecFN.scala 76:30] 
    node T_120 = and(io.signaling, T_119) @[CompareRecFN.scala 76:27] 
    node invalid = or(T_117, T_120) @[CompareRecFN.scala 75:52] 
    node T_121 = and(ordered, ordered_lt) @[CompareRecFN.scala 78:22] 
    io.lt <= T_121 @[CompareRecFN.scala 78:11] 
    node T_122 = and(ordered, ordered_eq) @[CompareRecFN.scala 79:22] 
    io.eq <= T_122 @[CompareRecFN.scala 79:11] 
    node T_124 = eq(ordered_lt, UInt<1>("h00")) @[CompareRecFN.scala 80:25] 
    node T_125 = and(ordered, T_124) @[CompareRecFN.scala 80:22] 
    node T_127 = eq(ordered_eq, UInt<1>("h00")) @[CompareRecFN.scala 80:41] 
    node T_128 = and(T_125, T_127) @[CompareRecFN.scala 80:38] 
    io.gt <= T_128 @[CompareRecFN.scala 80:11] 
    node T_130 = cat(invalid, UInt<4>("h00")) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_130 @[CompareRecFN.scala 82:23] 
    
  module RecFNToIN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, flip signedOut : UInt<1>, out : UInt<64>, intExceptionFlags : UInt<3>}
    
    io is invalid
    node sign = bits(io.in, 64, 64) @[RecFNToIN.scala 54:21] 
    node exp = bits(io.in, 63, 52) @[RecFNToIN.scala 55:20] 
    node fract = bits(io.in, 51, 0) @[RecFNToIN.scala 56:22] 
    node T_5 = bits(exp, 11, 9) @[RecFNToIN.scala 58:22] 
    node isZero = eq(T_5, UInt<1>("h00")) @[RecFNToIN.scala 58:47] 
    node T_7 = bits(exp, 11, 10) @[RecFNToIN.scala 59:25] 
    node isSpecial = eq(T_7, UInt<2>("h03")) @[RecFNToIN.scala 59:50] 
    node T_9 = bits(exp, 9, 9) @[RecFNToIN.scala 60:33] 
    node isNaN = and(isSpecial, T_9) @[RecFNToIN.scala 60:27] 
    node notSpecial_magGeOne = bits(exp, 11, 11) @[RecFNToIN.scala 61:34] 
    node T_10 = cat(notSpecial_magGeOne, fract) @[Cat.scala 20:58] 
    node T_11 = bits(exp, 5, 0) @[RecFNToIN.scala 74:20] 
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<1>("h00")) @[RecFNToIN.scala 73:16] 
    node shiftedSig = dshl(T_10, T_13) @[RecFNToIN.scala 72:40] 
    node unroundedInt = bits(shiftedSig, 115, 52) @[RecFNToIN.scala 82:24] 
    node T_14 = bits(shiftedSig, 52, 51) @[RecFNToIN.scala 85:23] 
    node T_15 = bits(shiftedSig, 50, 0) @[RecFNToIN.scala 86:23] 
    node T_17 = neq(T_15, UInt<1>("h00")) @[RecFNToIN.scala 86:41] 
    node roundBits = cat(T_14, T_17) @[Cat.scala 20:58] 
    node T_18 = bits(roundBits, 1, 0) @[RecFNToIN.scala 88:58] 
    node T_20 = neq(T_18, UInt<1>("h00")) @[RecFNToIN.scala 88:65] 
    node T_22 = eq(isZero, UInt<1>("h00")) @[RecFNToIN.scala 88:70] 
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22) @[RecFNToIN.scala 88:27] 
    node T_23 = bits(roundBits, 2, 1) @[RecFNToIN.scala 91:22] 
    node T_24 = not(T_23) @[RecFNToIN.scala 91:29] 
    node T_26 = eq(T_24, UInt<1>("h00")) @[RecFNToIN.scala 91:29] 
    node T_27 = bits(roundBits, 1, 0) @[RecFNToIN.scala 91:46] 
    node T_28 = not(T_27) @[RecFNToIN.scala 91:53] 
    node T_30 = eq(T_28, UInt<1>("h00")) @[RecFNToIN.scala 91:53] 
    node T_31 = or(T_26, T_30) @[RecFNToIN.scala 91:34] 
    node T_32 = bits(exp, 10, 0) @[RecFNToIN.scala 92:20] 
    node T_33 = not(T_32) @[RecFNToIN.scala 92:38] 
    node T_35 = eq(T_33, UInt<1>("h00")) @[RecFNToIN.scala 92:38] 
    node T_36 = bits(roundBits, 1, 0) @[RecFNToIN.scala 92:53] 
    node T_38 = neq(T_36, UInt<1>("h00")) @[RecFNToIN.scala 92:60] 
    node T_40 = mux(T_35, T_38, UInt<1>("h00")) @[RecFNToIN.scala 92:16] 
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40) @[RecFNToIN.scala 90:12] 
    node T_41 = eq(io.roundingMode, UInt<2>("h00")) @[RecFNToIN.scala 95:27] 
    node T_42 = and(T_41, roundIncr_nearestEven) @[RecFNToIN.scala 95:51] 
    node T_43 = eq(io.roundingMode, UInt<2>("h02")) @[RecFNToIN.scala 96:27] 
    node T_44 = and(sign, roundInexact) @[RecFNToIN.scala 96:60] 
    node T_45 = and(T_43, T_44) @[RecFNToIN.scala 96:49] 
    node T_46 = or(T_42, T_45) @[RecFNToIN.scala 95:78] 
    node T_47 = eq(io.roundingMode, UInt<2>("h03")) @[RecFNToIN.scala 97:27] 
    node T_49 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 97:53] 
    node T_50 = and(T_49, roundInexact) @[RecFNToIN.scala 97:60] 
    node T_51 = and(T_47, T_50) @[RecFNToIN.scala 97:49] 
    node roundIncr = or(T_46, T_51) @[RecFNToIN.scala 96:78] 
    node T_52 = not(unroundedInt) @[RecFNToIN.scala 98:39] 
    node complUnroundedInt = mux(sign, T_52, unroundedInt) @[RecFNToIN.scala 98:32] 
    node T_53 = xor(roundIncr, sign) @[RecFNToIN.scala 100:23] 
    node T_55 = add(complUnroundedInt, UInt<1>("h01")) @[RecFNToIN.scala 100:49] 
    node T_56 = tail(T_55, 1) @[RecFNToIN.scala 100:49] 
    node roundedInt = mux(T_53, T_56, complUnroundedInt) @[RecFNToIN.scala 100:12] 
    node T_57 = bits(unroundedInt, 61, 0) @[RecFNToIN.scala 103:38] 
    node T_58 = not(T_57) @[RecFNToIN.scala 103:56] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[RecFNToIN.scala 103:56] 
    node roundCarryBut2 = and(T_60, roundIncr) @[RecFNToIN.scala 103:61] 
    node posExp = bits(exp, 10, 0) @[RecFNToIN.scala 104:21] 
    node T_62 = geq(posExp, UInt<7>("h040")) @[RecFNToIN.scala 108:21] 
    node T_64 = eq(posExp, UInt<6>("h03f")) @[RecFNToIN.scala 109:26] 
    node T_66 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 110:23] 
    node T_67 = bits(unroundedInt, 62, 0) @[RecFNToIN.scala 110:45] 
    node T_69 = neq(T_67, UInt<1>("h00")) @[RecFNToIN.scala 110:63] 
    node T_70 = or(T_66, T_69) @[RecFNToIN.scala 110:30] 
    node T_71 = or(T_70, roundIncr) @[RecFNToIN.scala 111:27] 
    node T_72 = and(T_64, T_71) @[RecFNToIN.scala 109:50] 
    node T_73 = or(T_62, T_72) @[RecFNToIN.scala 108:40] 
    node T_75 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 112:18] 
    node T_77 = eq(posExp, UInt<6>("h03e")) @[RecFNToIN.scala 112:36] 
    node T_78 = and(T_75, T_77) @[RecFNToIN.scala 112:25] 
    node T_79 = and(T_78, roundCarryBut2) @[RecFNToIN.scala 112:60] 
    node T_80 = or(T_73, T_79) @[RecFNToIN.scala 111:42] 
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h00")) @[RecFNToIN.scala 107:12] 
    node T_83 = geq(posExp, UInt<7>("h040")) @[RecFNToIN.scala 117:29] 
    node T_84 = or(sign, T_83) @[RecFNToIN.scala 117:18] 
    node T_86 = eq(posExp, UInt<6>("h03f")) @[RecFNToIN.scala 118:26] 
    node T_87 = bits(unroundedInt, 62, 62) @[RecFNToIN.scala 119:34] 
    node T_88 = and(T_86, T_87) @[RecFNToIN.scala 118:50] 
    node T_89 = and(T_88, roundCarryBut2) @[RecFNToIN.scala 119:49] 
    node T_90 = or(T_84, T_89) @[RecFNToIN.scala 117:48] 
    node T_91 = and(sign, roundIncr) @[RecFNToIN.scala 120:18] 
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91) @[RecFNToIN.scala 116:12] 
    node overflow = mux(io.signedOut, overflow_signed, overflow_unsigned) @[RecFNToIN.scala 122:23] 
    node T_93 = eq(isNaN, UInt<1>("h00")) @[RecFNToIN.scala 124:27] 
    node excSign = and(sign, T_93) @[RecFNToIN.scala 124:24] 
    node T_94 = and(io.signedOut, excSign) @[RecFNToIN.scala 126:26] 
    node T_96 = shl(UInt<1>("h01"), 63) @[RecFNToIN.scala 126:45] 
    node T_98 = mux(T_94, T_96, UInt<1>("h00")) @[RecFNToIN.scala 126:12] 
    node T_100 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 127:29] 
    node T_101 = and(io.signedOut, T_100) @[RecFNToIN.scala 127:26] 
    node T_104 = mux(T_101, UInt<63>("h07fffffffffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 127:12] 
    node T_105 = or(T_98, T_104) @[RecFNToIN.scala 126:72] 
    node T_107 = eq(io.signedOut, UInt<1>("h00")) @[RecFNToIN.scala 131:13] 
    node T_109 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 131:31] 
    node T_110 = and(T_107, T_109) @[RecFNToIN.scala 131:28] 
    node T_113 = mux(T_110, UInt<64>("h0ffffffffffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 131:12] 
    node excValue = or(T_105, T_113) @[RecFNToIN.scala 130:11] 
    node T_115 = eq(isSpecial, UInt<1>("h00")) @[RecFNToIN.scala 135:35] 
    node T_116 = and(roundInexact, T_115) @[RecFNToIN.scala 135:32] 
    node T_118 = eq(overflow, UInt<1>("h00")) @[RecFNToIN.scala 135:48] 
    node inexact = and(T_116, T_118) @[RecFNToIN.scala 135:45] 
    node T_119 = or(isSpecial, overflow) @[RecFNToIN.scala 137:27] 
    node T_120 = mux(T_119, excValue, roundedInt) @[RecFNToIN.scala 137:18] 
    io.out <= T_120 @[RecFNToIN.scala 137:12] 
    node T_121 = cat(isSpecial, overflow) @[Cat.scala 20:58] 
    node T_122 = cat(T_121, inexact) @[Cat.scala 20:58] 
    io.intExceptionFlags <= T_122 @[RecFNToIN.scala 138:26] 
    
  module RecFNToIN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, flip signedOut : UInt<1>, out : UInt<32>, intExceptionFlags : UInt<3>}
    
    io is invalid
    node sign = bits(io.in, 64, 64) @[RecFNToIN.scala 54:21] 
    node exp = bits(io.in, 63, 52) @[RecFNToIN.scala 55:20] 
    node fract = bits(io.in, 51, 0) @[RecFNToIN.scala 56:22] 
    node T_5 = bits(exp, 11, 9) @[RecFNToIN.scala 58:22] 
    node isZero = eq(T_5, UInt<1>("h00")) @[RecFNToIN.scala 58:47] 
    node T_7 = bits(exp, 11, 10) @[RecFNToIN.scala 59:25] 
    node isSpecial = eq(T_7, UInt<2>("h03")) @[RecFNToIN.scala 59:50] 
    node T_9 = bits(exp, 9, 9) @[RecFNToIN.scala 60:33] 
    node isNaN = and(isSpecial, T_9) @[RecFNToIN.scala 60:27] 
    node notSpecial_magGeOne = bits(exp, 11, 11) @[RecFNToIN.scala 61:34] 
    node T_10 = cat(notSpecial_magGeOne, fract) @[Cat.scala 20:58] 
    node T_11 = bits(exp, 4, 0) @[RecFNToIN.scala 74:20] 
    node T_13 = mux(notSpecial_magGeOne, T_11, UInt<1>("h00")) @[RecFNToIN.scala 73:16] 
    node shiftedSig = dshl(T_10, T_13) @[RecFNToIN.scala 72:40] 
    node unroundedInt = bits(shiftedSig, 83, 52) @[RecFNToIN.scala 82:24] 
    node T_14 = bits(shiftedSig, 52, 51) @[RecFNToIN.scala 85:23] 
    node T_15 = bits(shiftedSig, 50, 0) @[RecFNToIN.scala 86:23] 
    node T_17 = neq(T_15, UInt<1>("h00")) @[RecFNToIN.scala 86:41] 
    node roundBits = cat(T_14, T_17) @[Cat.scala 20:58] 
    node T_18 = bits(roundBits, 1, 0) @[RecFNToIN.scala 88:58] 
    node T_20 = neq(T_18, UInt<1>("h00")) @[RecFNToIN.scala 88:65] 
    node T_22 = eq(isZero, UInt<1>("h00")) @[RecFNToIN.scala 88:70] 
    node roundInexact = mux(notSpecial_magGeOne, T_20, T_22) @[RecFNToIN.scala 88:27] 
    node T_23 = bits(roundBits, 2, 1) @[RecFNToIN.scala 91:22] 
    node T_24 = not(T_23) @[RecFNToIN.scala 91:29] 
    node T_26 = eq(T_24, UInt<1>("h00")) @[RecFNToIN.scala 91:29] 
    node T_27 = bits(roundBits, 1, 0) @[RecFNToIN.scala 91:46] 
    node T_28 = not(T_27) @[RecFNToIN.scala 91:53] 
    node T_30 = eq(T_28, UInt<1>("h00")) @[RecFNToIN.scala 91:53] 
    node T_31 = or(T_26, T_30) @[RecFNToIN.scala 91:34] 
    node T_32 = bits(exp, 10, 0) @[RecFNToIN.scala 92:20] 
    node T_33 = not(T_32) @[RecFNToIN.scala 92:38] 
    node T_35 = eq(T_33, UInt<1>("h00")) @[RecFNToIN.scala 92:38] 
    node T_36 = bits(roundBits, 1, 0) @[RecFNToIN.scala 92:53] 
    node T_38 = neq(T_36, UInt<1>("h00")) @[RecFNToIN.scala 92:60] 
    node T_40 = mux(T_35, T_38, UInt<1>("h00")) @[RecFNToIN.scala 92:16] 
    node roundIncr_nearestEven = mux(notSpecial_magGeOne, T_31, T_40) @[RecFNToIN.scala 90:12] 
    node T_41 = eq(io.roundingMode, UInt<2>("h00")) @[RecFNToIN.scala 95:27] 
    node T_42 = and(T_41, roundIncr_nearestEven) @[RecFNToIN.scala 95:51] 
    node T_43 = eq(io.roundingMode, UInt<2>("h02")) @[RecFNToIN.scala 96:27] 
    node T_44 = and(sign, roundInexact) @[RecFNToIN.scala 96:60] 
    node T_45 = and(T_43, T_44) @[RecFNToIN.scala 96:49] 
    node T_46 = or(T_42, T_45) @[RecFNToIN.scala 95:78] 
    node T_47 = eq(io.roundingMode, UInt<2>("h03")) @[RecFNToIN.scala 97:27] 
    node T_49 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 97:53] 
    node T_50 = and(T_49, roundInexact) @[RecFNToIN.scala 97:60] 
    node T_51 = and(T_47, T_50) @[RecFNToIN.scala 97:49] 
    node roundIncr = or(T_46, T_51) @[RecFNToIN.scala 96:78] 
    node T_52 = not(unroundedInt) @[RecFNToIN.scala 98:39] 
    node complUnroundedInt = mux(sign, T_52, unroundedInt) @[RecFNToIN.scala 98:32] 
    node T_53 = xor(roundIncr, sign) @[RecFNToIN.scala 100:23] 
    node T_55 = add(complUnroundedInt, UInt<1>("h01")) @[RecFNToIN.scala 100:49] 
    node T_56 = tail(T_55, 1) @[RecFNToIN.scala 100:49] 
    node roundedInt = mux(T_53, T_56, complUnroundedInt) @[RecFNToIN.scala 100:12] 
    node T_57 = bits(unroundedInt, 29, 0) @[RecFNToIN.scala 103:38] 
    node T_58 = not(T_57) @[RecFNToIN.scala 103:56] 
    node T_60 = eq(T_58, UInt<1>("h00")) @[RecFNToIN.scala 103:56] 
    node roundCarryBut2 = and(T_60, roundIncr) @[RecFNToIN.scala 103:61] 
    node posExp = bits(exp, 10, 0) @[RecFNToIN.scala 104:21] 
    node T_62 = geq(posExp, UInt<6>("h020")) @[RecFNToIN.scala 108:21] 
    node T_64 = eq(posExp, UInt<5>("h01f")) @[RecFNToIN.scala 109:26] 
    node T_66 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 110:23] 
    node T_67 = bits(unroundedInt, 30, 0) @[RecFNToIN.scala 110:45] 
    node T_69 = neq(T_67, UInt<1>("h00")) @[RecFNToIN.scala 110:63] 
    node T_70 = or(T_66, T_69) @[RecFNToIN.scala 110:30] 
    node T_71 = or(T_70, roundIncr) @[RecFNToIN.scala 111:27] 
    node T_72 = and(T_64, T_71) @[RecFNToIN.scala 109:50] 
    node T_73 = or(T_62, T_72) @[RecFNToIN.scala 108:40] 
    node T_75 = eq(sign, UInt<1>("h00")) @[RecFNToIN.scala 112:18] 
    node T_77 = eq(posExp, UInt<5>("h01e")) @[RecFNToIN.scala 112:36] 
    node T_78 = and(T_75, T_77) @[RecFNToIN.scala 112:25] 
    node T_79 = and(T_78, roundCarryBut2) @[RecFNToIN.scala 112:60] 
    node T_80 = or(T_73, T_79) @[RecFNToIN.scala 111:42] 
    node overflow_signed = mux(notSpecial_magGeOne, T_80, UInt<1>("h00")) @[RecFNToIN.scala 107:12] 
    node T_83 = geq(posExp, UInt<6>("h020")) @[RecFNToIN.scala 117:29] 
    node T_84 = or(sign, T_83) @[RecFNToIN.scala 117:18] 
    node T_86 = eq(posExp, UInt<5>("h01f")) @[RecFNToIN.scala 118:26] 
    node T_87 = bits(unroundedInt, 30, 30) @[RecFNToIN.scala 119:34] 
    node T_88 = and(T_86, T_87) @[RecFNToIN.scala 118:50] 
    node T_89 = and(T_88, roundCarryBut2) @[RecFNToIN.scala 119:49] 
    node T_90 = or(T_84, T_89) @[RecFNToIN.scala 117:48] 
    node T_91 = and(sign, roundIncr) @[RecFNToIN.scala 120:18] 
    node overflow_unsigned = mux(notSpecial_magGeOne, T_90, T_91) @[RecFNToIN.scala 116:12] 
    node overflow = mux(io.signedOut, overflow_signed, overflow_unsigned) @[RecFNToIN.scala 122:23] 
    node T_93 = eq(isNaN, UInt<1>("h00")) @[RecFNToIN.scala 124:27] 
    node excSign = and(sign, T_93) @[RecFNToIN.scala 124:24] 
    node T_94 = and(io.signedOut, excSign) @[RecFNToIN.scala 126:26] 
    node T_96 = shl(UInt<1>("h01"), 31) @[RecFNToIN.scala 126:45] 
    node T_98 = mux(T_94, T_96, UInt<1>("h00")) @[RecFNToIN.scala 126:12] 
    node T_100 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 127:29] 
    node T_101 = and(io.signedOut, T_100) @[RecFNToIN.scala 127:26] 
    node T_104 = mux(T_101, UInt<31>("h07fffffff"), UInt<1>("h00")) @[RecFNToIN.scala 127:12] 
    node T_105 = or(T_98, T_104) @[RecFNToIN.scala 126:72] 
    node T_107 = eq(io.signedOut, UInt<1>("h00")) @[RecFNToIN.scala 131:13] 
    node T_109 = eq(excSign, UInt<1>("h00")) @[RecFNToIN.scala 131:31] 
    node T_110 = and(T_107, T_109) @[RecFNToIN.scala 131:28] 
    node T_113 = mux(T_110, UInt<32>("h0ffffffff"), UInt<1>("h00")) @[RecFNToIN.scala 131:12] 
    node excValue = or(T_105, T_113) @[RecFNToIN.scala 130:11] 
    node T_115 = eq(isSpecial, UInt<1>("h00")) @[RecFNToIN.scala 135:35] 
    node T_116 = and(roundInexact, T_115) @[RecFNToIN.scala 135:32] 
    node T_118 = eq(overflow, UInt<1>("h00")) @[RecFNToIN.scala 135:48] 
    node inexact = and(T_116, T_118) @[RecFNToIN.scala 135:45] 
    node T_119 = or(isSpecial, overflow) @[RecFNToIN.scala 137:27] 
    node T_120 = mux(T_119, excValue, roundedInt) @[RecFNToIN.scala 137:18] 
    io.out <= T_120 @[RecFNToIN.scala 137:12] 
    node T_121 = cat(isSpecial, overflow) @[Cat.scala 20:58] 
    node T_122 = cat(T_121, inexact) @[Cat.scala 20:58] 
    io.intExceptionFlags <= T_122 @[RecFNToIN.scala 138:26] 
    
  module FPToInt : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, as_double : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, out : {valid : UInt<1>, bits : {lt : UInt<1>, store : UInt<64>, toint : UInt<64>, exc : UInt<5>}}}
    
    io is invalid
    reg in : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    reg valid : UInt<1>, clk
    valid <= io.in.valid
    inst RecFNToRecFN_2 of RecFNToRecFN @[fpu.scala 227:21] 
    RecFNToRecFN_2.io is invalid
    RecFNToRecFN_2.clk <= clk
    RecFNToRecFN_2.reset <= reset
    RecFNToRecFN_2.io.in <= io.in.bits.in1 @[fpu.scala 228:15] 
    RecFNToRecFN_2.io.roundingMode <= UInt<1>("h00") @[fpu.scala 229:25] 
    inst RecFNToRecFN_1_1 of RecFNToRecFN @[fpu.scala 227:21] 
    RecFNToRecFN_1_1.io is invalid
    RecFNToRecFN_1_1.clk <= clk
    RecFNToRecFN_1_1.reset <= reset
    RecFNToRecFN_1_1.io.in <= io.in.bits.in2 @[fpu.scala 228:15] 
    RecFNToRecFN_1_1.io.roundingMode <= UInt<1>("h00") @[fpu.scala 229:25] 
    when io.in.valid : @[fpu.scala 236:22] 
      in <- io.in.bits @[fpu.scala 237:8] 
      node T_230 = eq(io.in.bits.ldst, UInt<1>("h00")) @[fpu.scala 238:32] 
      node T_231 = and(io.in.bits.single, T_230) @[fpu.scala 238:29] 
      node T_234 = and(io.in.bits.cmd, UInt<4>("h0c")) @[fpu.scala 238:67] 
      node T_235 = eq(UInt<5>("h0c"), T_234) @[fpu.scala 238:67] 
      node T_237 = eq(T_235, UInt<1>("h00")) @[fpu.scala 238:67] 
      node T_238 = and(T_231, T_237) @[fpu.scala 238:49] 
      when T_238 : @[fpu.scala 238:83] 
        in.in1 <= RecFNToRecFN_2.io.out @[fpu.scala 239:14] 
        in.in2 <= RecFNToRecFN_1_1.io.out @[fpu.scala 240:14] 
        skip @[fpu.scala 238:83] 
      skip @[fpu.scala 236:22] 
    node T_239 = bits(in.in1, 32, 32) @[fNFromRecFN.scala 45:22] 
    node T_240 = bits(in.in1, 31, 23) @[fNFromRecFN.scala 46:23] 
    node T_241 = bits(in.in1, 22, 0) @[fNFromRecFN.scala 47:25] 
    node T_242 = bits(T_240, 6, 0) @[fNFromRecFN.scala 49:39] 
    node T_244 = lt(T_242, UInt<2>("h02")) @[fNFromRecFN.scala 49:57] 
    node T_245 = bits(T_240, 8, 6) @[fNFromRecFN.scala 51:19] 
    node T_247 = eq(T_245, UInt<1>("h01")) @[fNFromRecFN.scala 51:44] 
    node T_248 = bits(T_240, 8, 7) @[fNFromRecFN.scala 52:24] 
    node T_250 = eq(T_248, UInt<1>("h01")) @[fNFromRecFN.scala 52:49] 
    node T_251 = and(T_250, T_244) @[fNFromRecFN.scala 52:62] 
    node T_252 = or(T_247, T_251) @[fNFromRecFN.scala 51:57] 
    node T_253 = bits(T_240, 8, 7) @[fNFromRecFN.scala 55:20] 
    node T_255 = eq(T_253, UInt<1>("h01")) @[fNFromRecFN.scala 55:45] 
    node T_257 = eq(T_244, UInt<1>("h00")) @[fNFromRecFN.scala 56:18] 
    node T_258 = and(T_255, T_257) @[fNFromRecFN.scala 55:58] 
    node T_259 = bits(T_240, 8, 7) @[fNFromRecFN.scala 57:23] 
    node T_261 = eq(T_259, UInt<2>("h02")) @[fNFromRecFN.scala 57:48] 
    node T_262 = or(T_258, T_261) @[fNFromRecFN.scala 56:39] 
    node T_263 = bits(T_240, 8, 7) @[fNFromRecFN.scala 58:30] 
    node T_265 = eq(T_263, UInt<2>("h03")) @[fNFromRecFN.scala 58:55] 
    node T_266 = bits(T_240, 6, 6) @[fNFromRecFN.scala 59:39] 
    node T_267 = and(T_265, T_266) @[fNFromRecFN.scala 59:31] 
    node T_269 = bits(T_240, 4, 0) @[fNFromRecFN.scala 61:46] 
    node T_270 = sub(UInt<2>("h02"), T_269) @[fNFromRecFN.scala 61:39] 
    node T_271 = tail(T_270, 1) @[fNFromRecFN.scala 61:39] 
    node T_273 = cat(UInt<1>("h01"), T_241) @[Cat.scala 20:58] 
    node T_274 = dshr(T_273, T_271) @[fNFromRecFN.scala 63:35] 
    node T_275 = bits(T_274, 22, 0) @[fNFromRecFN.scala 63:53] 
    node T_276 = bits(T_240, 7, 0) @[fNFromRecFN.scala 65:18] 
    node T_278 = sub(T_276, UInt<8>("h081")) @[fNFromRecFN.scala 65:36] 
    node T_279 = tail(T_278, 1) @[fNFromRecFN.scala 65:36] 
    node T_280 = bits(T_265, 0, 0) @[Bitwise.scala 33:15] 
    node T_283 = mux(T_280, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_284 = mux(T_262, T_279, T_283) @[fNFromRecFN.scala 68:16] 
    node T_285 = or(T_262, T_267) @[fNFromRecFN.scala 70:26] 
    node T_287 = mux(T_252, T_275, UInt<1>("h00")) @[fNFromRecFN.scala 72:20] 
    node T_288 = mux(T_285, T_241, T_287) @[fNFromRecFN.scala 70:16] 
    node T_289 = cat(T_239, T_284) @[Cat.scala 20:58] 
    node unrec_s = cat(T_289, T_288) @[Cat.scala 20:58] 
    node T_290 = bits(in.in1, 64, 64) @[fNFromRecFN.scala 45:22] 
    node T_291 = bits(in.in1, 63, 52) @[fNFromRecFN.scala 46:23] 
    node T_292 = bits(in.in1, 51, 0) @[fNFromRecFN.scala 47:25] 
    node T_293 = bits(T_291, 9, 0) @[fNFromRecFN.scala 49:39] 
    node T_295 = lt(T_293, UInt<2>("h02")) @[fNFromRecFN.scala 49:57] 
    node T_296 = bits(T_291, 11, 9) @[fNFromRecFN.scala 51:19] 
    node T_298 = eq(T_296, UInt<1>("h01")) @[fNFromRecFN.scala 51:44] 
    node T_299 = bits(T_291, 11, 10) @[fNFromRecFN.scala 52:24] 
    node T_301 = eq(T_299, UInt<1>("h01")) @[fNFromRecFN.scala 52:49] 
    node T_302 = and(T_301, T_295) @[fNFromRecFN.scala 52:62] 
    node T_303 = or(T_298, T_302) @[fNFromRecFN.scala 51:57] 
    node T_304 = bits(T_291, 11, 10) @[fNFromRecFN.scala 55:20] 
    node T_306 = eq(T_304, UInt<1>("h01")) @[fNFromRecFN.scala 55:45] 
    node T_308 = eq(T_295, UInt<1>("h00")) @[fNFromRecFN.scala 56:18] 
    node T_309 = and(T_306, T_308) @[fNFromRecFN.scala 55:58] 
    node T_310 = bits(T_291, 11, 10) @[fNFromRecFN.scala 57:23] 
    node T_312 = eq(T_310, UInt<2>("h02")) @[fNFromRecFN.scala 57:48] 
    node T_313 = or(T_309, T_312) @[fNFromRecFN.scala 56:39] 
    node T_314 = bits(T_291, 11, 10) @[fNFromRecFN.scala 58:30] 
    node T_316 = eq(T_314, UInt<2>("h03")) @[fNFromRecFN.scala 58:55] 
    node T_317 = bits(T_291, 9, 9) @[fNFromRecFN.scala 59:39] 
    node T_318 = and(T_316, T_317) @[fNFromRecFN.scala 59:31] 
    node T_320 = bits(T_291, 5, 0) @[fNFromRecFN.scala 61:46] 
    node T_321 = sub(UInt<2>("h02"), T_320) @[fNFromRecFN.scala 61:39] 
    node T_322 = tail(T_321, 1) @[fNFromRecFN.scala 61:39] 
    node T_324 = cat(UInt<1>("h01"), T_292) @[Cat.scala 20:58] 
    node T_325 = dshr(T_324, T_322) @[fNFromRecFN.scala 63:35] 
    node T_326 = bits(T_325, 51, 0) @[fNFromRecFN.scala 63:53] 
    node T_327 = bits(T_291, 10, 0) @[fNFromRecFN.scala 65:18] 
    node T_329 = sub(T_327, UInt<11>("h0401")) @[fNFromRecFN.scala 65:36] 
    node T_330 = tail(T_329, 1) @[fNFromRecFN.scala 65:36] 
    node T_331 = bits(T_316, 0, 0) @[Bitwise.scala 33:15] 
    node T_334 = mux(T_331, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 33:12] 
    node T_335 = mux(T_313, T_330, T_334) @[fNFromRecFN.scala 68:16] 
    node T_336 = or(T_313, T_318) @[fNFromRecFN.scala 70:26] 
    node T_338 = mux(T_303, T_326, UInt<1>("h00")) @[fNFromRecFN.scala 72:20] 
    node T_339 = mux(T_336, T_292, T_338) @[fNFromRecFN.scala 70:16] 
    node T_340 = cat(T_290, T_335) @[Cat.scala 20:58] 
    node unrec_d = cat(T_340, T_339) @[Cat.scala 20:58] 
    node T_341 = bits(unrec_s, 31, 31) @[fpu.scala 246:54] 
    node T_342 = bits(T_341, 0, 0) @[Bitwise.scala 33:15] 
    node T_345 = mux(T_342, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_346 = cat(T_345, unrec_s) @[Cat.scala 20:58] 
    node unrec_out = mux(in.single, T_346, unrec_d) @[fpu.scala 246:22] 
    node T_347 = bits(in.in1, 32, 32) @[fpu.scala 187:18] 
    node T_348 = bits(in.in1, 31, 23) @[fpu.scala 188:17] 
    node T_349 = bits(in.in1, 22, 0) @[fpu.scala 189:17] 
    node T_350 = bits(T_348, 8, 6) @[fpu.scala 191:26] 
    node T_351 = bits(T_350, 2, 1) @[fpu.scala 192:27] 
    node T_353 = eq(T_351, UInt<2>("h03")) @[fpu.scala 193:30] 
    node T_354 = bits(T_348, 6, 0) @[fpu.scala 195:32] 
    node T_356 = lt(T_354, UInt<2>("h02")) @[fpu.scala 195:48] 
    node T_358 = eq(T_350, UInt<1>("h01")) @[fpu.scala 196:28] 
    node T_360 = eq(T_351, UInt<1>("h01")) @[fpu.scala 196:50] 
    node T_361 = and(T_360, T_356) @[fpu.scala 196:62] 
    node T_362 = or(T_358, T_361) @[fpu.scala 196:40] 
    node T_364 = eq(T_351, UInt<1>("h01")) @[fpu.scala 197:27] 
    node T_366 = eq(T_356, UInt<1>("h00")) @[fpu.scala 197:42] 
    node T_367 = and(T_364, T_366) @[fpu.scala 197:39] 
    node T_369 = eq(T_351, UInt<2>("h02")) @[fpu.scala 197:71] 
    node T_370 = or(T_367, T_369) @[fpu.scala 197:61] 
    node T_372 = eq(T_350, UInt<1>("h00")) @[fpu.scala 198:23] 
    node T_373 = bits(T_348, 6, 6) @[fpu.scala 199:34] 
    node T_375 = eq(T_373, UInt<1>("h00")) @[fpu.scala 199:30] 
    node T_376 = and(T_353, T_375) @[fpu.scala 199:27] 
    node T_377 = not(T_350) @[fpu.scala 200:22] 
    node T_379 = eq(T_377, UInt<1>("h00")) @[fpu.scala 200:22] 
    node T_380 = bits(T_349, 22, 22) @[fpu.scala 201:31] 
    node T_382 = eq(T_380, UInt<1>("h00")) @[fpu.scala 201:27] 
    node T_383 = and(T_379, T_382) @[fpu.scala 201:24] 
    node T_384 = bits(T_349, 22, 22) @[fpu.scala 202:30] 
    node T_385 = and(T_379, T_384) @[fpu.scala 202:24] 
    node T_387 = eq(T_347, UInt<1>("h00")) @[fpu.scala 204:34] 
    node T_388 = and(T_376, T_387) @[fpu.scala 204:31] 
    node T_390 = eq(T_347, UInt<1>("h00")) @[fpu.scala 204:53] 
    node T_391 = and(T_370, T_390) @[fpu.scala 204:50] 
    node T_393 = eq(T_347, UInt<1>("h00")) @[fpu.scala 205:24] 
    node T_394 = and(T_362, T_393) @[fpu.scala 205:21] 
    node T_396 = eq(T_347, UInt<1>("h00")) @[fpu.scala 205:41] 
    node T_397 = and(T_372, T_396) @[fpu.scala 205:38] 
    node T_398 = and(T_372, T_347) @[fpu.scala 205:55] 
    node T_399 = and(T_362, T_347) @[fpu.scala 206:21] 
    node T_400 = and(T_370, T_347) @[fpu.scala 206:39] 
    node T_401 = and(T_376, T_347) @[fpu.scala 206:54] 
    node T_402 = cat(T_400, T_401) @[Cat.scala 20:58] 
    node T_403 = cat(T_397, T_398) @[Cat.scala 20:58] 
    node T_404 = cat(T_403, T_399) @[Cat.scala 20:58] 
    node T_405 = cat(T_404, T_402) @[Cat.scala 20:58] 
    node T_406 = cat(T_391, T_394) @[Cat.scala 20:58] 
    node T_407 = cat(T_385, T_383) @[Cat.scala 20:58] 
    node T_408 = cat(T_407, T_388) @[Cat.scala 20:58] 
    node T_409 = cat(T_408, T_406) @[Cat.scala 20:58] 
    node classify_s = cat(T_409, T_405) @[Cat.scala 20:58] 
    node T_410 = bits(in.in1, 64, 64) @[fpu.scala 187:18] 
    node T_411 = bits(in.in1, 63, 52) @[fpu.scala 188:17] 
    node T_412 = bits(in.in1, 51, 0) @[fpu.scala 189:17] 
    node T_413 = bits(T_411, 11, 9) @[fpu.scala 191:26] 
    node T_414 = bits(T_413, 2, 1) @[fpu.scala 192:27] 
    node T_416 = eq(T_414, UInt<2>("h03")) @[fpu.scala 193:30] 
    node T_417 = bits(T_411, 9, 0) @[fpu.scala 195:32] 
    node T_419 = lt(T_417, UInt<2>("h02")) @[fpu.scala 195:48] 
    node T_421 = eq(T_413, UInt<1>("h01")) @[fpu.scala 196:28] 
    node T_423 = eq(T_414, UInt<1>("h01")) @[fpu.scala 196:50] 
    node T_424 = and(T_423, T_419) @[fpu.scala 196:62] 
    node T_425 = or(T_421, T_424) @[fpu.scala 196:40] 
    node T_427 = eq(T_414, UInt<1>("h01")) @[fpu.scala 197:27] 
    node T_429 = eq(T_419, UInt<1>("h00")) @[fpu.scala 197:42] 
    node T_430 = and(T_427, T_429) @[fpu.scala 197:39] 
    node T_432 = eq(T_414, UInt<2>("h02")) @[fpu.scala 197:71] 
    node T_433 = or(T_430, T_432) @[fpu.scala 197:61] 
    node T_435 = eq(T_413, UInt<1>("h00")) @[fpu.scala 198:23] 
    node T_436 = bits(T_411, 9, 9) @[fpu.scala 199:34] 
    node T_438 = eq(T_436, UInt<1>("h00")) @[fpu.scala 199:30] 
    node T_439 = and(T_416, T_438) @[fpu.scala 199:27] 
    node T_440 = not(T_413) @[fpu.scala 200:22] 
    node T_442 = eq(T_440, UInt<1>("h00")) @[fpu.scala 200:22] 
    node T_443 = bits(T_412, 51, 51) @[fpu.scala 201:31] 
    node T_445 = eq(T_443, UInt<1>("h00")) @[fpu.scala 201:27] 
    node T_446 = and(T_442, T_445) @[fpu.scala 201:24] 
    node T_447 = bits(T_412, 51, 51) @[fpu.scala 202:30] 
    node T_448 = and(T_442, T_447) @[fpu.scala 202:24] 
    node T_450 = eq(T_410, UInt<1>("h00")) @[fpu.scala 204:34] 
    node T_451 = and(T_439, T_450) @[fpu.scala 204:31] 
    node T_453 = eq(T_410, UInt<1>("h00")) @[fpu.scala 204:53] 
    node T_454 = and(T_433, T_453) @[fpu.scala 204:50] 
    node T_456 = eq(T_410, UInt<1>("h00")) @[fpu.scala 205:24] 
    node T_457 = and(T_425, T_456) @[fpu.scala 205:21] 
    node T_459 = eq(T_410, UInt<1>("h00")) @[fpu.scala 205:41] 
    node T_460 = and(T_435, T_459) @[fpu.scala 205:38] 
    node T_461 = and(T_435, T_410) @[fpu.scala 205:55] 
    node T_462 = and(T_425, T_410) @[fpu.scala 206:21] 
    node T_463 = and(T_433, T_410) @[fpu.scala 206:39] 
    node T_464 = and(T_439, T_410) @[fpu.scala 206:54] 
    node T_465 = cat(T_463, T_464) @[Cat.scala 20:58] 
    node T_466 = cat(T_460, T_461) @[Cat.scala 20:58] 
    node T_467 = cat(T_466, T_462) @[Cat.scala 20:58] 
    node T_468 = cat(T_467, T_465) @[Cat.scala 20:58] 
    node T_469 = cat(T_454, T_457) @[Cat.scala 20:58] 
    node T_470 = cat(T_448, T_446) @[Cat.scala 20:58] 
    node T_471 = cat(T_470, T_451) @[Cat.scala 20:58] 
    node T_472 = cat(T_471, T_469) @[Cat.scala 20:58] 
    node classify_d = cat(T_472, T_468) @[Cat.scala 20:58] 
    node classify_out = mux(in.single, classify_s, classify_d) @[fpu.scala 250:25] 
    inst dcmp of CompareRecFN @[fpu.scala 252:20] 
    dcmp.io is invalid
    dcmp.clk <= clk
    dcmp.reset <= reset
    dcmp.io.a <= in.in1 @[fpu.scala 253:13] 
    dcmp.io.b <= in.in2 @[fpu.scala 254:13] 
    dcmp.io.signaling <= UInt<1>("h01") @[fpu.scala 255:21] 
    node T_474 = not(in.rm) @[fpu.scala 256:19] 
    node T_475 = cat(dcmp.io.lt, dcmp.io.eq) @[Cat.scala 20:58] 
    node T_476 = and(T_474, T_475) @[fpu.scala 256:26] 
    node dcmp_out = neq(T_476, UInt<1>("h00")) @[fpu.scala 256:57] 
    inst d2l of RecFNToIN @[fpu.scala 259:19] 
    d2l.io is invalid
    d2l.clk <= clk
    d2l.reset <= reset
    inst d2w of RecFNToIN_1 @[fpu.scala 260:19] 
    d2w.io is invalid
    d2w.clk <= clk
    d2w.reset <= reset
    d2l.io.in <= in.in1 @[fpu.scala 261:13] 
    d2l.io.roundingMode <= in.rm @[fpu.scala 262:23] 
    node T_478 = bits(in.typ, 0, 0) @[fpu.scala 263:30] 
    node T_479 = not(T_478) @[fpu.scala 263:23] 
    d2l.io.signedOut <= T_479 @[fpu.scala 263:20] 
    d2w.io.in <= in.in1 @[fpu.scala 264:13] 
    d2w.io.roundingMode <= in.rm @[fpu.scala 265:23] 
    node T_480 = bits(in.typ, 0, 0) @[fpu.scala 266:30] 
    node T_481 = not(T_480) @[fpu.scala 266:23] 
    d2w.io.signedOut <= T_481 @[fpu.scala 266:20] 
    node T_482 = bits(in.rm, 0, 0) @[fpu.scala 268:33] 
    node T_483 = mux(T_482, classify_out, unrec_out) @[fpu.scala 268:27] 
    io.out.bits.toint <= T_483 @[fpu.scala 268:21] 
    io.out.bits.store <= unrec_out @[fpu.scala 269:21] 
    io.out.bits.exc <= UInt<1>("h00") @[fpu.scala 270:19] 
    node T_487 = and(in.cmd, UInt<4>("h0c")) @[fpu.scala 272:16] 
    node T_488 = eq(UInt<5>("h04"), T_487) @[fpu.scala 272:16] 
    when T_488 : @[fpu.scala 272:30] 
      io.out.bits.toint <= dcmp_out @[fpu.scala 273:23] 
      io.out.bits.exc <= dcmp.io.exceptionFlags @[fpu.scala 274:21] 
      skip @[fpu.scala 272:30] 
    node T_491 = and(in.cmd, UInt<4>("h0c")) @[fpu.scala 276:16] 
    node T_492 = eq(UInt<5>("h08"), T_491) @[fpu.scala 276:16] 
    when T_492 : @[fpu.scala 276:33] 
      node T_493 = bits(in.typ, 1, 1) @[fpu.scala 277:36] 
      node T_494 = asSInt(d2l.io.out) @[fpu.scala 277:52] 
      node T_495 = asSInt(d2w.io.out) @[fpu.scala 277:71] 
      node T_496 = mux(T_493, T_494, T_495) @[fpu.scala 277:29] 
      node T_497 = asUInt(T_496) @[fpu.scala 277:79] 
      io.out.bits.toint <= T_497 @[fpu.scala 277:23] 
      node T_498 = bits(in.typ, 1, 1) @[fpu.scala 278:28] 
      node T_499 = mux(T_498, d2l.io.intExceptionFlags, d2w.io.intExceptionFlags) @[fpu.scala 278:21] 
      node T_500 = bits(T_499, 2, 1) @[fpu.scala 279:34] 
      node T_502 = neq(T_500, UInt<1>("h00")) @[fpu.scala 279:41] 
      node T_504 = bits(T_499, 0, 0) @[fpu.scala 279:64] 
      node T_505 = cat(T_502, UInt<3>("h00")) @[Cat.scala 20:58] 
      node T_506 = cat(T_505, T_504) @[Cat.scala 20:58] 
      io.out.bits.exc <= T_506 @[fpu.scala 279:21] 
      skip @[fpu.scala 276:33] 
    io.out.valid <= valid @[fpu.scala 282:16] 
    io.out.bits.lt <= dcmp.io.lt @[fpu.scala 283:18] 
    io.as_double <- in @[fpu.scala 284:16] 
    
  module INToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip signedIn : UInt<1>, flip in : UInt<64>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_5 = bits(io.in, 63, 63) @[INToRecFN.scala 55:36] 
    node sign = and(io.signedIn, T_5) @[INToRecFN.scala 55:28] 
    node T_7 = sub(UInt<1>("h00"), io.in) @[INToRecFN.scala 56:27] 
    node T_8 = tail(T_7, 1) @[INToRecFN.scala 56:27] 
    node absIn = mux(sign, T_8, io.in) @[INToRecFN.scala 56:20] 
    node T_9 = shl(absIn, 0) @[INToRecFN.scala 57:32] 
    node T_10 = bits(T_9, 63, 32) @[CircuitMath.scala 26:17] 
    node T_11 = bits(T_9, 31, 0) @[CircuitMath.scala 27:17] 
    node T_13 = neq(T_10, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_14 = bits(T_10, 31, 16) @[CircuitMath.scala 26:17] 
    node T_15 = bits(T_10, 15, 0) @[CircuitMath.scala 27:17] 
    node T_17 = neq(T_14, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_18 = bits(T_14, 15, 8) @[CircuitMath.scala 26:17] 
    node T_19 = bits(T_14, 7, 0) @[CircuitMath.scala 27:17] 
    node T_21 = neq(T_18, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_22 = bits(T_18, 7, 4) @[CircuitMath.scala 26:17] 
    node T_23 = bits(T_18, 3, 0) @[CircuitMath.scala 27:17] 
    node T_25 = neq(T_22, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_26 = bits(T_22, 3, 3) @[CircuitMath.scala 23:12] 
    node T_28 = bits(T_22, 2, 2) @[CircuitMath.scala 23:12] 
    node T_30 = bits(T_22, 1, 1) @[CircuitMath.scala 21:8] 
    node T_31 = shl(T_30, 0) @[CircuitMath.scala 23:10] 
    node T_32 = mux(T_28, UInt<2>("h02"), T_31) @[CircuitMath.scala 23:10] 
    node T_33 = mux(T_26, UInt<2>("h03"), T_32) @[CircuitMath.scala 23:10] 
    node T_34 = bits(T_23, 3, 3) @[CircuitMath.scala 23:12] 
    node T_36 = bits(T_23, 2, 2) @[CircuitMath.scala 23:12] 
    node T_38 = bits(T_23, 1, 1) @[CircuitMath.scala 21:8] 
    node T_39 = shl(T_38, 0) @[CircuitMath.scala 23:10] 
    node T_40 = mux(T_36, UInt<2>("h02"), T_39) @[CircuitMath.scala 23:10] 
    node T_41 = mux(T_34, UInt<2>("h03"), T_40) @[CircuitMath.scala 23:10] 
    node T_42 = mux(T_25, T_33, T_41) @[CircuitMath.scala 29:21] 
    node T_43 = cat(T_25, T_42) @[Cat.scala 20:58] 
    node T_44 = bits(T_19, 7, 4) @[CircuitMath.scala 26:17] 
    node T_45 = bits(T_19, 3, 0) @[CircuitMath.scala 27:17] 
    node T_47 = neq(T_44, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_48 = bits(T_44, 3, 3) @[CircuitMath.scala 23:12] 
    node T_50 = bits(T_44, 2, 2) @[CircuitMath.scala 23:12] 
    node T_52 = bits(T_44, 1, 1) @[CircuitMath.scala 21:8] 
    node T_53 = shl(T_52, 0) @[CircuitMath.scala 23:10] 
    node T_54 = mux(T_50, UInt<2>("h02"), T_53) @[CircuitMath.scala 23:10] 
    node T_55 = mux(T_48, UInt<2>("h03"), T_54) @[CircuitMath.scala 23:10] 
    node T_56 = bits(T_45, 3, 3) @[CircuitMath.scala 23:12] 
    node T_58 = bits(T_45, 2, 2) @[CircuitMath.scala 23:12] 
    node T_60 = bits(T_45, 1, 1) @[CircuitMath.scala 21:8] 
    node T_61 = shl(T_60, 0) @[CircuitMath.scala 23:10] 
    node T_62 = mux(T_58, UInt<2>("h02"), T_61) @[CircuitMath.scala 23:10] 
    node T_63 = mux(T_56, UInt<2>("h03"), T_62) @[CircuitMath.scala 23:10] 
    node T_64 = mux(T_47, T_55, T_63) @[CircuitMath.scala 29:21] 
    node T_65 = cat(T_47, T_64) @[Cat.scala 20:58] 
    node T_66 = mux(T_21, T_43, T_65) @[CircuitMath.scala 29:21] 
    node T_67 = cat(T_21, T_66) @[Cat.scala 20:58] 
    node T_68 = bits(T_15, 15, 8) @[CircuitMath.scala 26:17] 
    node T_69 = bits(T_15, 7, 0) @[CircuitMath.scala 27:17] 
    node T_71 = neq(T_68, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_72 = bits(T_68, 7, 4) @[CircuitMath.scala 26:17] 
    node T_73 = bits(T_68, 3, 0) @[CircuitMath.scala 27:17] 
    node T_75 = neq(T_72, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_76 = bits(T_72, 3, 3) @[CircuitMath.scala 23:12] 
    node T_78 = bits(T_72, 2, 2) @[CircuitMath.scala 23:12] 
    node T_80 = bits(T_72, 1, 1) @[CircuitMath.scala 21:8] 
    node T_81 = shl(T_80, 0) @[CircuitMath.scala 23:10] 
    node T_82 = mux(T_78, UInt<2>("h02"), T_81) @[CircuitMath.scala 23:10] 
    node T_83 = mux(T_76, UInt<2>("h03"), T_82) @[CircuitMath.scala 23:10] 
    node T_84 = bits(T_73, 3, 3) @[CircuitMath.scala 23:12] 
    node T_86 = bits(T_73, 2, 2) @[CircuitMath.scala 23:12] 
    node T_88 = bits(T_73, 1, 1) @[CircuitMath.scala 21:8] 
    node T_89 = shl(T_88, 0) @[CircuitMath.scala 23:10] 
    node T_90 = mux(T_86, UInt<2>("h02"), T_89) @[CircuitMath.scala 23:10] 
    node T_91 = mux(T_84, UInt<2>("h03"), T_90) @[CircuitMath.scala 23:10] 
    node T_92 = mux(T_75, T_83, T_91) @[CircuitMath.scala 29:21] 
    node T_93 = cat(T_75, T_92) @[Cat.scala 20:58] 
    node T_94 = bits(T_69, 7, 4) @[CircuitMath.scala 26:17] 
    node T_95 = bits(T_69, 3, 0) @[CircuitMath.scala 27:17] 
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_98 = bits(T_94, 3, 3) @[CircuitMath.scala 23:12] 
    node T_100 = bits(T_94, 2, 2) @[CircuitMath.scala 23:12] 
    node T_102 = bits(T_94, 1, 1) @[CircuitMath.scala 21:8] 
    node T_103 = shl(T_102, 0) @[CircuitMath.scala 23:10] 
    node T_104 = mux(T_100, UInt<2>("h02"), T_103) @[CircuitMath.scala 23:10] 
    node T_105 = mux(T_98, UInt<2>("h03"), T_104) @[CircuitMath.scala 23:10] 
    node T_106 = bits(T_95, 3, 3) @[CircuitMath.scala 23:12] 
    node T_108 = bits(T_95, 2, 2) @[CircuitMath.scala 23:12] 
    node T_110 = bits(T_95, 1, 1) @[CircuitMath.scala 21:8] 
    node T_111 = shl(T_110, 0) @[CircuitMath.scala 23:10] 
    node T_112 = mux(T_108, UInt<2>("h02"), T_111) @[CircuitMath.scala 23:10] 
    node T_113 = mux(T_106, UInt<2>("h03"), T_112) @[CircuitMath.scala 23:10] 
    node T_114 = mux(T_97, T_105, T_113) @[CircuitMath.scala 29:21] 
    node T_115 = cat(T_97, T_114) @[Cat.scala 20:58] 
    node T_116 = mux(T_71, T_93, T_115) @[CircuitMath.scala 29:21] 
    node T_117 = cat(T_71, T_116) @[Cat.scala 20:58] 
    node T_118 = mux(T_17, T_67, T_117) @[CircuitMath.scala 29:21] 
    node T_119 = cat(T_17, T_118) @[Cat.scala 20:58] 
    node T_120 = bits(T_11, 31, 16) @[CircuitMath.scala 26:17] 
    node T_121 = bits(T_11, 15, 0) @[CircuitMath.scala 27:17] 
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_124 = bits(T_120, 15, 8) @[CircuitMath.scala 26:17] 
    node T_125 = bits(T_120, 7, 0) @[CircuitMath.scala 27:17] 
    node T_127 = neq(T_124, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_128 = bits(T_124, 7, 4) @[CircuitMath.scala 26:17] 
    node T_129 = bits(T_124, 3, 0) @[CircuitMath.scala 27:17] 
    node T_131 = neq(T_128, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_132 = bits(T_128, 3, 3) @[CircuitMath.scala 23:12] 
    node T_134 = bits(T_128, 2, 2) @[CircuitMath.scala 23:12] 
    node T_136 = bits(T_128, 1, 1) @[CircuitMath.scala 21:8] 
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10] 
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10] 
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10] 
    node T_140 = bits(T_129, 3, 3) @[CircuitMath.scala 23:12] 
    node T_142 = bits(T_129, 2, 2) @[CircuitMath.scala 23:12] 
    node T_144 = bits(T_129, 1, 1) @[CircuitMath.scala 21:8] 
    node T_145 = shl(T_144, 0) @[CircuitMath.scala 23:10] 
    node T_146 = mux(T_142, UInt<2>("h02"), T_145) @[CircuitMath.scala 23:10] 
    node T_147 = mux(T_140, UInt<2>("h03"), T_146) @[CircuitMath.scala 23:10] 
    node T_148 = mux(T_131, T_139, T_147) @[CircuitMath.scala 29:21] 
    node T_149 = cat(T_131, T_148) @[Cat.scala 20:58] 
    node T_150 = bits(T_125, 7, 4) @[CircuitMath.scala 26:17] 
    node T_151 = bits(T_125, 3, 0) @[CircuitMath.scala 27:17] 
    node T_153 = neq(T_150, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_154 = bits(T_150, 3, 3) @[CircuitMath.scala 23:12] 
    node T_156 = bits(T_150, 2, 2) @[CircuitMath.scala 23:12] 
    node T_158 = bits(T_150, 1, 1) @[CircuitMath.scala 21:8] 
    node T_159 = shl(T_158, 0) @[CircuitMath.scala 23:10] 
    node T_160 = mux(T_156, UInt<2>("h02"), T_159) @[CircuitMath.scala 23:10] 
    node T_161 = mux(T_154, UInt<2>("h03"), T_160) @[CircuitMath.scala 23:10] 
    node T_162 = bits(T_151, 3, 3) @[CircuitMath.scala 23:12] 
    node T_164 = bits(T_151, 2, 2) @[CircuitMath.scala 23:12] 
    node T_166 = bits(T_151, 1, 1) @[CircuitMath.scala 21:8] 
    node T_167 = shl(T_166, 0) @[CircuitMath.scala 23:10] 
    node T_168 = mux(T_164, UInt<2>("h02"), T_167) @[CircuitMath.scala 23:10] 
    node T_169 = mux(T_162, UInt<2>("h03"), T_168) @[CircuitMath.scala 23:10] 
    node T_170 = mux(T_153, T_161, T_169) @[CircuitMath.scala 29:21] 
    node T_171 = cat(T_153, T_170) @[Cat.scala 20:58] 
    node T_172 = mux(T_127, T_149, T_171) @[CircuitMath.scala 29:21] 
    node T_173 = cat(T_127, T_172) @[Cat.scala 20:58] 
    node T_174 = bits(T_121, 15, 8) @[CircuitMath.scala 26:17] 
    node T_175 = bits(T_121, 7, 0) @[CircuitMath.scala 27:17] 
    node T_177 = neq(T_174, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_178 = bits(T_174, 7, 4) @[CircuitMath.scala 26:17] 
    node T_179 = bits(T_174, 3, 0) @[CircuitMath.scala 27:17] 
    node T_181 = neq(T_178, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_182 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12] 
    node T_184 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12] 
    node T_186 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8] 
    node T_187 = shl(T_186, 0) @[CircuitMath.scala 23:10] 
    node T_188 = mux(T_184, UInt<2>("h02"), T_187) @[CircuitMath.scala 23:10] 
    node T_189 = mux(T_182, UInt<2>("h03"), T_188) @[CircuitMath.scala 23:10] 
    node T_190 = bits(T_179, 3, 3) @[CircuitMath.scala 23:12] 
    node T_192 = bits(T_179, 2, 2) @[CircuitMath.scala 23:12] 
    node T_194 = bits(T_179, 1, 1) @[CircuitMath.scala 21:8] 
    node T_195 = shl(T_194, 0) @[CircuitMath.scala 23:10] 
    node T_196 = mux(T_192, UInt<2>("h02"), T_195) @[CircuitMath.scala 23:10] 
    node T_197 = mux(T_190, UInt<2>("h03"), T_196) @[CircuitMath.scala 23:10] 
    node T_198 = mux(T_181, T_189, T_197) @[CircuitMath.scala 29:21] 
    node T_199 = cat(T_181, T_198) @[Cat.scala 20:58] 
    node T_200 = bits(T_175, 7, 4) @[CircuitMath.scala 26:17] 
    node T_201 = bits(T_175, 3, 0) @[CircuitMath.scala 27:17] 
    node T_203 = neq(T_200, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_204 = bits(T_200, 3, 3) @[CircuitMath.scala 23:12] 
    node T_206 = bits(T_200, 2, 2) @[CircuitMath.scala 23:12] 
    node T_208 = bits(T_200, 1, 1) @[CircuitMath.scala 21:8] 
    node T_209 = shl(T_208, 0) @[CircuitMath.scala 23:10] 
    node T_210 = mux(T_206, UInt<2>("h02"), T_209) @[CircuitMath.scala 23:10] 
    node T_211 = mux(T_204, UInt<2>("h03"), T_210) @[CircuitMath.scala 23:10] 
    node T_212 = bits(T_201, 3, 3) @[CircuitMath.scala 23:12] 
    node T_214 = bits(T_201, 2, 2) @[CircuitMath.scala 23:12] 
    node T_216 = bits(T_201, 1, 1) @[CircuitMath.scala 21:8] 
    node T_217 = shl(T_216, 0) @[CircuitMath.scala 23:10] 
    node T_218 = mux(T_214, UInt<2>("h02"), T_217) @[CircuitMath.scala 23:10] 
    node T_219 = mux(T_212, UInt<2>("h03"), T_218) @[CircuitMath.scala 23:10] 
    node T_220 = mux(T_203, T_211, T_219) @[CircuitMath.scala 29:21] 
    node T_221 = cat(T_203, T_220) @[Cat.scala 20:58] 
    node T_222 = mux(T_177, T_199, T_221) @[CircuitMath.scala 29:21] 
    node T_223 = cat(T_177, T_222) @[Cat.scala 20:58] 
    node T_224 = mux(T_123, T_173, T_223) @[CircuitMath.scala 29:21] 
    node T_225 = cat(T_123, T_224) @[Cat.scala 20:58] 
    node T_226 = mux(T_13, T_119, T_225) @[CircuitMath.scala 29:21] 
    node T_227 = cat(T_13, T_226) @[Cat.scala 20:58] 
    node normCount = not(T_227) @[INToRecFN.scala 57:21] 
    node T_228 = dshl(absIn, normCount) @[INToRecFN.scala 58:27] 
    node normAbsIn = bits(T_228, 63, 0) @[INToRecFN.scala 58:39] 
    node T_230 = bits(normAbsIn, 40, 39) @[INToRecFN.scala 63:26] 
    node T_231 = bits(normAbsIn, 38, 0) @[INToRecFN.scala 64:26] 
    node T_233 = neq(T_231, UInt<1>("h00")) @[INToRecFN.scala 64:55] 
    node roundBits = cat(T_230, T_233) @[Cat.scala 20:58] 
    node T_234 = bits(roundBits, 1, 0) @[INToRecFN.scala 72:33] 
    node roundInexact = neq(T_234, UInt<1>("h00")) @[INToRecFN.scala 72:40] 
    node T_236 = eq(io.roundingMode, UInt<2>("h00")) @[INToRecFN.scala 74:30] 
    node T_237 = bits(roundBits, 2, 1) @[INToRecFN.scala 75:22] 
    node T_238 = not(T_237) @[INToRecFN.scala 75:29] 
    node T_240 = eq(T_238, UInt<1>("h00")) @[INToRecFN.scala 75:29] 
    node T_241 = bits(roundBits, 1, 0) @[INToRecFN.scala 75:46] 
    node T_242 = not(T_241) @[INToRecFN.scala 75:53] 
    node T_244 = eq(T_242, UInt<1>("h00")) @[INToRecFN.scala 75:53] 
    node T_245 = or(T_240, T_244) @[INToRecFN.scala 75:34] 
    node T_247 = mux(T_236, T_245, UInt<1>("h00")) @[INToRecFN.scala 74:12] 
    node T_248 = eq(io.roundingMode, UInt<2>("h02")) @[INToRecFN.scala 78:30] 
    node T_249 = and(sign, roundInexact) @[INToRecFN.scala 79:18] 
    node T_251 = mux(T_248, T_249, UInt<1>("h00")) @[INToRecFN.scala 78:12] 
    node T_252 = or(T_247, T_251) @[INToRecFN.scala 77:11] 
    node T_253 = eq(io.roundingMode, UInt<2>("h03")) @[INToRecFN.scala 82:30] 
    node T_255 = eq(sign, UInt<1>("h00")) @[INToRecFN.scala 83:13] 
    node T_256 = and(T_255, roundInexact) @[INToRecFN.scala 83:20] 
    node T_258 = mux(T_253, T_256, UInt<1>("h00")) @[INToRecFN.scala 82:12] 
    node round = or(T_252, T_258) @[INToRecFN.scala 81:11] 
    node T_260 = bits(normAbsIn, 63, 40) @[INToRecFN.scala 89:34] 
    node unroundedNorm = cat(UInt<1>("h00"), T_260) @[Cat.scala 20:58] 
    node T_263 = add(unroundedNorm, UInt<1>("h01")) @[INToRecFN.scala 94:48] 
    node T_264 = tail(T_263, 1) @[INToRecFN.scala 94:48] 
    node roundedNorm = mux(round, T_264, unroundedNorm) @[INToRecFN.scala 94:26] 
    node T_265 = not(normCount) @[INToRecFN.scala 97:24] 
    node unroundedExp = cat(UInt<1>("h00"), T_265) @[Cat.scala 20:58] 
    node T_268 = cat(UInt<1>("h00"), unroundedExp) @[Cat.scala 20:58] 
    node T_269 = bits(roundedNorm, 24, 24) @[INToRecFN.scala 106:65] 
    node T_270 = add(T_268, T_269) @[INToRecFN.scala 106:52] 
    node roundedExp = tail(T_270, 1) @[INToRecFN.scala 106:52] 
    node T_271 = bits(normAbsIn, 63, 63) @[INToRecFN.scala 112:22] 
    node T_273 = bits(roundedExp, 7, 0) @[INToRecFN.scala 115:27] 
    node T_274 = mux(UInt<1>("h00"), UInt<8>("h080"), T_273) @[INToRecFN.scala 113:16] 
    node expOut = cat(T_271, T_274) @[Cat.scala 20:58] 
    node overflow = or(UInt<1>("h00"), UInt<1>("h00")) @[INToRecFN.scala 119:39] 
    node inexact = or(roundInexact, overflow) @[INToRecFN.scala 120:32] 
    node T_275 = bits(roundedNorm, 22, 0) @[INToRecFN.scala 122:44] 
    node T_276 = cat(sign, expOut) @[Cat.scala 20:58] 
    node T_277 = cat(T_276, T_275) @[Cat.scala 20:58] 
    io.out <= T_277 @[INToRecFN.scala 122:12] 
    node T_280 = cat(UInt<1>("h00"), inexact) @[Cat.scala 20:58] 
    node T_281 = cat(UInt<2>("h00"), overflow) @[Cat.scala 20:58] 
    node T_282 = cat(T_281, T_280) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_282 @[INToRecFN.scala 123:23] 
    
  module INToRecFN_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip signedIn : UInt<1>, flip in : UInt<64>, flip roundingMode : UInt<2>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_5 = bits(io.in, 63, 63) @[INToRecFN.scala 55:36] 
    node sign = and(io.signedIn, T_5) @[INToRecFN.scala 55:28] 
    node T_7 = sub(UInt<1>("h00"), io.in) @[INToRecFN.scala 56:27] 
    node T_8 = tail(T_7, 1) @[INToRecFN.scala 56:27] 
    node absIn = mux(sign, T_8, io.in) @[INToRecFN.scala 56:20] 
    node T_9 = shl(absIn, 0) @[INToRecFN.scala 57:32] 
    node T_10 = bits(T_9, 63, 32) @[CircuitMath.scala 26:17] 
    node T_11 = bits(T_9, 31, 0) @[CircuitMath.scala 27:17] 
    node T_13 = neq(T_10, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_14 = bits(T_10, 31, 16) @[CircuitMath.scala 26:17] 
    node T_15 = bits(T_10, 15, 0) @[CircuitMath.scala 27:17] 
    node T_17 = neq(T_14, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_18 = bits(T_14, 15, 8) @[CircuitMath.scala 26:17] 
    node T_19 = bits(T_14, 7, 0) @[CircuitMath.scala 27:17] 
    node T_21 = neq(T_18, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_22 = bits(T_18, 7, 4) @[CircuitMath.scala 26:17] 
    node T_23 = bits(T_18, 3, 0) @[CircuitMath.scala 27:17] 
    node T_25 = neq(T_22, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_26 = bits(T_22, 3, 3) @[CircuitMath.scala 23:12] 
    node T_28 = bits(T_22, 2, 2) @[CircuitMath.scala 23:12] 
    node T_30 = bits(T_22, 1, 1) @[CircuitMath.scala 21:8] 
    node T_31 = shl(T_30, 0) @[CircuitMath.scala 23:10] 
    node T_32 = mux(T_28, UInt<2>("h02"), T_31) @[CircuitMath.scala 23:10] 
    node T_33 = mux(T_26, UInt<2>("h03"), T_32) @[CircuitMath.scala 23:10] 
    node T_34 = bits(T_23, 3, 3) @[CircuitMath.scala 23:12] 
    node T_36 = bits(T_23, 2, 2) @[CircuitMath.scala 23:12] 
    node T_38 = bits(T_23, 1, 1) @[CircuitMath.scala 21:8] 
    node T_39 = shl(T_38, 0) @[CircuitMath.scala 23:10] 
    node T_40 = mux(T_36, UInt<2>("h02"), T_39) @[CircuitMath.scala 23:10] 
    node T_41 = mux(T_34, UInt<2>("h03"), T_40) @[CircuitMath.scala 23:10] 
    node T_42 = mux(T_25, T_33, T_41) @[CircuitMath.scala 29:21] 
    node T_43 = cat(T_25, T_42) @[Cat.scala 20:58] 
    node T_44 = bits(T_19, 7, 4) @[CircuitMath.scala 26:17] 
    node T_45 = bits(T_19, 3, 0) @[CircuitMath.scala 27:17] 
    node T_47 = neq(T_44, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_48 = bits(T_44, 3, 3) @[CircuitMath.scala 23:12] 
    node T_50 = bits(T_44, 2, 2) @[CircuitMath.scala 23:12] 
    node T_52 = bits(T_44, 1, 1) @[CircuitMath.scala 21:8] 
    node T_53 = shl(T_52, 0) @[CircuitMath.scala 23:10] 
    node T_54 = mux(T_50, UInt<2>("h02"), T_53) @[CircuitMath.scala 23:10] 
    node T_55 = mux(T_48, UInt<2>("h03"), T_54) @[CircuitMath.scala 23:10] 
    node T_56 = bits(T_45, 3, 3) @[CircuitMath.scala 23:12] 
    node T_58 = bits(T_45, 2, 2) @[CircuitMath.scala 23:12] 
    node T_60 = bits(T_45, 1, 1) @[CircuitMath.scala 21:8] 
    node T_61 = shl(T_60, 0) @[CircuitMath.scala 23:10] 
    node T_62 = mux(T_58, UInt<2>("h02"), T_61) @[CircuitMath.scala 23:10] 
    node T_63 = mux(T_56, UInt<2>("h03"), T_62) @[CircuitMath.scala 23:10] 
    node T_64 = mux(T_47, T_55, T_63) @[CircuitMath.scala 29:21] 
    node T_65 = cat(T_47, T_64) @[Cat.scala 20:58] 
    node T_66 = mux(T_21, T_43, T_65) @[CircuitMath.scala 29:21] 
    node T_67 = cat(T_21, T_66) @[Cat.scala 20:58] 
    node T_68 = bits(T_15, 15, 8) @[CircuitMath.scala 26:17] 
    node T_69 = bits(T_15, 7, 0) @[CircuitMath.scala 27:17] 
    node T_71 = neq(T_68, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_72 = bits(T_68, 7, 4) @[CircuitMath.scala 26:17] 
    node T_73 = bits(T_68, 3, 0) @[CircuitMath.scala 27:17] 
    node T_75 = neq(T_72, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_76 = bits(T_72, 3, 3) @[CircuitMath.scala 23:12] 
    node T_78 = bits(T_72, 2, 2) @[CircuitMath.scala 23:12] 
    node T_80 = bits(T_72, 1, 1) @[CircuitMath.scala 21:8] 
    node T_81 = shl(T_80, 0) @[CircuitMath.scala 23:10] 
    node T_82 = mux(T_78, UInt<2>("h02"), T_81) @[CircuitMath.scala 23:10] 
    node T_83 = mux(T_76, UInt<2>("h03"), T_82) @[CircuitMath.scala 23:10] 
    node T_84 = bits(T_73, 3, 3) @[CircuitMath.scala 23:12] 
    node T_86 = bits(T_73, 2, 2) @[CircuitMath.scala 23:12] 
    node T_88 = bits(T_73, 1, 1) @[CircuitMath.scala 21:8] 
    node T_89 = shl(T_88, 0) @[CircuitMath.scala 23:10] 
    node T_90 = mux(T_86, UInt<2>("h02"), T_89) @[CircuitMath.scala 23:10] 
    node T_91 = mux(T_84, UInt<2>("h03"), T_90) @[CircuitMath.scala 23:10] 
    node T_92 = mux(T_75, T_83, T_91) @[CircuitMath.scala 29:21] 
    node T_93 = cat(T_75, T_92) @[Cat.scala 20:58] 
    node T_94 = bits(T_69, 7, 4) @[CircuitMath.scala 26:17] 
    node T_95 = bits(T_69, 3, 0) @[CircuitMath.scala 27:17] 
    node T_97 = neq(T_94, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_98 = bits(T_94, 3, 3) @[CircuitMath.scala 23:12] 
    node T_100 = bits(T_94, 2, 2) @[CircuitMath.scala 23:12] 
    node T_102 = bits(T_94, 1, 1) @[CircuitMath.scala 21:8] 
    node T_103 = shl(T_102, 0) @[CircuitMath.scala 23:10] 
    node T_104 = mux(T_100, UInt<2>("h02"), T_103) @[CircuitMath.scala 23:10] 
    node T_105 = mux(T_98, UInt<2>("h03"), T_104) @[CircuitMath.scala 23:10] 
    node T_106 = bits(T_95, 3, 3) @[CircuitMath.scala 23:12] 
    node T_108 = bits(T_95, 2, 2) @[CircuitMath.scala 23:12] 
    node T_110 = bits(T_95, 1, 1) @[CircuitMath.scala 21:8] 
    node T_111 = shl(T_110, 0) @[CircuitMath.scala 23:10] 
    node T_112 = mux(T_108, UInt<2>("h02"), T_111) @[CircuitMath.scala 23:10] 
    node T_113 = mux(T_106, UInt<2>("h03"), T_112) @[CircuitMath.scala 23:10] 
    node T_114 = mux(T_97, T_105, T_113) @[CircuitMath.scala 29:21] 
    node T_115 = cat(T_97, T_114) @[Cat.scala 20:58] 
    node T_116 = mux(T_71, T_93, T_115) @[CircuitMath.scala 29:21] 
    node T_117 = cat(T_71, T_116) @[Cat.scala 20:58] 
    node T_118 = mux(T_17, T_67, T_117) @[CircuitMath.scala 29:21] 
    node T_119 = cat(T_17, T_118) @[Cat.scala 20:58] 
    node T_120 = bits(T_11, 31, 16) @[CircuitMath.scala 26:17] 
    node T_121 = bits(T_11, 15, 0) @[CircuitMath.scala 27:17] 
    node T_123 = neq(T_120, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_124 = bits(T_120, 15, 8) @[CircuitMath.scala 26:17] 
    node T_125 = bits(T_120, 7, 0) @[CircuitMath.scala 27:17] 
    node T_127 = neq(T_124, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_128 = bits(T_124, 7, 4) @[CircuitMath.scala 26:17] 
    node T_129 = bits(T_124, 3, 0) @[CircuitMath.scala 27:17] 
    node T_131 = neq(T_128, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_132 = bits(T_128, 3, 3) @[CircuitMath.scala 23:12] 
    node T_134 = bits(T_128, 2, 2) @[CircuitMath.scala 23:12] 
    node T_136 = bits(T_128, 1, 1) @[CircuitMath.scala 21:8] 
    node T_137 = shl(T_136, 0) @[CircuitMath.scala 23:10] 
    node T_138 = mux(T_134, UInt<2>("h02"), T_137) @[CircuitMath.scala 23:10] 
    node T_139 = mux(T_132, UInt<2>("h03"), T_138) @[CircuitMath.scala 23:10] 
    node T_140 = bits(T_129, 3, 3) @[CircuitMath.scala 23:12] 
    node T_142 = bits(T_129, 2, 2) @[CircuitMath.scala 23:12] 
    node T_144 = bits(T_129, 1, 1) @[CircuitMath.scala 21:8] 
    node T_145 = shl(T_144, 0) @[CircuitMath.scala 23:10] 
    node T_146 = mux(T_142, UInt<2>("h02"), T_145) @[CircuitMath.scala 23:10] 
    node T_147 = mux(T_140, UInt<2>("h03"), T_146) @[CircuitMath.scala 23:10] 
    node T_148 = mux(T_131, T_139, T_147) @[CircuitMath.scala 29:21] 
    node T_149 = cat(T_131, T_148) @[Cat.scala 20:58] 
    node T_150 = bits(T_125, 7, 4) @[CircuitMath.scala 26:17] 
    node T_151 = bits(T_125, 3, 0) @[CircuitMath.scala 27:17] 
    node T_153 = neq(T_150, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_154 = bits(T_150, 3, 3) @[CircuitMath.scala 23:12] 
    node T_156 = bits(T_150, 2, 2) @[CircuitMath.scala 23:12] 
    node T_158 = bits(T_150, 1, 1) @[CircuitMath.scala 21:8] 
    node T_159 = shl(T_158, 0) @[CircuitMath.scala 23:10] 
    node T_160 = mux(T_156, UInt<2>("h02"), T_159) @[CircuitMath.scala 23:10] 
    node T_161 = mux(T_154, UInt<2>("h03"), T_160) @[CircuitMath.scala 23:10] 
    node T_162 = bits(T_151, 3, 3) @[CircuitMath.scala 23:12] 
    node T_164 = bits(T_151, 2, 2) @[CircuitMath.scala 23:12] 
    node T_166 = bits(T_151, 1, 1) @[CircuitMath.scala 21:8] 
    node T_167 = shl(T_166, 0) @[CircuitMath.scala 23:10] 
    node T_168 = mux(T_164, UInt<2>("h02"), T_167) @[CircuitMath.scala 23:10] 
    node T_169 = mux(T_162, UInt<2>("h03"), T_168) @[CircuitMath.scala 23:10] 
    node T_170 = mux(T_153, T_161, T_169) @[CircuitMath.scala 29:21] 
    node T_171 = cat(T_153, T_170) @[Cat.scala 20:58] 
    node T_172 = mux(T_127, T_149, T_171) @[CircuitMath.scala 29:21] 
    node T_173 = cat(T_127, T_172) @[Cat.scala 20:58] 
    node T_174 = bits(T_121, 15, 8) @[CircuitMath.scala 26:17] 
    node T_175 = bits(T_121, 7, 0) @[CircuitMath.scala 27:17] 
    node T_177 = neq(T_174, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_178 = bits(T_174, 7, 4) @[CircuitMath.scala 26:17] 
    node T_179 = bits(T_174, 3, 0) @[CircuitMath.scala 27:17] 
    node T_181 = neq(T_178, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_182 = bits(T_178, 3, 3) @[CircuitMath.scala 23:12] 
    node T_184 = bits(T_178, 2, 2) @[CircuitMath.scala 23:12] 
    node T_186 = bits(T_178, 1, 1) @[CircuitMath.scala 21:8] 
    node T_187 = shl(T_186, 0) @[CircuitMath.scala 23:10] 
    node T_188 = mux(T_184, UInt<2>("h02"), T_187) @[CircuitMath.scala 23:10] 
    node T_189 = mux(T_182, UInt<2>("h03"), T_188) @[CircuitMath.scala 23:10] 
    node T_190 = bits(T_179, 3, 3) @[CircuitMath.scala 23:12] 
    node T_192 = bits(T_179, 2, 2) @[CircuitMath.scala 23:12] 
    node T_194 = bits(T_179, 1, 1) @[CircuitMath.scala 21:8] 
    node T_195 = shl(T_194, 0) @[CircuitMath.scala 23:10] 
    node T_196 = mux(T_192, UInt<2>("h02"), T_195) @[CircuitMath.scala 23:10] 
    node T_197 = mux(T_190, UInt<2>("h03"), T_196) @[CircuitMath.scala 23:10] 
    node T_198 = mux(T_181, T_189, T_197) @[CircuitMath.scala 29:21] 
    node T_199 = cat(T_181, T_198) @[Cat.scala 20:58] 
    node T_200 = bits(T_175, 7, 4) @[CircuitMath.scala 26:17] 
    node T_201 = bits(T_175, 3, 0) @[CircuitMath.scala 27:17] 
    node T_203 = neq(T_200, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_204 = bits(T_200, 3, 3) @[CircuitMath.scala 23:12] 
    node T_206 = bits(T_200, 2, 2) @[CircuitMath.scala 23:12] 
    node T_208 = bits(T_200, 1, 1) @[CircuitMath.scala 21:8] 
    node T_209 = shl(T_208, 0) @[CircuitMath.scala 23:10] 
    node T_210 = mux(T_206, UInt<2>("h02"), T_209) @[CircuitMath.scala 23:10] 
    node T_211 = mux(T_204, UInt<2>("h03"), T_210) @[CircuitMath.scala 23:10] 
    node T_212 = bits(T_201, 3, 3) @[CircuitMath.scala 23:12] 
    node T_214 = bits(T_201, 2, 2) @[CircuitMath.scala 23:12] 
    node T_216 = bits(T_201, 1, 1) @[CircuitMath.scala 21:8] 
    node T_217 = shl(T_216, 0) @[CircuitMath.scala 23:10] 
    node T_218 = mux(T_214, UInt<2>("h02"), T_217) @[CircuitMath.scala 23:10] 
    node T_219 = mux(T_212, UInt<2>("h03"), T_218) @[CircuitMath.scala 23:10] 
    node T_220 = mux(T_203, T_211, T_219) @[CircuitMath.scala 29:21] 
    node T_221 = cat(T_203, T_220) @[Cat.scala 20:58] 
    node T_222 = mux(T_177, T_199, T_221) @[CircuitMath.scala 29:21] 
    node T_223 = cat(T_177, T_222) @[Cat.scala 20:58] 
    node T_224 = mux(T_123, T_173, T_223) @[CircuitMath.scala 29:21] 
    node T_225 = cat(T_123, T_224) @[Cat.scala 20:58] 
    node T_226 = mux(T_13, T_119, T_225) @[CircuitMath.scala 29:21] 
    node T_227 = cat(T_13, T_226) @[Cat.scala 20:58] 
    node normCount = not(T_227) @[INToRecFN.scala 57:21] 
    node T_228 = dshl(absIn, normCount) @[INToRecFN.scala 58:27] 
    node normAbsIn = bits(T_228, 63, 0) @[INToRecFN.scala 58:39] 
    node T_230 = bits(normAbsIn, 11, 10) @[INToRecFN.scala 63:26] 
    node T_231 = bits(normAbsIn, 9, 0) @[INToRecFN.scala 64:26] 
    node T_233 = neq(T_231, UInt<1>("h00")) @[INToRecFN.scala 64:55] 
    node roundBits = cat(T_230, T_233) @[Cat.scala 20:58] 
    node T_234 = bits(roundBits, 1, 0) @[INToRecFN.scala 72:33] 
    node roundInexact = neq(T_234, UInt<1>("h00")) @[INToRecFN.scala 72:40] 
    node T_236 = eq(io.roundingMode, UInt<2>("h00")) @[INToRecFN.scala 74:30] 
    node T_237 = bits(roundBits, 2, 1) @[INToRecFN.scala 75:22] 
    node T_238 = not(T_237) @[INToRecFN.scala 75:29] 
    node T_240 = eq(T_238, UInt<1>("h00")) @[INToRecFN.scala 75:29] 
    node T_241 = bits(roundBits, 1, 0) @[INToRecFN.scala 75:46] 
    node T_242 = not(T_241) @[INToRecFN.scala 75:53] 
    node T_244 = eq(T_242, UInt<1>("h00")) @[INToRecFN.scala 75:53] 
    node T_245 = or(T_240, T_244) @[INToRecFN.scala 75:34] 
    node T_247 = mux(T_236, T_245, UInt<1>("h00")) @[INToRecFN.scala 74:12] 
    node T_248 = eq(io.roundingMode, UInt<2>("h02")) @[INToRecFN.scala 78:30] 
    node T_249 = and(sign, roundInexact) @[INToRecFN.scala 79:18] 
    node T_251 = mux(T_248, T_249, UInt<1>("h00")) @[INToRecFN.scala 78:12] 
    node T_252 = or(T_247, T_251) @[INToRecFN.scala 77:11] 
    node T_253 = eq(io.roundingMode, UInt<2>("h03")) @[INToRecFN.scala 82:30] 
    node T_255 = eq(sign, UInt<1>("h00")) @[INToRecFN.scala 83:13] 
    node T_256 = and(T_255, roundInexact) @[INToRecFN.scala 83:20] 
    node T_258 = mux(T_253, T_256, UInt<1>("h00")) @[INToRecFN.scala 82:12] 
    node round = or(T_252, T_258) @[INToRecFN.scala 81:11] 
    node T_260 = bits(normAbsIn, 63, 11) @[INToRecFN.scala 89:34] 
    node unroundedNorm = cat(UInt<1>("h00"), T_260) @[Cat.scala 20:58] 
    node T_263 = add(unroundedNorm, UInt<1>("h01")) @[INToRecFN.scala 94:48] 
    node T_264 = tail(T_263, 1) @[INToRecFN.scala 94:48] 
    node roundedNorm = mux(round, T_264, unroundedNorm) @[INToRecFN.scala 94:26] 
    node T_265 = not(normCount) @[INToRecFN.scala 97:24] 
    node unroundedExp = cat(UInt<4>("h00"), T_265) @[Cat.scala 20:58] 
    node T_268 = cat(UInt<1>("h00"), unroundedExp) @[Cat.scala 20:58] 
    node T_269 = bits(roundedNorm, 53, 53) @[INToRecFN.scala 106:65] 
    node T_270 = add(T_268, T_269) @[INToRecFN.scala 106:52] 
    node roundedExp = tail(T_270, 1) @[INToRecFN.scala 106:52] 
    node T_271 = bits(normAbsIn, 63, 63) @[INToRecFN.scala 112:22] 
    node T_273 = bits(roundedExp, 10, 0) @[INToRecFN.scala 115:27] 
    node T_274 = mux(UInt<1>("h00"), UInt<11>("h0400"), T_273) @[INToRecFN.scala 113:16] 
    node expOut = cat(T_271, T_274) @[Cat.scala 20:58] 
    node overflow = or(UInt<1>("h00"), UInt<1>("h00")) @[INToRecFN.scala 119:39] 
    node inexact = or(roundInexact, overflow) @[INToRecFN.scala 120:32] 
    node T_275 = bits(roundedNorm, 51, 0) @[INToRecFN.scala 122:44] 
    node T_276 = cat(sign, expOut) @[Cat.scala 20:58] 
    node T_277 = cat(T_276, T_275) @[Cat.scala 20:58] 
    io.out <= T_277 @[INToRecFN.scala 122:12] 
    node T_280 = cat(UInt<1>("h00"), inexact) @[Cat.scala 20:58] 
    node T_281 = cat(UInt<2>("h00"), overflow) @[Cat.scala 20:58] 
    node T_282 = cat(T_281, T_280) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_282 @[INToRecFN.scala 123:23] 
    
  module IntToFP : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    reg T_132 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_132 <= io.in.valid
    reg T_133 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[Reg.scala 29:19] 
      T_133 <- io.in.bits @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}} @[Valid.scala 39:21] 
    in is invalid @[Valid.scala 39:21] 
    in.valid <= T_132 @[Valid.scala 40:17] 
    in.bits <- T_133 @[Valid.scala 41:16] 
    wire mux : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 296:17] 
    mux is invalid @[fpu.scala 296:17] 
    mux.exc <= UInt<1>("h00") @[fpu.scala 297:11] 
    node T_257 = bits(in.bits.in1, 63, 63) @[recFNFromFN.scala 47:22] 
    node T_258 = bits(in.bits.in1, 62, 52) @[recFNFromFN.scala 48:23] 
    node T_259 = bits(in.bits.in1, 51, 0) @[recFNFromFN.scala 49:25] 
    node T_261 = eq(T_258, UInt<1>("h00")) @[recFNFromFN.scala 51:34] 
    node T_263 = eq(T_259, UInt<1>("h00")) @[recFNFromFN.scala 52:38] 
    node T_264 = and(T_261, T_263) @[recFNFromFN.scala 53:34] 
    node T_265 = shl(T_259, 12) @[recFNFromFN.scala 56:26] 
    node T_266 = bits(T_265, 63, 32) @[CircuitMath.scala 26:17] 
    node T_267 = bits(T_265, 31, 0) @[CircuitMath.scala 27:17] 
    node T_269 = neq(T_266, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_270 = bits(T_266, 31, 16) @[CircuitMath.scala 26:17] 
    node T_271 = bits(T_266, 15, 0) @[CircuitMath.scala 27:17] 
    node T_273 = neq(T_270, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_274 = bits(T_270, 15, 8) @[CircuitMath.scala 26:17] 
    node T_275 = bits(T_270, 7, 0) @[CircuitMath.scala 27:17] 
    node T_277 = neq(T_274, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_278 = bits(T_274, 7, 4) @[CircuitMath.scala 26:17] 
    node T_279 = bits(T_274, 3, 0) @[CircuitMath.scala 27:17] 
    node T_281 = neq(T_278, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_282 = bits(T_278, 3, 3) @[CircuitMath.scala 23:12] 
    node T_284 = bits(T_278, 2, 2) @[CircuitMath.scala 23:12] 
    node T_286 = bits(T_278, 1, 1) @[CircuitMath.scala 21:8] 
    node T_287 = shl(T_286, 0) @[CircuitMath.scala 23:10] 
    node T_288 = mux(T_284, UInt<2>("h02"), T_287) @[CircuitMath.scala 23:10] 
    node T_289 = mux(T_282, UInt<2>("h03"), T_288) @[CircuitMath.scala 23:10] 
    node T_290 = bits(T_279, 3, 3) @[CircuitMath.scala 23:12] 
    node T_292 = bits(T_279, 2, 2) @[CircuitMath.scala 23:12] 
    node T_294 = bits(T_279, 1, 1) @[CircuitMath.scala 21:8] 
    node T_295 = shl(T_294, 0) @[CircuitMath.scala 23:10] 
    node T_296 = mux(T_292, UInt<2>("h02"), T_295) @[CircuitMath.scala 23:10] 
    node T_297 = mux(T_290, UInt<2>("h03"), T_296) @[CircuitMath.scala 23:10] 
    node T_298 = mux(T_281, T_289, T_297) @[CircuitMath.scala 29:21] 
    node T_299 = cat(T_281, T_298) @[Cat.scala 20:58] 
    node T_300 = bits(T_275, 7, 4) @[CircuitMath.scala 26:17] 
    node T_301 = bits(T_275, 3, 0) @[CircuitMath.scala 27:17] 
    node T_303 = neq(T_300, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_304 = bits(T_300, 3, 3) @[CircuitMath.scala 23:12] 
    node T_306 = bits(T_300, 2, 2) @[CircuitMath.scala 23:12] 
    node T_308 = bits(T_300, 1, 1) @[CircuitMath.scala 21:8] 
    node T_309 = shl(T_308, 0) @[CircuitMath.scala 23:10] 
    node T_310 = mux(T_306, UInt<2>("h02"), T_309) @[CircuitMath.scala 23:10] 
    node T_311 = mux(T_304, UInt<2>("h03"), T_310) @[CircuitMath.scala 23:10] 
    node T_312 = bits(T_301, 3, 3) @[CircuitMath.scala 23:12] 
    node T_314 = bits(T_301, 2, 2) @[CircuitMath.scala 23:12] 
    node T_316 = bits(T_301, 1, 1) @[CircuitMath.scala 21:8] 
    node T_317 = shl(T_316, 0) @[CircuitMath.scala 23:10] 
    node T_318 = mux(T_314, UInt<2>("h02"), T_317) @[CircuitMath.scala 23:10] 
    node T_319 = mux(T_312, UInt<2>("h03"), T_318) @[CircuitMath.scala 23:10] 
    node T_320 = mux(T_303, T_311, T_319) @[CircuitMath.scala 29:21] 
    node T_321 = cat(T_303, T_320) @[Cat.scala 20:58] 
    node T_322 = mux(T_277, T_299, T_321) @[CircuitMath.scala 29:21] 
    node T_323 = cat(T_277, T_322) @[Cat.scala 20:58] 
    node T_324 = bits(T_271, 15, 8) @[CircuitMath.scala 26:17] 
    node T_325 = bits(T_271, 7, 0) @[CircuitMath.scala 27:17] 
    node T_327 = neq(T_324, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_328 = bits(T_324, 7, 4) @[CircuitMath.scala 26:17] 
    node T_329 = bits(T_324, 3, 0) @[CircuitMath.scala 27:17] 
    node T_331 = neq(T_328, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_332 = bits(T_328, 3, 3) @[CircuitMath.scala 23:12] 
    node T_334 = bits(T_328, 2, 2) @[CircuitMath.scala 23:12] 
    node T_336 = bits(T_328, 1, 1) @[CircuitMath.scala 21:8] 
    node T_337 = shl(T_336, 0) @[CircuitMath.scala 23:10] 
    node T_338 = mux(T_334, UInt<2>("h02"), T_337) @[CircuitMath.scala 23:10] 
    node T_339 = mux(T_332, UInt<2>("h03"), T_338) @[CircuitMath.scala 23:10] 
    node T_340 = bits(T_329, 3, 3) @[CircuitMath.scala 23:12] 
    node T_342 = bits(T_329, 2, 2) @[CircuitMath.scala 23:12] 
    node T_344 = bits(T_329, 1, 1) @[CircuitMath.scala 21:8] 
    node T_345 = shl(T_344, 0) @[CircuitMath.scala 23:10] 
    node T_346 = mux(T_342, UInt<2>("h02"), T_345) @[CircuitMath.scala 23:10] 
    node T_347 = mux(T_340, UInt<2>("h03"), T_346) @[CircuitMath.scala 23:10] 
    node T_348 = mux(T_331, T_339, T_347) @[CircuitMath.scala 29:21] 
    node T_349 = cat(T_331, T_348) @[Cat.scala 20:58] 
    node T_350 = bits(T_325, 7, 4) @[CircuitMath.scala 26:17] 
    node T_351 = bits(T_325, 3, 0) @[CircuitMath.scala 27:17] 
    node T_353 = neq(T_350, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_354 = bits(T_350, 3, 3) @[CircuitMath.scala 23:12] 
    node T_356 = bits(T_350, 2, 2) @[CircuitMath.scala 23:12] 
    node T_358 = bits(T_350, 1, 1) @[CircuitMath.scala 21:8] 
    node T_359 = shl(T_358, 0) @[CircuitMath.scala 23:10] 
    node T_360 = mux(T_356, UInt<2>("h02"), T_359) @[CircuitMath.scala 23:10] 
    node T_361 = mux(T_354, UInt<2>("h03"), T_360) @[CircuitMath.scala 23:10] 
    node T_362 = bits(T_351, 3, 3) @[CircuitMath.scala 23:12] 
    node T_364 = bits(T_351, 2, 2) @[CircuitMath.scala 23:12] 
    node T_366 = bits(T_351, 1, 1) @[CircuitMath.scala 21:8] 
    node T_367 = shl(T_366, 0) @[CircuitMath.scala 23:10] 
    node T_368 = mux(T_364, UInt<2>("h02"), T_367) @[CircuitMath.scala 23:10] 
    node T_369 = mux(T_362, UInt<2>("h03"), T_368) @[CircuitMath.scala 23:10] 
    node T_370 = mux(T_353, T_361, T_369) @[CircuitMath.scala 29:21] 
    node T_371 = cat(T_353, T_370) @[Cat.scala 20:58] 
    node T_372 = mux(T_327, T_349, T_371) @[CircuitMath.scala 29:21] 
    node T_373 = cat(T_327, T_372) @[Cat.scala 20:58] 
    node T_374 = mux(T_273, T_323, T_373) @[CircuitMath.scala 29:21] 
    node T_375 = cat(T_273, T_374) @[Cat.scala 20:58] 
    node T_376 = bits(T_267, 31, 16) @[CircuitMath.scala 26:17] 
    node T_377 = bits(T_267, 15, 0) @[CircuitMath.scala 27:17] 
    node T_379 = neq(T_376, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_380 = bits(T_376, 15, 8) @[CircuitMath.scala 26:17] 
    node T_381 = bits(T_376, 7, 0) @[CircuitMath.scala 27:17] 
    node T_383 = neq(T_380, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_384 = bits(T_380, 7, 4) @[CircuitMath.scala 26:17] 
    node T_385 = bits(T_380, 3, 0) @[CircuitMath.scala 27:17] 
    node T_387 = neq(T_384, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_388 = bits(T_384, 3, 3) @[CircuitMath.scala 23:12] 
    node T_390 = bits(T_384, 2, 2) @[CircuitMath.scala 23:12] 
    node T_392 = bits(T_384, 1, 1) @[CircuitMath.scala 21:8] 
    node T_393 = shl(T_392, 0) @[CircuitMath.scala 23:10] 
    node T_394 = mux(T_390, UInt<2>("h02"), T_393) @[CircuitMath.scala 23:10] 
    node T_395 = mux(T_388, UInt<2>("h03"), T_394) @[CircuitMath.scala 23:10] 
    node T_396 = bits(T_385, 3, 3) @[CircuitMath.scala 23:12] 
    node T_398 = bits(T_385, 2, 2) @[CircuitMath.scala 23:12] 
    node T_400 = bits(T_385, 1, 1) @[CircuitMath.scala 21:8] 
    node T_401 = shl(T_400, 0) @[CircuitMath.scala 23:10] 
    node T_402 = mux(T_398, UInt<2>("h02"), T_401) @[CircuitMath.scala 23:10] 
    node T_403 = mux(T_396, UInt<2>("h03"), T_402) @[CircuitMath.scala 23:10] 
    node T_404 = mux(T_387, T_395, T_403) @[CircuitMath.scala 29:21] 
    node T_405 = cat(T_387, T_404) @[Cat.scala 20:58] 
    node T_406 = bits(T_381, 7, 4) @[CircuitMath.scala 26:17] 
    node T_407 = bits(T_381, 3, 0) @[CircuitMath.scala 27:17] 
    node T_409 = neq(T_406, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_410 = bits(T_406, 3, 3) @[CircuitMath.scala 23:12] 
    node T_412 = bits(T_406, 2, 2) @[CircuitMath.scala 23:12] 
    node T_414 = bits(T_406, 1, 1) @[CircuitMath.scala 21:8] 
    node T_415 = shl(T_414, 0) @[CircuitMath.scala 23:10] 
    node T_416 = mux(T_412, UInt<2>("h02"), T_415) @[CircuitMath.scala 23:10] 
    node T_417 = mux(T_410, UInt<2>("h03"), T_416) @[CircuitMath.scala 23:10] 
    node T_418 = bits(T_407, 3, 3) @[CircuitMath.scala 23:12] 
    node T_420 = bits(T_407, 2, 2) @[CircuitMath.scala 23:12] 
    node T_422 = bits(T_407, 1, 1) @[CircuitMath.scala 21:8] 
    node T_423 = shl(T_422, 0) @[CircuitMath.scala 23:10] 
    node T_424 = mux(T_420, UInt<2>("h02"), T_423) @[CircuitMath.scala 23:10] 
    node T_425 = mux(T_418, UInt<2>("h03"), T_424) @[CircuitMath.scala 23:10] 
    node T_426 = mux(T_409, T_417, T_425) @[CircuitMath.scala 29:21] 
    node T_427 = cat(T_409, T_426) @[Cat.scala 20:58] 
    node T_428 = mux(T_383, T_405, T_427) @[CircuitMath.scala 29:21] 
    node T_429 = cat(T_383, T_428) @[Cat.scala 20:58] 
    node T_430 = bits(T_377, 15, 8) @[CircuitMath.scala 26:17] 
    node T_431 = bits(T_377, 7, 0) @[CircuitMath.scala 27:17] 
    node T_433 = neq(T_430, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_434 = bits(T_430, 7, 4) @[CircuitMath.scala 26:17] 
    node T_435 = bits(T_430, 3, 0) @[CircuitMath.scala 27:17] 
    node T_437 = neq(T_434, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_438 = bits(T_434, 3, 3) @[CircuitMath.scala 23:12] 
    node T_440 = bits(T_434, 2, 2) @[CircuitMath.scala 23:12] 
    node T_442 = bits(T_434, 1, 1) @[CircuitMath.scala 21:8] 
    node T_443 = shl(T_442, 0) @[CircuitMath.scala 23:10] 
    node T_444 = mux(T_440, UInt<2>("h02"), T_443) @[CircuitMath.scala 23:10] 
    node T_445 = mux(T_438, UInt<2>("h03"), T_444) @[CircuitMath.scala 23:10] 
    node T_446 = bits(T_435, 3, 3) @[CircuitMath.scala 23:12] 
    node T_448 = bits(T_435, 2, 2) @[CircuitMath.scala 23:12] 
    node T_450 = bits(T_435, 1, 1) @[CircuitMath.scala 21:8] 
    node T_451 = shl(T_450, 0) @[CircuitMath.scala 23:10] 
    node T_452 = mux(T_448, UInt<2>("h02"), T_451) @[CircuitMath.scala 23:10] 
    node T_453 = mux(T_446, UInt<2>("h03"), T_452) @[CircuitMath.scala 23:10] 
    node T_454 = mux(T_437, T_445, T_453) @[CircuitMath.scala 29:21] 
    node T_455 = cat(T_437, T_454) @[Cat.scala 20:58] 
    node T_456 = bits(T_431, 7, 4) @[CircuitMath.scala 26:17] 
    node T_457 = bits(T_431, 3, 0) @[CircuitMath.scala 27:17] 
    node T_459 = neq(T_456, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_460 = bits(T_456, 3, 3) @[CircuitMath.scala 23:12] 
    node T_462 = bits(T_456, 2, 2) @[CircuitMath.scala 23:12] 
    node T_464 = bits(T_456, 1, 1) @[CircuitMath.scala 21:8] 
    node T_465 = shl(T_464, 0) @[CircuitMath.scala 23:10] 
    node T_466 = mux(T_462, UInt<2>("h02"), T_465) @[CircuitMath.scala 23:10] 
    node T_467 = mux(T_460, UInt<2>("h03"), T_466) @[CircuitMath.scala 23:10] 
    node T_468 = bits(T_457, 3, 3) @[CircuitMath.scala 23:12] 
    node T_470 = bits(T_457, 2, 2) @[CircuitMath.scala 23:12] 
    node T_472 = bits(T_457, 1, 1) @[CircuitMath.scala 21:8] 
    node T_473 = shl(T_472, 0) @[CircuitMath.scala 23:10] 
    node T_474 = mux(T_470, UInt<2>("h02"), T_473) @[CircuitMath.scala 23:10] 
    node T_475 = mux(T_468, UInt<2>("h03"), T_474) @[CircuitMath.scala 23:10] 
    node T_476 = mux(T_459, T_467, T_475) @[CircuitMath.scala 29:21] 
    node T_477 = cat(T_459, T_476) @[Cat.scala 20:58] 
    node T_478 = mux(T_433, T_455, T_477) @[CircuitMath.scala 29:21] 
    node T_479 = cat(T_433, T_478) @[Cat.scala 20:58] 
    node T_480 = mux(T_379, T_429, T_479) @[CircuitMath.scala 29:21] 
    node T_481 = cat(T_379, T_480) @[Cat.scala 20:58] 
    node T_482 = mux(T_269, T_375, T_481) @[CircuitMath.scala 29:21] 
    node T_483 = cat(T_269, T_482) @[Cat.scala 20:58] 
    node T_484 = not(T_483) @[recFNFromFN.scala 56:13] 
    node T_485 = dshl(T_259, T_484) @[recFNFromFN.scala 58:25] 
    node T_486 = bits(T_485, 50, 0) @[recFNFromFN.scala 58:37] 
    node T_488 = cat(T_486, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_493 = mux(UInt<1>("h01"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 33:12] 
    node T_494 = xor(T_484, T_493) @[recFNFromFN.scala 62:27] 
    node T_495 = mux(T_261, T_494, T_258) @[recFNFromFN.scala 61:16] 
    node T_499 = mux(T_261, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47] 
    node T_500 = or(UInt<11>("h0400"), T_499) @[recFNFromFN.scala 64:42] 
    node T_501 = add(T_495, T_500) @[recFNFromFN.scala 64:15] 
    node T_502 = tail(T_501, 1) @[recFNFromFN.scala 64:15] 
    node T_503 = bits(T_502, 11, 10) @[recFNFromFN.scala 67:25] 
    node T_505 = eq(T_503, UInt<2>("h03")) @[recFNFromFN.scala 67:50] 
    node T_507 = eq(T_263, UInt<1>("h00")) @[recFNFromFN.scala 68:17] 
    node T_508 = and(T_505, T_507) @[recFNFromFN.scala 67:63] 
    node T_509 = bits(T_264, 0, 0) @[Bitwise.scala 33:15] 
    node T_512 = mux(T_509, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_513 = shl(T_512, 9) @[recFNFromFN.scala 71:45] 
    node T_514 = not(T_513) @[recFNFromFN.scala 71:28] 
    node T_515 = and(T_502, T_514) @[recFNFromFN.scala 71:26] 
    node T_516 = shl(T_508, 9) @[recFNFromFN.scala 72:22] 
    node T_517 = or(T_515, T_516) @[recFNFromFN.scala 71:64] 
    node T_518 = mux(T_261, T_488, T_259) @[recFNFromFN.scala 73:27] 
    node T_519 = cat(T_257, T_517) @[Cat.scala 20:58] 
    node T_520 = cat(T_519, T_518) @[Cat.scala 20:58] 
    mux.data <= T_520 @[fpu.scala 298:12] 
    when in.bits.single : @[fpu.scala 299:25] 
      node T_522 = bits(in.bits.in1, 31, 31) @[recFNFromFN.scala 47:22] 
      node T_523 = bits(in.bits.in1, 30, 23) @[recFNFromFN.scala 48:23] 
      node T_524 = bits(in.bits.in1, 22, 0) @[recFNFromFN.scala 49:25] 
      node T_526 = eq(T_523, UInt<1>("h00")) @[recFNFromFN.scala 51:34] 
      node T_528 = eq(T_524, UInt<1>("h00")) @[recFNFromFN.scala 52:38] 
      node T_529 = and(T_526, T_528) @[recFNFromFN.scala 53:34] 
      node T_530 = shl(T_524, 9) @[recFNFromFN.scala 56:26] 
      node T_531 = bits(T_530, 31, 16) @[CircuitMath.scala 26:17] 
      node T_532 = bits(T_530, 15, 0) @[CircuitMath.scala 27:17] 
      node T_534 = neq(T_531, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_535 = bits(T_531, 15, 8) @[CircuitMath.scala 26:17] 
      node T_536 = bits(T_531, 7, 0) @[CircuitMath.scala 27:17] 
      node T_538 = neq(T_535, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_539 = bits(T_535, 7, 4) @[CircuitMath.scala 26:17] 
      node T_540 = bits(T_535, 3, 0) @[CircuitMath.scala 27:17] 
      node T_542 = neq(T_539, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_543 = bits(T_539, 3, 3) @[CircuitMath.scala 23:12] 
      node T_545 = bits(T_539, 2, 2) @[CircuitMath.scala 23:12] 
      node T_547 = bits(T_539, 1, 1) @[CircuitMath.scala 21:8] 
      node T_548 = shl(T_547, 0) @[CircuitMath.scala 23:10] 
      node T_549 = mux(T_545, UInt<2>("h02"), T_548) @[CircuitMath.scala 23:10] 
      node T_550 = mux(T_543, UInt<2>("h03"), T_549) @[CircuitMath.scala 23:10] 
      node T_551 = bits(T_540, 3, 3) @[CircuitMath.scala 23:12] 
      node T_553 = bits(T_540, 2, 2) @[CircuitMath.scala 23:12] 
      node T_555 = bits(T_540, 1, 1) @[CircuitMath.scala 21:8] 
      node T_556 = shl(T_555, 0) @[CircuitMath.scala 23:10] 
      node T_557 = mux(T_553, UInt<2>("h02"), T_556) @[CircuitMath.scala 23:10] 
      node T_558 = mux(T_551, UInt<2>("h03"), T_557) @[CircuitMath.scala 23:10] 
      node T_559 = mux(T_542, T_550, T_558) @[CircuitMath.scala 29:21] 
      node T_560 = cat(T_542, T_559) @[Cat.scala 20:58] 
      node T_561 = bits(T_536, 7, 4) @[CircuitMath.scala 26:17] 
      node T_562 = bits(T_536, 3, 0) @[CircuitMath.scala 27:17] 
      node T_564 = neq(T_561, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_565 = bits(T_561, 3, 3) @[CircuitMath.scala 23:12] 
      node T_567 = bits(T_561, 2, 2) @[CircuitMath.scala 23:12] 
      node T_569 = bits(T_561, 1, 1) @[CircuitMath.scala 21:8] 
      node T_570 = shl(T_569, 0) @[CircuitMath.scala 23:10] 
      node T_571 = mux(T_567, UInt<2>("h02"), T_570) @[CircuitMath.scala 23:10] 
      node T_572 = mux(T_565, UInt<2>("h03"), T_571) @[CircuitMath.scala 23:10] 
      node T_573 = bits(T_562, 3, 3) @[CircuitMath.scala 23:12] 
      node T_575 = bits(T_562, 2, 2) @[CircuitMath.scala 23:12] 
      node T_577 = bits(T_562, 1, 1) @[CircuitMath.scala 21:8] 
      node T_578 = shl(T_577, 0) @[CircuitMath.scala 23:10] 
      node T_579 = mux(T_575, UInt<2>("h02"), T_578) @[CircuitMath.scala 23:10] 
      node T_580 = mux(T_573, UInt<2>("h03"), T_579) @[CircuitMath.scala 23:10] 
      node T_581 = mux(T_564, T_572, T_580) @[CircuitMath.scala 29:21] 
      node T_582 = cat(T_564, T_581) @[Cat.scala 20:58] 
      node T_583 = mux(T_538, T_560, T_582) @[CircuitMath.scala 29:21] 
      node T_584 = cat(T_538, T_583) @[Cat.scala 20:58] 
      node T_585 = bits(T_532, 15, 8) @[CircuitMath.scala 26:17] 
      node T_586 = bits(T_532, 7, 0) @[CircuitMath.scala 27:17] 
      node T_588 = neq(T_585, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_589 = bits(T_585, 7, 4) @[CircuitMath.scala 26:17] 
      node T_590 = bits(T_585, 3, 0) @[CircuitMath.scala 27:17] 
      node T_592 = neq(T_589, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_593 = bits(T_589, 3, 3) @[CircuitMath.scala 23:12] 
      node T_595 = bits(T_589, 2, 2) @[CircuitMath.scala 23:12] 
      node T_597 = bits(T_589, 1, 1) @[CircuitMath.scala 21:8] 
      node T_598 = shl(T_597, 0) @[CircuitMath.scala 23:10] 
      node T_599 = mux(T_595, UInt<2>("h02"), T_598) @[CircuitMath.scala 23:10] 
      node T_600 = mux(T_593, UInt<2>("h03"), T_599) @[CircuitMath.scala 23:10] 
      node T_601 = bits(T_590, 3, 3) @[CircuitMath.scala 23:12] 
      node T_603 = bits(T_590, 2, 2) @[CircuitMath.scala 23:12] 
      node T_605 = bits(T_590, 1, 1) @[CircuitMath.scala 21:8] 
      node T_606 = shl(T_605, 0) @[CircuitMath.scala 23:10] 
      node T_607 = mux(T_603, UInt<2>("h02"), T_606) @[CircuitMath.scala 23:10] 
      node T_608 = mux(T_601, UInt<2>("h03"), T_607) @[CircuitMath.scala 23:10] 
      node T_609 = mux(T_592, T_600, T_608) @[CircuitMath.scala 29:21] 
      node T_610 = cat(T_592, T_609) @[Cat.scala 20:58] 
      node T_611 = bits(T_586, 7, 4) @[CircuitMath.scala 26:17] 
      node T_612 = bits(T_586, 3, 0) @[CircuitMath.scala 27:17] 
      node T_614 = neq(T_611, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
      node T_615 = bits(T_611, 3, 3) @[CircuitMath.scala 23:12] 
      node T_617 = bits(T_611, 2, 2) @[CircuitMath.scala 23:12] 
      node T_619 = bits(T_611, 1, 1) @[CircuitMath.scala 21:8] 
      node T_620 = shl(T_619, 0) @[CircuitMath.scala 23:10] 
      node T_621 = mux(T_617, UInt<2>("h02"), T_620) @[CircuitMath.scala 23:10] 
      node T_622 = mux(T_615, UInt<2>("h03"), T_621) @[CircuitMath.scala 23:10] 
      node T_623 = bits(T_612, 3, 3) @[CircuitMath.scala 23:12] 
      node T_625 = bits(T_612, 2, 2) @[CircuitMath.scala 23:12] 
      node T_627 = bits(T_612, 1, 1) @[CircuitMath.scala 21:8] 
      node T_628 = shl(T_627, 0) @[CircuitMath.scala 23:10] 
      node T_629 = mux(T_625, UInt<2>("h02"), T_628) @[CircuitMath.scala 23:10] 
      node T_630 = mux(T_623, UInt<2>("h03"), T_629) @[CircuitMath.scala 23:10] 
      node T_631 = mux(T_614, T_622, T_630) @[CircuitMath.scala 29:21] 
      node T_632 = cat(T_614, T_631) @[Cat.scala 20:58] 
      node T_633 = mux(T_588, T_610, T_632) @[CircuitMath.scala 29:21] 
      node T_634 = cat(T_588, T_633) @[Cat.scala 20:58] 
      node T_635 = mux(T_534, T_584, T_634) @[CircuitMath.scala 29:21] 
      node T_636 = cat(T_534, T_635) @[Cat.scala 20:58] 
      node T_637 = not(T_636) @[recFNFromFN.scala 56:13] 
      node T_638 = dshl(T_524, T_637) @[recFNFromFN.scala 58:25] 
      node T_639 = bits(T_638, 21, 0) @[recFNFromFN.scala 58:37] 
      node T_641 = cat(T_639, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_646 = mux(UInt<1>("h01"), UInt<9>("h01ff"), UInt<9>("h00")) @[Bitwise.scala 33:12] 
      node T_647 = xor(T_637, T_646) @[recFNFromFN.scala 62:27] 
      node T_648 = mux(T_526, T_647, T_523) @[recFNFromFN.scala 61:16] 
      node T_652 = mux(T_526, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47] 
      node T_653 = or(UInt<8>("h080"), T_652) @[recFNFromFN.scala 64:42] 
      node T_654 = add(T_648, T_653) @[recFNFromFN.scala 64:15] 
      node T_655 = tail(T_654, 1) @[recFNFromFN.scala 64:15] 
      node T_656 = bits(T_655, 8, 7) @[recFNFromFN.scala 67:25] 
      node T_658 = eq(T_656, UInt<2>("h03")) @[recFNFromFN.scala 67:50] 
      node T_660 = eq(T_528, UInt<1>("h00")) @[recFNFromFN.scala 68:17] 
      node T_661 = and(T_658, T_660) @[recFNFromFN.scala 67:63] 
      node T_662 = bits(T_529, 0, 0) @[Bitwise.scala 33:15] 
      node T_665 = mux(T_662, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
      node T_666 = shl(T_665, 6) @[recFNFromFN.scala 71:45] 
      node T_667 = not(T_666) @[recFNFromFN.scala 71:28] 
      node T_668 = and(T_655, T_667) @[recFNFromFN.scala 71:26] 
      node T_669 = shl(T_661, 6) @[recFNFromFN.scala 72:22] 
      node T_670 = or(T_668, T_669) @[recFNFromFN.scala 71:64] 
      node T_671 = mux(T_526, T_641, T_524) @[recFNFromFN.scala 73:27] 
      node T_672 = cat(T_522, T_670) @[Cat.scala 20:58] 
      node T_673 = cat(T_672, T_671) @[Cat.scala 20:58] 
      node T_674 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
      node T_675 = cat(T_674, T_673) @[Cat.scala 20:58] 
      mux.data <= T_675 @[fpu.scala 300:14] 
      skip @[fpu.scala 299:25] 
    node T_676 = bits(in.bits.typ, 1, 1) @[fpu.scala 304:20] 
    node T_677 = asSInt(in.bits.in1) @[fpu.scala 304:37] 
    node T_678 = bits(in.bits.typ, 0, 0) @[fpu.scala 305:20] 
    node T_679 = bits(in.bits.in1, 31, 0) @[fpu.scala 305:36] 
    node T_680 = cvt(T_679) @[fpu.scala 305:43] 
    node T_681 = bits(in.bits.in1, 31, 0) @[fpu.scala 305:60] 
    node T_682 = asSInt(T_681) @[fpu.scala 305:67] 
    node T_683 = mux(T_678, T_680, T_682) @[fpu.scala 305:8] 
    node longValue = mux(T_676, T_677, T_683) @[fpu.scala 304:8] 
    inst l2s of INToRecFN @[fpu.scala 306:19] 
    l2s.io is invalid
    l2s.clk <= clk
    l2s.reset <= reset
    node T_684 = bits(in.bits.typ, 0, 0) @[fpu.scala 307:34] 
    node T_685 = not(T_684) @[fpu.scala 307:22] 
    l2s.io.signedIn <= T_685 @[fpu.scala 307:19] 
    node T_686 = asUInt(longValue) @[fpu.scala 308:26] 
    l2s.io.in <= T_686 @[fpu.scala 308:13] 
    l2s.io.roundingMode <= in.bits.rm @[fpu.scala 309:23] 
    inst l2d of INToRecFN_1 @[fpu.scala 311:19] 
    l2d.io is invalid
    l2d.clk <= clk
    l2d.reset <= reset
    node T_687 = bits(in.bits.typ, 0, 0) @[fpu.scala 312:34] 
    node T_688 = not(T_687) @[fpu.scala 312:22] 
    l2d.io.signedIn <= T_688 @[fpu.scala 312:19] 
    node T_689 = asUInt(longValue) @[fpu.scala 313:26] 
    l2d.io.in <= T_689 @[fpu.scala 313:13] 
    l2d.io.roundingMode <= in.bits.rm @[fpu.scala 314:23] 
    node T_692 = and(in.bits.cmd, UInt<3>("h04")) @[fpu.scala 316:21] 
    node T_693 = eq(UInt<5>("h00"), T_692) @[fpu.scala 316:21] 
    when T_693 : @[fpu.scala 316:38] 
      when in.bits.single : @[fpu.scala 317:27] 
        node T_695 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
        node T_696 = cat(T_695, l2s.io.out) @[Cat.scala 20:58] 
        mux.data <= T_696 @[fpu.scala 318:16] 
        mux.exc <= l2s.io.exceptionFlags @[fpu.scala 319:15] 
        skip @[fpu.scala 317:27] 
      node T_698 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 317:27] 
      when T_698 : @[fpu.scala 320:17] 
        mux.data <= l2d.io.out @[fpu.scala 321:16] 
        mux.exc <= l2d.io.exceptionFlags @[fpu.scala 322:15] 
        skip @[fpu.scala 320:17] 
      skip @[fpu.scala 316:38] 
    reg T_701 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_701 <= in.valid
    reg T_702 : {data : UInt<65>, exc : UInt<5>}, clk
    when in.valid : @[Reg.scala 29:19] 
      T_702 <- mux @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg T_707 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_707 <= T_701
    reg T_708 : {data : UInt<65>, exc : UInt<5>}, clk
    when T_701 : @[Reg.scala 29:19] 
      T_708 <- T_702 @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire T_719 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21] 
    T_719 is invalid @[Valid.scala 39:21] 
    T_719.valid <= T_707 @[Valid.scala 40:17] 
    T_719.bits <- T_708 @[Valid.scala 41:16] 
    io.out <- T_719 @[fpu.scala 326:10] 
    
  module RoundRawFNToRecFN : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node roundingMode_nearest_even = eq(io.roundingMode, UInt<2>("h00")) @[RoundRawFNToRecFN.scala 88:54] 
    node roundingMode_minMag = eq(io.roundingMode, UInt<2>("h01")) @[RoundRawFNToRecFN.scala 89:54] 
    node roundingMode_min = eq(io.roundingMode, UInt<2>("h02")) @[RoundRawFNToRecFN.scala 90:54] 
    node roundingMode_max = eq(io.roundingMode, UInt<2>("h03")) @[RoundRawFNToRecFN.scala 91:54] 
    node T_19 = and(roundingMode_min, io.in.sign) @[RoundRawFNToRecFN.scala 94:27] 
    node T_21 = eq(io.in.sign, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 94:66] 
    node T_22 = and(roundingMode_max, T_21) @[RoundRawFNToRecFN.scala 94:63] 
    node roundMagUp = or(T_19, T_22) @[RoundRawFNToRecFN.scala 94:42] 
    node doShiftSigDown1 = bits(io.in.sig, 26, 26) @[RoundRawFNToRecFN.scala 98:36] 
    node isNegExp = lt(io.in.sExp, asSInt(UInt<1>("h00"))) @[RoundRawFNToRecFN.scala 99:32] 
    node T_24 = bits(isNegExp, 0, 0) @[Bitwise.scala 33:15] 
    node T_27 = mux(T_24, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 33:12] 
    node T_28 = bits(io.in.sExp, 8, 0) @[RoundRawFNToRecFN.scala 103:31] 
    node T_29 = not(T_28) @[primitives.scala 50:21] 
    node T_30 = bits(T_29, 8, 8) @[primitives.scala 56:25] 
    node T_31 = bits(T_29, 7, 0) @[primitives.scala 57:26] 
    node T_32 = bits(T_31, 7, 7) @[primitives.scala 56:25] 
    node T_33 = bits(T_31, 6, 0) @[primitives.scala 57:26] 
    node T_34 = bits(T_33, 6, 6) @[primitives.scala 56:25] 
    node T_35 = bits(T_33, 5, 0) @[primitives.scala 57:26] 
    node T_38 = dshr(asSInt(UInt<65>("h010000000000000000")), T_35) @[primitives.scala 68:52] 
    node T_39 = bits(T_38, 63, 42) @[primitives.scala 69:26] 
    node T_40 = bits(T_39, 15, 0) @[Bitwise.scala 65:18] 
    node T_43 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_44 = xor(UInt<16>("h0ffff"), T_43) @[Bitwise.scala 58:21] 
    node T_45 = shr(T_40, 8) @[Bitwise.scala 59:21] 
    node T_46 = and(T_45, T_44) @[Bitwise.scala 59:31] 
    node T_47 = bits(T_40, 7, 0) @[Bitwise.scala 59:46] 
    node T_48 = shl(T_47, 8) @[Bitwise.scala 59:65] 
    node T_49 = not(T_44) @[Bitwise.scala 59:77] 
    node T_50 = and(T_48, T_49) @[Bitwise.scala 59:75] 
    node T_51 = or(T_46, T_50) @[Bitwise.scala 59:39] 
    node T_52 = bits(T_44, 11, 0) @[Bitwise.scala 58:28] 
    node T_53 = shl(T_52, 4) @[Bitwise.scala 58:47] 
    node T_54 = xor(T_44, T_53) @[Bitwise.scala 58:21] 
    node T_55 = shr(T_51, 4) @[Bitwise.scala 59:21] 
    node T_56 = and(T_55, T_54) @[Bitwise.scala 59:31] 
    node T_57 = bits(T_51, 11, 0) @[Bitwise.scala 59:46] 
    node T_58 = shl(T_57, 4) @[Bitwise.scala 59:65] 
    node T_59 = not(T_54) @[Bitwise.scala 59:77] 
    node T_60 = and(T_58, T_59) @[Bitwise.scala 59:75] 
    node T_61 = or(T_56, T_60) @[Bitwise.scala 59:39] 
    node T_62 = bits(T_54, 13, 0) @[Bitwise.scala 58:28] 
    node T_63 = shl(T_62, 2) @[Bitwise.scala 58:47] 
    node T_64 = xor(T_54, T_63) @[Bitwise.scala 58:21] 
    node T_65 = shr(T_61, 2) @[Bitwise.scala 59:21] 
    node T_66 = and(T_65, T_64) @[Bitwise.scala 59:31] 
    node T_67 = bits(T_61, 13, 0) @[Bitwise.scala 59:46] 
    node T_68 = shl(T_67, 2) @[Bitwise.scala 59:65] 
    node T_69 = not(T_64) @[Bitwise.scala 59:77] 
    node T_70 = and(T_68, T_69) @[Bitwise.scala 59:75] 
    node T_71 = or(T_66, T_70) @[Bitwise.scala 59:39] 
    node T_72 = bits(T_64, 14, 0) @[Bitwise.scala 58:28] 
    node T_73 = shl(T_72, 1) @[Bitwise.scala 58:47] 
    node T_74 = xor(T_64, T_73) @[Bitwise.scala 58:21] 
    node T_75 = shr(T_71, 1) @[Bitwise.scala 59:21] 
    node T_76 = and(T_75, T_74) @[Bitwise.scala 59:31] 
    node T_77 = bits(T_71, 14, 0) @[Bitwise.scala 59:46] 
    node T_78 = shl(T_77, 1) @[Bitwise.scala 59:65] 
    node T_79 = not(T_74) @[Bitwise.scala 59:77] 
    node T_80 = and(T_78, T_79) @[Bitwise.scala 59:75] 
    node T_81 = or(T_76, T_80) @[Bitwise.scala 59:39] 
    node T_82 = bits(T_39, 21, 16) @[Bitwise.scala 65:44] 
    node T_83 = bits(T_82, 3, 0) @[Bitwise.scala 65:18] 
    node T_84 = bits(T_83, 1, 0) @[Bitwise.scala 65:18] 
    node T_85 = bits(T_84, 0, 0) @[Bitwise.scala 65:18] 
    node T_86 = bits(T_84, 1, 1) @[Bitwise.scala 65:44] 
    node T_87 = cat(T_85, T_86) @[Cat.scala 20:58] 
    node T_88 = bits(T_83, 3, 2) @[Bitwise.scala 65:44] 
    node T_89 = bits(T_88, 0, 0) @[Bitwise.scala 65:18] 
    node T_90 = bits(T_88, 1, 1) @[Bitwise.scala 65:44] 
    node T_91 = cat(T_89, T_90) @[Cat.scala 20:58] 
    node T_92 = cat(T_87, T_91) @[Cat.scala 20:58] 
    node T_93 = bits(T_82, 5, 4) @[Bitwise.scala 65:44] 
    node T_94 = bits(T_93, 0, 0) @[Bitwise.scala 65:18] 
    node T_95 = bits(T_93, 1, 1) @[Bitwise.scala 65:44] 
    node T_96 = cat(T_94, T_95) @[Cat.scala 20:58] 
    node T_97 = cat(T_92, T_96) @[Cat.scala 20:58] 
    node T_98 = cat(T_81, T_97) @[Cat.scala 20:58] 
    node T_99 = not(T_98) @[primitives.scala 65:36] 
    node T_100 = mux(T_34, UInt<1>("h00"), T_99) @[primitives.scala 65:21] 
    node T_101 = not(T_100) @[primitives.scala 65:17] 
    node T_103 = cat(T_101, UInt<3>("h07")) @[Cat.scala 20:58] 
    node T_104 = bits(T_33, 6, 6) @[primitives.scala 56:25] 
    node T_105 = bits(T_33, 5, 0) @[primitives.scala 57:26] 
    node T_107 = dshr(asSInt(UInt<65>("h010000000000000000")), T_105) @[primitives.scala 68:52] 
    node T_108 = bits(T_107, 2, 0) @[primitives.scala 69:26] 
    node T_109 = bits(T_108, 1, 0) @[Bitwise.scala 65:18] 
    node T_110 = bits(T_109, 0, 0) @[Bitwise.scala 65:18] 
    node T_111 = bits(T_109, 1, 1) @[Bitwise.scala 65:44] 
    node T_112 = cat(T_110, T_111) @[Cat.scala 20:58] 
    node T_113 = bits(T_108, 2, 2) @[Bitwise.scala 65:44] 
    node T_114 = cat(T_112, T_113) @[Cat.scala 20:58] 
    node T_116 = mux(T_104, T_114, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_117 = mux(T_32, T_103, T_116) @[primitives.scala 61:20] 
    node T_119 = mux(T_30, T_117, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_120 = or(T_27, T_119) @[RoundRawFNToRecFN.scala 101:42] 
    node T_121 = or(T_120, doShiftSigDown1) @[RoundRawFNToRecFN.scala 106:19] 
    node roundMask = cat(T_121, UInt<2>("h03")) @[Cat.scala 20:58] 
    node T_123 = cat(isNegExp, roundMask) @[Cat.scala 20:58] 
    node shiftedRoundMask = shr(T_123, 1) @[RoundRawFNToRecFN.scala 109:52] 
    node T_124 = not(shiftedRoundMask) @[RoundRawFNToRecFN.scala 110:24] 
    node roundPosMask = and(T_124, roundMask) @[RoundRawFNToRecFN.scala 110:42] 
    node T_125 = and(io.in.sig, roundPosMask) @[RoundRawFNToRecFN.scala 111:34] 
    node roundPosBit = neq(T_125, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 111:50] 
    node T_127 = and(io.in.sig, shiftedRoundMask) @[RoundRawFNToRecFN.scala 112:36] 
    node anyRoundExtra = neq(T_127, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 112:56] 
    node common_inexact = or(roundPosBit, anyRoundExtra) @[RoundRawFNToRecFN.scala 113:32] 
    node T_129 = and(roundingMode_nearest_even, roundPosBit) @[RoundRawFNToRecFN.scala 116:40] 
    node T_130 = and(roundMagUp, common_inexact) @[RoundRawFNToRecFN.scala 117:29] 
    node T_131 = or(T_129, T_130) @[RoundRawFNToRecFN.scala 116:56] 
    node T_132 = or(io.in.sig, roundMask) @[RoundRawFNToRecFN.scala 118:26] 
    node T_133 = shr(T_132, 2) @[RoundRawFNToRecFN.scala 118:38] 
    node T_135 = add(T_133, UInt<1>("h01")) @[RoundRawFNToRecFN.scala 118:43] 
    node T_136 = and(roundingMode_nearest_even, roundPosBit) @[RoundRawFNToRecFN.scala 119:48] 
    node T_138 = eq(anyRoundExtra, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 120:26] 
    node T_139 = and(T_136, T_138) @[RoundRawFNToRecFN.scala 119:63] 
    node T_140 = shr(roundMask, 1) @[RoundRawFNToRecFN.scala 121:31] 
    node T_142 = mux(T_139, T_140, UInt<26>("h00")) @[RoundRawFNToRecFN.scala 119:21] 
    node T_143 = not(T_142) @[RoundRawFNToRecFN.scala 119:17] 
    node T_144 = and(T_135, T_143) @[RoundRawFNToRecFN.scala 118:55] 
    node T_145 = not(roundMask) @[RoundRawFNToRecFN.scala 124:26] 
    node T_146 = and(io.in.sig, T_145) @[RoundRawFNToRecFN.scala 124:24] 
    node T_147 = shr(T_146, 2) @[RoundRawFNToRecFN.scala 124:37] 
    node roundedSig = mux(T_131, T_144, T_147) @[RoundRawFNToRecFN.scala 116:12] 
    node T_148 = shr(roundedSig, 24) @[RoundRawFNToRecFN.scala 127:48] 
    node T_149 = cvt(T_148) @[RoundRawFNToRecFN.scala 127:60] 
    node sRoundedExp = add(io.in.sExp, T_149) @[RoundRawFNToRecFN.scala 127:34] 
    node common_expOut = bits(sRoundedExp, 8, 0) @[RoundRawFNToRecFN.scala 129:36] 
    node T_150 = bits(roundedSig, 23, 1) @[RoundRawFNToRecFN.scala 132:23] 
    node T_151 = bits(roundedSig, 22, 0) @[RoundRawFNToRecFN.scala 133:23] 
    node common_fractOut = mux(doShiftSigDown1, T_150, T_151) @[RoundRawFNToRecFN.scala 131:12] 
    node T_152 = shr(sRoundedExp, 7) @[RoundRawFNToRecFN.scala 136:39] 
    node common_overflow = geq(T_152, asSInt(UInt<3>("h03"))) @[RoundRawFNToRecFN.scala 136:56] 
    node common_totalUnderflow = lt(sRoundedExp, asSInt(UInt<8>("h06b"))) @[RoundRawFNToRecFN.scala 138:46] 
    node T_157 = mux(doShiftSigDown1, asSInt(UInt<9>("h081")), asSInt(UInt<9>("h082"))) @[RoundRawFNToRecFN.scala 142:21] 
    node T_158 = lt(io.in.sExp, T_157) @[RoundRawFNToRecFN.scala 141:25] 
    node common_underflow = and(common_inexact, T_158) @[RoundRawFNToRecFN.scala 140:18] 
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundRawFNToRecFN.scala 147:34] 
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundRawFNToRecFN.scala 148:49] 
    node T_160 = eq(isNaNOut, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:22] 
    node T_162 = eq(notNaN_isSpecialInfOut, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:36] 
    node T_163 = and(T_160, T_162) @[RoundRawFNToRecFN.scala 149:33] 
    node T_165 = eq(io.in.isZero, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 149:64] 
    node commonCase = and(T_163, T_165) @[RoundRawFNToRecFN.scala 149:61] 
    node overflow = and(commonCase, common_overflow) @[RoundRawFNToRecFN.scala 150:32] 
    node underflow = and(commonCase, common_underflow) @[RoundRawFNToRecFN.scala 151:32] 
    node T_166 = and(commonCase, common_inexact) @[RoundRawFNToRecFN.scala 152:43] 
    node inexact = or(overflow, T_166) @[RoundRawFNToRecFN.scala 152:28] 
    node overflow_roundMagUp = or(roundingMode_nearest_even, roundMagUp) @[RoundRawFNToRecFN.scala 154:57] 
    node T_167 = and(commonCase, common_totalUnderflow) @[RoundRawFNToRecFN.scala 155:42] 
    node pegMinNonzeroMagOut = and(T_167, roundMagUp) @[RoundRawFNToRecFN.scala 155:67] 
    node T_168 = and(commonCase, overflow) @[RoundRawFNToRecFN.scala 156:41] 
    node T_170 = eq(overflow_roundMagUp, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 156:56] 
    node pegMaxFiniteMagOut = and(T_168, T_170) @[RoundRawFNToRecFN.scala 156:53] 
    node T_171 = and(overflow, overflow_roundMagUp) @[RoundRawFNToRecFN.scala 158:45] 
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, T_171) @[RoundRawFNToRecFN.scala 158:32] 
    node signOut = mux(isNaNOut, UInt<1>("h00"), io.in.sign) @[RoundRawFNToRecFN.scala 160:22] 
    node T_173 = or(io.in.isZero, common_totalUnderflow) @[RoundRawFNToRecFN.scala 163:32] 
    node T_176 = mux(T_173, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 163:18] 
    node T_177 = not(T_176) @[RoundRawFNToRecFN.scala 163:14] 
    node T_178 = and(common_expOut, T_177) @[RoundRawFNToRecFN.scala 162:24] 
    node T_180 = not(UInt<9>("h06b")) @[RoundRawFNToRecFN.scala 168:19] 
    node T_182 = mux(pegMinNonzeroMagOut, T_180, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 167:18] 
    node T_183 = not(T_182) @[RoundRawFNToRecFN.scala 167:14] 
    node T_184 = and(T_178, T_183) @[RoundRawFNToRecFN.scala 166:17] 
    node T_187 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 171:18] 
    node T_188 = not(T_187) @[RoundRawFNToRecFN.scala 171:14] 
    node T_189 = and(T_184, T_188) @[RoundRawFNToRecFN.scala 170:17] 
    node T_192 = mux(notNaN_isInfOut, UInt<9>("h040"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 175:18] 
    node T_193 = not(T_192) @[RoundRawFNToRecFN.scala 175:14] 
    node T_194 = and(T_189, T_193) @[RoundRawFNToRecFN.scala 174:17] 
    node T_197 = mux(pegMinNonzeroMagOut, UInt<9>("h06b"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 179:16] 
    node T_198 = or(T_194, T_197) @[RoundRawFNToRecFN.scala 178:18] 
    node T_201 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 183:16] 
    node T_202 = or(T_198, T_201) @[RoundRawFNToRecFN.scala 182:15] 
    node T_205 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 187:16] 
    node T_206 = or(T_202, T_205) @[RoundRawFNToRecFN.scala 186:15] 
    node T_209 = mux(isNaNOut, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundRawFNToRecFN.scala 188:16] 
    node expOut = or(T_206, T_209) @[RoundRawFNToRecFN.scala 187:71] 
    node T_210 = or(common_totalUnderflow, isNaNOut) @[RoundRawFNToRecFN.scala 190:35] 
    node T_212 = shl(UInt<1>("h01"), 22) @[RoundRawFNToRecFN.scala 191:34] 
    node T_214 = mux(isNaNOut, T_212, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 191:16] 
    node T_215 = mux(T_210, T_214, common_fractOut) @[RoundRawFNToRecFN.scala 190:12] 
    node T_216 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 33:15] 
    node T_219 = mux(T_216, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 33:12] 
    node fractOut = or(T_215, T_219) @[RoundRawFNToRecFN.scala 193:11] 
    node T_220 = cat(signOut, expOut) @[Cat.scala 20:58] 
    node T_221 = cat(T_220, fractOut) @[Cat.scala 20:58] 
    io.out <= T_221 @[RoundRawFNToRecFN.scala 196:12] 
    node T_222 = cat(underflow, inexact) @[Cat.scala 20:58] 
    node T_223 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 20:58] 
    node T_224 = cat(T_223, overflow) @[Cat.scala 20:58] 
    node T_225 = cat(T_224, T_222) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_225 @[RoundRawFNToRecFN.scala 197:23] 
    
  module RecFNToRecFN_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 63, 52) @[rawFNFromRecFN.scala 50:21] 
    node T_5 = bits(T_4, 11, 9) @[rawFNFromRecFN.scala 51:29] 
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54] 
    node T_8 = bits(T_4, 11, 10) @[rawFNFromRecFN.scala 52:29] 
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54] 
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23] 
    T_18 is invalid @[rawFNFromRecFN.scala 54:23] 
    node T_25 = bits(io.in, 64, 64) @[rawFNFromRecFN.scala 55:23] 
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18] 
    node T_26 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 56:40] 
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32] 
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19] 
    node T_28 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 57:40] 
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35] 
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32] 
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19] 
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20] 
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25] 
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18] 
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36] 
    node T_36 = bits(io.in, 51, 0) @[rawFNFromRecFN.scala 60:48] 
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58] 
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58] 
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17] 
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0900"))) @[resizeRawFN.scala 49:31] 
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[resizeRawFN.scala 51:23] 
    outRawFloat is invalid @[resizeRawFN.scala 51:23] 
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20] 
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20] 
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20] 
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20] 
    node T_57 = lt(T_42, asSInt(UInt<1>("h00"))) @[resizeRawFN.scala 60:31] 
    node T_58 = bits(T_42, 12, 9) @[resizeRawFN.scala 61:33] 
    node T_60 = neq(T_58, UInt<1>("h00")) @[resizeRawFN.scala 61:65] 
    node T_65 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_67 = cat(T_65, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_68 = bits(T_42, 8, 0) @[resizeRawFN.scala 63:33] 
    node T_69 = mux(T_60, T_67, T_68) @[resizeRawFN.scala 61:25] 
    node T_70 = cat(T_57, T_69) @[Cat.scala 20:58] 
    node T_71 = asSInt(T_70) @[resizeRawFN.scala 65:20] 
    outRawFloat.sExp <= T_71 @[resizeRawFN.scala 56:18] 
    node T_72 = bits(T_18.sig, 55, 30) @[resizeRawFN.scala 71:28] 
    node T_73 = bits(T_18.sig, 29, 0) @[resizeRawFN.scala 72:28] 
    node T_75 = neq(T_73, UInt<1>("h00")) @[resizeRawFN.scala 72:56] 
    node T_76 = cat(T_72, T_75) @[Cat.scala 20:58] 
    outRawFloat.sig <= T_76 @[resizeRawFN.scala 67:17] 
    node T_77 = bits(outRawFloat.sig, 24, 24) @[RoundRawFNToRecFN.scala 61:57] 
    node T_79 = eq(T_77, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49] 
    node invalidExc = and(outRawFloat.isNaN, T_79) @[RoundRawFNToRecFN.scala 61:46] 
    inst RoundRawFNToRecFN_1 of RoundRawFNToRecFN @[RecFNToRecFN.scala 102:19] 
    RoundRawFNToRecFN_1.io is invalid
    RoundRawFNToRecFN_1.clk <= clk
    RoundRawFNToRecFN_1.reset <= reset
    RoundRawFNToRecFN_1.io.invalidExc <= invalidExc @[RecFNToRecFN.scala 103:41] 
    RoundRawFNToRecFN_1.io.infiniteExc <= UInt<1>("h00") @[RecFNToRecFN.scala 104:42] 
    RoundRawFNToRecFN_1.io.in <- outRawFloat @[RecFNToRecFN.scala 105:33] 
    RoundRawFNToRecFN_1.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 106:43] 
    io.out <= RoundRawFNToRecFN_1.io.out @[RecFNToRecFN.scala 107:16] 
    io.exceptionFlags <= RoundRawFNToRecFN_1.io.exceptionFlags @[RecFNToRecFN.scala 108:27] 
    
  module FPToFP : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip lt : UInt<1>}
    
    io is invalid
    reg T_133 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_133 <= io.in.valid
    reg T_134 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clk
    when io.in.valid : @[Reg.scala 29:19] 
      T_134 <- io.in.bits @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire in : {valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}} @[Valid.scala 39:21] 
    in is invalid @[Valid.scala 39:21] 
    in.valid <= T_133 @[Valid.scala 40:17] 
    in.bits <- T_134 @[Valid.scala 41:16] 
    node T_254 = and(in.bits.cmd, UInt<3>("h05")) @[fpu.scala 340:28] 
    node isSgnj = eq(UInt<5>("h04"), T_254) @[fpu.scala 340:28] 
    node T_255 = and(in.bits.single, isSgnj) @[fpu.scala 343:71] 
    node T_256 = bits(in.bits.rm, 1, 1) @[fpu.scala 342:11] 
    node T_258 = eq(T_255, UInt<1>("h00")) @[fpu.scala 342:18] 
    node T_259 = or(T_256, T_258) @[fpu.scala 342:15] 
    node T_260 = bits(in.bits.in1, 32, 32) @[fpu.scala 342:26] 
    node T_261 = bits(in.bits.rm, 0, 0) @[fpu.scala 342:35] 
    node T_262 = mux(T_259, T_260, T_261) @[fpu.scala 342:8] 
    node T_263 = bits(in.bits.in2, 32, 32) @[fpu.scala 342:52] 
    node T_264 = and(T_255, T_263) @[fpu.scala 342:46] 
    node sign_s = xor(T_262, T_264) @[fpu.scala 342:40] 
    node T_266 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 344:56] 
    node T_267 = and(T_266, isSgnj) @[fpu.scala 344:72] 
    node T_268 = bits(in.bits.rm, 1, 1) @[fpu.scala 342:11] 
    node T_270 = eq(T_267, UInt<1>("h00")) @[fpu.scala 342:18] 
    node T_271 = or(T_268, T_270) @[fpu.scala 342:15] 
    node T_272 = bits(in.bits.in1, 64, 64) @[fpu.scala 342:26] 
    node T_273 = bits(in.bits.rm, 0, 0) @[fpu.scala 342:35] 
    node T_274 = mux(T_271, T_272, T_273) @[fpu.scala 342:8] 
    node T_275 = bits(in.bits.in2, 64, 64) @[fpu.scala 342:52] 
    node T_276 = and(T_267, T_275) @[fpu.scala 342:46] 
    node sign_d = xor(T_274, T_276) @[fpu.scala 342:40] 
    node T_277 = bits(in.bits.in1, 63, 33) @[fpu.scala 345:38] 
    node T_278 = bits(in.bits.in1, 31, 0) @[fpu.scala 345:66] 
    node T_279 = cat(sign_s, T_278) @[Cat.scala 20:58] 
    node T_280 = cat(sign_d, T_277) @[Cat.scala 20:58] 
    node fsgnj = cat(T_280, T_279) @[Cat.scala 20:58] 
    inst s2d of RecFNToRecFN @[fpu.scala 347:19] 
    s2d.io is invalid
    s2d.clk <= clk
    s2d.reset <= reset
    inst d2s of RecFNToRecFN_3 @[fpu.scala 348:19] 
    d2s.io is invalid
    d2s.clk <= clk
    d2s.reset <= reset
    s2d.io.in <= in.bits.in1 @[fpu.scala 349:13] 
    s2d.io.roundingMode <= in.bits.rm @[fpu.scala 350:23] 
    d2s.io.in <= in.bits.in1 @[fpu.scala 351:13] 
    d2s.io.roundingMode <= in.bits.rm @[fpu.scala 352:23] 
    node T_281 = bits(in.bits.in1, 31, 29) @[fpu.scala 354:47] 
    node T_282 = not(T_281) @[fpu.scala 354:55] 
    node T_284 = eq(T_282, UInt<1>("h00")) @[fpu.scala 354:55] 
    node T_285 = bits(in.bits.in1, 63, 61) @[fpu.scala 354:72] 
    node T_286 = not(T_285) @[fpu.scala 354:80] 
    node T_288 = eq(T_286, UInt<1>("h00")) @[fpu.scala 354:80] 
    node isnan1 = mux(in.bits.single, T_284, T_288) @[fpu.scala 354:19] 
    node T_289 = bits(in.bits.in2, 31, 29) @[fpu.scala 355:47] 
    node T_290 = not(T_289) @[fpu.scala 355:55] 
    node T_292 = eq(T_290, UInt<1>("h00")) @[fpu.scala 355:55] 
    node T_293 = bits(in.bits.in2, 63, 61) @[fpu.scala 355:72] 
    node T_294 = not(T_293) @[fpu.scala 355:80] 
    node T_296 = eq(T_294, UInt<1>("h00")) @[fpu.scala 355:80] 
    node isnan2 = mux(in.bits.single, T_292, T_296) @[fpu.scala 355:19] 
    node T_297 = bits(in.bits.in1, 22, 22) @[fpu.scala 356:59] 
    node T_298 = bits(in.bits.in1, 51, 51) @[fpu.scala 356:76] 
    node T_299 = mux(in.bits.single, T_297, T_298) @[fpu.scala 356:31] 
    node T_300 = not(T_299) @[fpu.scala 356:27] 
    node issnan1 = and(isnan1, T_300) @[fpu.scala 356:24] 
    node T_301 = bits(in.bits.in2, 22, 22) @[fpu.scala 357:59] 
    node T_302 = bits(in.bits.in2, 51, 51) @[fpu.scala 357:76] 
    node T_303 = mux(in.bits.single, T_301, T_302) @[fpu.scala 357:31] 
    node T_304 = not(T_303) @[fpu.scala 357:27] 
    node issnan2 = and(isnan2, T_304) @[fpu.scala 357:24] 
    node T_305 = or(issnan1, issnan2) @[fpu.scala 358:32] 
    node minmax_exc = cat(T_305, UInt<4>("h00")) @[Cat.scala 20:58] 
    node isMax = bits(in.bits.rm, 0, 0) @[fpu.scala 359:25] 
    node T_307 = neq(isMax, io.lt) @[fpu.scala 360:31] 
    node T_309 = eq(isnan1, UInt<1>("h00")) @[fpu.scala 360:44] 
    node T_310 = and(T_307, T_309) @[fpu.scala 360:41] 
    node isLHS = or(isnan2, T_310) @[fpu.scala 360:22] 
    wire mux : {data : UInt<65>, exc : UInt<5>} @[fpu.scala 362:17] 
    mux is invalid @[fpu.scala 362:17] 
    mux.exc <= minmax_exc @[fpu.scala 363:11] 
    mux.data <= in.bits.in2 @[fpu.scala 364:12] 
    when isSgnj : @[fpu.scala 366:17] 
      mux.exc <= UInt<1>("h00") @[fpu.scala 366:27] 
      skip @[fpu.scala 366:17] 
    node T_317 = or(isSgnj, isLHS) @[fpu.scala 367:16] 
    when T_317 : @[fpu.scala 367:26] 
      mux.data <= fsgnj @[fpu.scala 367:37] 
      skip @[fpu.scala 367:26] 
    node T_320 = and(in.bits.cmd, UInt<3>("h04")) @[fpu.scala 368:21] 
    node T_321 = eq(UInt<5>("h00"), T_320) @[fpu.scala 368:21] 
    when T_321 : @[fpu.scala 368:38] 
      when in.bits.single : @[fpu.scala 369:27] 
        node T_323 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
        node T_324 = cat(T_323, d2s.io.out) @[Cat.scala 20:58] 
        mux.data <= T_324 @[fpu.scala 370:16] 
        mux.exc <= d2s.io.exceptionFlags @[fpu.scala 371:15] 
        skip @[fpu.scala 369:27] 
      node T_326 = eq(in.bits.single, UInt<1>("h00")) @[fpu.scala 369:27] 
      when T_326 : @[fpu.scala 372:17] 
        mux.data <= s2d.io.out @[fpu.scala 373:16] 
        mux.exc <= s2d.io.exceptionFlags @[fpu.scala 374:15] 
        skip @[fpu.scala 372:17] 
      skip @[fpu.scala 368:38] 
    reg T_329 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    T_329 <= in.valid
    reg T_330 : {data : UInt<65>, exc : UInt<5>}, clk
    when in.valid : @[Reg.scala 29:19] 
      T_330 <- mux @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    wire T_341 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 39:21] 
    T_341 is invalid @[Valid.scala 39:21] 
    T_341.valid <= T_329 @[Valid.scala 40:17] 
    T_341.bits <- T_330 @[Valid.scala 41:16] 
    io.out <- T_341 @[fpu.scala 378:10] 
    
  module DivSqrtRecF64_mulAddZ31 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inReady_div : UInt<1>, inReady_sqrt : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<2>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>, usingMulAdd : UInt<4>, latchMulAddA_0 : UInt<1>, mulAddA_0 : UInt<54>, latchMulAddB_0 : UInt<1>, mulAddB_0 : UInt<54>, mulAddC_2 : UInt<105>, flip mulAddResult_3 : UInt<105>}
    
    io is invalid
    reg valid_PA : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PA : UInt<1>, clk
    reg sign_PA : UInt<1>, clk
    reg specialCodeB_PA : UInt<3>, clk
    reg fractB_51_PA : UInt<1>, clk
    reg roundingMode_PA : UInt<2>, clk
    reg specialCodeA_PA : UInt<3>, clk
    reg fractA_51_PA : UInt<1>, clk
    reg exp_PA : UInt<14>, clk
    reg fractB_other_PA : UInt<51>, clk
    reg fractA_other_PA : UInt<51>, clk
    reg valid_PB : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PB : UInt<1>, clk
    reg sign_PB : UInt<1>, clk
    reg specialCodeA_PB : UInt<3>, clk
    reg fractA_51_PB : UInt<1>, clk
    reg specialCodeB_PB : UInt<3>, clk
    reg fractB_51_PB : UInt<1>, clk
    reg roundingMode_PB : UInt<2>, clk
    reg exp_PB : UInt<14>, clk
    reg fractA_0_PB : UInt<1>, clk
    reg fractB_other_PB : UInt<51>, clk
    reg valid_PC : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg sqrtOp_PC : UInt<1>, clk
    reg sign_PC : UInt<1>, clk
    reg specialCodeA_PC : UInt<3>, clk
    reg fractA_51_PC : UInt<1>, clk
    reg specialCodeB_PC : UInt<3>, clk
    reg fractB_51_PC : UInt<1>, clk
    reg roundingMode_PC : UInt<2>, clk
    reg exp_PC : UInt<14>, clk
    reg fractA_0_PC : UInt<1>, clk
    reg fractB_other_PC : UInt<51>, clk
    reg cycleNum_A : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg cycleNum_B : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg cycleNum_C : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg cycleNum_E : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg fractR0_A : UInt<9>, clk
    reg hiSqrR0_A_sqrt : UInt<10>, clk
    reg partNegSigma0_A : UInt<21>, clk
    reg nextMulAdd9A_A : UInt<9>, clk
    reg nextMulAdd9B_A : UInt<9>, clk
    reg ER1_B_sqrt : UInt<17>, clk
    reg ESqrR1_B_sqrt : UInt<32>, clk
    reg sigX1_B : UInt<58>, clk
    reg sqrSigma1_C : UInt<33>, clk
    reg sigXN_C : UInt<58>, clk
    reg u_C_sqrt : UInt<31>, clk
    reg E_E_div : UInt<1>, clk
    reg sigT_E : UInt<53>, clk
    reg extraT_E : UInt<1>, clk
    reg isNegRemT_E : UInt<1>, clk
    reg trueEqX_E1 : UInt<1>, clk
    wire ready_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 143:24] 
    ready_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 143:24] 
    wire ready_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 144:24] 
    ready_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 144:24] 
    wire ready_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 145:24] 
    ready_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 145:24] 
    wire leaving_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 146:26] 
    leaving_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 146:26] 
    wire leaving_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 147:26] 
    leaving_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 147:26] 
    wire leaving_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 148:26] 
    leaving_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 148:26] 
    wire cyc_B10_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 150:28] 
    cyc_B10_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 150:28] 
    wire cyc_B9_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 151:28] 
    cyc_B9_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 151:28] 
    wire cyc_B8_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 152:28] 
    cyc_B8_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 152:28] 
    wire cyc_B7_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 153:28] 
    cyc_B7_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 153:28] 
    wire cyc_B6 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 155:22] 
    cyc_B6 is invalid @[DivSqrtRecF64_mulAddZ31.scala 155:22] 
    wire cyc_B5 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 156:22] 
    cyc_B5 is invalid @[DivSqrtRecF64_mulAddZ31.scala 156:22] 
    wire cyc_B4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 157:22] 
    cyc_B4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 157:22] 
    wire cyc_B3 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 158:22] 
    cyc_B3 is invalid @[DivSqrtRecF64_mulAddZ31.scala 158:22] 
    wire cyc_B2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 159:22] 
    cyc_B2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 159:22] 
    wire cyc_B1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 160:22] 
    cyc_B1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 160:22] 
    wire cyc_B6_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 162:26] 
    cyc_B6_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 162:26] 
    wire cyc_B5_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 163:26] 
    cyc_B5_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 163:26] 
    wire cyc_B4_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 164:26] 
    cyc_B4_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 164:26] 
    wire cyc_B3_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 165:26] 
    cyc_B3_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 165:26] 
    wire cyc_B2_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 166:26] 
    cyc_B2_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 166:26] 
    wire cyc_B1_div : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 167:26] 
    cyc_B1_div is invalid @[DivSqrtRecF64_mulAddZ31.scala 167:26] 
    wire cyc_B6_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 169:27] 
    cyc_B6_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 169:27] 
    wire cyc_B5_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 170:27] 
    cyc_B5_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 170:27] 
    wire cyc_B4_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 171:27] 
    cyc_B4_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 171:27] 
    wire cyc_B3_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 172:27] 
    cyc_B3_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 172:27] 
    wire cyc_B2_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 173:27] 
    cyc_B2_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 173:27] 
    wire cyc_B1_sqrt : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 174:27] 
    cyc_B1_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 174:27] 
    wire cyc_C5 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 176:22] 
    cyc_C5 is invalid @[DivSqrtRecF64_mulAddZ31.scala 176:22] 
    wire cyc_C4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 177:22] 
    cyc_C4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 177:22] 
    wire valid_normalCase_leaving_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 178:22] 
    valid_normalCase_leaving_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 178:22] 
    wire cyc_C2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 179:22] 
    cyc_C2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 179:22] 
    wire cyc_C1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 180:22] 
    cyc_C1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 180:22] 
    wire cyc_E4 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 182:22] 
    cyc_E4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 182:22] 
    wire cyc_E3 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 183:22] 
    cyc_E3 is invalid @[DivSqrtRecF64_mulAddZ31.scala 183:22] 
    wire cyc_E2 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 184:22] 
    cyc_E2 is invalid @[DivSqrtRecF64_mulAddZ31.scala 184:22] 
    wire cyc_E1 : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 185:22] 
    cyc_E1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 185:22] 
    wire zSigma1_B4 : UInt @[DivSqrtRecF64_mulAddZ31.scala 187:34] 
    zSigma1_B4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 187:34] 
    wire sigXNU_B3_CX : UInt @[DivSqrtRecF64_mulAddZ31.scala 188:34] 
    sigXNU_B3_CX is invalid @[DivSqrtRecF64_mulAddZ31.scala 188:34] 
    wire zComplSigT_C1_sqrt : UInt @[DivSqrtRecF64_mulAddZ31.scala 189:34] 
    zComplSigT_C1_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 189:34] 
    wire zComplSigT_C1 : UInt @[DivSqrtRecF64_mulAddZ31.scala 190:34] 
    zComplSigT_C1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 190:34] 
    node T_113 = eq(cyc_B7_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:21] 
    node T_114 = and(ready_PA, T_113) @[DivSqrtRecF64_mulAddZ31.scala 197:18] 
    node T_116 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:38] 
    node T_117 = and(T_114, T_116) @[DivSqrtRecF64_mulAddZ31.scala 197:35] 
    node T_119 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 197:55] 
    node T_120 = and(T_117, T_119) @[DivSqrtRecF64_mulAddZ31.scala 197:52] 
    node T_122 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:13] 
    node T_123 = and(T_120, T_122) @[DivSqrtRecF64_mulAddZ31.scala 197:69] 
    node T_125 = eq(cyc_B3, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:30] 
    node T_126 = and(T_123, T_125) @[DivSqrtRecF64_mulAddZ31.scala 198:27] 
    node T_128 = eq(cyc_B2, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:42] 
    node T_129 = and(T_126, T_128) @[DivSqrtRecF64_mulAddZ31.scala 198:39] 
    node T_131 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 198:54] 
    node T_132 = and(T_129, T_131) @[DivSqrtRecF64_mulAddZ31.scala 198:51] 
    node T_134 = eq(cyc_C5, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 199:13] 
    node T_135 = and(T_132, T_134) @[DivSqrtRecF64_mulAddZ31.scala 198:68] 
    node T_137 = eq(cyc_C4, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 199:25] 
    node T_138 = and(T_135, T_137) @[DivSqrtRecF64_mulAddZ31.scala 199:22] 
    io.inReady_div <= T_138 @[DivSqrtRecF64_mulAddZ31.scala 195:20] 
    node T_140 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:21] 
    node T_141 = and(ready_PA, T_140) @[DivSqrtRecF64_mulAddZ31.scala 201:18] 
    node T_143 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:38] 
    node T_144 = and(T_141, T_143) @[DivSqrtRecF64_mulAddZ31.scala 201:35] 
    node T_146 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 201:55] 
    node T_147 = and(T_144, T_146) @[DivSqrtRecF64_mulAddZ31.scala 201:52] 
    node T_149 = eq(cyc_B2_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 202:13] 
    node T_150 = and(T_147, T_149) @[DivSqrtRecF64_mulAddZ31.scala 201:69] 
    node T_152 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 202:29] 
    node T_153 = and(T_150, T_152) @[DivSqrtRecF64_mulAddZ31.scala 202:26] 
    io.inReady_sqrt <= T_153 @[DivSqrtRecF64_mulAddZ31.scala 200:21] 
    node T_154 = and(io.inReady_div, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 203:38] 
    node T_156 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 203:55] 
    node cyc_S_div = and(T_154, T_156) @[DivSqrtRecF64_mulAddZ31.scala 203:52] 
    node T_157 = and(io.inReady_sqrt, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 204:38] 
    node cyc_S_sqrt = and(T_157, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 204:52] 
    node cyc_S = or(cyc_S_div, cyc_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 205:27] 
    node signA_S = bits(io.a, 64, 64) @[DivSqrtRecF64_mulAddZ31.scala 207:24] 
    node expA_S = bits(io.a, 63, 52) @[DivSqrtRecF64_mulAddZ31.scala 208:24] 
    node fractA_S = bits(io.a, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 209:24] 
    node specialCodeA_S = bits(expA_S, 11, 9) @[DivSqrtRecF64_mulAddZ31.scala 210:32] 
    node isZeroA_S = eq(specialCodeA_S, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 211:40] 
    node T_159 = bits(specialCodeA_S, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 212:39] 
    node isSpecialA_S = eq(T_159, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 212:46] 
    node signB_S = bits(io.b, 64, 64) @[DivSqrtRecF64_mulAddZ31.scala 214:24] 
    node expB_S = bits(io.b, 63, 52) @[DivSqrtRecF64_mulAddZ31.scala 215:24] 
    node fractB_S = bits(io.b, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 216:24] 
    node specialCodeB_S = bits(expB_S, 11, 9) @[DivSqrtRecF64_mulAddZ31.scala 217:32] 
    node isZeroB_S = eq(specialCodeB_S, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 218:40] 
    node T_162 = bits(specialCodeB_S, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 219:39] 
    node isSpecialB_S = eq(T_162, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 219:46] 
    node T_164 = xor(signA_S, signB_S) @[DivSqrtRecF64_mulAddZ31.scala 221:50] 
    node sign_S = mux(io.sqrtOp, signB_S, T_164) @[DivSqrtRecF64_mulAddZ31.scala 221:21] 
    node T_166 = eq(isSpecialA_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:9] 
    node T_168 = eq(isSpecialB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:27] 
    node T_169 = and(T_166, T_168) @[DivSqrtRecF64_mulAddZ31.scala 224:24] 
    node T_171 = eq(isZeroA_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:45] 
    node T_172 = and(T_169, T_171) @[DivSqrtRecF64_mulAddZ31.scala 224:42] 
    node T_174 = eq(isZeroB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 224:60] 
    node normalCase_S_div = and(T_172, T_174) @[DivSqrtRecF64_mulAddZ31.scala 224:57] 
    node T_176 = eq(isSpecialB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:29] 
    node T_178 = eq(isZeroB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:47] 
    node T_179 = and(T_176, T_178) @[DivSqrtRecF64_mulAddZ31.scala 225:44] 
    node T_181 = eq(signB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 225:62] 
    node normalCase_S_sqrt = and(T_179, T_181) @[DivSqrtRecF64_mulAddZ31.scala 225:59] 
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 226:27] 
    node entering_PA_normalCase_div = and(cyc_S_div, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 228:50] 
    node entering_PA_normalCase_sqrt = and(cyc_S_sqrt, normalCase_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 229:50] 
    node entering_PA_normalCase = or(entering_PA_normalCase_div, entering_PA_normalCase_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 231:36] 
    node T_183 = eq(ready_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 233:58] 
    node T_184 = or(valid_PA, T_183) @[DivSqrtRecF64_mulAddZ31.scala 233:55] 
    node T_185 = and(cyc_S, T_184) @[DivSqrtRecF64_mulAddZ31.scala 233:42] 
    node entering_PA = or(entering_PA_normalCase, T_185) @[DivSqrtRecF64_mulAddZ31.scala 233:32] 
    node T_187 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 235:18] 
    node T_188 = and(cyc_S, T_187) @[DivSqrtRecF64_mulAddZ31.scala 235:15] 
    node T_190 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 235:36] 
    node T_191 = and(T_188, T_190) @[DivSqrtRecF64_mulAddZ31.scala 235:33] 
    node T_193 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 236:29] 
    node T_195 = eq(ready_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 236:43] 
    node T_196 = and(T_193, T_195) @[DivSqrtRecF64_mulAddZ31.scala 236:40] 
    node T_197 = or(leaving_PB, T_196) @[DivSqrtRecF64_mulAddZ31.scala 236:25] 
    node entering_PB_S = and(T_191, T_197) @[DivSqrtRecF64_mulAddZ31.scala 235:47] 
    node T_199 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:18] 
    node T_200 = and(cyc_S, T_199) @[DivSqrtRecF64_mulAddZ31.scala 238:15] 
    node T_202 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:36] 
    node T_203 = and(T_200, T_202) @[DivSqrtRecF64_mulAddZ31.scala 238:33] 
    node T_205 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 238:50] 
    node T_206 = and(T_203, T_205) @[DivSqrtRecF64_mulAddZ31.scala 238:47] 
    node entering_PC_S = and(T_206, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 238:61] 
    node T_207 = or(entering_PA, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 240:23] 
    when T_207 : @[DivSqrtRecF64_mulAddZ31.scala 240:38] 
      valid_PA <= entering_PA @[DivSqrtRecF64_mulAddZ31.scala 241:18] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 240:38] 
    when entering_PA : @[DivSqrtRecF64_mulAddZ31.scala 243:24] 
      sqrtOp_PA <= io.sqrtOp @[DivSqrtRecF64_mulAddZ31.scala 244:25] 
      sign_PA <= sign_S @[DivSqrtRecF64_mulAddZ31.scala 245:25] 
      specialCodeB_PA <= specialCodeB_S @[DivSqrtRecF64_mulAddZ31.scala 246:25] 
      node T_208 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 247:36] 
      fractB_51_PA <= T_208 @[DivSqrtRecF64_mulAddZ31.scala 247:25] 
      roundingMode_PA <= io.roundingMode @[DivSqrtRecF64_mulAddZ31.scala 248:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 243:24] 
    node T_210 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 250:26] 
    node T_211 = and(entering_PA, T_210) @[DivSqrtRecF64_mulAddZ31.scala 250:23] 
    when T_211 : @[DivSqrtRecF64_mulAddZ31.scala 250:39] 
      specialCodeA_PA <= specialCodeA_S @[DivSqrtRecF64_mulAddZ31.scala 251:25] 
      node T_212 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 252:36] 
      fractA_51_PA <= T_212 @[DivSqrtRecF64_mulAddZ31.scala 252:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 250:39] 
    when entering_PA_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 254:35] 
      node T_213 = bits(expB_S, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 258:44] 
      node T_214 = bits(T_213, 0, 0) @[Bitwise.scala 33:15] 
      node T_217 = mux(T_214, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
      node T_218 = bits(expB_S, 10, 0) @[DivSqrtRecF64_mulAddZ31.scala 258:58] 
      node T_219 = not(T_218) @[DivSqrtRecF64_mulAddZ31.scala 258:51] 
      node T_220 = cat(T_217, T_219) @[Cat.scala 20:58] 
      node T_221 = add(expA_S, T_220) @[DivSqrtRecF64_mulAddZ31.scala 258:24] 
      node T_222 = tail(T_221, 1) @[DivSqrtRecF64_mulAddZ31.scala 258:24] 
      node T_223 = mux(io.sqrtOp, expB_S, T_222) @[DivSqrtRecF64_mulAddZ31.scala 256:16] 
      exp_PA <= T_223 @[DivSqrtRecF64_mulAddZ31.scala 255:16] 
      node T_224 = bits(fractB_S, 50, 0) @[DivSqrtRecF64_mulAddZ31.scala 260:36] 
      fractB_other_PA <= T_224 @[DivSqrtRecF64_mulAddZ31.scala 260:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 254:35] 
    when entering_PA_normalCase_div : @[DivSqrtRecF64_mulAddZ31.scala 262:39] 
      node T_225 = bits(fractA_S, 50, 0) @[DivSqrtRecF64_mulAddZ31.scala 263:36] 
      fractA_other_PA <= T_225 @[DivSqrtRecF64_mulAddZ31.scala 263:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 262:39] 
    node isZeroA_PA = eq(specialCodeA_PA, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 266:42] 
    node T_227 = bits(specialCodeA_PA, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 267:41] 
    node isSpecialA_PA = eq(T_227, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 267:48] 
    node T_230 = cat(UInt<1>("h01"), fractA_51_PA) @[Cat.scala 20:58] 
    node sigA_PA = cat(T_230, fractA_other_PA) @[Cat.scala 20:58] 
    node isZeroB_PA = eq(specialCodeB_PA, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 270:42] 
    node T_232 = bits(specialCodeB_PA, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 271:41] 
    node isSpecialB_PA = eq(T_232, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 271:48] 
    node T_235 = cat(UInt<1>("h01"), fractB_51_PA) @[Cat.scala 20:58] 
    node sigB_PA = cat(T_235, fractB_other_PA) @[Cat.scala 20:58] 
    node T_237 = eq(isSpecialB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:13] 
    node T_239 = eq(isZeroB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:32] 
    node T_240 = and(T_237, T_239) @[DivSqrtRecF64_mulAddZ31.scala 276:29] 
    node T_242 = eq(sign_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 276:48] 
    node T_243 = and(T_240, T_242) @[DivSqrtRecF64_mulAddZ31.scala 276:45] 
    node T_245 = eq(isSpecialA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:13] 
    node T_247 = eq(isSpecialB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:32] 
    node T_248 = and(T_245, T_247) @[DivSqrtRecF64_mulAddZ31.scala 277:29] 
    node T_250 = eq(isZeroA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:51] 
    node T_251 = and(T_248, T_250) @[DivSqrtRecF64_mulAddZ31.scala 277:48] 
    node T_253 = eq(isZeroB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:67] 
    node T_254 = and(T_251, T_253) @[DivSqrtRecF64_mulAddZ31.scala 277:64] 
    node normalCase_PA = mux(sqrtOp_PA, T_243, T_254) @[DivSqrtRecF64_mulAddZ31.scala 275:12] 
    node valid_normalCase_leaving_PA = or(cyc_B4_div, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 280:50] 
    node valid_leaving_PA = mux(normalCase_PA, valid_normalCase_leaving_PA, ready_PB) @[DivSqrtRecF64_mulAddZ31.scala 282:12] 
    node T_255 = and(valid_PA, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 283:28] 
    leaving_PA <= T_255 @[DivSqrtRecF64_mulAddZ31.scala 283:16] 
    node T_257 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 284:17] 
    node T_258 = or(T_257, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 284:28] 
    ready_PA <= T_258 @[DivSqrtRecF64_mulAddZ31.scala 284:14] 
    node T_259 = and(valid_PA, normalCase_PA) @[DivSqrtRecF64_mulAddZ31.scala 287:18] 
    node entering_PB_normalCase = and(T_259, valid_normalCase_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 287:35] 
    node entering_PB = or(entering_PB_S, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 288:37] 
    node T_260 = or(entering_PB, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 290:23] 
    when T_260 : @[DivSqrtRecF64_mulAddZ31.scala 290:38] 
      valid_PB <= entering_PB @[DivSqrtRecF64_mulAddZ31.scala 291:18] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 290:38] 
    when entering_PB : @[DivSqrtRecF64_mulAddZ31.scala 293:24] 
      node T_261 = mux(valid_PA, sqrtOp_PA, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 294:31] 
      sqrtOp_PB <= T_261 @[DivSqrtRecF64_mulAddZ31.scala 294:25] 
      node T_262 = mux(valid_PA, sign_PA, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 295:31] 
      sign_PB <= T_262 @[DivSqrtRecF64_mulAddZ31.scala 295:25] 
      node T_263 = mux(valid_PA, specialCodeA_PA, specialCodeA_S) @[DivSqrtRecF64_mulAddZ31.scala 296:31] 
      specialCodeA_PB <= T_263 @[DivSqrtRecF64_mulAddZ31.scala 296:25] 
      node T_264 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 297:67] 
      node T_265 = mux(valid_PA, fractA_51_PA, T_264) @[DivSqrtRecF64_mulAddZ31.scala 297:31] 
      fractA_51_PB <= T_265 @[DivSqrtRecF64_mulAddZ31.scala 297:25] 
      node T_266 = mux(valid_PA, specialCodeB_PA, specialCodeB_S) @[DivSqrtRecF64_mulAddZ31.scala 298:31] 
      specialCodeB_PB <= T_266 @[DivSqrtRecF64_mulAddZ31.scala 298:25] 
      node T_267 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 299:67] 
      node T_268 = mux(valid_PA, fractB_51_PA, T_267) @[DivSqrtRecF64_mulAddZ31.scala 299:31] 
      fractB_51_PB <= T_268 @[DivSqrtRecF64_mulAddZ31.scala 299:25] 
      node T_269 = mux(valid_PA, roundingMode_PA, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 300:31] 
      roundingMode_PB <= T_269 @[DivSqrtRecF64_mulAddZ31.scala 300:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 293:24] 
    when entering_PB_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 302:35] 
      exp_PB <= exp_PA @[DivSqrtRecF64_mulAddZ31.scala 303:25] 
      node T_270 = bits(fractA_other_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 304:43] 
      fractA_0_PB <= T_270 @[DivSqrtRecF64_mulAddZ31.scala 304:25] 
      fractB_other_PB <= fractB_other_PA @[DivSqrtRecF64_mulAddZ31.scala 305:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 302:35] 
    node isZeroA_PB = eq(specialCodeA_PB, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 308:42] 
    node T_272 = bits(specialCodeA_PB, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 309:41] 
    node isSpecialA_PB = eq(T_272, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 309:48] 
    node isZeroB_PB = eq(specialCodeB_PB, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 310:42] 
    node T_275 = bits(specialCodeB_PB, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 311:41] 
    node isSpecialB_PB = eq(T_275, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 311:48] 
    node T_278 = eq(isSpecialB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:13] 
    node T_280 = eq(isZeroB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:32] 
    node T_281 = and(T_278, T_280) @[DivSqrtRecF64_mulAddZ31.scala 314:29] 
    node T_283 = eq(sign_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:48] 
    node T_284 = and(T_281, T_283) @[DivSqrtRecF64_mulAddZ31.scala 314:45] 
    node T_286 = eq(isSpecialA_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:13] 
    node T_288 = eq(isSpecialB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:32] 
    node T_289 = and(T_286, T_288) @[DivSqrtRecF64_mulAddZ31.scala 315:29] 
    node T_291 = eq(isZeroA_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:51] 
    node T_292 = and(T_289, T_291) @[DivSqrtRecF64_mulAddZ31.scala 315:48] 
    node T_294 = eq(isZeroB_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 315:67] 
    node T_295 = and(T_292, T_294) @[DivSqrtRecF64_mulAddZ31.scala 315:64] 
    node normalCase_PB = mux(sqrtOp_PB, T_284, T_295) @[DivSqrtRecF64_mulAddZ31.scala 313:12] 
    node valid_leaving_PB = mux(normalCase_PB, valid_normalCase_leaving_PB, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 320:12] 
    node T_296 = and(valid_PB, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 321:28] 
    leaving_PB <= T_296 @[DivSqrtRecF64_mulAddZ31.scala 321:16] 
    node T_298 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 322:17] 
    node T_299 = or(T_298, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 322:28] 
    ready_PB <= T_299 @[DivSqrtRecF64_mulAddZ31.scala 322:14] 
    node T_300 = and(valid_PB, normalCase_PB) @[DivSqrtRecF64_mulAddZ31.scala 325:18] 
    node entering_PC_normalCase = and(T_300, valid_normalCase_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 325:35] 
    node entering_PC = or(entering_PC_S, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 326:37] 
    node T_301 = or(entering_PC, leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 328:23] 
    when T_301 : @[DivSqrtRecF64_mulAddZ31.scala 328:38] 
      valid_PC <= entering_PC @[DivSqrtRecF64_mulAddZ31.scala 329:18] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 328:38] 
    when entering_PC : @[DivSqrtRecF64_mulAddZ31.scala 331:24] 
      node T_302 = mux(valid_PB, sqrtOp_PB, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 332:31] 
      sqrtOp_PC <= T_302 @[DivSqrtRecF64_mulAddZ31.scala 332:25] 
      node T_303 = mux(valid_PB, sign_PB, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 333:31] 
      sign_PC <= T_303 @[DivSqrtRecF64_mulAddZ31.scala 333:25] 
      node T_304 = mux(valid_PB, specialCodeA_PB, specialCodeA_S) @[DivSqrtRecF64_mulAddZ31.scala 334:31] 
      specialCodeA_PC <= T_304 @[DivSqrtRecF64_mulAddZ31.scala 334:25] 
      node T_305 = bits(fractA_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 335:67] 
      node T_306 = mux(valid_PB, fractA_51_PB, T_305) @[DivSqrtRecF64_mulAddZ31.scala 335:31] 
      fractA_51_PC <= T_306 @[DivSqrtRecF64_mulAddZ31.scala 335:25] 
      node T_307 = mux(valid_PB, specialCodeB_PB, specialCodeB_S) @[DivSqrtRecF64_mulAddZ31.scala 336:31] 
      specialCodeB_PC <= T_307 @[DivSqrtRecF64_mulAddZ31.scala 336:25] 
      node T_308 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 337:67] 
      node T_309 = mux(valid_PB, fractB_51_PB, T_308) @[DivSqrtRecF64_mulAddZ31.scala 337:31] 
      fractB_51_PC <= T_309 @[DivSqrtRecF64_mulAddZ31.scala 337:25] 
      node T_310 = mux(valid_PB, roundingMode_PB, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 338:31] 
      roundingMode_PC <= T_310 @[DivSqrtRecF64_mulAddZ31.scala 338:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 331:24] 
    when entering_PC_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 340:35] 
      exp_PC <= exp_PB @[DivSqrtRecF64_mulAddZ31.scala 341:25] 
      fractA_0_PC <= fractA_0_PB @[DivSqrtRecF64_mulAddZ31.scala 342:25] 
      fractB_other_PC <= fractB_other_PB @[DivSqrtRecF64_mulAddZ31.scala 343:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 340:35] 
    node isZeroA_PC = eq(specialCodeA_PC, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 346:42] 
    node T_312 = bits(specialCodeA_PC, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 347:41] 
    node isSpecialA_PC = eq(T_312, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 347:48] 
    node T_314 = bits(specialCodeA_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 348:59] 
    node T_316 = eq(T_314, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 348:42] 
    node isInfA_PC = and(isSpecialA_PC, T_316) @[DivSqrtRecF64_mulAddZ31.scala 348:39] 
    node T_317 = bits(specialCodeA_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 349:59] 
    node isNaNA_PC = and(isSpecialA_PC, T_317) @[DivSqrtRecF64_mulAddZ31.scala 349:39] 
    node T_319 = eq(fractA_51_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 350:38] 
    node isSigNaNA_PC = and(isNaNA_PC, T_319) @[DivSqrtRecF64_mulAddZ31.scala 350:35] 
    node isZeroB_PC = eq(specialCodeB_PC, UInt<3>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 352:42] 
    node T_321 = bits(specialCodeB_PC, 2, 1) @[DivSqrtRecF64_mulAddZ31.scala 353:41] 
    node isSpecialB_PC = eq(T_321, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 353:48] 
    node T_323 = bits(specialCodeB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 354:59] 
    node T_325 = eq(T_323, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 354:42] 
    node isInfB_PC = and(isSpecialB_PC, T_325) @[DivSqrtRecF64_mulAddZ31.scala 354:39] 
    node T_326 = bits(specialCodeB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 355:59] 
    node isNaNB_PC = and(isSpecialB_PC, T_326) @[DivSqrtRecF64_mulAddZ31.scala 355:39] 
    node T_328 = eq(fractB_51_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 356:38] 
    node isSigNaNB_PC = and(isNaNB_PC, T_328) @[DivSqrtRecF64_mulAddZ31.scala 356:35] 
    node T_330 = cat(UInt<1>("h01"), fractB_51_PC) @[Cat.scala 20:58] 
    node sigB_PC = cat(T_330, fractB_other_PC) @[Cat.scala 20:58] 
    node T_332 = eq(isSpecialB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:24] 
    node T_334 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:43] 
    node T_335 = and(T_332, T_334) @[DivSqrtRecF64_mulAddZ31.scala 360:40] 
    node T_337 = eq(sign_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:59] 
    node T_338 = and(T_335, T_337) @[DivSqrtRecF64_mulAddZ31.scala 360:56] 
    node T_340 = eq(isSpecialA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:13] 
    node T_342 = eq(isSpecialB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:32] 
    node T_343 = and(T_340, T_342) @[DivSqrtRecF64_mulAddZ31.scala 361:29] 
    node T_345 = eq(isZeroA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:51] 
    node T_346 = and(T_343, T_345) @[DivSqrtRecF64_mulAddZ31.scala 361:48] 
    node T_348 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 361:67] 
    node T_349 = and(T_346, T_348) @[DivSqrtRecF64_mulAddZ31.scala 361:64] 
    node normalCase_PC = mux(sqrtOp_PC, T_338, T_349) @[DivSqrtRecF64_mulAddZ31.scala 360:12] 
    node T_351 = add(exp_PC, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 363:27] 
    node expP2_PC = tail(T_351, 1) @[DivSqrtRecF64_mulAddZ31.scala 363:27] 
    node T_352 = bits(exp_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 365:19] 
    node T_353 = bits(expP2_PC, 13, 1) @[DivSqrtRecF64_mulAddZ31.scala 366:25] 
    node T_355 = cat(T_353, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_356 = bits(exp_PC, 13, 1) @[DivSqrtRecF64_mulAddZ31.scala 367:23] 
    node T_358 = cat(T_356, UInt<1>("h01")) @[Cat.scala 20:58] 
    node expP1_PC = mux(T_352, T_355, T_358) @[DivSqrtRecF64_mulAddZ31.scala 365:12] 
    node roundingMode_near_even_PC = eq(roundingMode_PC, UInt<2>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 370:54] 
    node roundingMode_minMag_PC = eq(roundingMode_PC, UInt<2>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 371:54] 
    node roundingMode_min_PC = eq(roundingMode_PC, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 372:54] 
    node roundingMode_max_PC = eq(roundingMode_PC, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 373:54] 
    node roundMagUp_PC = mux(sign_PC, roundingMode_min_PC, roundingMode_max_PC) @[DivSqrtRecF64_mulAddZ31.scala 376:12] 
    node overflowY_roundMagUp_PC = or(roundingMode_near_even_PC, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 377:61] 
    node T_360 = eq(roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 378:27] 
    node T_362 = eq(roundingMode_near_even_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 378:46] 
    node roundMagDown_PC = and(T_360, T_362) @[DivSqrtRecF64_mulAddZ31.scala 378:43] 
    node T_364 = eq(normalCase_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 380:28] 
    node valid_leaving_PC = or(T_364, cyc_E1) @[DivSqrtRecF64_mulAddZ31.scala 380:44] 
    node T_365 = and(valid_PC, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 381:28] 
    leaving_PC <= T_365 @[DivSqrtRecF64_mulAddZ31.scala 381:16] 
    node T_367 = eq(valid_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 382:17] 
    node T_368 = or(T_367, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 382:28] 
    ready_PC <= T_368 @[DivSqrtRecF64_mulAddZ31.scala 382:14] 
    node T_370 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 383:39] 
    node T_371 = and(leaving_PC, T_370) @[DivSqrtRecF64_mulAddZ31.scala 383:36] 
    io.outValid_div <= T_371 @[DivSqrtRecF64_mulAddZ31.scala 383:22] 
    node T_372 = and(leaving_PC, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 384:36] 
    io.outValid_sqrt <= T_372 @[DivSqrtRecF64_mulAddZ31.scala 384:22] 
    node T_374 = neq(cycleNum_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 388:49] 
    node T_375 = or(entering_PA_normalCase, T_374) @[DivSqrtRecF64_mulAddZ31.scala 388:34] 
    when T_375 : @[DivSqrtRecF64_mulAddZ31.scala 388:63] 
      node T_378 = mux(entering_PA_normalCase_div, UInt<2>("h03"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 390:16] 
      node T_381 = mux(entering_PA_normalCase_sqrt, UInt<3>("h06"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 391:16] 
      node T_382 = or(T_378, T_381) @[DivSqrtRecF64_mulAddZ31.scala 390:74] 
      node T_384 = eq(entering_PA_normalCase, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 392:17] 
      node T_386 = sub(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 392:54] 
      node T_387 = tail(T_386, 1) @[DivSqrtRecF64_mulAddZ31.scala 392:54] 
      node T_389 = mux(T_384, T_387, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 392:16] 
      node T_390 = or(T_382, T_389) @[DivSqrtRecF64_mulAddZ31.scala 391:74] 
      cycleNum_A <= T_390 @[DivSqrtRecF64_mulAddZ31.scala 389:20] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 388:63] 
    node cyc_A6_sqrt = eq(cycleNum_A, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 396:35] 
    node cyc_A5_sqrt = eq(cycleNum_A, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 397:35] 
    node cyc_A4_sqrt = eq(cycleNum_A, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 398:35] 
    node cyc_A4 = or(cyc_A4_sqrt, entering_PA_normalCase_div) @[DivSqrtRecF64_mulAddZ31.scala 402:30] 
    node cyc_A3 = eq(cycleNum_A, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 403:30] 
    node cyc_A2 = eq(cycleNum_A, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 404:30] 
    node cyc_A1 = eq(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 405:30] 
    node T_398 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 407:32] 
    node cyc_A3_div = and(cyc_A3, T_398) @[DivSqrtRecF64_mulAddZ31.scala 407:29] 
    node T_400 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 408:32] 
    node cyc_A2_div = and(cyc_A2, T_400) @[DivSqrtRecF64_mulAddZ31.scala 408:29] 
    node T_402 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 409:32] 
    node cyc_A1_div = and(cyc_A1, T_402) @[DivSqrtRecF64_mulAddZ31.scala 409:29] 
    node cyc_A3_sqrt = and(cyc_A3, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 411:30] 
    node cyc_A2_sqrt = and(cyc_A2, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 412:30] 
    node cyc_A1_sqrt = and(cyc_A1, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 413:30] 
    node T_404 = neq(cycleNum_B, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 415:33] 
    node T_405 = or(cyc_A1, T_404) @[DivSqrtRecF64_mulAddZ31.scala 415:18] 
    when T_405 : @[DivSqrtRecF64_mulAddZ31.scala 415:47] 
      node T_408 = mux(sqrtOp_PA, UInt<4>("h0a"), UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 418:20] 
      node T_410 = sub(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 419:28] 
      node T_411 = tail(T_410, 1) @[DivSqrtRecF64_mulAddZ31.scala 419:28] 
      node T_412 = mux(cyc_A1, T_408, T_411) @[DivSqrtRecF64_mulAddZ31.scala 417:16] 
      cycleNum_B <= T_412 @[DivSqrtRecF64_mulAddZ31.scala 416:20] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 415:47] 
    node T_414 = eq(cycleNum_B, UInt<4>("h0a")) @[DivSqrtRecF64_mulAddZ31.scala 423:33] 
    cyc_B10_sqrt <= T_414 @[DivSqrtRecF64_mulAddZ31.scala 423:18] 
    node T_416 = eq(cycleNum_B, UInt<4>("h09")) @[DivSqrtRecF64_mulAddZ31.scala 424:33] 
    cyc_B9_sqrt <= T_416 @[DivSqrtRecF64_mulAddZ31.scala 424:18] 
    node T_418 = eq(cycleNum_B, UInt<4>("h08")) @[DivSqrtRecF64_mulAddZ31.scala 425:33] 
    cyc_B8_sqrt <= T_418 @[DivSqrtRecF64_mulAddZ31.scala 425:18] 
    node T_420 = eq(cycleNum_B, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 426:33] 
    cyc_B7_sqrt <= T_420 @[DivSqrtRecF64_mulAddZ31.scala 426:18] 
    node T_422 = eq(cycleNum_B, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 428:27] 
    cyc_B6 <= T_422 @[DivSqrtRecF64_mulAddZ31.scala 428:12] 
    node T_424 = eq(cycleNum_B, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 429:27] 
    cyc_B5 <= T_424 @[DivSqrtRecF64_mulAddZ31.scala 429:12] 
    node T_426 = eq(cycleNum_B, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 430:27] 
    cyc_B4 <= T_426 @[DivSqrtRecF64_mulAddZ31.scala 430:12] 
    node T_428 = eq(cycleNum_B, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 431:27] 
    cyc_B3 <= T_428 @[DivSqrtRecF64_mulAddZ31.scala 431:12] 
    node T_430 = eq(cycleNum_B, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 432:27] 
    cyc_B2 <= T_430 @[DivSqrtRecF64_mulAddZ31.scala 432:12] 
    node T_432 = eq(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 433:27] 
    cyc_B1 <= T_432 @[DivSqrtRecF64_mulAddZ31.scala 433:12] 
    node T_433 = and(cyc_B6, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 435:26] 
    node T_435 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 435:41] 
    node T_436 = and(T_433, T_435) @[DivSqrtRecF64_mulAddZ31.scala 435:38] 
    cyc_B6_div <= T_436 @[DivSqrtRecF64_mulAddZ31.scala 435:16] 
    node T_437 = and(cyc_B5, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 436:26] 
    node T_439 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 436:41] 
    node T_440 = and(T_437, T_439) @[DivSqrtRecF64_mulAddZ31.scala 436:38] 
    cyc_B5_div <= T_440 @[DivSqrtRecF64_mulAddZ31.scala 436:16] 
    node T_441 = and(cyc_B4, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 437:26] 
    node T_443 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 437:41] 
    node T_444 = and(T_441, T_443) @[DivSqrtRecF64_mulAddZ31.scala 437:38] 
    cyc_B4_div <= T_444 @[DivSqrtRecF64_mulAddZ31.scala 437:16] 
    node T_446 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 438:29] 
    node T_447 = and(cyc_B3, T_446) @[DivSqrtRecF64_mulAddZ31.scala 438:26] 
    cyc_B3_div <= T_447 @[DivSqrtRecF64_mulAddZ31.scala 438:16] 
    node T_449 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 439:29] 
    node T_450 = and(cyc_B2, T_449) @[DivSqrtRecF64_mulAddZ31.scala 439:26] 
    cyc_B2_div <= T_450 @[DivSqrtRecF64_mulAddZ31.scala 439:16] 
    node T_452 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 440:29] 
    node T_453 = and(cyc_B1, T_452) @[DivSqrtRecF64_mulAddZ31.scala 440:26] 
    cyc_B1_div <= T_453 @[DivSqrtRecF64_mulAddZ31.scala 440:16] 
    node T_454 = and(cyc_B6, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 442:27] 
    node T_455 = and(T_454, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 442:39] 
    cyc_B6_sqrt <= T_455 @[DivSqrtRecF64_mulAddZ31.scala 442:17] 
    node T_456 = and(cyc_B5, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 443:27] 
    node T_457 = and(T_456, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 443:39] 
    cyc_B5_sqrt <= T_457 @[DivSqrtRecF64_mulAddZ31.scala 443:17] 
    node T_458 = and(cyc_B4, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 444:27] 
    node T_459 = and(T_458, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 444:39] 
    cyc_B4_sqrt <= T_459 @[DivSqrtRecF64_mulAddZ31.scala 444:17] 
    node T_460 = and(cyc_B3, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 445:27] 
    cyc_B3_sqrt <= T_460 @[DivSqrtRecF64_mulAddZ31.scala 445:17] 
    node T_461 = and(cyc_B2, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 446:27] 
    cyc_B2_sqrt <= T_461 @[DivSqrtRecF64_mulAddZ31.scala 446:17] 
    node T_462 = and(cyc_B1, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 447:27] 
    cyc_B1_sqrt <= T_462 @[DivSqrtRecF64_mulAddZ31.scala 447:17] 
    node T_464 = neq(cycleNum_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 449:33] 
    node T_465 = or(cyc_B1, T_464) @[DivSqrtRecF64_mulAddZ31.scala 449:18] 
    when T_465 : @[DivSqrtRecF64_mulAddZ31.scala 449:47] 
      node T_468 = mux(sqrtOp_PB, UInt<3>("h06"), UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 451:28] 
      node T_470 = sub(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 451:70] 
      node T_471 = tail(T_470, 1) @[DivSqrtRecF64_mulAddZ31.scala 451:70] 
      node T_472 = mux(cyc_B1, T_468, T_471) @[DivSqrtRecF64_mulAddZ31.scala 451:16] 
      cycleNum_C <= T_472 @[DivSqrtRecF64_mulAddZ31.scala 450:20] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 449:47] 
    node cyc_C6_sqrt = eq(cycleNum_C, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 454:35] 
    node T_475 = eq(cycleNum_C, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 456:27] 
    cyc_C5 <= T_475 @[DivSqrtRecF64_mulAddZ31.scala 456:12] 
    node T_477 = eq(cycleNum_C, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 457:27] 
    cyc_C4 <= T_477 @[DivSqrtRecF64_mulAddZ31.scala 457:12] 
    node T_479 = eq(cycleNum_C, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 458:27] 
    valid_normalCase_leaving_PB <= T_479 @[DivSqrtRecF64_mulAddZ31.scala 458:12] 
    node T_481 = eq(cycleNum_C, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 459:27] 
    cyc_C2 <= T_481 @[DivSqrtRecF64_mulAddZ31.scala 459:12] 
    node T_483 = eq(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 460:27] 
    cyc_C1 <= T_483 @[DivSqrtRecF64_mulAddZ31.scala 460:12] 
    node T_485 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 462:32] 
    node cyc_C5_div = and(cyc_C5, T_485) @[DivSqrtRecF64_mulAddZ31.scala 462:29] 
    node T_487 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 463:32] 
    node cyc_C4_div = and(cyc_C4, T_487) @[DivSqrtRecF64_mulAddZ31.scala 463:29] 
    node T_489 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 464:32] 
    node cyc_C3_div = and(valid_normalCase_leaving_PB, T_489) @[DivSqrtRecF64_mulAddZ31.scala 464:29] 
    node T_491 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 465:32] 
    node cyc_C2_div = and(cyc_C2, T_491) @[DivSqrtRecF64_mulAddZ31.scala 465:29] 
    node T_493 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 466:32] 
    node cyc_C1_div = and(cyc_C1, T_493) @[DivSqrtRecF64_mulAddZ31.scala 466:29] 
    node cyc_C5_sqrt = and(cyc_C5, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 468:30] 
    node cyc_C4_sqrt = and(cyc_C4, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 469:30] 
    node cyc_C3_sqrt = and(valid_normalCase_leaving_PB, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 470:30] 
    node cyc_C2_sqrt = and(cyc_C2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 471:30] 
    node cyc_C1_sqrt = and(cyc_C1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 472:30] 
    node T_495 = neq(cycleNum_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 474:33] 
    node T_496 = or(cyc_C1, T_495) @[DivSqrtRecF64_mulAddZ31.scala 474:18] 
    when T_496 : @[DivSqrtRecF64_mulAddZ31.scala 474:47] 
      node T_499 = sub(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 475:55] 
      node T_500 = tail(T_499, 1) @[DivSqrtRecF64_mulAddZ31.scala 475:55] 
      node T_501 = mux(cyc_C1, UInt<3>("h04"), T_500) @[DivSqrtRecF64_mulAddZ31.scala 475:26] 
      cycleNum_E <= T_501 @[DivSqrtRecF64_mulAddZ31.scala 475:20] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 474:47] 
    node T_503 = eq(cycleNum_E, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 478:27] 
    cyc_E4 <= T_503 @[DivSqrtRecF64_mulAddZ31.scala 478:12] 
    node T_505 = eq(cycleNum_E, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 479:27] 
    cyc_E3 <= T_505 @[DivSqrtRecF64_mulAddZ31.scala 479:12] 
    node T_507 = eq(cycleNum_E, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 480:27] 
    cyc_E2 <= T_507 @[DivSqrtRecF64_mulAddZ31.scala 480:12] 
    node T_509 = eq(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 481:27] 
    cyc_E1 <= T_509 @[DivSqrtRecF64_mulAddZ31.scala 481:12] 
    node T_511 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 483:32] 
    node cyc_E4_div = and(cyc_E4, T_511) @[DivSqrtRecF64_mulAddZ31.scala 483:29] 
    node T_513 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 484:32] 
    node cyc_E3_div = and(cyc_E3, T_513) @[DivSqrtRecF64_mulAddZ31.scala 484:29] 
    node T_515 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 485:32] 
    node cyc_E2_div = and(cyc_E2, T_515) @[DivSqrtRecF64_mulAddZ31.scala 485:29] 
    node T_517 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 486:32] 
    node cyc_E1_div = and(cyc_E1, T_517) @[DivSqrtRecF64_mulAddZ31.scala 486:29] 
    node cyc_E4_sqrt = and(cyc_E4, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 488:30] 
    node cyc_E3_sqrt = and(cyc_E3, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 489:30] 
    node cyc_E2_sqrt = and(cyc_E2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 490:30] 
    node cyc_E1_sqrt = and(cyc_E1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 491:30] 
    node zFractB_A4_div = mux(entering_PA_normalCase_div, fractB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 496:29] 
    node T_519 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 498:53] 
    node T_521 = eq(T_519, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 498:62] 
    node zLinPiece_0_A4_div = and(entering_PA_normalCase_div, T_521) @[DivSqrtRecF64_mulAddZ31.scala 498:41] 
    node T_522 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 499:53] 
    node T_524 = eq(T_522, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 499:62] 
    node zLinPiece_1_A4_div = and(entering_PA_normalCase_div, T_524) @[DivSqrtRecF64_mulAddZ31.scala 499:41] 
    node T_525 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 500:53] 
    node T_527 = eq(T_525, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 500:62] 
    node zLinPiece_2_A4_div = and(entering_PA_normalCase_div, T_527) @[DivSqrtRecF64_mulAddZ31.scala 500:41] 
    node T_528 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 501:53] 
    node T_530 = eq(T_528, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 501:62] 
    node zLinPiece_3_A4_div = and(entering_PA_normalCase_div, T_530) @[DivSqrtRecF64_mulAddZ31.scala 501:41] 
    node T_531 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 502:53] 
    node T_533 = eq(T_531, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 502:62] 
    node zLinPiece_4_A4_div = and(entering_PA_normalCase_div, T_533) @[DivSqrtRecF64_mulAddZ31.scala 502:41] 
    node T_534 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 503:53] 
    node T_536 = eq(T_534, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 503:62] 
    node zLinPiece_5_A4_div = and(entering_PA_normalCase_div, T_536) @[DivSqrtRecF64_mulAddZ31.scala 503:41] 
    node T_537 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 504:53] 
    node T_539 = eq(T_537, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 504:62] 
    node zLinPiece_6_A4_div = and(entering_PA_normalCase_div, T_539) @[DivSqrtRecF64_mulAddZ31.scala 504:41] 
    node T_540 = bits(fractB_S, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 505:53] 
    node T_542 = eq(T_540, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 505:62] 
    node zLinPiece_7_A4_div = and(entering_PA_normalCase_div, T_542) @[DivSqrtRecF64_mulAddZ31.scala 505:41] 
    node T_545 = mux(zLinPiece_0_A4_div, UInt<9>("h01c7"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 507:12] 
    node T_548 = mux(zLinPiece_1_A4_div, UInt<9>("h016c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 508:12] 
    node T_549 = or(T_545, T_548) @[DivSqrtRecF64_mulAddZ31.scala 507:59] 
    node T_552 = mux(zLinPiece_2_A4_div, UInt<9>("h012a"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 509:12] 
    node T_553 = or(T_549, T_552) @[DivSqrtRecF64_mulAddZ31.scala 508:59] 
    node T_556 = mux(zLinPiece_3_A4_div, UInt<9>("h0f8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 510:12] 
    node T_557 = or(T_553, T_556) @[DivSqrtRecF64_mulAddZ31.scala 509:59] 
    node T_560 = mux(zLinPiece_4_A4_div, UInt<9>("h0d2"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 511:12] 
    node T_561 = or(T_557, T_560) @[DivSqrtRecF64_mulAddZ31.scala 510:59] 
    node T_564 = mux(zLinPiece_5_A4_div, UInt<9>("h0b4"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 512:12] 
    node T_565 = or(T_561, T_564) @[DivSqrtRecF64_mulAddZ31.scala 511:59] 
    node T_568 = mux(zLinPiece_6_A4_div, UInt<9>("h09c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 513:12] 
    node T_569 = or(T_565, T_568) @[DivSqrtRecF64_mulAddZ31.scala 512:59] 
    node T_572 = mux(zLinPiece_7_A4_div, UInt<9>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 514:12] 
    node zK1_A4_div = or(T_569, T_572) @[DivSqrtRecF64_mulAddZ31.scala 513:59] 
    node T_574 = not(UInt<12>("h0fe3")) @[DivSqrtRecF64_mulAddZ31.scala 516:33] 
    node T_576 = mux(zLinPiece_0_A4_div, T_574, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 516:12] 
    node T_578 = not(UInt<12>("h0c5d")) @[DivSqrtRecF64_mulAddZ31.scala 517:33] 
    node T_580 = mux(zLinPiece_1_A4_div, T_578, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 517:12] 
    node T_581 = or(T_576, T_580) @[DivSqrtRecF64_mulAddZ31.scala 516:61] 
    node T_583 = not(UInt<12>("h098a")) @[DivSqrtRecF64_mulAddZ31.scala 518:33] 
    node T_585 = mux(zLinPiece_2_A4_div, T_583, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 518:12] 
    node T_586 = or(T_581, T_585) @[DivSqrtRecF64_mulAddZ31.scala 517:61] 
    node T_588 = not(UInt<12>("h0739")) @[DivSqrtRecF64_mulAddZ31.scala 519:33] 
    node T_590 = mux(zLinPiece_3_A4_div, T_588, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 519:12] 
    node T_591 = or(T_586, T_590) @[DivSqrtRecF64_mulAddZ31.scala 518:61] 
    node T_593 = not(UInt<12>("h054b")) @[DivSqrtRecF64_mulAddZ31.scala 520:33] 
    node T_595 = mux(zLinPiece_4_A4_div, T_593, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 520:12] 
    node T_596 = or(T_591, T_595) @[DivSqrtRecF64_mulAddZ31.scala 519:61] 
    node T_598 = not(UInt<12>("h03a9")) @[DivSqrtRecF64_mulAddZ31.scala 521:33] 
    node T_600 = mux(zLinPiece_5_A4_div, T_598, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 521:12] 
    node T_601 = or(T_596, T_600) @[DivSqrtRecF64_mulAddZ31.scala 520:61] 
    node T_603 = not(UInt<12>("h0242")) @[DivSqrtRecF64_mulAddZ31.scala 522:33] 
    node T_605 = mux(zLinPiece_6_A4_div, T_603, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 522:12] 
    node T_606 = or(T_601, T_605) @[DivSqrtRecF64_mulAddZ31.scala 521:61] 
    node T_608 = not(UInt<12>("h010b")) @[DivSqrtRecF64_mulAddZ31.scala 523:33] 
    node T_610 = mux(zLinPiece_7_A4_div, T_608, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 523:12] 
    node zComplFractK0_A4_div = or(T_606, T_610) @[DivSqrtRecF64_mulAddZ31.scala 522:61] 
    node zFractB_A7_sqrt = mux(entering_PA_normalCase_sqrt, fractB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 525:30] 
    node T_612 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 527:55] 
    node T_614 = eq(T_612, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 527:47] 
    node T_615 = and(entering_PA_normalCase_sqrt, T_614) @[DivSqrtRecF64_mulAddZ31.scala 527:44] 
    node T_616 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 527:72] 
    node T_618 = eq(T_616, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 527:62] 
    node zQuadPiece_0_A7_sqrt = and(T_615, T_618) @[DivSqrtRecF64_mulAddZ31.scala 527:59] 
    node T_619 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 528:55] 
    node T_621 = eq(T_619, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 528:47] 
    node T_622 = and(entering_PA_normalCase_sqrt, T_621) @[DivSqrtRecF64_mulAddZ31.scala 528:44] 
    node T_623 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 528:72] 
    node zQuadPiece_1_A7_sqrt = and(T_622, T_623) @[DivSqrtRecF64_mulAddZ31.scala 528:59] 
    node T_624 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 529:55] 
    node T_625 = and(entering_PA_normalCase_sqrt, T_624) @[DivSqrtRecF64_mulAddZ31.scala 529:44] 
    node T_626 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 529:72] 
    node T_628 = eq(T_626, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 529:62] 
    node zQuadPiece_2_A7_sqrt = and(T_625, T_628) @[DivSqrtRecF64_mulAddZ31.scala 529:59] 
    node T_629 = bits(expB_S, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 530:55] 
    node T_630 = and(entering_PA_normalCase_sqrt, T_629) @[DivSqrtRecF64_mulAddZ31.scala 530:44] 
    node T_631 = bits(fractB_S, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 530:72] 
    node zQuadPiece_3_A7_sqrt = and(T_630, T_631) @[DivSqrtRecF64_mulAddZ31.scala 530:59] 
    node T_634 = mux(zQuadPiece_0_A7_sqrt, UInt<9>("h01c8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 532:12] 
    node T_637 = mux(zQuadPiece_1_A7_sqrt, UInt<9>("h0c1"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 533:12] 
    node T_638 = or(T_634, T_637) @[DivSqrtRecF64_mulAddZ31.scala 532:61] 
    node T_641 = mux(zQuadPiece_2_A7_sqrt, UInt<9>("h0143"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 534:12] 
    node T_642 = or(T_638, T_641) @[DivSqrtRecF64_mulAddZ31.scala 533:61] 
    node T_645 = mux(zQuadPiece_3_A7_sqrt, UInt<9>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 535:12] 
    node zK2_A7_sqrt = or(T_642, T_645) @[DivSqrtRecF64_mulAddZ31.scala 534:61] 
    node T_647 = not(UInt<10>("h03d0")) @[DivSqrtRecF64_mulAddZ31.scala 537:35] 
    node T_649 = mux(zQuadPiece_0_A7_sqrt, T_647, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 537:12] 
    node T_651 = not(UInt<10>("h0220")) @[DivSqrtRecF64_mulAddZ31.scala 538:35] 
    node T_653 = mux(zQuadPiece_1_A7_sqrt, T_651, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 538:12] 
    node T_654 = or(T_649, T_653) @[DivSqrtRecF64_mulAddZ31.scala 537:63] 
    node T_656 = not(UInt<10>("h02b2")) @[DivSqrtRecF64_mulAddZ31.scala 539:35] 
    node T_658 = mux(zQuadPiece_2_A7_sqrt, T_656, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 539:12] 
    node T_659 = or(T_654, T_658) @[DivSqrtRecF64_mulAddZ31.scala 538:63] 
    node T_661 = not(UInt<10>("h0181")) @[DivSqrtRecF64_mulAddZ31.scala 540:35] 
    node T_663 = mux(zQuadPiece_3_A7_sqrt, T_661, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 540:12] 
    node zComplK1_A7_sqrt = or(T_659, T_663) @[DivSqrtRecF64_mulAddZ31.scala 539:63] 
    node T_664 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 542:55] 
    node T_666 = eq(T_664, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 542:47] 
    node T_667 = and(cyc_A6_sqrt, T_666) @[DivSqrtRecF64_mulAddZ31.scala 542:44] 
    node T_668 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 542:71] 
    node T_670 = eq(T_668, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 542:62] 
    node zQuadPiece_0_A6_sqrt = and(T_667, T_670) @[DivSqrtRecF64_mulAddZ31.scala 542:59] 
    node T_671 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 543:55] 
    node T_673 = eq(T_671, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 543:47] 
    node T_674 = and(cyc_A6_sqrt, T_673) @[DivSqrtRecF64_mulAddZ31.scala 543:44] 
    node T_675 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 543:71] 
    node zQuadPiece_1_A6_sqrt = and(T_674, T_675) @[DivSqrtRecF64_mulAddZ31.scala 543:59] 
    node T_676 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 544:55] 
    node T_677 = and(cyc_A6_sqrt, T_676) @[DivSqrtRecF64_mulAddZ31.scala 544:44] 
    node T_678 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 544:71] 
    node T_680 = eq(T_678, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 544:62] 
    node zQuadPiece_2_A6_sqrt = and(T_677, T_680) @[DivSqrtRecF64_mulAddZ31.scala 544:59] 
    node T_681 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 545:55] 
    node T_682 = and(cyc_A6_sqrt, T_681) @[DivSqrtRecF64_mulAddZ31.scala 545:44] 
    node T_683 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 545:71] 
    node zQuadPiece_3_A6_sqrt = and(T_682, T_683) @[DivSqrtRecF64_mulAddZ31.scala 545:59] 
    node T_685 = not(UInt<13>("h01fe5")) @[DivSqrtRecF64_mulAddZ31.scala 547:35] 
    node T_687 = mux(zQuadPiece_0_A6_sqrt, T_685, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 547:12] 
    node T_689 = not(UInt<13>("h01435")) @[DivSqrtRecF64_mulAddZ31.scala 548:35] 
    node T_691 = mux(zQuadPiece_1_A6_sqrt, T_689, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 548:12] 
    node T_692 = or(T_687, T_691) @[DivSqrtRecF64_mulAddZ31.scala 547:64] 
    node T_694 = not(UInt<13>("h0d2c")) @[DivSqrtRecF64_mulAddZ31.scala 549:35] 
    node T_696 = mux(zQuadPiece_2_A6_sqrt, T_694, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 549:12] 
    node T_697 = or(T_692, T_696) @[DivSqrtRecF64_mulAddZ31.scala 548:64] 
    node T_699 = not(UInt<13>("h04e8")) @[DivSqrtRecF64_mulAddZ31.scala 550:35] 
    node T_701 = mux(zQuadPiece_3_A6_sqrt, T_699, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 550:12] 
    node zComplFractK0_A6_sqrt = or(T_697, T_701) @[DivSqrtRecF64_mulAddZ31.scala 549:64] 
    node T_702 = bits(zFractB_A4_div, 48, 40) @[DivSqrtRecF64_mulAddZ31.scala 553:23] 
    node T_703 = or(T_702, zK2_A7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 553:32] 
    node T_705 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 554:17] 
    node T_707 = mux(T_705, nextMulAdd9A_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 554:16] 
    node mulAdd9A_A = or(T_703, T_707) @[DivSqrtRecF64_mulAddZ31.scala 553:46] 
    node T_708 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 556:37] 
    node T_709 = or(zK1_A4_div, T_708) @[DivSqrtRecF64_mulAddZ31.scala 556:20] 
    node T_711 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 557:17] 
    node T_713 = mux(T_711, nextMulAdd9B_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 557:16] 
    node mulAdd9B_A = or(T_709, T_713) @[DivSqrtRecF64_mulAddZ31.scala 556:46] 
    node T_714 = bits(entering_PA_normalCase_sqrt, 0, 0) @[Bitwise.scala 33:15] 
    node T_717 = mux(T_714, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 33:12] 
    node T_718 = cat(zComplK1_A7_sqrt, T_717) @[Cat.scala 20:58] 
    node T_719 = bits(cyc_A6_sqrt, 0, 0) @[Bitwise.scala 33:15] 
    node T_722 = mux(T_719, UInt<6>("h03f"), UInt<6>("h00")) @[Bitwise.scala 33:12] 
    node T_723 = cat(cyc_A6_sqrt, zComplFractK0_A6_sqrt) @[Cat.scala 20:58] 
    node T_724 = cat(T_723, T_722) @[Cat.scala 20:58] 
    node T_725 = or(T_718, T_724) @[DivSqrtRecF64_mulAddZ31.scala 559:71] 
    node T_726 = bits(entering_PA_normalCase_div, 0, 0) @[Bitwise.scala 33:15] 
    node T_729 = mux(T_726, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_730 = cat(entering_PA_normalCase_div, zComplFractK0_A4_div) @[Cat.scala 20:58] 
    node T_731 = cat(T_730, T_729) @[Cat.scala 20:58] 
    node T_732 = or(T_725, T_731) @[DivSqrtRecF64_mulAddZ31.scala 560:71] 
    node T_734 = shl(fractR0_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 563:54] 
    node T_735 = add(UInt<20>("h040000"), T_734) @[DivSqrtRecF64_mulAddZ31.scala 563:42] 
    node T_736 = tail(T_735, 1) @[DivSqrtRecF64_mulAddZ31.scala 563:42] 
    node T_738 = mux(cyc_A5_sqrt, T_736, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 563:12] 
    node T_739 = or(T_732, T_738) @[DivSqrtRecF64_mulAddZ31.scala 561:71] 
    node T_740 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 564:44] 
    node T_742 = eq(T_740, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 564:28] 
    node T_743 = and(cyc_A4_sqrt, T_742) @[DivSqrtRecF64_mulAddZ31.scala 564:25] 
    node T_746 = mux(T_743, UInt<11>("h0400"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 564:12] 
    node T_747 = or(T_739, T_746) @[DivSqrtRecF64_mulAddZ31.scala 563:70] 
    node T_748 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 565:43] 
    node T_749 = and(cyc_A4_sqrt, T_748) @[DivSqrtRecF64_mulAddZ31.scala 565:26] 
    node T_750 = or(T_749, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 565:48] 
    node T_751 = bits(sigB_PA, 46, 26) @[DivSqrtRecF64_mulAddZ31.scala 566:20] 
    node T_753 = add(T_751, UInt<11>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 566:29] 
    node T_754 = tail(T_753, 1) @[DivSqrtRecF64_mulAddZ31.scala 566:29] 
    node T_756 = mux(T_750, T_754, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 565:12] 
    node T_757 = or(T_747, T_756) @[DivSqrtRecF64_mulAddZ31.scala 564:71] 
    node T_758 = or(cyc_A3_sqrt, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 569:25] 
    node T_760 = mux(T_758, partNegSigma0_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 569:12] 
    node T_761 = or(T_757, T_760) @[DivSqrtRecF64_mulAddZ31.scala 568:11] 
    node T_762 = shl(fractR0_A, 16) @[DivSqrtRecF64_mulAddZ31.scala 570:45] 
    node T_764 = mux(cyc_A1_sqrt, T_762, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 570:12] 
    node T_765 = or(T_761, T_764) @[DivSqrtRecF64_mulAddZ31.scala 569:62] 
    node T_766 = shl(fractR0_A, 15) @[DivSqrtRecF64_mulAddZ31.scala 571:45] 
    node T_768 = mux(cyc_A1_div, T_766, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 571:12] 
    node mulAdd9C_A = or(T_765, T_768) @[DivSqrtRecF64_mulAddZ31.scala 570:62] 
    node T_769 = mul(mulAdd9A_A, mulAdd9B_A) @[DivSqrtRecF64_mulAddZ31.scala 573:20] 
    node T_771 = bits(mulAdd9C_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 573:61] 
    node T_772 = cat(UInt<1>("h00"), T_771) @[Cat.scala 20:58] 
    node T_773 = add(T_769, T_772) @[DivSqrtRecF64_mulAddZ31.scala 573:33] 
    node loMulAdd9Out_A = tail(T_773, 1) @[DivSqrtRecF64_mulAddZ31.scala 573:33] 
    node T_774 = bits(loMulAdd9Out_A, 18, 18) @[DivSqrtRecF64_mulAddZ31.scala 575:31] 
    node T_775 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 576:27] 
    node T_777 = add(T_775, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 576:36] 
    node T_778 = tail(T_777, 1) @[DivSqrtRecF64_mulAddZ31.scala 576:36] 
    node T_779 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 577:27] 
    node T_780 = mux(T_774, T_778, T_779) @[DivSqrtRecF64_mulAddZ31.scala 575:16] 
    node T_781 = bits(loMulAdd9Out_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 579:27] 
    node mulAdd9Out_A = cat(T_780, T_781) @[Cat.scala 20:58] 
    node T_782 = bits(mulAdd9Out_A, 19, 19) @[DivSqrtRecF64_mulAddZ31.scala 583:40] 
    node T_783 = and(cyc_A6_sqrt, T_782) @[DivSqrtRecF64_mulAddZ31.scala 583:25] 
    node T_784 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 584:13] 
    node T_785 = shr(T_784, 10) @[DivSqrtRecF64_mulAddZ31.scala 584:26] 
    node T_787 = mux(T_783, T_785, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 583:12] 
    node zFractR0_A6_sqrt = bits(T_787, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 586:10] 
    node T_788 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 590:35] 
    node T_789 = shl(mulAdd9Out_A, 1) @[DivSqrtRecF64_mulAddZ31.scala 590:52] 
    node sqrR0_A5_sqrt = mux(T_788, T_789, mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 590:28] 
    node T_790 = bits(mulAdd9Out_A, 20, 20) @[DivSqrtRecF64_mulAddZ31.scala 592:39] 
    node T_791 = and(entering_PA_normalCase_div, T_790) @[DivSqrtRecF64_mulAddZ31.scala 592:24] 
    node T_792 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 593:13] 
    node T_793 = shr(T_792, 11) @[DivSqrtRecF64_mulAddZ31.scala 593:26] 
    node T_795 = mux(T_791, T_793, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 592:12] 
    node zFractR0_A4_div = bits(T_795, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 595:10] 
    node T_796 = bits(mulAdd9Out_A, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 598:35] 
    node T_797 = and(cyc_A2, T_796) @[DivSqrtRecF64_mulAddZ31.scala 598:20] 
    node T_798 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 598:41] 
    node T_799 = shr(T_798, 2) @[DivSqrtRecF64_mulAddZ31.scala 598:54] 
    node T_801 = mux(T_797, T_799, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 598:12] 
    node zSigma0_A2 = bits(T_801, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 598:67] 
    node T_802 = shr(mulAdd9Out_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 601:36] 
    node T_803 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 601:54] 
    node T_804 = mux(sqrtOp_PA, T_802, T_803) @[DivSqrtRecF64_mulAddZ31.scala 601:12] 
    node fractR1_A1 = bits(T_804, 14, 0) @[DivSqrtRecF64_mulAddZ31.scala 601:58] 
    node r1_A1 = cat(UInt<1>("h01"), fractR1_A1) @[Cat.scala 20:58] 
    node T_806 = bits(exp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 603:33] 
    node T_807 = shl(r1_A1, 1) @[DivSqrtRecF64_mulAddZ31.scala 603:43] 
    node ER1_A1_sqrt = mux(T_806, T_807, r1_A1) @[DivSqrtRecF64_mulAddZ31.scala 603:26] 
    node T_808 = or(cyc_A6_sqrt, entering_PA_normalCase_div) @[DivSqrtRecF64_mulAddZ31.scala 605:23] 
    when T_808 : @[DivSqrtRecF64_mulAddZ31.scala 605:38] 
      node T_809 = or(zFractR0_A6_sqrt, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 606:39] 
      fractR0_A <= T_809 @[DivSqrtRecF64_mulAddZ31.scala 606:19] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 605:38] 
    when cyc_A5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 609:24] 
      node T_810 = shr(sqrR0_A5_sqrt, 10) @[DivSqrtRecF64_mulAddZ31.scala 610:40] 
      hiSqrR0_A_sqrt <= T_810 @[DivSqrtRecF64_mulAddZ31.scala 610:24] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 609:24] 
    node T_811 = or(cyc_A4_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 613:23] 
    when T_811 : @[DivSqrtRecF64_mulAddZ31.scala 613:34] 
      node T_812 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 616:56] 
      node T_813 = mux(cyc_A4_sqrt, mulAdd9Out_A, T_812) @[DivSqrtRecF64_mulAddZ31.scala 616:16] 
      node T_814 = bits(T_813, 20, 0) @[DivSqrtRecF64_mulAddZ31.scala 616:60] 
      partNegSigma0_A <= T_814 @[DivSqrtRecF64_mulAddZ31.scala 615:25] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 613:34] 
    node T_815 = or(entering_PA_normalCase_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 620:21] 
    node T_816 = or(T_815, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 620:36] 
    node T_817 = or(T_816, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 620:51] 
    node T_818 = or(T_817, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 620:61] 
    node T_819 = or(T_818, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 620:71] 
    when T_819 : @[DivSqrtRecF64_mulAddZ31.scala 621:7] 
      node T_820 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 623:40] 
      node T_821 = shr(T_820, 11) @[DivSqrtRecF64_mulAddZ31.scala 623:53] 
      node T_823 = mux(entering_PA_normalCase_sqrt, T_821, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 623:16] 
      node T_824 = or(T_823, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 623:68] 
      node T_825 = bits(sigB_PA, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 625:47] 
      node T_827 = mux(cyc_A4_sqrt, T_825, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 625:16] 
      node T_828 = or(T_824, T_827) @[DivSqrtRecF64_mulAddZ31.scala 624:68] 
      node T_829 = bits(zFractB_A4_div, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 626:27] 
      node T_830 = or(T_828, T_829) @[DivSqrtRecF64_mulAddZ31.scala 625:68] 
      node T_831 = or(cyc_A5_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 627:29] 
      node T_832 = bits(sigB_PA, 52, 44) @[DivSqrtRecF64_mulAddZ31.scala 627:47] 
      node T_834 = mux(T_831, T_832, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 627:16] 
      node T_835 = or(T_830, T_834) @[DivSqrtRecF64_mulAddZ31.scala 626:68] 
      node T_836 = or(T_835, zSigma0_A2) @[DivSqrtRecF64_mulAddZ31.scala 627:68] 
      nextMulAdd9A_A <= T_836 @[DivSqrtRecF64_mulAddZ31.scala 622:24] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 621:7] 
    node T_837 = or(entering_PA_normalCase_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 630:23] 
    node T_838 = or(T_837, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 630:38] 
    node T_839 = or(T_838, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 630:53] 
    node T_840 = or(T_839, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 630:63] 
    when T_840 : @[DivSqrtRecF64_mulAddZ31.scala 630:74] 
      node T_841 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 632:28] 
      node T_842 = or(T_841, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 632:73] 
      node T_843 = bits(sqrR0_A5_sqrt, 9, 1) @[DivSqrtRecF64_mulAddZ31.scala 634:43] 
      node T_845 = mux(cyc_A5_sqrt, T_843, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 634:16] 
      node T_846 = or(T_842, T_845) @[DivSqrtRecF64_mulAddZ31.scala 633:73] 
      node T_847 = or(T_846, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 634:73] 
      node T_848 = bits(hiSqrR0_A_sqrt, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 636:44] 
      node T_850 = mux(cyc_A4_sqrt, T_848, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 636:16] 
      node T_851 = or(T_847, T_850) @[DivSqrtRecF64_mulAddZ31.scala 635:73] 
      node T_853 = bits(fractR0_A, 8, 1) @[DivSqrtRecF64_mulAddZ31.scala 637:55] 
      node T_854 = cat(UInt<1>("h01"), T_853) @[Cat.scala 20:58] 
      node T_856 = mux(cyc_A2, T_854, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 637:16] 
      node T_857 = or(T_851, T_856) @[DivSqrtRecF64_mulAddZ31.scala 636:73] 
      nextMulAdd9B_A <= T_857 @[DivSqrtRecF64_mulAddZ31.scala 631:24] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 630:74] 
    when cyc_A1_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 640:24] 
      ER1_B_sqrt <= ER1_A1_sqrt @[DivSqrtRecF64_mulAddZ31.scala 641:20] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 640:24] 
    node T_858 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 647:16] 
    node T_859 = or(T_858, cyc_B6_div) @[DivSqrtRecF64_mulAddZ31.scala 647:31] 
    node T_860 = or(T_859, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 647:45] 
    node T_861 = or(T_860, cyc_B3) @[DivSqrtRecF64_mulAddZ31.scala 647:55] 
    node T_862 = or(T_861, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 647:65] 
    node T_863 = or(T_862, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 648:25] 
    node T_864 = or(T_863, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 648:35] 
    io.latchMulAddA_0 <= T_864 @[DivSqrtRecF64_mulAddZ31.scala 646:23] 
    node T_865 = shl(ER1_A1_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 650:51] 
    node T_867 = mux(cyc_A1_sqrt, T_865, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 650:12] 
    node T_868 = or(cyc_B7_sqrt, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 651:25] 
    node T_870 = mux(T_868, sigB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 651:12] 
    node T_871 = or(T_867, T_870) @[DivSqrtRecF64_mulAddZ31.scala 650:67] 
    node T_873 = mux(cyc_B6_div, sigA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 652:12] 
    node T_874 = or(T_871, T_873) @[DivSqrtRecF64_mulAddZ31.scala 651:67] 
    node T_875 = bits(zSigma1_B4, 45, 12) @[DivSqrtRecF64_mulAddZ31.scala 653:19] 
    node T_876 = or(T_874, T_875) @[DivSqrtRecF64_mulAddZ31.scala 652:67] 
    node T_877 = or(cyc_B3, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 655:20] 
    node T_878 = bits(sigXNU_B3_CX, 57, 12) @[DivSqrtRecF64_mulAddZ31.scala 655:48] 
    node T_880 = mux(T_877, T_878, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 655:12] 
    node T_881 = or(T_876, T_880) @[DivSqrtRecF64_mulAddZ31.scala 653:67] 
    node T_882 = bits(sigXN_C, 57, 25) @[DivSqrtRecF64_mulAddZ31.scala 656:43] 
    node T_883 = shl(T_882, 13) @[DivSqrtRecF64_mulAddZ31.scala 656:51] 
    node T_885 = mux(cyc_C4_div, T_883, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 656:12] 
    node T_886 = or(T_881, T_885) @[DivSqrtRecF64_mulAddZ31.scala 655:67] 
    node T_887 = shl(u_C_sqrt, 15) @[DivSqrtRecF64_mulAddZ31.scala 657:44] 
    node T_889 = mux(cyc_C4_sqrt, T_887, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 657:12] 
    node T_890 = or(T_886, T_889) @[DivSqrtRecF64_mulAddZ31.scala 656:67] 
    node T_892 = mux(cyc_C1_div, sigB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 658:12] 
    node T_893 = or(T_890, T_892) @[DivSqrtRecF64_mulAddZ31.scala 657:67] 
    node T_894 = or(T_893, zComplSigT_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 658:67] 
    io.mulAddA_0 <= T_894 @[DivSqrtRecF64_mulAddZ31.scala 649:18] 
    node T_895 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:16] 
    node T_896 = or(T_895, cyc_B6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:31] 
    node T_897 = or(T_896, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 661:46] 
    node T_898 = or(T_897, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 661:56] 
    node T_899 = or(T_898, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 662:25] 
    node T_900 = or(T_899, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 662:35] 
    io.latchMulAddB_0 <= T_900 @[DivSqrtRecF64_mulAddZ31.scala 660:23] 
    node T_901 = shl(r1_A1, 36) @[DivSqrtRecF64_mulAddZ31.scala 664:31] 
    node T_903 = mux(cyc_A1, T_901, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 664:12] 
    node T_904 = shl(ESqrR1_B_sqrt, 19) @[DivSqrtRecF64_mulAddZ31.scala 665:39] 
    node T_906 = mux(cyc_B7_sqrt, T_904, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 665:12] 
    node T_907 = or(T_903, T_906) @[DivSqrtRecF64_mulAddZ31.scala 664:55] 
    node T_908 = shl(ER1_B_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 666:36] 
    node T_910 = mux(cyc_B6_sqrt, T_908, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 666:12] 
    node T_911 = or(T_907, T_910) @[DivSqrtRecF64_mulAddZ31.scala 665:55] 
    node T_912 = or(T_911, zSigma1_B4) @[DivSqrtRecF64_mulAddZ31.scala 666:55] 
    node T_913 = bits(sqrSigma1_C, 30, 1) @[DivSqrtRecF64_mulAddZ31.scala 668:37] 
    node T_915 = mux(cyc_C6_sqrt, T_913, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 668:12] 
    node T_916 = or(T_912, T_915) @[DivSqrtRecF64_mulAddZ31.scala 667:55] 
    node T_918 = mux(cyc_C4, sqrSigma1_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 669:12] 
    node T_919 = or(T_916, T_918) @[DivSqrtRecF64_mulAddZ31.scala 668:55] 
    node T_920 = or(T_919, zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 669:55] 
    io.mulAddB_0 <= T_920 @[DivSqrtRecF64_mulAddZ31.scala 663:18] 
    node T_921 = or(cyc_A4, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 672:20] 
    node T_922 = or(T_921, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 672:34] 
    node T_923 = or(T_922, cyc_B10_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 672:48] 
    node T_924 = or(T_923, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:30] 
    node T_925 = or(T_924, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:45] 
    node T_926 = or(T_925, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 673:60] 
    node T_927 = or(T_926, cyc_B5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 673:70] 
    node T_928 = or(T_927, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 674:29] 
    node T_929 = or(T_928, cyc_B2_div) @[DivSqrtRecF64_mulAddZ31.scala 674:44] 
    node T_930 = or(T_929, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 674:58] 
    node T_931 = or(T_930, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 674:73] 
    node T_932 = or(cyc_A3, cyc_A2_div) @[DivSqrtRecF64_mulAddZ31.scala 676:20] 
    node T_933 = or(T_932, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 676:34] 
    node T_934 = or(T_933, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 677:29] 
    node T_935 = or(T_934, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 677:44] 
    node T_936 = or(T_935, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 677:54] 
    node T_937 = or(T_936, cyc_B4_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 677:64] 
    node T_938 = or(T_937, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 678:29] 
    node T_939 = or(T_938, cyc_B1_div) @[DivSqrtRecF64_mulAddZ31.scala 678:44] 
    node T_940 = or(T_939, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 678:58] 
    node T_941 = or(T_940, valid_normalCase_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 678:73] 
    node T_942 = or(cyc_A2, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 680:20] 
    node T_943 = or(T_942, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 680:34] 
    node T_944 = or(T_943, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 681:29] 
    node T_945 = or(T_944, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 681:44] 
    node T_946 = or(T_945, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 681:54] 
    node T_947 = or(T_946, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 681:64] 
    node T_948 = or(T_947, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 682:29] 
    node T_949 = or(T_948, cyc_C5) @[DivSqrtRecF64_mulAddZ31.scala 682:44] 
    node T_950 = or(T_949, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 682:54] 
    node T_951 = or(io.latchMulAddA_0, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 684:31] 
    node T_952 = or(T_951, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 684:41] 
    node T_953 = cat(T_950, T_952) @[Cat.scala 20:58] 
    node T_954 = cat(T_931, T_941) @[Cat.scala 20:58] 
    node T_955 = cat(T_954, T_953) @[Cat.scala 20:58] 
    io.usingMulAdd <= T_955 @[DivSqrtRecF64_mulAddZ31.scala 671:20] 
    node T_956 = shl(sigX1_B, 47) @[DivSqrtRecF64_mulAddZ31.scala 688:45] 
    node T_958 = mux(cyc_B1, T_956, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 688:12] 
    node T_959 = shl(sigX1_B, 46) @[DivSqrtRecF64_mulAddZ31.scala 689:45] 
    node T_961 = mux(cyc_C6_sqrt, T_959, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 689:12] 
    node T_962 = or(T_958, T_961) @[DivSqrtRecF64_mulAddZ31.scala 688:64] 
    node T_963 = or(cyc_C4_sqrt, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 690:25] 
    node T_964 = shl(sigXN_C, 47) @[DivSqrtRecF64_mulAddZ31.scala 690:45] 
    node T_966 = mux(T_963, T_964, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 690:12] 
    node T_967 = or(T_962, T_966) @[DivSqrtRecF64_mulAddZ31.scala 689:64] 
    node T_969 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 691:27] 
    node T_970 = and(cyc_E3_div, T_969) @[DivSqrtRecF64_mulAddZ31.scala 691:24] 
    node T_971 = shl(fractA_0_PC, 53) @[DivSqrtRecF64_mulAddZ31.scala 691:49] 
    node T_973 = mux(T_970, T_971, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 691:12] 
    node T_974 = or(T_967, T_973) @[DivSqrtRecF64_mulAddZ31.scala 690:64] 
    node T_975 = bits(exp_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 693:24] 
    node T_976 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 694:29] 
    node T_978 = cat(T_976, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_979 = bits(sigB_PC, 1, 1) @[DivSqrtRecF64_mulAddZ31.scala 695:29] 
    node T_980 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 695:42] 
    node T_981 = xor(T_979, T_980) @[DivSqrtRecF64_mulAddZ31.scala 695:33] 
    node T_982 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 695:54] 
    node T_983 = cat(T_981, T_982) @[Cat.scala 20:58] 
    node T_984 = mux(T_975, T_978, T_983) @[DivSqrtRecF64_mulAddZ31.scala 693:17] 
    node T_986 = eq(extraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 696:22] 
    node T_988 = cat(T_986, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_989 = xor(T_984, T_988) @[DivSqrtRecF64_mulAddZ31.scala 696:16] 
    node T_990 = shl(T_989, 54) @[DivSqrtRecF64_mulAddZ31.scala 697:14] 
    node T_992 = mux(cyc_E3_sqrt, T_990, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 692:12] 
    node T_993 = or(T_974, T_992) @[DivSqrtRecF64_mulAddZ31.scala 691:64] 
    io.mulAddC_2 <= T_993 @[DivSqrtRecF64_mulAddZ31.scala 687:18] 
    node ESqrR1_B8_sqrt = bits(io.mulAddResult_3, 103, 72) @[DivSqrtRecF64_mulAddZ31.scala 701:43] 
    node T_994 = bits(io.mulAddResult_3, 90, 45) @[DivSqrtRecF64_mulAddZ31.scala 702:49] 
    node T_995 = not(T_994) @[DivSqrtRecF64_mulAddZ31.scala 702:31] 
    node T_997 = mux(cyc_B4, T_995, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 702:22] 
    zSigma1_B4 <= T_997 @[DivSqrtRecF64_mulAddZ31.scala 702:16] 
    node sqrSigma1_B1 = bits(io.mulAddResult_3, 79, 47) @[DivSqrtRecF64_mulAddZ31.scala 703:41] 
    node T_998 = bits(io.mulAddResult_3, 104, 47) @[DivSqrtRecF64_mulAddZ31.scala 704:38] 
    sigXNU_B3_CX <= T_998 @[DivSqrtRecF64_mulAddZ31.scala 704:18] 
    node T_999 = bits(io.mulAddResult_3, 104, 104) @[DivSqrtRecF64_mulAddZ31.scala 705:39] 
    node E_C1_div = eq(T_999, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 705:20] 
    node T_1002 = eq(E_C1_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 707:28] 
    node T_1003 = and(cyc_C1_div, T_1002) @[DivSqrtRecF64_mulAddZ31.scala 707:25] 
    node T_1004 = or(T_1003, cyc_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 707:40] 
    node T_1005 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 708:31] 
    node T_1006 = not(T_1005) @[DivSqrtRecF64_mulAddZ31.scala 708:13] 
    node T_1008 = mux(T_1004, T_1006, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 707:12] 
    node T_1009 = and(cyc_C1_div, E_C1_div) @[DivSqrtRecF64_mulAddZ31.scala 711:24] 
    node T_1011 = bits(io.mulAddResult_3, 102, 50) @[DivSqrtRecF64_mulAddZ31.scala 712:47] 
    node T_1012 = not(T_1011) @[DivSqrtRecF64_mulAddZ31.scala 712:29] 
    node T_1013 = cat(UInt<1>("h00"), T_1012) @[Cat.scala 20:58] 
    node T_1015 = mux(T_1009, T_1013, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 711:12] 
    node T_1016 = or(T_1008, T_1015) @[DivSqrtRecF64_mulAddZ31.scala 710:11] 
    zComplSigT_C1 <= T_1016 @[DivSqrtRecF64_mulAddZ31.scala 706:19] 
    node T_1017 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 716:44] 
    node T_1018 = not(T_1017) @[DivSqrtRecF64_mulAddZ31.scala 716:26] 
    node T_1020 = mux(cyc_C1_sqrt, T_1018, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 716:12] 
    zComplSigT_C1_sqrt <= T_1020 @[DivSqrtRecF64_mulAddZ31.scala 715:24] 
    node sigT_C1 = not(zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 720:19] 
    node remT_E2 = bits(io.mulAddResult_3, 55, 0) @[DivSqrtRecF64_mulAddZ31.scala 721:36] 
    when cyc_B8_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 723:24] 
      ESqrR1_B_sqrt <= ESqrR1_B8_sqrt @[DivSqrtRecF64_mulAddZ31.scala 724:23] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 723:24] 
    when cyc_B3 : @[DivSqrtRecF64_mulAddZ31.scala 726:19] 
      sigX1_B <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 727:17] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 726:19] 
    when cyc_B1 : @[DivSqrtRecF64_mulAddZ31.scala 729:19] 
      sqrSigma1_C <= sqrSigma1_B1 @[DivSqrtRecF64_mulAddZ31.scala 730:21] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 729:19] 
    node T_1021 = or(cyc_C6_sqrt, cyc_C5_div) @[DivSqrtRecF64_mulAddZ31.scala 733:23] 
    node T_1022 = or(T_1021, cyc_C3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 733:37] 
    when T_1022 : @[DivSqrtRecF64_mulAddZ31.scala 733:53] 
      sigXN_C <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 734:17] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 733:53] 
    when cyc_C5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 736:24] 
      node T_1023 = bits(sigXNU_B3_CX, 56, 26) @[DivSqrtRecF64_mulAddZ31.scala 737:33] 
      u_C_sqrt <= T_1023 @[DivSqrtRecF64_mulAddZ31.scala 737:18] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 736:24] 
    when cyc_C1 : @[DivSqrtRecF64_mulAddZ31.scala 739:19] 
      E_E_div <= E_C1_div @[DivSqrtRecF64_mulAddZ31.scala 740:18] 
      node T_1024 = bits(sigT_C1, 53, 1) @[DivSqrtRecF64_mulAddZ31.scala 741:28] 
      sigT_E <= T_1024 @[DivSqrtRecF64_mulAddZ31.scala 741:18] 
      node T_1025 = bits(sigT_C1, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 742:28] 
      extraT_E <= T_1025 @[DivSqrtRecF64_mulAddZ31.scala 742:18] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 739:19] 
    when cyc_E2 : @[DivSqrtRecF64_mulAddZ31.scala 745:19] 
      node T_1026 = bits(remT_E2, 55, 55) @[DivSqrtRecF64_mulAddZ31.scala 746:47] 
      node T_1027 = bits(remT_E2, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 746:61] 
      node T_1028 = mux(sqrtOp_PC, T_1026, T_1027) @[DivSqrtRecF64_mulAddZ31.scala 746:27] 
      isNegRemT_E <= T_1028 @[DivSqrtRecF64_mulAddZ31.scala 746:21] 
      node T_1029 = bits(remT_E2, 53, 0) @[DivSqrtRecF64_mulAddZ31.scala 748:21] 
      node T_1031 = eq(T_1029, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 748:29] 
      node T_1033 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 749:18] 
      node T_1034 = bits(remT_E2, 55, 54) @[DivSqrtRecF64_mulAddZ31.scala 749:41] 
      node T_1036 = eq(T_1034, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 749:50] 
      node T_1037 = or(T_1033, T_1036) @[DivSqrtRecF64_mulAddZ31.scala 749:30] 
      node T_1038 = and(T_1031, T_1037) @[DivSqrtRecF64_mulAddZ31.scala 748:42] 
      trueEqX_E1 <= T_1038 @[DivSqrtRecF64_mulAddZ31.scala 747:22] 
      skip @[DivSqrtRecF64_mulAddZ31.scala 745:19] 
    node T_1040 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 755:13] 
    node T_1041 = and(T_1040, E_E_div) @[DivSqrtRecF64_mulAddZ31.scala 755:25] 
    node T_1043 = mux(T_1041, exp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 755:12] 
    node T_1045 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:13] 
    node T_1047 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:28] 
    node T_1048 = and(T_1045, T_1047) @[DivSqrtRecF64_mulAddZ31.scala 756:25] 
    node T_1050 = mux(T_1048, expP1_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 756:12] 
    node T_1051 = or(T_1043, T_1050) @[DivSqrtRecF64_mulAddZ31.scala 755:76] 
    node T_1052 = shr(exp_PC, 1) @[DivSqrtRecF64_mulAddZ31.scala 757:42] 
    node T_1054 = add(T_1052, UInt<12>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 757:47] 
    node T_1055 = tail(T_1054, 1) @[DivSqrtRecF64_mulAddZ31.scala 757:47] 
    node T_1057 = mux(sqrtOp_PC, T_1055, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 757:12] 
    node sExpX_E = or(T_1051, T_1057) @[DivSqrtRecF64_mulAddZ31.scala 756:76] 
    node posExpX_E = bits(sExpX_E, 12, 0) @[DivSqrtRecF64_mulAddZ31.scala 759:28] 
    node T_1058 = not(posExpX_E) @[primitives.scala 50:21] 
    node T_1059 = bits(T_1058, 12, 12) @[primitives.scala 56:25] 
    node T_1060 = bits(T_1058, 11, 0) @[primitives.scala 57:26] 
    node T_1061 = bits(T_1060, 11, 11) @[primitives.scala 56:25] 
    node T_1062 = bits(T_1060, 10, 0) @[primitives.scala 57:26] 
    node T_1063 = bits(T_1062, 10, 10) @[primitives.scala 56:25] 
    node T_1064 = bits(T_1062, 9, 0) @[primitives.scala 57:26] 
    node T_1065 = bits(T_1064, 9, 9) @[primitives.scala 56:25] 
    node T_1066 = bits(T_1064, 8, 0) @[primitives.scala 57:26] 
    node T_1068 = bits(T_1066, 8, 8) @[primitives.scala 56:25] 
    node T_1069 = bits(T_1066, 7, 0) @[primitives.scala 57:26] 
    node T_1071 = bits(T_1069, 7, 7) @[primitives.scala 56:25] 
    node T_1072 = bits(T_1069, 6, 0) @[primitives.scala 57:26] 
    node T_1074 = bits(T_1072, 6, 6) @[primitives.scala 56:25] 
    node T_1075 = bits(T_1072, 5, 0) @[primitives.scala 57:26] 
    node T_1078 = dshr(asSInt(UInt<65>("h010000000000000000")), T_1075) @[primitives.scala 68:52] 
    node T_1079 = bits(T_1078, 63, 14) @[primitives.scala 69:26] 
    node T_1080 = bits(T_1079, 31, 0) @[Bitwise.scala 65:18] 
    node T_1083 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 58:47] 
    node T_1084 = xor(UInt<32>("h0ffffffff"), T_1083) @[Bitwise.scala 58:21] 
    node T_1085 = shr(T_1080, 16) @[Bitwise.scala 59:21] 
    node T_1086 = and(T_1085, T_1084) @[Bitwise.scala 59:31] 
    node T_1087 = bits(T_1080, 15, 0) @[Bitwise.scala 59:46] 
    node T_1088 = shl(T_1087, 16) @[Bitwise.scala 59:65] 
    node T_1089 = not(T_1084) @[Bitwise.scala 59:77] 
    node T_1090 = and(T_1088, T_1089) @[Bitwise.scala 59:75] 
    node T_1091 = or(T_1086, T_1090) @[Bitwise.scala 59:39] 
    node T_1092 = bits(T_1084, 23, 0) @[Bitwise.scala 58:28] 
    node T_1093 = shl(T_1092, 8) @[Bitwise.scala 58:47] 
    node T_1094 = xor(T_1084, T_1093) @[Bitwise.scala 58:21] 
    node T_1095 = shr(T_1091, 8) @[Bitwise.scala 59:21] 
    node T_1096 = and(T_1095, T_1094) @[Bitwise.scala 59:31] 
    node T_1097 = bits(T_1091, 23, 0) @[Bitwise.scala 59:46] 
    node T_1098 = shl(T_1097, 8) @[Bitwise.scala 59:65] 
    node T_1099 = not(T_1094) @[Bitwise.scala 59:77] 
    node T_1100 = and(T_1098, T_1099) @[Bitwise.scala 59:75] 
    node T_1101 = or(T_1096, T_1100) @[Bitwise.scala 59:39] 
    node T_1102 = bits(T_1094, 27, 0) @[Bitwise.scala 58:28] 
    node T_1103 = shl(T_1102, 4) @[Bitwise.scala 58:47] 
    node T_1104 = xor(T_1094, T_1103) @[Bitwise.scala 58:21] 
    node T_1105 = shr(T_1101, 4) @[Bitwise.scala 59:21] 
    node T_1106 = and(T_1105, T_1104) @[Bitwise.scala 59:31] 
    node T_1107 = bits(T_1101, 27, 0) @[Bitwise.scala 59:46] 
    node T_1108 = shl(T_1107, 4) @[Bitwise.scala 59:65] 
    node T_1109 = not(T_1104) @[Bitwise.scala 59:77] 
    node T_1110 = and(T_1108, T_1109) @[Bitwise.scala 59:75] 
    node T_1111 = or(T_1106, T_1110) @[Bitwise.scala 59:39] 
    node T_1112 = bits(T_1104, 29, 0) @[Bitwise.scala 58:28] 
    node T_1113 = shl(T_1112, 2) @[Bitwise.scala 58:47] 
    node T_1114 = xor(T_1104, T_1113) @[Bitwise.scala 58:21] 
    node T_1115 = shr(T_1111, 2) @[Bitwise.scala 59:21] 
    node T_1116 = and(T_1115, T_1114) @[Bitwise.scala 59:31] 
    node T_1117 = bits(T_1111, 29, 0) @[Bitwise.scala 59:46] 
    node T_1118 = shl(T_1117, 2) @[Bitwise.scala 59:65] 
    node T_1119 = not(T_1114) @[Bitwise.scala 59:77] 
    node T_1120 = and(T_1118, T_1119) @[Bitwise.scala 59:75] 
    node T_1121 = or(T_1116, T_1120) @[Bitwise.scala 59:39] 
    node T_1122 = bits(T_1114, 30, 0) @[Bitwise.scala 58:28] 
    node T_1123 = shl(T_1122, 1) @[Bitwise.scala 58:47] 
    node T_1124 = xor(T_1114, T_1123) @[Bitwise.scala 58:21] 
    node T_1125 = shr(T_1121, 1) @[Bitwise.scala 59:21] 
    node T_1126 = and(T_1125, T_1124) @[Bitwise.scala 59:31] 
    node T_1127 = bits(T_1121, 30, 0) @[Bitwise.scala 59:46] 
    node T_1128 = shl(T_1127, 1) @[Bitwise.scala 59:65] 
    node T_1129 = not(T_1124) @[Bitwise.scala 59:77] 
    node T_1130 = and(T_1128, T_1129) @[Bitwise.scala 59:75] 
    node T_1131 = or(T_1126, T_1130) @[Bitwise.scala 59:39] 
    node T_1132 = bits(T_1079, 49, 32) @[Bitwise.scala 65:44] 
    node T_1133 = bits(T_1132, 15, 0) @[Bitwise.scala 65:18] 
    node T_1136 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 58:47] 
    node T_1137 = xor(UInt<16>("h0ffff"), T_1136) @[Bitwise.scala 58:21] 
    node T_1138 = shr(T_1133, 8) @[Bitwise.scala 59:21] 
    node T_1139 = and(T_1138, T_1137) @[Bitwise.scala 59:31] 
    node T_1140 = bits(T_1133, 7, 0) @[Bitwise.scala 59:46] 
    node T_1141 = shl(T_1140, 8) @[Bitwise.scala 59:65] 
    node T_1142 = not(T_1137) @[Bitwise.scala 59:77] 
    node T_1143 = and(T_1141, T_1142) @[Bitwise.scala 59:75] 
    node T_1144 = or(T_1139, T_1143) @[Bitwise.scala 59:39] 
    node T_1145 = bits(T_1137, 11, 0) @[Bitwise.scala 58:28] 
    node T_1146 = shl(T_1145, 4) @[Bitwise.scala 58:47] 
    node T_1147 = xor(T_1137, T_1146) @[Bitwise.scala 58:21] 
    node T_1148 = shr(T_1144, 4) @[Bitwise.scala 59:21] 
    node T_1149 = and(T_1148, T_1147) @[Bitwise.scala 59:31] 
    node T_1150 = bits(T_1144, 11, 0) @[Bitwise.scala 59:46] 
    node T_1151 = shl(T_1150, 4) @[Bitwise.scala 59:65] 
    node T_1152 = not(T_1147) @[Bitwise.scala 59:77] 
    node T_1153 = and(T_1151, T_1152) @[Bitwise.scala 59:75] 
    node T_1154 = or(T_1149, T_1153) @[Bitwise.scala 59:39] 
    node T_1155 = bits(T_1147, 13, 0) @[Bitwise.scala 58:28] 
    node T_1156 = shl(T_1155, 2) @[Bitwise.scala 58:47] 
    node T_1157 = xor(T_1147, T_1156) @[Bitwise.scala 58:21] 
    node T_1158 = shr(T_1154, 2) @[Bitwise.scala 59:21] 
    node T_1159 = and(T_1158, T_1157) @[Bitwise.scala 59:31] 
    node T_1160 = bits(T_1154, 13, 0) @[Bitwise.scala 59:46] 
    node T_1161 = shl(T_1160, 2) @[Bitwise.scala 59:65] 
    node T_1162 = not(T_1157) @[Bitwise.scala 59:77] 
    node T_1163 = and(T_1161, T_1162) @[Bitwise.scala 59:75] 
    node T_1164 = or(T_1159, T_1163) @[Bitwise.scala 59:39] 
    node T_1165 = bits(T_1157, 14, 0) @[Bitwise.scala 58:28] 
    node T_1166 = shl(T_1165, 1) @[Bitwise.scala 58:47] 
    node T_1167 = xor(T_1157, T_1166) @[Bitwise.scala 58:21] 
    node T_1168 = shr(T_1164, 1) @[Bitwise.scala 59:21] 
    node T_1169 = and(T_1168, T_1167) @[Bitwise.scala 59:31] 
    node T_1170 = bits(T_1164, 14, 0) @[Bitwise.scala 59:46] 
    node T_1171 = shl(T_1170, 1) @[Bitwise.scala 59:65] 
    node T_1172 = not(T_1167) @[Bitwise.scala 59:77] 
    node T_1173 = and(T_1171, T_1172) @[Bitwise.scala 59:75] 
    node T_1174 = or(T_1169, T_1173) @[Bitwise.scala 59:39] 
    node T_1175 = bits(T_1132, 17, 16) @[Bitwise.scala 65:44] 
    node T_1176 = bits(T_1175, 0, 0) @[Bitwise.scala 65:18] 
    node T_1177 = bits(T_1175, 1, 1) @[Bitwise.scala 65:44] 
    node T_1178 = cat(T_1176, T_1177) @[Cat.scala 20:58] 
    node T_1179 = cat(T_1174, T_1178) @[Cat.scala 20:58] 
    node T_1180 = cat(T_1131, T_1179) @[Cat.scala 20:58] 
    node T_1181 = not(T_1180) @[primitives.scala 65:36] 
    node T_1182 = mux(T_1074, UInt<1>("h00"), T_1181) @[primitives.scala 65:21] 
    node T_1183 = not(T_1182) @[primitives.scala 65:17] 
    node T_1184 = not(T_1183) @[primitives.scala 65:36] 
    node T_1185 = mux(T_1071, UInt<1>("h00"), T_1184) @[primitives.scala 65:21] 
    node T_1186 = not(T_1185) @[primitives.scala 65:17] 
    node T_1187 = not(T_1186) @[primitives.scala 65:36] 
    node T_1188 = mux(T_1068, UInt<1>("h00"), T_1187) @[primitives.scala 65:21] 
    node T_1189 = not(T_1188) @[primitives.scala 65:17] 
    node T_1190 = not(T_1189) @[primitives.scala 65:36] 
    node T_1191 = mux(T_1065, UInt<1>("h00"), T_1190) @[primitives.scala 65:21] 
    node T_1192 = not(T_1191) @[primitives.scala 65:17] 
    node T_1194 = cat(T_1192, UInt<3>("h07")) @[Cat.scala 20:58] 
    node T_1195 = bits(T_1064, 9, 9) @[primitives.scala 56:25] 
    node T_1196 = bits(T_1064, 8, 0) @[primitives.scala 57:26] 
    node T_1197 = bits(T_1196, 8, 8) @[primitives.scala 56:25] 
    node T_1198 = bits(T_1196, 7, 0) @[primitives.scala 57:26] 
    node T_1199 = bits(T_1198, 7, 7) @[primitives.scala 56:25] 
    node T_1200 = bits(T_1198, 6, 0) @[primitives.scala 57:26] 
    node T_1201 = bits(T_1200, 6, 6) @[primitives.scala 56:25] 
    node T_1202 = bits(T_1200, 5, 0) @[primitives.scala 57:26] 
    node T_1204 = dshr(asSInt(UInt<65>("h010000000000000000")), T_1202) @[primitives.scala 68:52] 
    node T_1205 = bits(T_1204, 2, 0) @[primitives.scala 69:26] 
    node T_1206 = bits(T_1205, 1, 0) @[Bitwise.scala 65:18] 
    node T_1207 = bits(T_1206, 0, 0) @[Bitwise.scala 65:18] 
    node T_1208 = bits(T_1206, 1, 1) @[Bitwise.scala 65:44] 
    node T_1209 = cat(T_1207, T_1208) @[Cat.scala 20:58] 
    node T_1210 = bits(T_1205, 2, 2) @[Bitwise.scala 65:44] 
    node T_1211 = cat(T_1209, T_1210) @[Cat.scala 20:58] 
    node T_1213 = mux(T_1201, T_1211, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_1215 = mux(T_1199, T_1213, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_1217 = mux(T_1197, T_1215, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_1219 = mux(T_1195, T_1217, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_1220 = mux(T_1063, T_1194, T_1219) @[primitives.scala 61:20] 
    node T_1222 = mux(T_1061, T_1220, UInt<1>("h00")) @[primitives.scala 59:20] 
    node roundMask_E = mux(T_1059, T_1222, UInt<1>("h00")) @[primitives.scala 59:20] 
    node T_1225 = cat(UInt<1>("h00"), roundMask_E) @[Cat.scala 20:58] 
    node T_1226 = not(T_1225) @[DivSqrtRecF64_mulAddZ31.scala 763:9] 
    node T_1228 = cat(roundMask_E, UInt<1>("h01")) @[Cat.scala 20:58] 
    node incrPosMask_E = and(T_1226, T_1228) @[DivSqrtRecF64_mulAddZ31.scala 763:39] 
    node T_1229 = shr(incrPosMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 765:51] 
    node T_1230 = and(sigT_E, T_1229) @[DivSqrtRecF64_mulAddZ31.scala 765:36] 
    node hiRoundPosBitT_E = neq(T_1230, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 765:56] 
    node T_1232 = shr(roundMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 766:55] 
    node T_1233 = and(sigT_E, T_1232) @[DivSqrtRecF64_mulAddZ31.scala 766:42] 
    node all0sHiRoundExtraT_E = eq(T_1233, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 766:60] 
    node T_1235 = not(sigT_E) @[DivSqrtRecF64_mulAddZ31.scala 767:34] 
    node T_1236 = shr(roundMask_E, 1) @[DivSqrtRecF64_mulAddZ31.scala 767:55] 
    node T_1237 = and(T_1235, T_1236) @[DivSqrtRecF64_mulAddZ31.scala 767:42] 
    node all1sHiRoundExtraT_E = eq(T_1237, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 767:60] 
    node T_1239 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 769:23] 
    node T_1241 = eq(T_1239, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 769:10] 
    node T_1242 = or(T_1241, hiRoundPosBitT_E) @[DivSqrtRecF64_mulAddZ31.scala 769:27] 
    node all1sHiRoundT_E = and(T_1242, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 769:48] 
    node T_1244 = add(UInt<54>("h00"), sigT_E) @[DivSqrtRecF64_mulAddZ31.scala 773:33] 
    node T_1245 = tail(T_1244, 1) @[DivSqrtRecF64_mulAddZ31.scala 773:33] 
    node T_1246 = add(T_1245, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 773:42] 
    node sigAdjT_E = tail(T_1246, 1) @[DivSqrtRecF64_mulAddZ31.scala 773:42] 
    node T_1248 = not(roundMask_E) @[DivSqrtRecF64_mulAddZ31.scala 774:47] 
    node T_1249 = cat(UInt<1>("h01"), T_1248) @[Cat.scala 20:58] 
    node sigY0_E = and(sigAdjT_E, T_1249) @[DivSqrtRecF64_mulAddZ31.scala 774:29] 
    node T_1251 = cat(UInt<1>("h00"), roundMask_E) @[Cat.scala 20:58] 
    node T_1252 = or(sigAdjT_E, T_1251) @[DivSqrtRecF64_mulAddZ31.scala 775:30] 
    node T_1254 = add(T_1252, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 775:62] 
    node sigY1_E = tail(T_1254, 1) @[DivSqrtRecF64_mulAddZ31.scala 775:62] 
    node T_1256 = eq(isNegRemT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 783:24] 
    node T_1258 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 783:41] 
    node T_1259 = and(T_1256, T_1258) @[DivSqrtRecF64_mulAddZ31.scala 783:38] 
    node trueLtX_E1 = mux(sqrtOp_PC, T_1259, isNegRemT_E) @[DivSqrtRecF64_mulAddZ31.scala 783:12] 
    node T_1260 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 793:25] 
    node T_1262 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 793:32] 
    node T_1263 = and(T_1260, T_1262) @[DivSqrtRecF64_mulAddZ31.scala 793:29] 
    node T_1264 = and(T_1263, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 793:45] 
    node T_1265 = and(T_1264, extraT_E) @[DivSqrtRecF64_mulAddZ31.scala 793:69] 
    node hiRoundPosBit_E1 = xor(hiRoundPosBitT_E, T_1265) @[DivSqrtRecF64_mulAddZ31.scala 792:26] 
    node T_1267 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:28] 
    node T_1269 = eq(extraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:44] 
    node T_1270 = or(T_1267, T_1269) @[DivSqrtRecF64_mulAddZ31.scala 795:41] 
    node T_1272 = eq(all1sHiRoundExtraT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 795:58] 
    node anyRoundExtra_E1 = or(T_1270, T_1272) @[DivSqrtRecF64_mulAddZ31.scala 795:55] 
    node T_1273 = and(roundingMode_near_even_PC, hiRoundPosBit_E1) @[DivSqrtRecF64_mulAddZ31.scala 797:39] 
    node T_1275 = eq(anyRoundExtra_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 798:17] 
    node T_1276 = and(T_1273, T_1275) @[DivSqrtRecF64_mulAddZ31.scala 797:59] 
    node roundEvenMask_E1 = mux(T_1276, incrPosMask_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 797:12] 
    node T_1278 = and(roundMagDown_PC, extraT_E) @[DivSqrtRecF64_mulAddZ31.scala 804:30] 
    node T_1280 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 804:45] 
    node T_1281 = and(T_1278, T_1280) @[DivSqrtRecF64_mulAddZ31.scala 804:42] 
    node T_1282 = and(T_1281, all1sHiRoundT_E) @[DivSqrtRecF64_mulAddZ31.scala 804:58] 
    node T_1284 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 806:32] 
    node T_1285 = and(extraT_E, T_1284) @[DivSqrtRecF64_mulAddZ31.scala 806:29] 
    node T_1287 = eq(trueEqX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 806:48] 
    node T_1288 = and(T_1285, T_1287) @[DivSqrtRecF64_mulAddZ31.scala 806:45] 
    node T_1290 = eq(all1sHiRoundT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 807:23] 
    node T_1291 = or(T_1288, T_1290) @[DivSqrtRecF64_mulAddZ31.scala 806:62] 
    node T_1292 = and(roundMagUp_PC, T_1291) @[DivSqrtRecF64_mulAddZ31.scala 805:28] 
    node T_1293 = or(T_1282, T_1292) @[DivSqrtRecF64_mulAddZ31.scala 804:78] 
    node T_1295 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 810:37] 
    node T_1296 = or(extraT_E, T_1295) @[DivSqrtRecF64_mulAddZ31.scala 810:34] 
    node T_1297 = bits(roundMask_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 810:67] 
    node T_1299 = eq(T_1297, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 810:54] 
    node T_1300 = and(T_1296, T_1299) @[DivSqrtRecF64_mulAddZ31.scala 810:51] 
    node T_1301 = or(hiRoundPosBitT_E, T_1300) @[DivSqrtRecF64_mulAddZ31.scala 809:36] 
    node T_1303 = eq(trueLtX_E1, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 811:36] 
    node T_1304 = and(extraT_E, T_1303) @[DivSqrtRecF64_mulAddZ31.scala 811:33] 
    node T_1305 = and(T_1304, all1sHiRoundExtraT_E) @[DivSqrtRecF64_mulAddZ31.scala 811:49] 
    node T_1306 = or(T_1301, T_1305) @[DivSqrtRecF64_mulAddZ31.scala 810:72] 
    node T_1307 = and(roundingMode_near_even_PC, T_1306) @[DivSqrtRecF64_mulAddZ31.scala 808:40] 
    node T_1308 = or(T_1293, T_1307) @[DivSqrtRecF64_mulAddZ31.scala 807:43] 
    node T_1309 = mux(T_1308, sigY1_E, sigY0_E) @[DivSqrtRecF64_mulAddZ31.scala 804:12] 
    node T_1310 = not(roundEvenMask_E1) @[DivSqrtRecF64_mulAddZ31.scala 814:13] 
    node sigY_E1 = and(T_1309, T_1310) @[DivSqrtRecF64_mulAddZ31.scala 814:11] 
    node fractY_E1 = bits(sigY_E1, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 815:28] 
    node inexactY_E1 = or(hiRoundPosBit_E1, anyRoundExtra_E1) @[DivSqrtRecF64_mulAddZ31.scala 816:40] 
    node T_1311 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 818:22] 
    node T_1313 = eq(T_1311, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 818:13] 
    node T_1315 = mux(T_1313, sExpX_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 818:12] 
    node T_1316 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 819:20] 
    node T_1318 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 819:28] 
    node T_1319 = and(T_1316, T_1318) @[DivSqrtRecF64_mulAddZ31.scala 819:25] 
    node T_1320 = and(T_1319, E_E_div) @[DivSqrtRecF64_mulAddZ31.scala 819:40] 
    node T_1322 = mux(T_1320, expP1_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 819:12] 
    node T_1323 = or(T_1315, T_1322) @[DivSqrtRecF64_mulAddZ31.scala 818:73] 
    node T_1324 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 820:20] 
    node T_1326 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:28] 
    node T_1327 = and(T_1324, T_1326) @[DivSqrtRecF64_mulAddZ31.scala 820:25] 
    node T_1329 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:43] 
    node T_1330 = and(T_1327, T_1329) @[DivSqrtRecF64_mulAddZ31.scala 820:40] 
    node T_1332 = mux(T_1330, expP2_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 820:12] 
    node T_1333 = or(T_1323, T_1332) @[DivSqrtRecF64_mulAddZ31.scala 819:73] 
    node T_1334 = bits(sigY_E1, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 821:20] 
    node T_1335 = and(T_1334, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 821:25] 
    node T_1336 = shr(expP2_PC, 1) @[DivSqrtRecF64_mulAddZ31.scala 822:22] 
    node T_1338 = add(T_1336, UInt<12>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 822:27] 
    node T_1339 = tail(T_1338, 1) @[DivSqrtRecF64_mulAddZ31.scala 822:27] 
    node T_1341 = mux(T_1335, T_1339, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 821:12] 
    node sExpY_E1 = or(T_1333, T_1341) @[DivSqrtRecF64_mulAddZ31.scala 820:73] 
    node expY_E1 = bits(sExpY_E1, 11, 0) @[DivSqrtRecF64_mulAddZ31.scala 825:27] 
    node T_1342 = bits(sExpY_E1, 13, 13) @[DivSqrtRecF64_mulAddZ31.scala 827:34] 
    node T_1344 = eq(T_1342, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 827:24] 
    node T_1346 = bits(sExpY_E1, 12, 10) @[DivSqrtRecF64_mulAddZ31.scala 827:70] 
    node T_1347 = leq(UInt<3>("h03"), T_1346) @[DivSqrtRecF64_mulAddZ31.scala 827:59] 
    node overflowY_E1 = and(T_1344, T_1347) @[DivSqrtRecF64_mulAddZ31.scala 827:39] 
    node T_1348 = bits(sExpY_E1, 13, 13) @[DivSqrtRecF64_mulAddZ31.scala 830:17] 
    node T_1349 = bits(sExpY_E1, 12, 0) @[DivSqrtRecF64_mulAddZ31.scala 830:34] 
    node T_1351 = lt(T_1349, UInt<13>("h03ce")) @[DivSqrtRecF64_mulAddZ31.scala 830:42] 
    node totalUnderflowY_E1 = or(T_1348, T_1351) @[DivSqrtRecF64_mulAddZ31.scala 830:22] 
    node T_1353 = leq(posExpX_E, UInt<13>("h0401")) @[DivSqrtRecF64_mulAddZ31.scala 833:25] 
    node T_1354 = and(T_1353, inexactY_E1) @[DivSqrtRecF64_mulAddZ31.scala 833:56] 
    node underflowY_E1 = or(totalUnderflowY_E1, T_1354) @[DivSqrtRecF64_mulAddZ31.scala 832:28] 
    node T_1356 = eq(isNaNB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 839:13] 
    node T_1358 = eq(isZeroB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 839:28] 
    node T_1359 = and(T_1356, T_1358) @[DivSqrtRecF64_mulAddZ31.scala 839:25] 
    node T_1360 = and(T_1359, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 839:41] 
    node T_1361 = and(isZeroA_PC, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 840:25] 
    node T_1362 = and(isInfA_PC, isInfB_PC) @[DivSqrtRecF64_mulAddZ31.scala 840:54] 
    node T_1363 = or(T_1361, T_1362) @[DivSqrtRecF64_mulAddZ31.scala 840:40] 
    node notSigNaN_invalid_PC = mux(sqrtOp_PC, T_1360, T_1363) @[DivSqrtRecF64_mulAddZ31.scala 838:12] 
    node T_1365 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 843:10] 
    node T_1366 = and(T_1365, isSigNaNA_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:22] 
    node T_1367 = or(T_1366, isSigNaNB_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:39] 
    node invalid_PC = or(T_1367, notSigNaN_invalid_PC) @[DivSqrtRecF64_mulAddZ31.scala 843:55] 
    node T_1369 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:9] 
    node T_1371 = eq(isSpecialA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:24] 
    node T_1372 = and(T_1369, T_1371) @[DivSqrtRecF64_mulAddZ31.scala 845:21] 
    node T_1374 = eq(isZeroA_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 845:43] 
    node T_1375 = and(T_1372, T_1374) @[DivSqrtRecF64_mulAddZ31.scala 845:40] 
    node infinity_PC = and(T_1375, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 845:56] 
    node overflow_E1 = and(normalCase_PC, overflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 847:37] 
    node underflow_E1 = and(normalCase_PC, underflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 848:38] 
    node T_1376 = or(overflow_E1, underflow_E1) @[DivSqrtRecF64_mulAddZ31.scala 852:21] 
    node T_1377 = and(normalCase_PC, inexactY_E1) @[DivSqrtRecF64_mulAddZ31.scala 852:55] 
    node inexact_E1 = or(T_1376, T_1377) @[DivSqrtRecF64_mulAddZ31.scala 852:37] 
    node T_1378 = or(isZeroA_PC, isInfB_PC) @[DivSqrtRecF64_mulAddZ31.scala 857:24] 
    node T_1380 = eq(roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 857:63] 
    node T_1381 = and(totalUnderflowY_E1, T_1380) @[DivSqrtRecF64_mulAddZ31.scala 857:60] 
    node T_1382 = or(T_1378, T_1381) @[DivSqrtRecF64_mulAddZ31.scala 857:37] 
    node notSpecial_isZeroOut_E1 = mux(sqrtOp_PC, isZeroB_PC, T_1382) @[DivSqrtRecF64_mulAddZ31.scala 855:12] 
    node T_1383 = and(normalCase_PC, totalUnderflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 860:23] 
    node pegMinFiniteMagOut_E1 = and(T_1383, roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 860:45] 
    node T_1385 = eq(overflowY_roundMagUp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 861:48] 
    node pegMaxFiniteMagOut_E1 = and(overflow_E1, T_1385) @[DivSqrtRecF64_mulAddZ31.scala 861:45] 
    node T_1386 = or(isInfA_PC, isZeroB_PC) @[DivSqrtRecF64_mulAddZ31.scala 865:23] 
    node T_1387 = and(overflow_E1, overflowY_roundMagUp_PC) @[DivSqrtRecF64_mulAddZ31.scala 865:53] 
    node T_1388 = or(T_1386, T_1387) @[DivSqrtRecF64_mulAddZ31.scala 865:37] 
    node notNaN_isInfOut_E1 = mux(sqrtOp_PC, isInfB_PC, T_1388) @[DivSqrtRecF64_mulAddZ31.scala 863:12] 
    node T_1390 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 868:10] 
    node T_1391 = and(T_1390, isNaNA_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:22] 
    node T_1392 = or(T_1391, isNaNB_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:36] 
    node isNaNOut_PC = or(T_1392, notSigNaN_invalid_PC) @[DivSqrtRecF64_mulAddZ31.scala 868:49] 
    node T_1394 = eq(isNaNOut_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 871:9] 
    node T_1395 = and(isZeroB_PC, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 871:52] 
    node T_1396 = mux(sqrtOp_PC, T_1395, sign_PC) @[DivSqrtRecF64_mulAddZ31.scala 871:29] 
    node signOut_PC = and(T_1394, T_1396) @[DivSqrtRecF64_mulAddZ31.scala 871:23] 
    node T_1398 = not(UInt<12>("h01ff")) @[DivSqrtRecF64_mulAddZ31.scala 875:19] 
    node T_1400 = mux(notSpecial_isZeroOut_E1, T_1398, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 874:18] 
    node T_1401 = not(T_1400) @[DivSqrtRecF64_mulAddZ31.scala 874:14] 
    node T_1402 = and(expY_E1, T_1401) @[DivSqrtRecF64_mulAddZ31.scala 873:18] 
    node T_1404 = not(UInt<12>("h03ce")) @[DivSqrtRecF64_mulAddZ31.scala 879:19] 
    node T_1406 = mux(pegMinFiniteMagOut_E1, T_1404, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 878:18] 
    node T_1407 = not(T_1406) @[DivSqrtRecF64_mulAddZ31.scala 878:14] 
    node T_1408 = and(T_1402, T_1407) @[DivSqrtRecF64_mulAddZ31.scala 877:16] 
    node T_1410 = not(UInt<12>("h0bff")) @[DivSqrtRecF64_mulAddZ31.scala 883:19] 
    node T_1412 = mux(pegMaxFiniteMagOut_E1, T_1410, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 882:18] 
    node T_1413 = not(T_1412) @[DivSqrtRecF64_mulAddZ31.scala 882:14] 
    node T_1414 = and(T_1408, T_1413) @[DivSqrtRecF64_mulAddZ31.scala 881:16] 
    node T_1416 = not(UInt<12>("h0dff")) @[DivSqrtRecF64_mulAddZ31.scala 887:19] 
    node T_1418 = mux(notNaN_isInfOut_E1, T_1416, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 886:18] 
    node T_1419 = not(T_1418) @[DivSqrtRecF64_mulAddZ31.scala 886:14] 
    node T_1420 = and(T_1414, T_1419) @[DivSqrtRecF64_mulAddZ31.scala 885:16] 
    node T_1423 = mux(pegMinFiniteMagOut_E1, UInt<12>("h03ce"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 890:16] 
    node T_1424 = or(T_1420, T_1423) @[DivSqrtRecF64_mulAddZ31.scala 889:17] 
    node T_1427 = mux(pegMaxFiniteMagOut_E1, UInt<12>("h0bff"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 891:16] 
    node T_1428 = or(T_1424, T_1427) @[DivSqrtRecF64_mulAddZ31.scala 890:76] 
    node T_1431 = mux(notNaN_isInfOut_E1, UInt<12>("h0c00"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 892:16] 
    node T_1432 = or(T_1428, T_1431) @[DivSqrtRecF64_mulAddZ31.scala 891:76] 
    node T_1435 = mux(isNaNOut_PC, UInt<12>("h0e00"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 893:16] 
    node expOut_E1 = or(T_1432, T_1435) @[DivSqrtRecF64_mulAddZ31.scala 892:76] 
    node T_1436 = or(notSpecial_isZeroOut_E1, totalUnderflowY_E1) @[DivSqrtRecF64_mulAddZ31.scala 895:37] 
    node T_1437 = or(T_1436, isNaNOut_PC) @[DivSqrtRecF64_mulAddZ31.scala 895:59] 
    node T_1439 = shl(UInt<1>("h01"), 51) @[DivSqrtRecF64_mulAddZ31.scala 896:37] 
    node T_1441 = mux(isNaNOut_PC, T_1439, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 896:16] 
    node T_1442 = mux(T_1437, T_1441, fractY_E1) @[DivSqrtRecF64_mulAddZ31.scala 895:12] 
    node T_1443 = bits(pegMaxFiniteMagOut_E1, 0, 0) @[Bitwise.scala 33:15] 
    node T_1446 = mux(T_1443, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 33:12] 
    node fractOut_E1 = or(T_1442, T_1446) @[DivSqrtRecF64_mulAddZ31.scala 898:11] 
    node T_1447 = cat(signOut_PC, expOut_E1) @[Cat.scala 20:58] 
    node T_1448 = cat(T_1447, fractOut_E1) @[Cat.scala 20:58] 
    io.out <= T_1448 @[DivSqrtRecF64_mulAddZ31.scala 900:12] 
    node T_1449 = cat(underflow_E1, inexact_E1) @[Cat.scala 20:58] 
    node T_1450 = cat(invalid_PC, infinity_PC) @[Cat.scala 20:58] 
    node T_1451 = cat(T_1450, overflow_E1) @[Cat.scala 20:58] 
    node T_1452 = cat(T_1451, T_1449) @[Cat.scala 20:58] 
    io.exceptionFlags <= T_1452 @[DivSqrtRecF64_mulAddZ31.scala 902:23] 
    
  module Mul54 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip val_s0 : UInt<1>, flip latch_a_s0 : UInt<1>, flip a_s0 : UInt<54>, flip latch_b_s0 : UInt<1>, flip b_s0 : UInt<54>, flip c_s2 : UInt<105>, result_s3 : UInt<105>}
    
    io is invalid
    reg val_s1 : UInt<1>, clk
    reg val_s2 : UInt<1>, clk
    reg reg_a_s1 : UInt<54>, clk
    reg reg_b_s1 : UInt<54>, clk
    reg reg_a_s2 : UInt<54>, clk
    reg reg_b_s2 : UInt<54>, clk
    reg reg_result_s3 : UInt<105>, clk
    val_s1 <= io.val_s0 @[DivSqrtRecF64.scala 104:12] 
    val_s2 <= val_s1 @[DivSqrtRecF64.scala 105:12] 
    when io.val_s0 : @[DivSqrtRecF64.scala 107:22] 
      when io.latch_a_s0 : @[DivSqrtRecF64.scala 108:30] 
        reg_a_s1 <= io.a_s0 @[DivSqrtRecF64.scala 109:22] 
        skip @[DivSqrtRecF64.scala 108:30] 
      when io.latch_b_s0 : @[DivSqrtRecF64.scala 111:30] 
        reg_b_s1 <= io.b_s0 @[DivSqrtRecF64.scala 112:22] 
        skip @[DivSqrtRecF64.scala 111:30] 
      skip @[DivSqrtRecF64.scala 107:22] 
    when val_s1 : @[DivSqrtRecF64.scala 116:19] 
      reg_a_s2 <= reg_a_s1 @[DivSqrtRecF64.scala 117:18] 
      reg_b_s2 <= reg_b_s1 @[DivSqrtRecF64.scala 118:18] 
      skip @[DivSqrtRecF64.scala 116:19] 
    when val_s2 : @[DivSqrtRecF64.scala 121:19] 
      node T_14 = mul(reg_a_s2, reg_b_s2) @[DivSqrtRecF64.scala 122:36] 
      node T_15 = bits(T_14, 104, 0) @[DivSqrtRecF64.scala 122:47] 
      node T_16 = add(T_15, io.c_s2) @[DivSqrtRecF64.scala 122:55] 
      node T_17 = tail(T_16, 1) @[DivSqrtRecF64.scala 122:55] 
      reg_result_s3 <= T_17 @[DivSqrtRecF64.scala 122:23] 
      skip @[DivSqrtRecF64.scala 121:19] 
    io.result_s3 <= reg_result_s3 @[DivSqrtRecF64.scala 125:18] 
    
  module DivSqrtRecF64 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inReady_div : UInt<1>, inReady_sqrt : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<2>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>}
    
    io is invalid
    inst ds of DivSqrtRecF64_mulAddZ31 @[DivSqrtRecF64.scala 59:20] 
    ds.io is invalid
    ds.clk <= clk
    ds.reset <= reset
    io.inReady_div <= ds.io.inReady_div @[DivSqrtRecF64.scala 61:20] 
    io.inReady_sqrt <= ds.io.inReady_sqrt @[DivSqrtRecF64.scala 62:21] 
    ds.io.inValid <= io.inValid @[DivSqrtRecF64.scala 63:19] 
    ds.io.sqrtOp <= io.sqrtOp @[DivSqrtRecF64.scala 64:18] 
    ds.io.a <= io.a @[DivSqrtRecF64.scala 65:13] 
    ds.io.b <= io.b @[DivSqrtRecF64.scala 66:13] 
    ds.io.roundingMode <= io.roundingMode @[DivSqrtRecF64.scala 67:24] 
    io.outValid_div <= ds.io.outValid_div @[DivSqrtRecF64.scala 68:21] 
    io.outValid_sqrt <= ds.io.outValid_sqrt @[DivSqrtRecF64.scala 69:22] 
    io.out <= ds.io.out @[DivSqrtRecF64.scala 70:12] 
    io.exceptionFlags <= ds.io.exceptionFlags @[DivSqrtRecF64.scala 71:23] 
    inst mul of Mul54 @[DivSqrtRecF64.scala 73:21] 
    mul.io is invalid
    mul.clk <= clk
    mul.reset <= reset
    node T_11 = bits(ds.io.usingMulAdd, 0, 0) @[DivSqrtRecF64.scala 75:39] 
    mul.io.val_s0 <= T_11 @[DivSqrtRecF64.scala 75:19] 
    mul.io.latch_a_s0 <= ds.io.latchMulAddA_0 @[DivSqrtRecF64.scala 76:23] 
    mul.io.a_s0 <= ds.io.mulAddA_0 @[DivSqrtRecF64.scala 77:17] 
    mul.io.latch_b_s0 <= ds.io.latchMulAddB_0 @[DivSqrtRecF64.scala 78:23] 
    mul.io.b_s0 <= ds.io.mulAddB_0 @[DivSqrtRecF64.scala 79:17] 
    mul.io.c_s2 <= ds.io.mulAddC_2 @[DivSqrtRecF64.scala 80:17] 
    ds.io.mulAddResult_3 <= mul.io.result_s3 @[DivSqrtRecF64.scala 81:26] 
    
  module RecFNToRecFN_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<65>, flip roundingMode : UInt<2>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node T_4 = bits(io.in, 63, 52) @[rawFNFromRecFN.scala 50:21] 
    node T_5 = bits(T_4, 11, 9) @[rawFNFromRecFN.scala 51:29] 
    node T_7 = eq(T_5, UInt<1>("h00")) @[rawFNFromRecFN.scala 51:54] 
    node T_8 = bits(T_4, 11, 10) @[rawFNFromRecFN.scala 52:29] 
    node T_10 = eq(T_8, UInt<2>("h03")) @[rawFNFromRecFN.scala 52:54] 
    wire T_18 : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<13>, sig : UInt<56>} @[rawFNFromRecFN.scala 54:23] 
    T_18 is invalid @[rawFNFromRecFN.scala 54:23] 
    node T_25 = bits(io.in, 64, 64) @[rawFNFromRecFN.scala 55:23] 
    T_18.sign <= T_25 @[rawFNFromRecFN.scala 55:18] 
    node T_26 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 56:40] 
    node T_27 = and(T_10, T_26) @[rawFNFromRecFN.scala 56:32] 
    T_18.isNaN <= T_27 @[rawFNFromRecFN.scala 56:19] 
    node T_28 = bits(T_4, 9, 9) @[rawFNFromRecFN.scala 57:40] 
    node T_30 = eq(T_28, UInt<1>("h00")) @[rawFNFromRecFN.scala 57:35] 
    node T_31 = and(T_10, T_30) @[rawFNFromRecFN.scala 57:32] 
    T_18.isInf <= T_31 @[rawFNFromRecFN.scala 57:19] 
    T_18.isZero <= T_7 @[rawFNFromRecFN.scala 58:20] 
    node T_32 = cvt(T_4) @[rawFNFromRecFN.scala 59:25] 
    T_18.sExp <= T_32 @[rawFNFromRecFN.scala 59:18] 
    node T_35 = eq(T_7, UInt<1>("h00")) @[rawFNFromRecFN.scala 60:36] 
    node T_36 = bits(io.in, 51, 0) @[rawFNFromRecFN.scala 60:48] 
    node T_38 = cat(T_36, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_39 = cat(UInt<1>("h00"), T_35) @[Cat.scala 20:58] 
    node T_40 = cat(T_39, T_38) @[Cat.scala 20:58] 
    T_18.sig <= T_40 @[rawFNFromRecFN.scala 60:17] 
    node T_42 = add(T_18.sExp, asSInt(UInt<12>("h0900"))) @[resizeRawFN.scala 49:31] 
    wire outRawFloat : {sign : UInt<1>, isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sExp : SInt<10>, sig : UInt<27>} @[resizeRawFN.scala 51:23] 
    outRawFloat is invalid @[resizeRawFN.scala 51:23] 
    outRawFloat.sign <= T_18.sign @[resizeRawFN.scala 52:20] 
    outRawFloat.isNaN <= T_18.isNaN @[resizeRawFN.scala 53:20] 
    outRawFloat.isInf <= T_18.isInf @[resizeRawFN.scala 54:20] 
    outRawFloat.isZero <= T_18.isZero @[resizeRawFN.scala 55:20] 
    node T_57 = lt(T_42, asSInt(UInt<1>("h00"))) @[resizeRawFN.scala 60:31] 
    node T_58 = bits(T_42, 12, 9) @[resizeRawFN.scala 61:33] 
    node T_60 = neq(T_58, UInt<1>("h00")) @[resizeRawFN.scala 61:65] 
    node T_65 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
    node T_67 = cat(T_65, UInt<2>("h00")) @[Cat.scala 20:58] 
    node T_68 = bits(T_42, 8, 0) @[resizeRawFN.scala 63:33] 
    node T_69 = mux(T_60, T_67, T_68) @[resizeRawFN.scala 61:25] 
    node T_70 = cat(T_57, T_69) @[Cat.scala 20:58] 
    node T_71 = asSInt(T_70) @[resizeRawFN.scala 65:20] 
    outRawFloat.sExp <= T_71 @[resizeRawFN.scala 56:18] 
    node T_72 = bits(T_18.sig, 55, 30) @[resizeRawFN.scala 71:28] 
    node T_73 = bits(T_18.sig, 29, 0) @[resizeRawFN.scala 72:28] 
    node T_75 = neq(T_73, UInt<1>("h00")) @[resizeRawFN.scala 72:56] 
    node T_76 = cat(T_72, T_75) @[Cat.scala 20:58] 
    outRawFloat.sig <= T_76 @[resizeRawFN.scala 67:17] 
    node T_77 = bits(outRawFloat.sig, 24, 24) @[RoundRawFNToRecFN.scala 61:57] 
    node T_79 = eq(T_77, UInt<1>("h00")) @[RoundRawFNToRecFN.scala 61:49] 
    node invalidExc = and(outRawFloat.isNaN, T_79) @[RoundRawFNToRecFN.scala 61:46] 
    inst RoundRawFNToRecFN_1_1 of RoundRawFNToRecFN @[RecFNToRecFN.scala 102:19] 
    RoundRawFNToRecFN_1_1.io is invalid
    RoundRawFNToRecFN_1_1.clk <= clk
    RoundRawFNToRecFN_1_1.reset <= reset
    RoundRawFNToRecFN_1_1.io.invalidExc <= invalidExc @[RecFNToRecFN.scala 103:41] 
    RoundRawFNToRecFN_1_1.io.infiniteExc <= UInt<1>("h00") @[RecFNToRecFN.scala 104:42] 
    RoundRawFNToRecFN_1_1.io.in <- outRawFloat @[RecFNToRecFN.scala 105:33] 
    RoundRawFNToRecFN_1_1.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 106:43] 
    io.out <= RoundRawFNToRecFN_1_1.io.out @[RecFNToRecFN.scala 107:16] 
    io.exceptionFlags <= RoundRawFNToRecFN_1_1.io.exceptionFlags @[RecFNToRecFN.scala 108:27] 
    
  module FPU : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, flip fromint_data : UInt<64>, flip fcsr_rm : UInt<3>, fcsr_flags : {valid : UInt<1>, bits : UInt<5>}, store_data : UInt<64>, toint_data : UInt<64>, flip dmem_resp_val : UInt<1>, flip dmem_resp_type : UInt<3>, flip dmem_resp_tag : UInt<5>, flip dmem_resp_data : UInt<64>, flip valid : UInt<1>, fcsr_rdy : UInt<1>, nack_mem : UInt<1>, illegal_rm : UInt<1>, flip killx : UInt<1>, flip killm : UInt<1>, dec : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, sboard_set : UInt<1>, sboard_clr : UInt<1>, sboard_clra : UInt<5>, flip cp_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, cp_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}}
    
    io is invalid
    reg ex_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    ex_reg_valid <= io.valid
    node req_valid = or(ex_reg_valid, io.cp_req.valid) @[fpu.scala 421:32] 
    reg ex_reg_inst : UInt<32>, clk
    when io.valid : @[Reg.scala 29:19] 
      ex_reg_inst <= io.inst @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_193 = eq(ex_reg_valid, UInt<1>("h00")) @[fpu.scala 423:40] 
    node ex_cp_valid = and(io.cp_req.valid, T_193) @[fpu.scala 423:37] 
    node T_195 = eq(io.killx, UInt<1>("h00")) @[fpu.scala 424:48] 
    node T_196 = and(ex_reg_valid, T_195) @[fpu.scala 424:45] 
    node T_197 = or(T_196, ex_cp_valid) @[fpu.scala 424:58] 
    reg mem_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    mem_reg_valid <= T_197
    reg mem_reg_inst : UInt<32>, clk
    when ex_reg_valid : @[Reg.scala 29:19] 
      mem_reg_inst <= ex_reg_inst @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg mem_cp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    mem_cp_valid <= ex_cp_valid
    node T_200 = or(io.killm, io.nack_mem) @[fpu.scala 427:25] 
    node T_202 = eq(mem_cp_valid, UInt<1>("h00")) @[fpu.scala 427:44] 
    node killm = and(T_200, T_202) @[fpu.scala 427:41] 
    node T_204 = eq(killm, UInt<1>("h00")) @[fpu.scala 428:49] 
    node T_205 = or(T_204, mem_cp_valid) @[fpu.scala 428:56] 
    node T_206 = and(mem_reg_valid, T_205) @[fpu.scala 428:45] 
    reg wb_reg_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wb_reg_valid <= T_206
    reg wb_cp_valid : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wb_cp_valid <= mem_cp_valid
    inst fp_decoder of FPUDecoder @[fpu.scala 431:26] 
    fp_decoder.io is invalid
    fp_decoder.clk <= clk
    fp_decoder.reset <= reset
    fp_decoder.io.inst <= io.inst @[fpu.scala 432:22] 
    wire cp_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>} @[fpu.scala 434:21] 
    cp_ctrl is invalid @[fpu.scala 434:21] 
    cp_ctrl <- io.cp_req.bits @[fpu.scala 435:11] 
    io.cp_resp.valid <= UInt<1>("h00") @[fpu.scala 436:20] 
    io.cp_resp.bits.data <= UInt<1>("h00") @[fpu.scala 437:24] 
    reg T_246 : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when io.valid : @[Reg.scala 29:19] 
      T_246 <- fp_decoder.io.sigs @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node ex_ctrl = mux(ex_reg_valid, T_246, cp_ctrl) @[fpu.scala 440:20] 
    reg mem_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when req_valid : @[Reg.scala 29:19] 
      mem_ctrl <- ex_ctrl @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg wb_ctrl : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>}, clk
    when mem_reg_valid : @[Reg.scala 29:19] 
      wb_ctrl <- mem_ctrl @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg load_wb : UInt<1>, clk
    load_wb <= io.dmem_resp_val
    node T_315 = eq(io.dmem_resp_type, UInt<3>("h02")) @[fpu.scala 446:52] 
    node T_316 = eq(io.dmem_resp_type, UInt<3>("h06")) @[fpu.scala 446:82] 
    node T_317 = or(T_315, T_316) @[fpu.scala 446:61] 
    reg load_wb_single : UInt<1>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19] 
      load_wb_single <= T_317 @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg load_wb_data : UInt<64>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19] 
      load_wb_data <= io.dmem_resp_data @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg load_wb_tag : UInt<5>, clk
    when io.dmem_resp_val : @[Reg.scala 29:19] 
      load_wb_tag <= io.dmem_resp_tag @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_318 = bits(load_wb_data, 31, 31) @[recFNFromFN.scala 47:22] 
    node T_319 = bits(load_wb_data, 30, 23) @[recFNFromFN.scala 48:23] 
    node T_320 = bits(load_wb_data, 22, 0) @[recFNFromFN.scala 49:25] 
    node T_322 = eq(T_319, UInt<1>("h00")) @[recFNFromFN.scala 51:34] 
    node T_324 = eq(T_320, UInt<1>("h00")) @[recFNFromFN.scala 52:38] 
    node T_325 = and(T_322, T_324) @[recFNFromFN.scala 53:34] 
    node T_326 = shl(T_320, 9) @[recFNFromFN.scala 56:26] 
    node T_327 = bits(T_326, 31, 16) @[CircuitMath.scala 26:17] 
    node T_328 = bits(T_326, 15, 0) @[CircuitMath.scala 27:17] 
    node T_330 = neq(T_327, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_331 = bits(T_327, 15, 8) @[CircuitMath.scala 26:17] 
    node T_332 = bits(T_327, 7, 0) @[CircuitMath.scala 27:17] 
    node T_334 = neq(T_331, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_335 = bits(T_331, 7, 4) @[CircuitMath.scala 26:17] 
    node T_336 = bits(T_331, 3, 0) @[CircuitMath.scala 27:17] 
    node T_338 = neq(T_335, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_339 = bits(T_335, 3, 3) @[CircuitMath.scala 23:12] 
    node T_341 = bits(T_335, 2, 2) @[CircuitMath.scala 23:12] 
    node T_343 = bits(T_335, 1, 1) @[CircuitMath.scala 21:8] 
    node T_344 = shl(T_343, 0) @[CircuitMath.scala 23:10] 
    node T_345 = mux(T_341, UInt<2>("h02"), T_344) @[CircuitMath.scala 23:10] 
    node T_346 = mux(T_339, UInt<2>("h03"), T_345) @[CircuitMath.scala 23:10] 
    node T_347 = bits(T_336, 3, 3) @[CircuitMath.scala 23:12] 
    node T_349 = bits(T_336, 2, 2) @[CircuitMath.scala 23:12] 
    node T_351 = bits(T_336, 1, 1) @[CircuitMath.scala 21:8] 
    node T_352 = shl(T_351, 0) @[CircuitMath.scala 23:10] 
    node T_353 = mux(T_349, UInt<2>("h02"), T_352) @[CircuitMath.scala 23:10] 
    node T_354 = mux(T_347, UInt<2>("h03"), T_353) @[CircuitMath.scala 23:10] 
    node T_355 = mux(T_338, T_346, T_354) @[CircuitMath.scala 29:21] 
    node T_356 = cat(T_338, T_355) @[Cat.scala 20:58] 
    node T_357 = bits(T_332, 7, 4) @[CircuitMath.scala 26:17] 
    node T_358 = bits(T_332, 3, 0) @[CircuitMath.scala 27:17] 
    node T_360 = neq(T_357, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_361 = bits(T_357, 3, 3) @[CircuitMath.scala 23:12] 
    node T_363 = bits(T_357, 2, 2) @[CircuitMath.scala 23:12] 
    node T_365 = bits(T_357, 1, 1) @[CircuitMath.scala 21:8] 
    node T_366 = shl(T_365, 0) @[CircuitMath.scala 23:10] 
    node T_367 = mux(T_363, UInt<2>("h02"), T_366) @[CircuitMath.scala 23:10] 
    node T_368 = mux(T_361, UInt<2>("h03"), T_367) @[CircuitMath.scala 23:10] 
    node T_369 = bits(T_358, 3, 3) @[CircuitMath.scala 23:12] 
    node T_371 = bits(T_358, 2, 2) @[CircuitMath.scala 23:12] 
    node T_373 = bits(T_358, 1, 1) @[CircuitMath.scala 21:8] 
    node T_374 = shl(T_373, 0) @[CircuitMath.scala 23:10] 
    node T_375 = mux(T_371, UInt<2>("h02"), T_374) @[CircuitMath.scala 23:10] 
    node T_376 = mux(T_369, UInt<2>("h03"), T_375) @[CircuitMath.scala 23:10] 
    node T_377 = mux(T_360, T_368, T_376) @[CircuitMath.scala 29:21] 
    node T_378 = cat(T_360, T_377) @[Cat.scala 20:58] 
    node T_379 = mux(T_334, T_356, T_378) @[CircuitMath.scala 29:21] 
    node T_380 = cat(T_334, T_379) @[Cat.scala 20:58] 
    node T_381 = bits(T_328, 15, 8) @[CircuitMath.scala 26:17] 
    node T_382 = bits(T_328, 7, 0) @[CircuitMath.scala 27:17] 
    node T_384 = neq(T_381, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_385 = bits(T_381, 7, 4) @[CircuitMath.scala 26:17] 
    node T_386 = bits(T_381, 3, 0) @[CircuitMath.scala 27:17] 
    node T_388 = neq(T_385, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_389 = bits(T_385, 3, 3) @[CircuitMath.scala 23:12] 
    node T_391 = bits(T_385, 2, 2) @[CircuitMath.scala 23:12] 
    node T_393 = bits(T_385, 1, 1) @[CircuitMath.scala 21:8] 
    node T_394 = shl(T_393, 0) @[CircuitMath.scala 23:10] 
    node T_395 = mux(T_391, UInt<2>("h02"), T_394) @[CircuitMath.scala 23:10] 
    node T_396 = mux(T_389, UInt<2>("h03"), T_395) @[CircuitMath.scala 23:10] 
    node T_397 = bits(T_386, 3, 3) @[CircuitMath.scala 23:12] 
    node T_399 = bits(T_386, 2, 2) @[CircuitMath.scala 23:12] 
    node T_401 = bits(T_386, 1, 1) @[CircuitMath.scala 21:8] 
    node T_402 = shl(T_401, 0) @[CircuitMath.scala 23:10] 
    node T_403 = mux(T_399, UInt<2>("h02"), T_402) @[CircuitMath.scala 23:10] 
    node T_404 = mux(T_397, UInt<2>("h03"), T_403) @[CircuitMath.scala 23:10] 
    node T_405 = mux(T_388, T_396, T_404) @[CircuitMath.scala 29:21] 
    node T_406 = cat(T_388, T_405) @[Cat.scala 20:58] 
    node T_407 = bits(T_382, 7, 4) @[CircuitMath.scala 26:17] 
    node T_408 = bits(T_382, 3, 0) @[CircuitMath.scala 27:17] 
    node T_410 = neq(T_407, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_411 = bits(T_407, 3, 3) @[CircuitMath.scala 23:12] 
    node T_413 = bits(T_407, 2, 2) @[CircuitMath.scala 23:12] 
    node T_415 = bits(T_407, 1, 1) @[CircuitMath.scala 21:8] 
    node T_416 = shl(T_415, 0) @[CircuitMath.scala 23:10] 
    node T_417 = mux(T_413, UInt<2>("h02"), T_416) @[CircuitMath.scala 23:10] 
    node T_418 = mux(T_411, UInt<2>("h03"), T_417) @[CircuitMath.scala 23:10] 
    node T_419 = bits(T_408, 3, 3) @[CircuitMath.scala 23:12] 
    node T_421 = bits(T_408, 2, 2) @[CircuitMath.scala 23:12] 
    node T_423 = bits(T_408, 1, 1) @[CircuitMath.scala 21:8] 
    node T_424 = shl(T_423, 0) @[CircuitMath.scala 23:10] 
    node T_425 = mux(T_421, UInt<2>("h02"), T_424) @[CircuitMath.scala 23:10] 
    node T_426 = mux(T_419, UInt<2>("h03"), T_425) @[CircuitMath.scala 23:10] 
    node T_427 = mux(T_410, T_418, T_426) @[CircuitMath.scala 29:21] 
    node T_428 = cat(T_410, T_427) @[Cat.scala 20:58] 
    node T_429 = mux(T_384, T_406, T_428) @[CircuitMath.scala 29:21] 
    node T_430 = cat(T_384, T_429) @[Cat.scala 20:58] 
    node T_431 = mux(T_330, T_380, T_430) @[CircuitMath.scala 29:21] 
    node T_432 = cat(T_330, T_431) @[Cat.scala 20:58] 
    node T_433 = not(T_432) @[recFNFromFN.scala 56:13] 
    node T_434 = dshl(T_320, T_433) @[recFNFromFN.scala 58:25] 
    node T_435 = bits(T_434, 21, 0) @[recFNFromFN.scala 58:37] 
    node T_437 = cat(T_435, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_442 = mux(UInt<1>("h01"), UInt<9>("h01ff"), UInt<9>("h00")) @[Bitwise.scala 33:12] 
    node T_443 = xor(T_433, T_442) @[recFNFromFN.scala 62:27] 
    node T_444 = mux(T_322, T_443, T_319) @[recFNFromFN.scala 61:16] 
    node T_448 = mux(T_322, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47] 
    node T_449 = or(UInt<8>("h080"), T_448) @[recFNFromFN.scala 64:42] 
    node T_450 = add(T_444, T_449) @[recFNFromFN.scala 64:15] 
    node T_451 = tail(T_450, 1) @[recFNFromFN.scala 64:15] 
    node T_452 = bits(T_451, 8, 7) @[recFNFromFN.scala 67:25] 
    node T_454 = eq(T_452, UInt<2>("h03")) @[recFNFromFN.scala 67:50] 
    node T_456 = eq(T_324, UInt<1>("h00")) @[recFNFromFN.scala 68:17] 
    node T_457 = and(T_454, T_456) @[recFNFromFN.scala 67:63] 
    node T_458 = bits(T_325, 0, 0) @[Bitwise.scala 33:15] 
    node T_461 = mux(T_458, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_462 = shl(T_461, 6) @[recFNFromFN.scala 71:45] 
    node T_463 = not(T_462) @[recFNFromFN.scala 71:28] 
    node T_464 = and(T_451, T_463) @[recFNFromFN.scala 71:26] 
    node T_465 = shl(T_457, 6) @[recFNFromFN.scala 72:22] 
    node T_466 = or(T_464, T_465) @[recFNFromFN.scala 71:64] 
    node T_467 = mux(T_322, T_437, T_320) @[recFNFromFN.scala 73:27] 
    node T_468 = cat(T_318, T_466) @[Cat.scala 20:58] 
    node rec_s = cat(T_468, T_467) @[Cat.scala 20:58] 
    node T_469 = bits(load_wb_data, 63, 63) @[recFNFromFN.scala 47:22] 
    node T_470 = bits(load_wb_data, 62, 52) @[recFNFromFN.scala 48:23] 
    node T_471 = bits(load_wb_data, 51, 0) @[recFNFromFN.scala 49:25] 
    node T_473 = eq(T_470, UInt<1>("h00")) @[recFNFromFN.scala 51:34] 
    node T_475 = eq(T_471, UInt<1>("h00")) @[recFNFromFN.scala 52:38] 
    node T_476 = and(T_473, T_475) @[recFNFromFN.scala 53:34] 
    node T_477 = shl(T_471, 12) @[recFNFromFN.scala 56:26] 
    node T_478 = bits(T_477, 63, 32) @[CircuitMath.scala 26:17] 
    node T_479 = bits(T_477, 31, 0) @[CircuitMath.scala 27:17] 
    node T_481 = neq(T_478, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_482 = bits(T_478, 31, 16) @[CircuitMath.scala 26:17] 
    node T_483 = bits(T_478, 15, 0) @[CircuitMath.scala 27:17] 
    node T_485 = neq(T_482, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_486 = bits(T_482, 15, 8) @[CircuitMath.scala 26:17] 
    node T_487 = bits(T_482, 7, 0) @[CircuitMath.scala 27:17] 
    node T_489 = neq(T_486, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_490 = bits(T_486, 7, 4) @[CircuitMath.scala 26:17] 
    node T_491 = bits(T_486, 3, 0) @[CircuitMath.scala 27:17] 
    node T_493 = neq(T_490, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_494 = bits(T_490, 3, 3) @[CircuitMath.scala 23:12] 
    node T_496 = bits(T_490, 2, 2) @[CircuitMath.scala 23:12] 
    node T_498 = bits(T_490, 1, 1) @[CircuitMath.scala 21:8] 
    node T_499 = shl(T_498, 0) @[CircuitMath.scala 23:10] 
    node T_500 = mux(T_496, UInt<2>("h02"), T_499) @[CircuitMath.scala 23:10] 
    node T_501 = mux(T_494, UInt<2>("h03"), T_500) @[CircuitMath.scala 23:10] 
    node T_502 = bits(T_491, 3, 3) @[CircuitMath.scala 23:12] 
    node T_504 = bits(T_491, 2, 2) @[CircuitMath.scala 23:12] 
    node T_506 = bits(T_491, 1, 1) @[CircuitMath.scala 21:8] 
    node T_507 = shl(T_506, 0) @[CircuitMath.scala 23:10] 
    node T_508 = mux(T_504, UInt<2>("h02"), T_507) @[CircuitMath.scala 23:10] 
    node T_509 = mux(T_502, UInt<2>("h03"), T_508) @[CircuitMath.scala 23:10] 
    node T_510 = mux(T_493, T_501, T_509) @[CircuitMath.scala 29:21] 
    node T_511 = cat(T_493, T_510) @[Cat.scala 20:58] 
    node T_512 = bits(T_487, 7, 4) @[CircuitMath.scala 26:17] 
    node T_513 = bits(T_487, 3, 0) @[CircuitMath.scala 27:17] 
    node T_515 = neq(T_512, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_516 = bits(T_512, 3, 3) @[CircuitMath.scala 23:12] 
    node T_518 = bits(T_512, 2, 2) @[CircuitMath.scala 23:12] 
    node T_520 = bits(T_512, 1, 1) @[CircuitMath.scala 21:8] 
    node T_521 = shl(T_520, 0) @[CircuitMath.scala 23:10] 
    node T_522 = mux(T_518, UInt<2>("h02"), T_521) @[CircuitMath.scala 23:10] 
    node T_523 = mux(T_516, UInt<2>("h03"), T_522) @[CircuitMath.scala 23:10] 
    node T_524 = bits(T_513, 3, 3) @[CircuitMath.scala 23:12] 
    node T_526 = bits(T_513, 2, 2) @[CircuitMath.scala 23:12] 
    node T_528 = bits(T_513, 1, 1) @[CircuitMath.scala 21:8] 
    node T_529 = shl(T_528, 0) @[CircuitMath.scala 23:10] 
    node T_530 = mux(T_526, UInt<2>("h02"), T_529) @[CircuitMath.scala 23:10] 
    node T_531 = mux(T_524, UInt<2>("h03"), T_530) @[CircuitMath.scala 23:10] 
    node T_532 = mux(T_515, T_523, T_531) @[CircuitMath.scala 29:21] 
    node T_533 = cat(T_515, T_532) @[Cat.scala 20:58] 
    node T_534 = mux(T_489, T_511, T_533) @[CircuitMath.scala 29:21] 
    node T_535 = cat(T_489, T_534) @[Cat.scala 20:58] 
    node T_536 = bits(T_483, 15, 8) @[CircuitMath.scala 26:17] 
    node T_537 = bits(T_483, 7, 0) @[CircuitMath.scala 27:17] 
    node T_539 = neq(T_536, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_540 = bits(T_536, 7, 4) @[CircuitMath.scala 26:17] 
    node T_541 = bits(T_536, 3, 0) @[CircuitMath.scala 27:17] 
    node T_543 = neq(T_540, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_544 = bits(T_540, 3, 3) @[CircuitMath.scala 23:12] 
    node T_546 = bits(T_540, 2, 2) @[CircuitMath.scala 23:12] 
    node T_548 = bits(T_540, 1, 1) @[CircuitMath.scala 21:8] 
    node T_549 = shl(T_548, 0) @[CircuitMath.scala 23:10] 
    node T_550 = mux(T_546, UInt<2>("h02"), T_549) @[CircuitMath.scala 23:10] 
    node T_551 = mux(T_544, UInt<2>("h03"), T_550) @[CircuitMath.scala 23:10] 
    node T_552 = bits(T_541, 3, 3) @[CircuitMath.scala 23:12] 
    node T_554 = bits(T_541, 2, 2) @[CircuitMath.scala 23:12] 
    node T_556 = bits(T_541, 1, 1) @[CircuitMath.scala 21:8] 
    node T_557 = shl(T_556, 0) @[CircuitMath.scala 23:10] 
    node T_558 = mux(T_554, UInt<2>("h02"), T_557) @[CircuitMath.scala 23:10] 
    node T_559 = mux(T_552, UInt<2>("h03"), T_558) @[CircuitMath.scala 23:10] 
    node T_560 = mux(T_543, T_551, T_559) @[CircuitMath.scala 29:21] 
    node T_561 = cat(T_543, T_560) @[Cat.scala 20:58] 
    node T_562 = bits(T_537, 7, 4) @[CircuitMath.scala 26:17] 
    node T_563 = bits(T_537, 3, 0) @[CircuitMath.scala 27:17] 
    node T_565 = neq(T_562, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_566 = bits(T_562, 3, 3) @[CircuitMath.scala 23:12] 
    node T_568 = bits(T_562, 2, 2) @[CircuitMath.scala 23:12] 
    node T_570 = bits(T_562, 1, 1) @[CircuitMath.scala 21:8] 
    node T_571 = shl(T_570, 0) @[CircuitMath.scala 23:10] 
    node T_572 = mux(T_568, UInt<2>("h02"), T_571) @[CircuitMath.scala 23:10] 
    node T_573 = mux(T_566, UInt<2>("h03"), T_572) @[CircuitMath.scala 23:10] 
    node T_574 = bits(T_563, 3, 3) @[CircuitMath.scala 23:12] 
    node T_576 = bits(T_563, 2, 2) @[CircuitMath.scala 23:12] 
    node T_578 = bits(T_563, 1, 1) @[CircuitMath.scala 21:8] 
    node T_579 = shl(T_578, 0) @[CircuitMath.scala 23:10] 
    node T_580 = mux(T_576, UInt<2>("h02"), T_579) @[CircuitMath.scala 23:10] 
    node T_581 = mux(T_574, UInt<2>("h03"), T_580) @[CircuitMath.scala 23:10] 
    node T_582 = mux(T_565, T_573, T_581) @[CircuitMath.scala 29:21] 
    node T_583 = cat(T_565, T_582) @[Cat.scala 20:58] 
    node T_584 = mux(T_539, T_561, T_583) @[CircuitMath.scala 29:21] 
    node T_585 = cat(T_539, T_584) @[Cat.scala 20:58] 
    node T_586 = mux(T_485, T_535, T_585) @[CircuitMath.scala 29:21] 
    node T_587 = cat(T_485, T_586) @[Cat.scala 20:58] 
    node T_588 = bits(T_479, 31, 16) @[CircuitMath.scala 26:17] 
    node T_589 = bits(T_479, 15, 0) @[CircuitMath.scala 27:17] 
    node T_591 = neq(T_588, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_592 = bits(T_588, 15, 8) @[CircuitMath.scala 26:17] 
    node T_593 = bits(T_588, 7, 0) @[CircuitMath.scala 27:17] 
    node T_595 = neq(T_592, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_596 = bits(T_592, 7, 4) @[CircuitMath.scala 26:17] 
    node T_597 = bits(T_592, 3, 0) @[CircuitMath.scala 27:17] 
    node T_599 = neq(T_596, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_600 = bits(T_596, 3, 3) @[CircuitMath.scala 23:12] 
    node T_602 = bits(T_596, 2, 2) @[CircuitMath.scala 23:12] 
    node T_604 = bits(T_596, 1, 1) @[CircuitMath.scala 21:8] 
    node T_605 = shl(T_604, 0) @[CircuitMath.scala 23:10] 
    node T_606 = mux(T_602, UInt<2>("h02"), T_605) @[CircuitMath.scala 23:10] 
    node T_607 = mux(T_600, UInt<2>("h03"), T_606) @[CircuitMath.scala 23:10] 
    node T_608 = bits(T_597, 3, 3) @[CircuitMath.scala 23:12] 
    node T_610 = bits(T_597, 2, 2) @[CircuitMath.scala 23:12] 
    node T_612 = bits(T_597, 1, 1) @[CircuitMath.scala 21:8] 
    node T_613 = shl(T_612, 0) @[CircuitMath.scala 23:10] 
    node T_614 = mux(T_610, UInt<2>("h02"), T_613) @[CircuitMath.scala 23:10] 
    node T_615 = mux(T_608, UInt<2>("h03"), T_614) @[CircuitMath.scala 23:10] 
    node T_616 = mux(T_599, T_607, T_615) @[CircuitMath.scala 29:21] 
    node T_617 = cat(T_599, T_616) @[Cat.scala 20:58] 
    node T_618 = bits(T_593, 7, 4) @[CircuitMath.scala 26:17] 
    node T_619 = bits(T_593, 3, 0) @[CircuitMath.scala 27:17] 
    node T_621 = neq(T_618, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_622 = bits(T_618, 3, 3) @[CircuitMath.scala 23:12] 
    node T_624 = bits(T_618, 2, 2) @[CircuitMath.scala 23:12] 
    node T_626 = bits(T_618, 1, 1) @[CircuitMath.scala 21:8] 
    node T_627 = shl(T_626, 0) @[CircuitMath.scala 23:10] 
    node T_628 = mux(T_624, UInt<2>("h02"), T_627) @[CircuitMath.scala 23:10] 
    node T_629 = mux(T_622, UInt<2>("h03"), T_628) @[CircuitMath.scala 23:10] 
    node T_630 = bits(T_619, 3, 3) @[CircuitMath.scala 23:12] 
    node T_632 = bits(T_619, 2, 2) @[CircuitMath.scala 23:12] 
    node T_634 = bits(T_619, 1, 1) @[CircuitMath.scala 21:8] 
    node T_635 = shl(T_634, 0) @[CircuitMath.scala 23:10] 
    node T_636 = mux(T_632, UInt<2>("h02"), T_635) @[CircuitMath.scala 23:10] 
    node T_637 = mux(T_630, UInt<2>("h03"), T_636) @[CircuitMath.scala 23:10] 
    node T_638 = mux(T_621, T_629, T_637) @[CircuitMath.scala 29:21] 
    node T_639 = cat(T_621, T_638) @[Cat.scala 20:58] 
    node T_640 = mux(T_595, T_617, T_639) @[CircuitMath.scala 29:21] 
    node T_641 = cat(T_595, T_640) @[Cat.scala 20:58] 
    node T_642 = bits(T_589, 15, 8) @[CircuitMath.scala 26:17] 
    node T_643 = bits(T_589, 7, 0) @[CircuitMath.scala 27:17] 
    node T_645 = neq(T_642, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_646 = bits(T_642, 7, 4) @[CircuitMath.scala 26:17] 
    node T_647 = bits(T_642, 3, 0) @[CircuitMath.scala 27:17] 
    node T_649 = neq(T_646, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_650 = bits(T_646, 3, 3) @[CircuitMath.scala 23:12] 
    node T_652 = bits(T_646, 2, 2) @[CircuitMath.scala 23:12] 
    node T_654 = bits(T_646, 1, 1) @[CircuitMath.scala 21:8] 
    node T_655 = shl(T_654, 0) @[CircuitMath.scala 23:10] 
    node T_656 = mux(T_652, UInt<2>("h02"), T_655) @[CircuitMath.scala 23:10] 
    node T_657 = mux(T_650, UInt<2>("h03"), T_656) @[CircuitMath.scala 23:10] 
    node T_658 = bits(T_647, 3, 3) @[CircuitMath.scala 23:12] 
    node T_660 = bits(T_647, 2, 2) @[CircuitMath.scala 23:12] 
    node T_662 = bits(T_647, 1, 1) @[CircuitMath.scala 21:8] 
    node T_663 = shl(T_662, 0) @[CircuitMath.scala 23:10] 
    node T_664 = mux(T_660, UInt<2>("h02"), T_663) @[CircuitMath.scala 23:10] 
    node T_665 = mux(T_658, UInt<2>("h03"), T_664) @[CircuitMath.scala 23:10] 
    node T_666 = mux(T_649, T_657, T_665) @[CircuitMath.scala 29:21] 
    node T_667 = cat(T_649, T_666) @[Cat.scala 20:58] 
    node T_668 = bits(T_643, 7, 4) @[CircuitMath.scala 26:17] 
    node T_669 = bits(T_643, 3, 0) @[CircuitMath.scala 27:17] 
    node T_671 = neq(T_668, UInt<1>("h00")) @[CircuitMath.scala 28:22] 
    node T_672 = bits(T_668, 3, 3) @[CircuitMath.scala 23:12] 
    node T_674 = bits(T_668, 2, 2) @[CircuitMath.scala 23:12] 
    node T_676 = bits(T_668, 1, 1) @[CircuitMath.scala 21:8] 
    node T_677 = shl(T_676, 0) @[CircuitMath.scala 23:10] 
    node T_678 = mux(T_674, UInt<2>("h02"), T_677) @[CircuitMath.scala 23:10] 
    node T_679 = mux(T_672, UInt<2>("h03"), T_678) @[CircuitMath.scala 23:10] 
    node T_680 = bits(T_669, 3, 3) @[CircuitMath.scala 23:12] 
    node T_682 = bits(T_669, 2, 2) @[CircuitMath.scala 23:12] 
    node T_684 = bits(T_669, 1, 1) @[CircuitMath.scala 21:8] 
    node T_685 = shl(T_684, 0) @[CircuitMath.scala 23:10] 
    node T_686 = mux(T_682, UInt<2>("h02"), T_685) @[CircuitMath.scala 23:10] 
    node T_687 = mux(T_680, UInt<2>("h03"), T_686) @[CircuitMath.scala 23:10] 
    node T_688 = mux(T_671, T_679, T_687) @[CircuitMath.scala 29:21] 
    node T_689 = cat(T_671, T_688) @[Cat.scala 20:58] 
    node T_690 = mux(T_645, T_667, T_689) @[CircuitMath.scala 29:21] 
    node T_691 = cat(T_645, T_690) @[Cat.scala 20:58] 
    node T_692 = mux(T_591, T_641, T_691) @[CircuitMath.scala 29:21] 
    node T_693 = cat(T_591, T_692) @[Cat.scala 20:58] 
    node T_694 = mux(T_481, T_587, T_693) @[CircuitMath.scala 29:21] 
    node T_695 = cat(T_481, T_694) @[Cat.scala 20:58] 
    node T_696 = not(T_695) @[recFNFromFN.scala 56:13] 
    node T_697 = dshl(T_471, T_696) @[recFNFromFN.scala 58:25] 
    node T_698 = bits(T_697, 50, 0) @[recFNFromFN.scala 58:37] 
    node T_700 = cat(T_698, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_705 = mux(UInt<1>("h01"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 33:12] 
    node T_706 = xor(T_696, T_705) @[recFNFromFN.scala 62:27] 
    node T_707 = mux(T_473, T_706, T_470) @[recFNFromFN.scala 61:16] 
    node T_711 = mux(T_473, UInt<2>("h02"), UInt<1>("h01")) @[recFNFromFN.scala 64:47] 
    node T_712 = or(UInt<11>("h0400"), T_711) @[recFNFromFN.scala 64:42] 
    node T_713 = add(T_707, T_712) @[recFNFromFN.scala 64:15] 
    node T_714 = tail(T_713, 1) @[recFNFromFN.scala 64:15] 
    node T_715 = bits(T_714, 11, 10) @[recFNFromFN.scala 67:25] 
    node T_717 = eq(T_715, UInt<2>("h03")) @[recFNFromFN.scala 67:50] 
    node T_719 = eq(T_475, UInt<1>("h00")) @[recFNFromFN.scala 68:17] 
    node T_720 = and(T_717, T_719) @[recFNFromFN.scala 67:63] 
    node T_721 = bits(T_476, 0, 0) @[Bitwise.scala 33:15] 
    node T_724 = mux(T_721, UInt<3>("h07"), UInt<3>("h00")) @[Bitwise.scala 33:12] 
    node T_725 = shl(T_724, 9) @[recFNFromFN.scala 71:45] 
    node T_726 = not(T_725) @[recFNFromFN.scala 71:28] 
    node T_727 = and(T_714, T_726) @[recFNFromFN.scala 71:26] 
    node T_728 = shl(T_720, 9) @[recFNFromFN.scala 72:22] 
    node T_729 = or(T_727, T_728) @[recFNFromFN.scala 71:64] 
    node T_730 = mux(T_473, T_700, T_471) @[recFNFromFN.scala 73:27] 
    node T_731 = cat(T_469, T_729) @[Cat.scala 20:58] 
    node rec_d = cat(T_731, T_730) @[Cat.scala 20:58] 
    node T_733 = asUInt(asSInt(UInt<32>("h0ffffffff"))) @[Cat.scala 20:58] 
    node T_734 = cat(T_733, rec_s) @[Cat.scala 20:58] 
    node load_wb_data_recoded = mux(load_wb_single, T_734, rec_d) @[fpu.scala 451:33] 
    cmem regfile : UInt<65>[32] @[fpu.scala 454:20] 
    when load_wb : @[fpu.scala 455:18] 
      infer mport T_737 = regfile[load_wb_tag], clk
      T_737 <= load_wb_data_recoded @[fpu.scala 456:26] 
      skip @[fpu.scala 455:18] 
    reg ex_ra1 : UInt, clk
    reg ex_ra2 : UInt, clk
    reg ex_ra3 : UInt, clk
    when io.valid : @[fpu.scala 464:19] 
      when fp_decoder.io.sigs.ren1 : @[fpu.scala 465:25] 
        node T_742 = eq(fp_decoder.io.sigs.swap12, UInt<1>("h00")) @[fpu.scala 466:13] 
        when T_742 : @[fpu.scala 466:30] 
          node T_743 = bits(io.inst, 19, 15) @[fpu.scala 466:49] 
          ex_ra1 <= T_743 @[fpu.scala 466:39] 
          skip @[fpu.scala 466:30] 
        when fp_decoder.io.sigs.swap12 : @[fpu.scala 467:29] 
          node T_744 = bits(io.inst, 19, 15) @[fpu.scala 467:48] 
          ex_ra2 <= T_744 @[fpu.scala 467:38] 
          skip @[fpu.scala 467:29] 
        skip @[fpu.scala 465:25] 
      when fp_decoder.io.sigs.ren2 : @[fpu.scala 469:25] 
        when fp_decoder.io.sigs.swap12 : @[fpu.scala 470:29] 
          node T_745 = bits(io.inst, 24, 20) @[fpu.scala 470:48] 
          ex_ra1 <= T_745 @[fpu.scala 470:38] 
          skip @[fpu.scala 470:29] 
        when fp_decoder.io.sigs.swap23 : @[fpu.scala 471:29] 
          node T_746 = bits(io.inst, 24, 20) @[fpu.scala 471:48] 
          ex_ra3 <= T_746 @[fpu.scala 471:38] 
          skip @[fpu.scala 471:29] 
        node T_748 = eq(fp_decoder.io.sigs.swap12, UInt<1>("h00")) @[fpu.scala 472:13] 
        node T_750 = eq(fp_decoder.io.sigs.swap23, UInt<1>("h00")) @[fpu.scala 472:32] 
        node T_751 = and(T_748, T_750) @[fpu.scala 472:29] 
        when T_751 : @[fpu.scala 472:49] 
          node T_752 = bits(io.inst, 24, 20) @[fpu.scala 472:68] 
          ex_ra2 <= T_752 @[fpu.scala 472:58] 
          skip @[fpu.scala 472:49] 
        skip @[fpu.scala 469:25] 
      when fp_decoder.io.sigs.ren3 : @[fpu.scala 474:25] 
        node T_753 = bits(io.inst, 31, 27) @[fpu.scala 474:44] 
        ex_ra3 <= T_753 @[fpu.scala 474:34] 
        skip @[fpu.scala 474:25] 
      skip @[fpu.scala 464:19] 
    infer mport ex_rs1 = regfile[ex_ra1], clk
    infer mport ex_rs2 = regfile[ex_ra2], clk
    infer mport ex_rs3 = regfile[ex_ra3], clk
    node T_754 = bits(ex_reg_inst, 14, 12) @[fpu.scala 477:30] 
    node T_756 = eq(T_754, UInt<3>("h07")) @[fpu.scala 477:38] 
    node T_757 = bits(ex_reg_inst, 14, 12) @[fpu.scala 477:74] 
    node ex_rm = mux(T_756, io.fcsr_rm, T_757) @[fpu.scala 477:18] 
    node cp_rs2 = mux(io.cp_req.bits.swap23, io.cp_req.bits.in3, io.cp_req.bits.in2) @[fpu.scala 480:19] 
    node cp_rs3 = mux(io.cp_req.bits.swap23, io.cp_req.bits.in2, io.cp_req.bits.in3) @[fpu.scala 481:19] 
    wire req : {cmd : UInt<5>, ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, single : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, round : UInt<1>, wflags : UInt<1>, rm : UInt<3>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>} @[fpu.scala 483:17] 
    req is invalid @[fpu.scala 483:17] 
    req <- ex_ctrl @[fpu.scala 484:7] 
    node T_803 = mux(ex_reg_valid, ex_rm, io.cp_req.bits.rm) @[fpu.scala 485:16] 
    req.rm <= T_803 @[fpu.scala 485:10] 
    node T_804 = mux(ex_reg_valid, ex_rs1, io.cp_req.bits.in1) @[fpu.scala 486:17] 
    req.in1 <= T_804 @[fpu.scala 486:11] 
    node T_805 = mux(ex_reg_valid, ex_rs2, cp_rs2) @[fpu.scala 487:17] 
    req.in2 <= T_805 @[fpu.scala 487:11] 
    node T_806 = mux(ex_reg_valid, ex_rs3, cp_rs3) @[fpu.scala 488:17] 
    req.in3 <= T_806 @[fpu.scala 488:11] 
    node T_807 = bits(ex_reg_inst, 21, 20) @[fpu.scala 489:43] 
    node T_808 = mux(ex_reg_valid, T_807, io.cp_req.bits.typ) @[fpu.scala 489:17] 
    req.typ <= T_808 @[fpu.scala 489:11] 
    inst sfma of FPUFMAPipe @[fpu.scala 491:20] 
    sfma.io is invalid
    sfma.clk <= clk
    sfma.reset <= reset
    node T_809 = and(req_valid, ex_ctrl.fma) @[fpu.scala 492:33] 
    node T_810 = and(T_809, ex_ctrl.single) @[fpu.scala 492:48] 
    sfma.io.in.valid <= T_810 @[fpu.scala 492:20] 
    sfma.io.in.bits <- req @[fpu.scala 493:19] 
    inst dfma of FPUFMAPipe_1 @[fpu.scala 495:20] 
    dfma.io is invalid
    dfma.clk <= clk
    dfma.reset <= reset
    node T_811 = and(req_valid, ex_ctrl.fma) @[fpu.scala 496:33] 
    node T_813 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 496:51] 
    node T_814 = and(T_811, T_813) @[fpu.scala 496:48] 
    dfma.io.in.valid <= T_814 @[fpu.scala 496:20] 
    dfma.io.in.bits <- req @[fpu.scala 497:19] 
    inst fpiu of FPToInt @[fpu.scala 499:20] 
    fpiu.io is invalid
    fpiu.clk <= clk
    fpiu.reset <= reset
    node T_815 = or(ex_ctrl.toint, ex_ctrl.div) @[fpu.scala 500:51] 
    node T_816 = or(T_815, ex_ctrl.sqrt) @[fpu.scala 500:66] 
    node T_819 = and(ex_ctrl.cmd, UInt<4>("h0d")) @[fpu.scala 500:97] 
    node T_820 = eq(UInt<5>("h05"), T_819) @[fpu.scala 500:97] 
    node T_821 = or(T_816, T_820) @[fpu.scala 500:82] 
    node T_822 = and(req_valid, T_821) @[fpu.scala 500:33] 
    fpiu.io.in.valid <= T_822 @[fpu.scala 500:20] 
    fpiu.io.in.bits <- req @[fpu.scala 501:19] 
    io.store_data <= fpiu.io.out.bits.store @[fpu.scala 502:17] 
    io.toint_data <= fpiu.io.out.bits.toint @[fpu.scala 503:17] 
    node T_823 = and(fpiu.io.out.valid, mem_cp_valid) @[fpu.scala 504:26] 
    node T_824 = and(T_823, mem_ctrl.toint) @[fpu.scala 504:42] 
    when T_824 : @[fpu.scala 504:60] 
      io.cp_resp.bits.data <= fpiu.io.out.bits.toint @[fpu.scala 505:26] 
      io.cp_resp.valid <= UInt<1>("h01") @[fpu.scala 506:22] 
      skip @[fpu.scala 504:60] 
    inst ifpu of IntToFP @[fpu.scala 509:20] 
    ifpu.io is invalid
    ifpu.clk <= clk
    ifpu.reset <= reset
    node T_826 = and(req_valid, ex_ctrl.fromint) @[fpu.scala 510:33] 
    ifpu.io.in.valid <= T_826 @[fpu.scala 510:20] 
    ifpu.io.in.bits <- req @[fpu.scala 511:19] 
    node T_827 = mux(ex_reg_valid, io.fromint_data, io.cp_req.bits.in1) @[fpu.scala 512:29] 
    ifpu.io.in.bits.in1 <= T_827 @[fpu.scala 512:23] 
    inst fpmu of FPToFP @[fpu.scala 514:20] 
    fpmu.io is invalid
    fpmu.clk <= clk
    fpmu.reset <= reset
    node T_828 = and(req_valid, ex_ctrl.fastpipe) @[fpu.scala 515:33] 
    fpmu.io.in.valid <= T_828 @[fpu.scala 515:20] 
    fpmu.io.in.bits <- req @[fpu.scala 516:19] 
    fpmu.io.lt <= fpiu.io.out.bits.lt @[fpu.scala 517:14] 
    reg divSqrt_wen : UInt<1>, clk
    divSqrt_wen <= UInt<1>("h00")
    wire divSqrt_inReady : UInt<1>
    divSqrt_inReady is invalid
    divSqrt_inReady <= UInt<1>("h00")
    reg divSqrt_waddr : UInt, clk
    wire divSqrt_wdata : UInt @[fpu.scala 522:27] 
    divSqrt_wdata is invalid @[fpu.scala 522:27] 
    wire divSqrt_flags : UInt @[fpu.scala 523:27] 
    divSqrt_flags is invalid @[fpu.scala 523:27] 
    reg divSqrt_in_flight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg divSqrt_killed : UInt<1>, clk
    node T_838 = mux(mem_ctrl.fastpipe, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_841 = mux(mem_ctrl.fromint, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_842 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 532:56] 
    node T_845 = mux(T_842, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_847 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 533:59] 
    node T_848 = and(mem_ctrl.fma, T_847) @[fpu.scala 533:56] 
    node T_851 = mux(T_848, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_852 = or(T_838, T_841) @[fpu.scala 536:78] 
    node T_853 = or(T_852, T_845) @[fpu.scala 536:78] 
    node memLatencyMask = or(T_853, T_851) @[fpu.scala 536:78] 
    reg wen : UInt<2>, clk with : (reset => (reset, UInt<2>("h00")))
    reg wbInfo : {rd : UInt<5>, single : UInt<1>, cp : UInt<1>, pipeid : UInt<2>}[2], clk
    node T_902 = or(mem_ctrl.fma, mem_ctrl.fastpipe) @[fpu.scala 552:48] 
    node T_903 = or(T_902, mem_ctrl.fromint) @[fpu.scala 552:69] 
    node mem_wen = and(mem_reg_valid, T_903) @[fpu.scala 552:31] 
    node T_906 = mux(ex_ctrl.fastpipe, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_909 = mux(ex_ctrl.fromint, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_910 = and(ex_ctrl.fma, ex_ctrl.single) @[fpu.scala 532:56] 
    node T_913 = mux(T_910, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_915 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 533:59] 
    node T_916 = and(ex_ctrl.fma, T_915) @[fpu.scala 533:56] 
    node T_919 = mux(T_916, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_920 = or(T_906, T_909) @[fpu.scala 536:78] 
    node T_921 = or(T_920, T_913) @[fpu.scala 536:78] 
    node T_922 = or(T_921, T_919) @[fpu.scala 536:78] 
    node T_923 = and(memLatencyMask, T_922) @[fpu.scala 553:62] 
    node T_925 = neq(T_923, UInt<1>("h00")) @[fpu.scala 553:89] 
    node T_926 = and(mem_wen, T_925) @[fpu.scala 553:43] 
    node T_929 = mux(ex_ctrl.fastpipe, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_932 = mux(ex_ctrl.fromint, UInt<4>("h08"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_933 = and(ex_ctrl.fma, ex_ctrl.single) @[fpu.scala 532:56] 
    node T_936 = mux(T_933, UInt<3>("h04"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_938 = eq(ex_ctrl.single, UInt<1>("h00")) @[fpu.scala 533:59] 
    node T_939 = and(ex_ctrl.fma, T_938) @[fpu.scala 533:56] 
    node T_942 = mux(T_939, UInt<4>("h08"), UInt<1>("h00")) @[fpu.scala 536:23] 
    node T_943 = or(T_929, T_932) @[fpu.scala 536:78] 
    node T_944 = or(T_943, T_936) @[fpu.scala 536:78] 
    node T_945 = or(T_944, T_942) @[fpu.scala 536:78] 
    node T_946 = and(wen, T_945) @[fpu.scala 553:101] 
    node T_948 = neq(T_946, UInt<1>("h00")) @[fpu.scala 553:128] 
    node T_949 = or(T_926, T_948) @[fpu.scala 553:93] 
    reg write_port_busy : UInt<1>, clk
    when req_valid : @[Reg.scala 29:19] 
      write_port_busy <= T_949 @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_950 = bits(wen, 1, 1) @[fpu.scala 556:14] 
    when T_950 : @[fpu.scala 556:21] 
      wbInfo[0] <- wbInfo[1] @[fpu.scala 556:33] 
      skip @[fpu.scala 556:21] 
    node T_951 = shr(wen, 1) @[fpu.scala 558:14] 
    wen <= T_951 @[fpu.scala 558:7] 
    when mem_wen : @[fpu.scala 559:18] 
      node T_953 = eq(killm, UInt<1>("h00")) @[fpu.scala 560:11] 
      when T_953 : @[fpu.scala 560:19] 
        node T_954 = shr(wen, 1) @[fpu.scala 561:18] 
        node T_955 = or(T_954, memLatencyMask) @[fpu.scala 561:23] 
        wen <= T_955 @[fpu.scala 561:11] 
        skip @[fpu.scala 560:19] 
      node T_957 = eq(write_port_busy, UInt<1>("h00")) @[fpu.scala 564:13] 
      node T_958 = bits(memLatencyMask, 0, 0) @[fpu.scala 564:47] 
      node T_959 = and(T_957, T_958) @[fpu.scala 564:30] 
      when T_959 : @[fpu.scala 564:52] 
        wbInfo[0].cp <= mem_cp_valid @[fpu.scala 565:22] 
        wbInfo[0].single <= mem_ctrl.single @[fpu.scala 566:26] 
        node T_962 = mux(mem_ctrl.fastpipe, UInt<1>("h00"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_965 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_966 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 532:56] 
        node T_969 = mux(T_966, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_971 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 533:59] 
        node T_972 = and(mem_ctrl.fma, T_971) @[fpu.scala 533:56] 
        node T_975 = mux(T_972, UInt<2>("h03"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_976 = or(T_962, T_965) @[fpu.scala 538:108] 
        node T_977 = or(T_976, T_969) @[fpu.scala 538:108] 
        node T_978 = or(T_977, T_975) @[fpu.scala 538:108] 
        wbInfo[0].pipeid <= T_978 @[fpu.scala 567:26] 
        node T_979 = bits(mem_reg_inst, 11, 7) @[fpu.scala 568:37] 
        wbInfo[0].rd <= T_979 @[fpu.scala 568:22] 
        skip @[fpu.scala 564:52] 
      node T_981 = eq(write_port_busy, UInt<1>("h00")) @[fpu.scala 564:13] 
      node T_982 = bits(memLatencyMask, 1, 1) @[fpu.scala 564:47] 
      node T_983 = and(T_981, T_982) @[fpu.scala 564:30] 
      when T_983 : @[fpu.scala 564:52] 
        wbInfo[1].cp <= mem_cp_valid @[fpu.scala 565:22] 
        wbInfo[1].single <= mem_ctrl.single @[fpu.scala 566:26] 
        node T_986 = mux(mem_ctrl.fastpipe, UInt<1>("h00"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_989 = mux(mem_ctrl.fromint, UInt<1>("h01"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_990 = and(mem_ctrl.fma, mem_ctrl.single) @[fpu.scala 532:56] 
        node T_993 = mux(T_990, UInt<2>("h02"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_995 = eq(mem_ctrl.single, UInt<1>("h00")) @[fpu.scala 533:59] 
        node T_996 = and(mem_ctrl.fma, T_995) @[fpu.scala 533:56] 
        node T_999 = mux(T_996, UInt<2>("h03"), UInt<1>("h00")) @[fpu.scala 538:63] 
        node T_1000 = or(T_986, T_989) @[fpu.scala 538:108] 
        node T_1001 = or(T_1000, T_993) @[fpu.scala 538:108] 
        node T_1002 = or(T_1001, T_999) @[fpu.scala 538:108] 
        wbInfo[1].pipeid <= T_1002 @[fpu.scala 567:26] 
        node T_1003 = bits(mem_reg_inst, 11, 7) @[fpu.scala 568:37] 
        wbInfo[1].rd <= T_1003 @[fpu.scala 568:22] 
        skip @[fpu.scala 564:52] 
      skip @[fpu.scala 559:18] 
    node waddr = mux(divSqrt_wen, divSqrt_waddr, wbInfo[0].rd) @[fpu.scala 573:18] 
    node T_1005 = and(wbInfo[0].pipeid, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1007 = geq(wbInfo[0].pipeid, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1009 = and(T_1005, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1011 = geq(T_1005, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1012 = mux(T_1011, dfma.io.out.bits.data, sfma.io.out.bits.data) @[util.scala 40:12] 
    node T_1014 = and(T_1005, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1016 = geq(T_1005, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1017 = mux(T_1016, ifpu.io.out.bits.data, fpmu.io.out.bits.data) @[util.scala 40:12] 
    node T_1018 = mux(T_1007, T_1012, T_1017) @[util.scala 40:12] 
    node wdata = mux(divSqrt_wen, divSqrt_wdata, T_1018) @[fpu.scala 574:18] 
    node T_1020 = and(wbInfo[0].pipeid, UInt<1>("h01")) @[util.scala 39:26] 
    node T_1022 = geq(wbInfo[0].pipeid, UInt<2>("h02")) @[util.scala 40:17] 
    node T_1024 = and(T_1020, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1026 = geq(T_1020, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1027 = mux(T_1026, dfma.io.out.bits.exc, sfma.io.out.bits.exc) @[util.scala 40:12] 
    node T_1029 = and(T_1020, UInt<1>("h00")) @[util.scala 39:26] 
    node T_1031 = geq(T_1020, UInt<1>("h01")) @[util.scala 40:17] 
    node T_1032 = mux(T_1031, ifpu.io.out.bits.exc, fpmu.io.out.bits.exc) @[util.scala 40:12] 
    node wexc = mux(T_1022, T_1027, T_1032) @[util.scala 40:12] 
    node T_1034 = eq(wbInfo[0].cp, UInt<1>("h00")) @[fpu.scala 576:10] 
    node T_1035 = bits(wen, 0, 0) @[fpu.scala 576:30] 
    node T_1036 = and(T_1034, T_1035) @[fpu.scala 576:24] 
    node T_1037 = or(T_1036, divSqrt_wen) @[fpu.scala 576:35] 
    when T_1037 : @[fpu.scala 576:51] 
      infer mport T_1038 = regfile[waddr], clk
      T_1038 <= wdata @[fpu.scala 577:20] 
      skip @[fpu.scala 576:51] 
    node T_1039 = bits(wen, 0, 0) @[fpu.scala 585:28] 
    node T_1040 = and(wbInfo[0].cp, T_1039) @[fpu.scala 585:22] 
    when T_1040 : @[fpu.scala 585:33] 
      io.cp_resp.bits.data <= wdata @[fpu.scala 586:26] 
      io.cp_resp.valid <= UInt<1>("h01") @[fpu.scala 587:22] 
      skip @[fpu.scala 585:33] 
    node T_1043 = eq(ex_reg_valid, UInt<1>("h00")) @[fpu.scala 589:22] 
    io.cp_req.ready <= T_1043 @[fpu.scala 589:19] 
    node wb_toint_valid = and(wb_reg_valid, wb_ctrl.toint) @[fpu.scala 591:37] 
    reg wb_toint_exc : UInt<5>, clk
    when mem_ctrl.toint : @[Reg.scala 29:19] 
      wb_toint_exc <= fpiu.io.out.bits.exc @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node T_1044 = or(wb_toint_valid, divSqrt_wen) @[fpu.scala 593:41] 
    node T_1045 = bits(wen, 0, 0) @[fpu.scala 593:62] 
    node T_1046 = or(T_1044, T_1045) @[fpu.scala 593:56] 
    io.fcsr_flags.valid <= T_1046 @[fpu.scala 593:23] 
    node T_1048 = mux(wb_toint_valid, wb_toint_exc, UInt<1>("h00")) @[fpu.scala 595:8] 
    node T_1050 = mux(divSqrt_wen, divSqrt_flags, UInt<1>("h00")) @[fpu.scala 596:8] 
    node T_1051 = or(T_1048, T_1050) @[fpu.scala 595:48] 
    node T_1052 = bits(wen, 0, 0) @[fpu.scala 597:12] 
    node T_1054 = mux(T_1052, wexc, UInt<1>("h00")) @[fpu.scala 597:8] 
    node T_1055 = or(T_1051, T_1054) @[fpu.scala 596:46] 
    io.fcsr_flags.bits <= T_1055 @[fpu.scala 594:22] 
    node T_1056 = or(mem_ctrl.div, mem_ctrl.sqrt) @[fpu.scala 599:51] 
    node T_1057 = and(mem_reg_valid, T_1056) @[fpu.scala 599:34] 
    node T_1059 = eq(divSqrt_inReady, UInt<1>("h00")) @[fpu.scala 599:73] 
    node T_1061 = neq(wen, UInt<1>("h00")) @[fpu.scala 599:97] 
    node T_1062 = or(T_1059, T_1061) @[fpu.scala 599:90] 
    node units_busy = and(T_1057, T_1062) @[fpu.scala 599:69] 
    node T_1063 = and(ex_reg_valid, ex_ctrl.wflags) @[fpu.scala 600:33] 
    node T_1064 = and(mem_reg_valid, mem_ctrl.wflags) @[fpu.scala 600:68] 
    node T_1065 = or(T_1063, T_1064) @[fpu.scala 600:51] 
    node T_1066 = and(wb_reg_valid, wb_ctrl.toint) @[fpu.scala 600:103] 
    node T_1067 = or(T_1065, T_1066) @[fpu.scala 600:87] 
    node T_1069 = neq(wen, UInt<1>("h00")) @[fpu.scala 600:127] 
    node T_1070 = or(T_1067, T_1069) @[fpu.scala 600:120] 
    node T_1071 = or(T_1070, divSqrt_in_flight) @[fpu.scala 600:131] 
    node T_1073 = eq(T_1071, UInt<1>("h00")) @[fpu.scala 600:18] 
    io.fcsr_rdy <= T_1073 @[fpu.scala 600:15] 
    node T_1074 = or(units_busy, write_port_busy) @[fpu.scala 601:29] 
    node T_1075 = or(T_1074, divSqrt_in_flight) @[fpu.scala 601:48] 
    io.nack_mem <= T_1075 @[fpu.scala 601:15] 
    io.dec <- fp_decoder.io.sigs @[fpu.scala 602:10] 
    node T_1077 = eq(wb_cp_valid, UInt<1>("h00")) @[fpu.scala 604:36] 
    node T_1078 = and(wb_reg_valid, T_1077) @[fpu.scala 604:33] 
    node T_1080 = or(UInt<1>("h00"), mem_ctrl.div) @[fpu.scala 604:96] 
    node T_1081 = or(T_1080, mem_ctrl.sqrt) @[fpu.scala 604:112] 
    reg T_1082 : UInt<1>, clk
    T_1082 <= T_1081
    node T_1083 = and(T_1078, T_1082) @[fpu.scala 604:49] 
    io.sboard_set <= T_1083 @[fpu.scala 604:17] 
    node T_1085 = eq(wb_cp_valid, UInt<1>("h00")) @[fpu.scala 605:20] 
    node T_1086 = bits(wen, 0, 0) @[fpu.scala 605:56] 
    node T_1088 = and(T_1086, UInt<1>("h00")) @[fpu.scala 605:60] 
    node T_1089 = or(divSqrt_wen, T_1088) @[fpu.scala 605:49] 
    node T_1090 = and(T_1085, T_1089) @[fpu.scala 605:33] 
    io.sboard_clr <= T_1090 @[fpu.scala 605:17] 
    io.sboard_clra <= waddr @[fpu.scala 606:18] 
    node T_1091 = bits(ex_rm, 2, 2) @[fpu.scala 608:25] 
    node T_1092 = and(T_1091, ex_ctrl.round) @[fpu.scala 608:29] 
    io.illegal_rm <= T_1092 @[fpu.scala 608:17] 
    divSqrt_wdata <= UInt<1>("h00") @[fpu.scala 610:17] 
    divSqrt_flags <= UInt<1>("h00") @[fpu.scala 611:17] 
    reg T_1096 : UInt<1>, clk
    reg T_1098 : UInt, clk
    reg T_1100 : UInt, clk
    reg T_1102 : UInt, clk
    inst DivSqrtRecF64_1 of DivSqrtRecF64 @[fpu.scala 618:25] 
    DivSqrtRecF64_1.io is invalid
    DivSqrtRecF64_1.clk <= clk
    DivSqrtRecF64_1.reset <= reset
    node T_1103 = mux(DivSqrtRecF64_1.io.sqrtOp, DivSqrtRecF64_1.io.inReady_sqrt, DivSqrtRecF64_1.io.inReady_div) @[fpu.scala 619:27] 
    divSqrt_inReady <= T_1103 @[fpu.scala 619:21] 
    node T_1104 = or(DivSqrtRecF64_1.io.outValid_div, DivSqrtRecF64_1.io.outValid_sqrt) @[fpu.scala 620:52] 
    node T_1105 = or(mem_ctrl.div, mem_ctrl.sqrt) @[fpu.scala 621:58] 
    node T_1106 = and(mem_reg_valid, T_1105) @[fpu.scala 621:41] 
    node T_1108 = eq(divSqrt_in_flight, UInt<1>("h00")) @[fpu.scala 621:79] 
    node T_1109 = and(T_1106, T_1108) @[fpu.scala 621:76] 
    DivSqrtRecF64_1.io.inValid <= T_1109 @[fpu.scala 621:24] 
    DivSqrtRecF64_1.io.sqrtOp <= mem_ctrl.sqrt @[fpu.scala 622:23] 
    DivSqrtRecF64_1.io.a <= fpiu.io.as_double.in1 @[fpu.scala 623:18] 
    DivSqrtRecF64_1.io.b <= fpiu.io.as_double.in2 @[fpu.scala 624:18] 
    DivSqrtRecF64_1.io.roundingMode <= fpiu.io.as_double.rm @[fpu.scala 625:29] 
    node T_1110 = and(DivSqrtRecF64_1.io.inValid, divSqrt_inReady) @[fpu.scala 627:30] 
    when T_1110 : @[fpu.scala 627:50] 
      divSqrt_in_flight <= UInt<1>("h01") @[fpu.scala 628:25] 
      divSqrt_killed <= killm @[fpu.scala 629:22] 
      T_1096 <= mem_ctrl.single @[fpu.scala 630:22] 
      node T_1112 = bits(mem_reg_inst, 11, 7) @[fpu.scala 631:36] 
      divSqrt_waddr <= T_1112 @[fpu.scala 631:21] 
      T_1098 <= DivSqrtRecF64_1.io.roundingMode @[fpu.scala 632:18] 
      skip @[fpu.scala 627:50] 
    when T_1104 : @[fpu.scala 635:29] 
      node T_1114 = eq(divSqrt_killed, UInt<1>("h00")) @[fpu.scala 636:22] 
      divSqrt_wen <= T_1114 @[fpu.scala 636:19] 
      T_1102 <= DivSqrtRecF64_1.io.out @[fpu.scala 637:28] 
      divSqrt_in_flight <= UInt<1>("h00") @[fpu.scala 638:25] 
      T_1100 <= DivSqrtRecF64_1.io.exceptionFlags @[fpu.scala 639:28] 
      skip @[fpu.scala 635:29] 
    inst RecFNToRecFN_4_1 of RecFNToRecFN_4 @[fpu.scala 642:34] 
    RecFNToRecFN_4_1.io is invalid
    RecFNToRecFN_4_1.clk <= clk
    RecFNToRecFN_4_1.reset <= reset
    RecFNToRecFN_4_1.io.in <= T_1102 @[fpu.scala 643:28] 
    RecFNToRecFN_4_1.io.roundingMode <= T_1098 @[fpu.scala 644:38] 
    node T_1116 = mux(T_1096, RecFNToRecFN_4_1.io.out, T_1102) @[fpu.scala 645:25] 
    divSqrt_wdata <= T_1116 @[fpu.scala 645:19] 
    node T_1118 = mux(T_1096, RecFNToRecFN_4_1.io.exceptionFlags, UInt<1>("h00")) @[fpu.scala 646:48] 
    node T_1119 = or(T_1100, T_1118) @[fpu.scala 646:43] 
    divSqrt_flags <= T_1119 @[fpu.scala 646:19] 
    
  module ClientUncachedTileLinkIOArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.out <- io.in[0] @[Arbiters.scala 181:19] 
    
  module RRArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    node T_220 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<1>, clk
    when T_220 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node T_223 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_224 = or(T_223, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_226 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_228 = eq(T_223, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_230 = eq(T_224, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_231 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_232 = or(T_231, T_228) @[Arbiter.scala 64:50] 
    node T_233 = and(T_226, grantMask_1) @[Arbiter.scala 64:34] 
    node T_234 = or(T_233, T_230) @[Arbiter.scala 64:50] 
    node T_235 = and(T_232, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[0].ready <= T_235 @[Arbiter.scala 52:16] 
    node T_236 = and(T_234, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[1].ready <= T_236 @[Arbiter.scala 52:16] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module PTW : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip requestor : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}}, flip resp : {valid : UInt<1>, bits : {pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}}}, flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}[2], mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}, dpath : {flip ptbr : {asid : UInt<7>, ppn : UInt<38>}, flip invalidate : UInt<1>, flip status : {debug : UInt<1>, prv : UInt<2>, sd : UInt<1>, zero3 : UInt<31>, sd_rv32 : UInt<1>, zero2 : UInt<2>, vm : UInt<5>, zero1 : UInt<4>, mxr : UInt<1>, pum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}
    
    io is invalid
    reg state : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg count : UInt<2>, clk
    reg r_req : {prv : UInt<2>, pum : UInt<1>, mxr : UInt<1>, addr : UInt<27>, store : UInt<1>, fetch : UInt<1>}, clk
    reg r_req_dest : UInt, clk
    reg r_pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}, clk
    node T_2184 = shr(r_req.addr, 18) @[ptw.scala 84:58] 
    node vpn_idxs_0 = bits(T_2184, 8, 0) @[ptw.scala 84:88] 
    node T_2185 = shr(r_req.addr, 9) @[ptw.scala 84:58] 
    node vpn_idxs_1 = bits(T_2185, 8, 0) @[ptw.scala 84:88] 
    node T_2186 = shr(r_req.addr, 0) @[ptw.scala 84:58] 
    node vpn_idxs_2 = bits(T_2186, 8, 0) @[ptw.scala 84:88] 
    node T_2188 = and(count, UInt<1>("h01")) @[util.scala 39:26] 
    node T_2190 = geq(count, UInt<2>("h02")) @[util.scala 40:17] 
    node T_2192 = and(T_2188, UInt<1>("h00")) @[util.scala 39:26] 
    node T_2194 = geq(T_2188, UInt<1>("h01")) @[util.scala 40:17] 
    node T_2195 = mux(T_2194, vpn_idxs_1, vpn_idxs_0) @[util.scala 40:12] 
    node vpn_idx = mux(T_2190, vpn_idxs_2, T_2195) @[util.scala 40:12] 
    inst arb of RRArbiter @[ptw.scala 87:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in[0] <- io.requestor[0].req @[ptw.scala 88:13] 
    arb.io.in[1] <- io.requestor[1].req @[ptw.scala 88:13] 
    node T_2203 = eq(state, UInt<3>("h00")) @[ptw.scala 89:29] 
    arb.io.out.ready <= T_2203 @[ptw.scala 89:20] 
    wire T_2228 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 92:33] 
    T_2228 is invalid @[ptw.scala 92:33] 
    node T_2240 = bits(io.mem.resp.bits.data, 0, 0) @[ptw.scala 92:33] 
    T_2228.v <= T_2240 @[ptw.scala 92:33] 
    node T_2241 = bits(io.mem.resp.bits.data, 1, 1) @[ptw.scala 92:33] 
    T_2228.r <= T_2241 @[ptw.scala 92:33] 
    node T_2242 = bits(io.mem.resp.bits.data, 2, 2) @[ptw.scala 92:33] 
    T_2228.w <= T_2242 @[ptw.scala 92:33] 
    node T_2243 = bits(io.mem.resp.bits.data, 3, 3) @[ptw.scala 92:33] 
    T_2228.x <= T_2243 @[ptw.scala 92:33] 
    node T_2244 = bits(io.mem.resp.bits.data, 4, 4) @[ptw.scala 92:33] 
    T_2228.u <= T_2244 @[ptw.scala 92:33] 
    node T_2245 = bits(io.mem.resp.bits.data, 5, 5) @[ptw.scala 92:33] 
    T_2228.g <= T_2245 @[ptw.scala 92:33] 
    node T_2246 = bits(io.mem.resp.bits.data, 6, 6) @[ptw.scala 92:33] 
    T_2228.a <= T_2246 @[ptw.scala 92:33] 
    node T_2247 = bits(io.mem.resp.bits.data, 7, 7) @[ptw.scala 92:33] 
    T_2228.d <= T_2247 @[ptw.scala 92:33] 
    node T_2248 = bits(io.mem.resp.bits.data, 9, 8) @[ptw.scala 92:33] 
    T_2228.reserved_for_software <= T_2248 @[ptw.scala 92:33] 
    node T_2249 = bits(io.mem.resp.bits.data, 47, 10) @[ptw.scala 92:33] 
    T_2228.ppn <= T_2249 @[ptw.scala 92:33] 
    node T_2250 = bits(io.mem.resp.bits.data, 63, 48) @[ptw.scala 92:33] 
    T_2228.reserved_for_hardware <= T_2250 @[ptw.scala 92:33] 
    wire T_2275 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 93:45] 
    T_2275 is invalid @[ptw.scala 93:45] 
    node T_2287 = bits(io.mem.resp.bits.data, 0, 0) @[ptw.scala 93:45] 
    T_2275.v <= T_2287 @[ptw.scala 93:45] 
    node T_2288 = bits(io.mem.resp.bits.data, 1, 1) @[ptw.scala 93:45] 
    T_2275.r <= T_2288 @[ptw.scala 93:45] 
    node T_2289 = bits(io.mem.resp.bits.data, 2, 2) @[ptw.scala 93:45] 
    T_2275.w <= T_2289 @[ptw.scala 93:45] 
    node T_2290 = bits(io.mem.resp.bits.data, 3, 3) @[ptw.scala 93:45] 
    T_2275.x <= T_2290 @[ptw.scala 93:45] 
    node T_2291 = bits(io.mem.resp.bits.data, 4, 4) @[ptw.scala 93:45] 
    T_2275.u <= T_2291 @[ptw.scala 93:45] 
    node T_2292 = bits(io.mem.resp.bits.data, 5, 5) @[ptw.scala 93:45] 
    T_2275.g <= T_2292 @[ptw.scala 93:45] 
    node T_2293 = bits(io.mem.resp.bits.data, 6, 6) @[ptw.scala 93:45] 
    T_2275.a <= T_2293 @[ptw.scala 93:45] 
    node T_2294 = bits(io.mem.resp.bits.data, 7, 7) @[ptw.scala 93:45] 
    T_2275.d <= T_2294 @[ptw.scala 93:45] 
    node T_2295 = bits(io.mem.resp.bits.data, 9, 8) @[ptw.scala 93:45] 
    T_2275.reserved_for_software <= T_2295 @[ptw.scala 93:45] 
    node T_2296 = bits(io.mem.resp.bits.data, 47, 10) @[ptw.scala 93:45] 
    T_2275.ppn <= T_2296 @[ptw.scala 93:45] 
    node T_2297 = bits(io.mem.resp.bits.data, 63, 48) @[ptw.scala 93:45] 
    T_2275.reserved_for_hardware <= T_2297 @[ptw.scala 93:45] 
    wire pte : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}
    pte is invalid
    pte <- T_2275
    node T_2309 = bits(T_2228.ppn, 19, 0) @[ptw.scala 94:23] 
    pte.ppn <= T_2309 @[ptw.scala 94:13] 
    node T_2310 = shr(T_2228.ppn, 20) @[ptw.scala 95:20] 
    node T_2312 = neq(T_2310, UInt<1>("h00")) @[ptw.scala 95:32] 
    when T_2312 : @[ptw.scala 95:39] 
      pte.v <= UInt<1>("h00") @[ptw.scala 95:47] 
      skip @[ptw.scala 95:39] 
    node T_2314 = cat(r_pte.ppn, vpn_idx) @[Cat.scala 20:58] 
    node pte_addr = shl(T_2314, 3) @[ptw.scala 98:42] 
    node T_2315 = and(arb.io.out.ready, arb.io.out.valid) @[Decoupled.scala 16:42] 
    when T_2315 : @[ptw.scala 100:28] 
      r_req <- arb.io.out.bits @[ptw.scala 101:11] 
      r_req_dest <= arb.io.chosen @[ptw.scala 102:16] 
      r_pte.ppn <= io.dpath.ptbr.ppn @[ptw.scala 103:15] 
      skip @[ptw.scala 100:28] 
    reg T_2317 : UInt<8>, clk
    reg T_2319 : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg T_2326 : UInt<32>[8], clk
    reg T_2334 : UInt<20>[8], clk
    node T_2336 = eq(T_2326[0], pte_addr) @[ptw.scala 113:27] 
    node T_2337 = eq(T_2326[1], pte_addr) @[ptw.scala 113:27] 
    node T_2338 = eq(T_2326[2], pte_addr) @[ptw.scala 113:27] 
    node T_2339 = eq(T_2326[3], pte_addr) @[ptw.scala 113:27] 
    node T_2340 = eq(T_2326[4], pte_addr) @[ptw.scala 113:27] 
    node T_2341 = eq(T_2326[5], pte_addr) @[ptw.scala 113:27] 
    node T_2342 = eq(T_2326[6], pte_addr) @[ptw.scala 113:27] 
    node T_2343 = eq(T_2326[7], pte_addr) @[ptw.scala 113:27] 
    node T_2344 = cat(T_2337, T_2336) @[Cat.scala 20:58] 
    node T_2345 = cat(T_2339, T_2338) @[Cat.scala 20:58] 
    node T_2346 = cat(T_2345, T_2344) @[Cat.scala 20:58] 
    node T_2347 = cat(T_2341, T_2340) @[Cat.scala 20:58] 
    node T_2348 = cat(T_2343, T_2342) @[Cat.scala 20:58] 
    node T_2349 = cat(T_2348, T_2347) @[Cat.scala 20:58] 
    node T_2350 = cat(T_2349, T_2346) @[Cat.scala 20:58] 
    node T_2351 = and(T_2350, T_2319) @[ptw.scala 113:48] 
    node pte_cache_hit = neq(T_2351, UInt<1>("h00")) @[ptw.scala 114:20] 
    node T_2354 = eq(pte.r, UInt<1>("h00")) @[ptw.scala 51:36] 
    node T_2355 = and(pte.v, T_2354) @[ptw.scala 51:33] 
    node T_2357 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 51:42] 
    node T_2358 = and(T_2355, T_2357) @[ptw.scala 51:39] 
    node T_2360 = eq(pte.x, UInt<1>("h00")) @[ptw.scala 51:48] 
    node T_2361 = and(T_2358, T_2360) @[ptw.scala 51:45] 
    node T_2362 = and(io.mem.resp.valid, T_2361) @[ptw.scala 115:29] 
    node T_2364 = eq(pte_cache_hit, UInt<1>("h00")) @[ptw.scala 115:47] 
    node T_2365 = and(T_2362, T_2364) @[ptw.scala 115:44] 
    when T_2365 : @[ptw.scala 115:53] 
      node T_2366 = not(T_2319) @[ptw.scala 116:25] 
      node T_2368 = eq(T_2366, UInt<1>("h00")) @[ptw.scala 116:25] 
      node T_2370 = dshr(T_2317, UInt<1>("h01")) @[Cache.scala 104:27] 
      node T_2371 = bits(T_2370, 0, 0) @[Cache.scala 104:27] 
      node T_2372 = cat(UInt<1>("h01"), T_2371) @[Cat.scala 20:58] 
      node T_2373 = dshr(T_2317, T_2372) @[Cache.scala 104:27] 
      node T_2374 = bits(T_2373, 0, 0) @[Cache.scala 104:27] 
      node T_2375 = cat(T_2372, T_2374) @[Cat.scala 20:58] 
      node T_2376 = dshr(T_2317, T_2375) @[Cache.scala 104:27] 
      node T_2377 = bits(T_2376, 0, 0) @[Cache.scala 104:27] 
      node T_2378 = cat(T_2375, T_2377) @[Cat.scala 20:58] 
      node T_2379 = bits(T_2378, 2, 0) @[Cache.scala 105:8] 
      node T_2380 = not(T_2319) @[ptw.scala 116:61] 
      node T_2381 = bits(T_2380, 0, 0) @[OneHot.scala 35:40] 
      node T_2382 = bits(T_2380, 1, 1) @[OneHot.scala 35:40] 
      node T_2383 = bits(T_2380, 2, 2) @[OneHot.scala 35:40] 
      node T_2384 = bits(T_2380, 3, 3) @[OneHot.scala 35:40] 
      node T_2385 = bits(T_2380, 4, 4) @[OneHot.scala 35:40] 
      node T_2386 = bits(T_2380, 5, 5) @[OneHot.scala 35:40] 
      node T_2387 = bits(T_2380, 6, 6) @[OneHot.scala 35:40] 
      node T_2388 = bits(T_2380, 7, 7) @[OneHot.scala 35:40] 
      node T_2397 = mux(T_2387, UInt<3>("h06"), UInt<3>("h07")) @[Mux.scala 31:69] 
      node T_2398 = mux(T_2386, UInt<3>("h05"), T_2397) @[Mux.scala 31:69] 
      node T_2399 = mux(T_2385, UInt<3>("h04"), T_2398) @[Mux.scala 31:69] 
      node T_2400 = mux(T_2384, UInt<2>("h03"), T_2399) @[Mux.scala 31:69] 
      node T_2401 = mux(T_2383, UInt<2>("h02"), T_2400) @[Mux.scala 31:69] 
      node T_2402 = mux(T_2382, UInt<1>("h01"), T_2401) @[Mux.scala 31:69] 
      node T_2403 = mux(T_2381, UInt<1>("h00"), T_2402) @[Mux.scala 31:69] 
      node T_2404 = mux(T_2368, T_2379, T_2403) @[ptw.scala 116:18] 
      node T_2406 = dshl(UInt<1>("h01"), T_2404) @[OneHot.scala 44:15] 
      node T_2407 = or(T_2319, T_2406) @[ptw.scala 117:22] 
      T_2319 <= T_2407 @[ptw.scala 117:13] 
      T_2326[T_2404] <= pte_addr @[ptw.scala 118:15] 
      T_2334[T_2404] <= pte.ppn @[ptw.scala 119:15] 
      skip @[ptw.scala 115:53] 
    node T_2408 = eq(state, UInt<3>("h01")) @[ptw.scala 121:24] 
    node T_2409 = and(pte_cache_hit, T_2408) @[ptw.scala 121:15] 
    when T_2409 : @[ptw.scala 121:35] 
      node T_2410 = bits(T_2351, 7, 4) @[OneHot.scala 22:18] 
      node T_2411 = bits(T_2351, 3, 0) @[OneHot.scala 23:18] 
      node T_2413 = neq(T_2410, UInt<1>("h00")) @[OneHot.scala 24:14] 
      node T_2414 = or(T_2410, T_2411) @[OneHot.scala 24:28] 
      node T_2415 = bits(T_2414, 3, 2) @[OneHot.scala 22:18] 
      node T_2416 = bits(T_2414, 1, 0) @[OneHot.scala 23:18] 
      node T_2418 = neq(T_2415, UInt<1>("h00")) @[OneHot.scala 24:14] 
      node T_2419 = or(T_2415, T_2416) @[OneHot.scala 24:28] 
      node T_2420 = bits(T_2419, 1, 1) @[CircuitMath.scala 21:8] 
      node T_2421 = cat(T_2418, T_2420) @[Cat.scala 20:58] 
      node T_2422 = cat(T_2413, T_2421) @[Cat.scala 20:58] 
      node T_2424 = bits(T_2422, 2, 2) @[Cache.scala 94:20] 
      node T_2426 = eq(T_2424, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_2428 = dshl(UInt<1>("h01"), UInt<1>("h01")) @[Cache.scala 95:37] 
      node T_2429 = or(T_2317, T_2428) @[Cache.scala 95:37] 
      node T_2430 = not(T_2317) @[Cache.scala 95:37] 
      node T_2431 = or(T_2430, T_2428) @[Cache.scala 95:37] 
      node T_2432 = not(T_2431) @[Cache.scala 95:37] 
      node T_2433 = mux(T_2426, T_2429, T_2432) @[Cache.scala 95:37] 
      node T_2434 = cat(UInt<1>("h01"), T_2424) @[Cat.scala 20:58] 
      node T_2435 = bits(T_2422, 1, 1) @[Cache.scala 94:20] 
      node T_2437 = eq(T_2435, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_2439 = dshl(UInt<1>("h01"), T_2434) @[Cache.scala 95:37] 
      node T_2440 = or(T_2433, T_2439) @[Cache.scala 95:37] 
      node T_2441 = not(T_2433) @[Cache.scala 95:37] 
      node T_2442 = or(T_2441, T_2439) @[Cache.scala 95:37] 
      node T_2443 = not(T_2442) @[Cache.scala 95:37] 
      node T_2444 = mux(T_2437, T_2440, T_2443) @[Cache.scala 95:37] 
      node T_2445 = cat(T_2434, T_2435) @[Cat.scala 20:58] 
      node T_2446 = bits(T_2422, 0, 0) @[Cache.scala 94:20] 
      node T_2448 = eq(T_2446, UInt<1>("h00")) @[Cache.scala 95:43] 
      node T_2450 = dshl(UInt<1>("h01"), T_2445) @[Cache.scala 95:37] 
      node T_2451 = or(T_2444, T_2450) @[Cache.scala 95:37] 
      node T_2452 = not(T_2444) @[Cache.scala 95:37] 
      node T_2453 = or(T_2452, T_2450) @[Cache.scala 95:37] 
      node T_2454 = not(T_2453) @[Cache.scala 95:37] 
      node T_2455 = mux(T_2448, T_2451, T_2454) @[Cache.scala 95:37] 
      node T_2456 = cat(T_2445, T_2446) @[Cat.scala 20:58] 
      T_2317 <= T_2455 @[Cache.scala 88:15] 
      skip @[ptw.scala 121:35] 
    when io.dpath.invalidate : @[ptw.scala 122:32] 
      T_2319 <= UInt<1>("h00") @[ptw.scala 122:40] 
      skip @[ptw.scala 122:32] 
    node T_2458 = bits(T_2351, 0, 0) @[Mux.scala 20:36] 
    node T_2459 = bits(T_2351, 1, 1) @[Mux.scala 20:36] 
    node T_2460 = bits(T_2351, 2, 2) @[Mux.scala 20:36] 
    node T_2461 = bits(T_2351, 3, 3) @[Mux.scala 20:36] 
    node T_2462 = bits(T_2351, 4, 4) @[Mux.scala 20:36] 
    node T_2463 = bits(T_2351, 5, 5) @[Mux.scala 20:36] 
    node T_2464 = bits(T_2351, 6, 6) @[Mux.scala 20:36] 
    node T_2465 = bits(T_2351, 7, 7) @[Mux.scala 20:36] 
    node T_2467 = mux(T_2458, T_2334[0], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2469 = mux(T_2459, T_2334[1], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2471 = mux(T_2460, T_2334[2], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2473 = mux(T_2461, T_2334[3], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2475 = mux(T_2462, T_2334[4], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2477 = mux(T_2463, T_2334[5], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2479 = mux(T_2464, T_2334[6], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2481 = mux(T_2465, T_2334[7], UInt<1>("h00")) @[Mux.scala 18:72] 
    node T_2483 = or(T_2467, T_2469) @[Mux.scala 18:72] 
    node T_2484 = or(T_2483, T_2471) @[Mux.scala 18:72] 
    node T_2485 = or(T_2484, T_2473) @[Mux.scala 18:72] 
    node T_2486 = or(T_2485, T_2475) @[Mux.scala 18:72] 
    node T_2487 = or(T_2486, T_2477) @[Mux.scala 18:72] 
    node T_2488 = or(T_2487, T_2479) @[Mux.scala 18:72] 
    node T_2489 = or(T_2488, T_2481) @[Mux.scala 18:72] 
    wire pte_cache_data : UInt<20>
    pte_cache_data is invalid
    pte_cache_data <= T_2489 @[Mux.scala 18:72] 
    node T_2490 = and(pte.x, r_req.mxr) @[ptw.scala 61:63] 
    node T_2491 = or(pte.r, T_2490) @[ptw.scala 61:57] 
    node T_2492 = mux(r_req.store, pte.w, T_2491) @[ptw.scala 61:40] 
    node T_2493 = mux(r_req.fetch, pte.x, T_2492) @[ptw.scala 61:22] 
    node T_2495 = eq(r_req.pum, UInt<1>("h00")) @[ptw.scala 62:26] 
    node T_2496 = bits(r_req.prv, 0, 0) @[ptw.scala 62:43] 
    node T_2497 = mux(pte.u, T_2495, T_2496) @[ptw.scala 62:22] 
    node T_2499 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 52:47] 
    node T_2500 = and(pte.x, T_2499) @[ptw.scala 52:44] 
    node T_2501 = or(pte.r, T_2500) @[ptw.scala 52:38] 
    node T_2502 = and(pte.v, T_2501) @[ptw.scala 52:32] 
    node T_2503 = and(T_2502, T_2497) @[ptw.scala 63:12] 
    node T_2504 = and(T_2503, T_2493) @[ptw.scala 63:23] 
    node T_2506 = eq(pte.a, UInt<1>("h00")) @[ptw.scala 127:48] 
    node T_2508 = eq(pte.d, UInt<1>("h00")) @[ptw.scala 127:74] 
    node T_2509 = and(r_req.store, T_2508) @[ptw.scala 127:71] 
    node T_2510 = or(T_2506, T_2509) @[ptw.scala 127:55] 
    node set_dirty_bit = and(T_2504, T_2510) @[ptw.scala 127:44] 
    node T_2511 = eq(state, UInt<3>("h02")) @[ptw.scala 128:36] 
    node T_2512 = and(io.mem.resp.valid, T_2511) @[ptw.scala 128:27] 
    node T_2514 = eq(set_dirty_bit, UInt<1>("h00")) @[ptw.scala 128:50] 
    node T_2515 = and(T_2512, T_2514) @[ptw.scala 128:47] 
    when T_2515 : @[ptw.scala 128:66] 
      r_pte <- pte @[ptw.scala 129:11] 
      skip @[ptw.scala 128:66] 
    wire T_2541 : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[ptw.scala 132:47] 
    T_2541 is invalid @[ptw.scala 132:47] 
    wire T_2554 : UInt<64>
    T_2554 is invalid
    T_2554 <= UInt<1>("h00")
    node T_2555 = bits(T_2554, 0, 0) @[ptw.scala 132:47] 
    T_2541.v <= T_2555 @[ptw.scala 132:47] 
    node T_2556 = bits(T_2554, 1, 1) @[ptw.scala 132:47] 
    T_2541.r <= T_2556 @[ptw.scala 132:47] 
    node T_2557 = bits(T_2554, 2, 2) @[ptw.scala 132:47] 
    T_2541.w <= T_2557 @[ptw.scala 132:47] 
    node T_2558 = bits(T_2554, 3, 3) @[ptw.scala 132:47] 
    T_2541.x <= T_2558 @[ptw.scala 132:47] 
    node T_2559 = bits(T_2554, 4, 4) @[ptw.scala 132:47] 
    T_2541.u <= T_2559 @[ptw.scala 132:47] 
    node T_2560 = bits(T_2554, 5, 5) @[ptw.scala 132:47] 
    T_2541.g <= T_2560 @[ptw.scala 132:47] 
    node T_2561 = bits(T_2554, 6, 6) @[ptw.scala 132:47] 
    T_2541.a <= T_2561 @[ptw.scala 132:47] 
    node T_2562 = bits(T_2554, 7, 7) @[ptw.scala 132:47] 
    T_2541.d <= T_2562 @[ptw.scala 132:47] 
    node T_2563 = bits(T_2554, 9, 8) @[ptw.scala 132:47] 
    T_2541.reserved_for_software <= T_2563 @[ptw.scala 132:47] 
    node T_2564 = bits(T_2554, 47, 10) @[ptw.scala 132:47] 
    T_2541.ppn <= T_2564 @[ptw.scala 132:47] 
    node T_2565 = bits(T_2554, 63, 48) @[ptw.scala 132:47] 
    T_2541.reserved_for_hardware <= T_2565 @[ptw.scala 132:47] 
    wire pte_wdata : {reserved_for_hardware : UInt<16>, ppn : UInt<38>, reserved_for_software : UInt<2>, d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}
    pte_wdata is invalid
    pte_wdata <- T_2541
    pte_wdata.a <= UInt<1>("h01") @[ptw.scala 133:15] 
    pte_wdata.d <= r_req.store @[ptw.scala 134:15] 
    node T_2578 = eq(state, UInt<3>("h01")) @[ptw.scala 136:33] 
    node T_2579 = eq(state, UInt<3>("h03")) @[ptw.scala 136:52] 
    node T_2580 = or(T_2578, T_2579) @[ptw.scala 136:43] 
    io.mem.req.valid <= T_2580 @[ptw.scala 136:24] 
    io.mem.req.bits.phys <= UInt<1>("h01") @[ptw.scala 137:24] 
    node T_2582 = eq(state, UInt<3>("h03")) @[ptw.scala 138:37] 
    node T_2583 = mux(T_2582, UInt<5>("h0a"), UInt<5>("h00")) @[ptw.scala 138:30] 
    io.mem.req.bits.cmd <= T_2583 @[ptw.scala 138:24] 
    io.mem.req.bits.typ <= UInt<3>("h03") @[ptw.scala 139:24] 
    io.mem.req.bits.addr <= pte_addr @[ptw.scala 140:24] 
    node T_2584 = cat(pte_wdata.r, pte_wdata.v) @[ptw.scala 141:31] 
    node T_2585 = cat(pte_wdata.u, pte_wdata.x) @[ptw.scala 141:31] 
    node T_2586 = cat(T_2585, pte_wdata.w) @[ptw.scala 141:31] 
    node T_2587 = cat(T_2586, T_2584) @[ptw.scala 141:31] 
    node T_2588 = cat(pte_wdata.d, pte_wdata.a) @[ptw.scala 141:31] 
    node T_2589 = cat(T_2588, pte_wdata.g) @[ptw.scala 141:31] 
    node T_2590 = cat(pte_wdata.reserved_for_hardware, pte_wdata.ppn) @[ptw.scala 141:31] 
    node T_2591 = cat(T_2590, pte_wdata.reserved_for_software) @[ptw.scala 141:31] 
    node T_2592 = cat(T_2591, T_2589) @[ptw.scala 141:31] 
    node T_2593 = cat(T_2592, T_2587) @[ptw.scala 141:31] 
    io.mem.s1_data <= T_2593 @[ptw.scala 141:18] 
    io.mem.s1_kill <= UInt<1>("h00") @[ptw.scala 142:18] 
    io.mem.invalidate_lr <= UInt<1>("h00") @[ptw.scala 143:24] 
    node T_2596 = shr(pte_addr, 30) @[ptw.scala 145:62] 
    node T_2597 = bits(r_req.addr, 17, 0) @[ptw.scala 145:117] 
    node resp_ppns_0 = cat(T_2596, T_2597) @[Cat.scala 20:58] 
    node T_2598 = shr(pte_addr, 21) @[ptw.scala 145:62] 
    node T_2599 = bits(r_req.addr, 8, 0) @[ptw.scala 145:117] 
    node resp_ppns_1 = cat(T_2598, T_2599) @[Cat.scala 20:58] 
    node resp_ppns_2 = shr(pte_addr, 12) @[ptw.scala 145:165] 
    node T_2600 = eq(state, UInt<3>("h05")) @[ptw.scala 147:41] 
    node T_2602 = eq(r_req_dest, UInt<1>("h00")) @[ptw.scala 147:67] 
    node T_2603 = and(T_2600, T_2602) @[ptw.scala 147:52] 
    io.requestor[0].resp.valid <= T_2603 @[ptw.scala 147:32] 
    io.requestor[0].resp.bits.pte <- r_pte @[ptw.scala 148:35] 
    node T_2605 = and(count, UInt<1>("h01")) @[util.scala 39:26] 
    node T_2607 = geq(count, UInt<2>("h02")) @[util.scala 40:17] 
    node T_2609 = and(T_2605, UInt<1>("h00")) @[util.scala 39:26] 
    node T_2611 = geq(T_2605, UInt<1>("h01")) @[util.scala 40:17] 
    node T_2612 = mux(T_2611, resp_ppns_1, resp_ppns_0) @[util.scala 40:12] 
    node T_2613 = mux(T_2607, resp_ppns_2, T_2612) @[util.scala 40:12] 
    io.requestor[0].resp.bits.pte.ppn <= T_2613 @[ptw.scala 149:39] 
    io.requestor[0].ptbr <- io.dpath.ptbr @[ptw.scala 150:26] 
    io.requestor[0].invalidate <= io.dpath.invalidate @[ptw.scala 151:32] 
    io.requestor[0].status <- io.dpath.status @[ptw.scala 152:28] 
    node T_2614 = eq(state, UInt<3>("h05")) @[ptw.scala 147:41] 
    node T_2616 = eq(r_req_dest, UInt<1>("h01")) @[ptw.scala 147:67] 
    node T_2617 = and(T_2614, T_2616) @[ptw.scala 147:52] 
    io.requestor[1].resp.valid <= T_2617 @[ptw.scala 147:32] 
    io.requestor[1].resp.bits.pte <- r_pte @[ptw.scala 148:35] 
    node T_2619 = and(count, UInt<1>("h01")) @[util.scala 39:26] 
    node T_2621 = geq(count, UInt<2>("h02")) @[util.scala 40:17] 
    node T_2623 = and(T_2619, UInt<1>("h00")) @[util.scala 39:26] 
    node T_2625 = geq(T_2619, UInt<1>("h01")) @[util.scala 40:17] 
    node T_2626 = mux(T_2625, resp_ppns_1, resp_ppns_0) @[util.scala 40:12] 
    node T_2627 = mux(T_2621, resp_ppns_2, T_2626) @[util.scala 40:12] 
    io.requestor[1].resp.bits.pte.ppn <= T_2627 @[ptw.scala 149:39] 
    io.requestor[1].ptbr <- io.dpath.ptbr @[ptw.scala 150:26] 
    io.requestor[1].invalidate <= io.dpath.invalidate @[ptw.scala 151:32] 
    io.requestor[1].status <- io.dpath.status @[ptw.scala 152:28] 
    node T_2628 = eq(UInt<3>("h00"), state) @[Conditional.scala 24:42] 
    when T_2628 : @[Conditional.scala 24:73] 
      when arb.io.out.valid : @[ptw.scala 158:31] 
        state <= UInt<3>("h01") @[ptw.scala 159:15] 
        skip @[ptw.scala 158:31] 
      count <= UInt<1>("h00") @[ptw.scala 161:13] 
      skip @[Conditional.scala 24:73] 
    node T_2630 = eq(UInt<3>("h01"), state) @[Conditional.scala 24:42] 
    when T_2630 : @[Conditional.scala 24:73] 
      node T_2632 = lt(count, UInt<2>("h02")) @[ptw.scala 164:36] 
      node T_2633 = and(pte_cache_hit, T_2632) @[ptw.scala 164:27] 
      when T_2633 : @[ptw.scala 164:50] 
        io.mem.req.valid <= UInt<1>("h00") @[ptw.scala 165:26] 
        state <= UInt<3>("h01") @[ptw.scala 166:15] 
        node T_2636 = add(count, UInt<1>("h01")) @[ptw.scala 167:24] 
        node T_2637 = tail(T_2636, 1) @[ptw.scala 167:24] 
        count <= T_2637 @[ptw.scala 167:15] 
        r_pte.ppn <= pte_cache_data @[ptw.scala 168:19] 
        skip @[ptw.scala 164:50] 
      node T_2639 = eq(T_2633, UInt<1>("h00")) @[ptw.scala 164:50] 
      node T_2640 = and(T_2639, io.mem.req.ready) @[ptw.scala 169:37] 
      when T_2640 : @[ptw.scala 169:37] 
        state <= UInt<3>("h02") @[ptw.scala 170:15] 
        skip @[ptw.scala 169:37] 
      skip @[Conditional.scala 24:73] 
    node T_2641 = eq(UInt<3>("h02"), state) @[Conditional.scala 24:42] 
    when T_2641 : @[Conditional.scala 24:73] 
      when io.mem.s2_nack : @[ptw.scala 174:29] 
        state <= UInt<3>("h01") @[ptw.scala 175:15] 
        skip @[ptw.scala 174:29] 
      when io.mem.resp.valid : @[ptw.scala 177:32] 
        state <= UInt<3>("h05") @[ptw.scala 178:15] 
        when set_dirty_bit : @[ptw.scala 179:30] 
          state <= UInt<3>("h03") @[ptw.scala 180:17] 
          skip @[ptw.scala 179:30] 
        node T_2643 = eq(pte.r, UInt<1>("h00")) @[ptw.scala 51:36] 
        node T_2644 = and(pte.v, T_2643) @[ptw.scala 51:33] 
        node T_2646 = eq(pte.w, UInt<1>("h00")) @[ptw.scala 51:42] 
        node T_2647 = and(T_2644, T_2646) @[ptw.scala 51:39] 
        node T_2649 = eq(pte.x, UInt<1>("h00")) @[ptw.scala 51:48] 
        node T_2650 = and(T_2647, T_2649) @[ptw.scala 51:45] 
        node T_2652 = lt(count, UInt<2>("h02")) @[ptw.scala 182:36] 
        node T_2653 = and(T_2650, T_2652) @[ptw.scala 182:27] 
        when T_2653 : @[ptw.scala 182:50] 
          state <= UInt<3>("h01") @[ptw.scala 183:17] 
          node T_2655 = add(count, UInt<1>("h01")) @[ptw.scala 184:26] 
          node T_2656 = tail(T_2655, 1) @[ptw.scala 184:26] 
          count <= T_2656 @[ptw.scala 184:17] 
          skip @[ptw.scala 182:50] 
        skip @[ptw.scala 177:32] 
      skip @[Conditional.scala 24:73] 
    node T_2657 = eq(UInt<3>("h03"), state) @[Conditional.scala 24:42] 
    when T_2657 : @[Conditional.scala 24:73] 
      when io.mem.req.ready : @[ptw.scala 189:31] 
        state <= UInt<3>("h04") @[ptw.scala 190:15] 
        skip @[ptw.scala 189:31] 
      skip @[Conditional.scala 24:73] 
    node T_2658 = eq(UInt<3>("h04"), state) @[Conditional.scala 24:42] 
    when T_2658 : @[Conditional.scala 24:73] 
      when io.mem.s2_nack : @[ptw.scala 194:29] 
        state <= UInt<3>("h03") @[ptw.scala 195:15] 
        skip @[ptw.scala 194:29] 
      when io.mem.resp.valid : @[ptw.scala 197:32] 
        state <= UInt<3>("h01") @[ptw.scala 198:15] 
        skip @[ptw.scala 197:32] 
      skip @[Conditional.scala 24:73] 
    node T_2659 = eq(UInt<3>("h05"), state) @[Conditional.scala 24:42] 
    when T_2659 : @[Conditional.scala 24:73] 
      state <= UInt<3>("h00") @[ptw.scala 202:13] 
      skip @[Conditional.scala 24:73] 
    
  module HellaCacheArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip requestor : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}[2], mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, phys : UInt<1>, data : UInt<64>}}, s1_kill : UInt<1>, s1_data : UInt<64>, flip s2_nack : UInt<1>, flip resp : {valid : UInt<1>, bits : {addr : UInt<40>, tag : UInt<9>, cmd : UInt<5>, typ : UInt<3>, data : UInt<64>, replay : UInt<1>, has_data : UInt<1>, data_word_bypass : UInt<64>, store_data : UInt<64>}}, flip replay_next : UInt<1>, flip xcpt : {ma : {ld : UInt<1>, st : UInt<1>}, pf : {ld : UInt<1>, st : UInt<1>}}, invalidate_lr : UInt<1>, flip ordered : UInt<1>}}
    
    io is invalid
    reg T_6368 : UInt, clk
    reg T_6369 : UInt, clk
    T_6369 <= T_6368
    node T_6370 = or(io.requestor[0].invalidate_lr, io.requestor[1].invalidate_lr) @[arbiter.scala 22:71] 
    io.mem.invalidate_lr <= T_6370 @[arbiter.scala 22:26] 
    node T_6371 = or(io.requestor[0].req.valid, io.requestor[1].req.valid) @[arbiter.scala 23:63] 
    io.mem.req.valid <= T_6371 @[arbiter.scala 23:22] 
    io.requestor[0].req.ready <= io.mem.req.ready @[arbiter.scala 24:31] 
    node T_6373 = eq(io.requestor[0].req.valid, UInt<1>("h00")) @[arbiter.scala 26:67] 
    node T_6374 = and(io.requestor[0].req.ready, T_6373) @[arbiter.scala 26:64] 
    io.requestor[1].req.ready <= T_6374 @[arbiter.scala 26:33] 
    io.mem.req.bits.cmd <= io.requestor[1].req.bits.cmd @[arbiter.scala 31:29] 
    io.mem.req.bits.typ <= io.requestor[1].req.bits.typ @[arbiter.scala 32:29] 
    io.mem.req.bits.addr <= io.requestor[1].req.bits.addr @[arbiter.scala 33:30] 
    io.mem.req.bits.phys <= io.requestor[1].req.bits.phys @[arbiter.scala 34:30] 
    node T_6376 = cat(io.requestor[1].req.bits.tag, UInt<1>("h01")) @[Cat.scala 20:58] 
    io.mem.req.bits.tag <= T_6376 @[arbiter.scala 35:29] 
    T_6368 <= UInt<1>("h01") @[arbiter.scala 36:15] 
    io.mem.s1_kill <= io.requestor[1].s1_kill @[arbiter.scala 39:24] 
    io.mem.s1_data <= io.requestor[1].s1_data @[arbiter.scala 40:24] 
    when io.requestor[0].req.valid : @[arbiter.scala 47:26] 
      io.mem.req.bits.cmd <= io.requestor[0].req.bits.cmd @[arbiter.scala 31:29] 
      io.mem.req.bits.typ <= io.requestor[0].req.bits.typ @[arbiter.scala 32:29] 
      io.mem.req.bits.addr <= io.requestor[0].req.bits.addr @[arbiter.scala 33:30] 
      io.mem.req.bits.phys <= io.requestor[0].req.bits.phys @[arbiter.scala 34:30] 
      node T_6379 = cat(io.requestor[0].req.bits.tag, UInt<1>("h00")) @[Cat.scala 20:58] 
      io.mem.req.bits.tag <= T_6379 @[arbiter.scala 35:29] 
      T_6368 <= UInt<1>("h00") @[arbiter.scala 36:15] 
      skip @[arbiter.scala 47:26] 
    node T_6382 = eq(T_6368, UInt<1>("h00")) @[arbiter.scala 48:21] 
    when T_6382 : @[arbiter.scala 48:34] 
      io.mem.s1_kill <= io.requestor[0].s1_kill @[arbiter.scala 39:24] 
      io.mem.s1_data <= io.requestor[0].s1_data @[arbiter.scala 40:24] 
      skip @[arbiter.scala 48:34] 
    node T_6383 = bits(io.mem.resp.bits.tag, 0, 0) @[arbiter.scala 54:41] 
    node T_6385 = eq(T_6383, UInt<1>("h00")) @[arbiter.scala 54:57] 
    node T_6386 = and(io.mem.resp.valid, T_6385) @[arbiter.scala 55:39] 
    io.requestor[0].resp.valid <= T_6386 @[arbiter.scala 55:18] 
    io.requestor[0].xcpt <- io.mem.xcpt @[arbiter.scala 56:28] 
    io.requestor[0].ordered <= io.mem.ordered @[arbiter.scala 57:31] 
    node T_6388 = eq(T_6369, UInt<1>("h00")) @[arbiter.scala 58:58] 
    node T_6389 = and(io.mem.s2_nack, T_6388) @[arbiter.scala 58:49] 
    io.requestor[0].s2_nack <= T_6389 @[arbiter.scala 58:31] 
    io.requestor[0].resp.bits <- io.mem.resp.bits @[arbiter.scala 59:17] 
    node T_6390 = shr(io.mem.resp.bits.tag, 1) @[arbiter.scala 60:45] 
    io.requestor[0].resp.bits.tag <= T_6390 @[arbiter.scala 60:21] 
    io.requestor[0].replay_next <= io.mem.replay_next @[arbiter.scala 62:35] 
    node T_6391 = bits(io.mem.resp.bits.tag, 0, 0) @[arbiter.scala 54:41] 
    node T_6393 = eq(T_6391, UInt<1>("h01")) @[arbiter.scala 54:57] 
    node T_6394 = and(io.mem.resp.valid, T_6393) @[arbiter.scala 55:39] 
    io.requestor[1].resp.valid <= T_6394 @[arbiter.scala 55:18] 
    io.requestor[1].xcpt <- io.mem.xcpt @[arbiter.scala 56:28] 
    io.requestor[1].ordered <= io.mem.ordered @[arbiter.scala 57:31] 
    node T_6396 = eq(T_6369, UInt<1>("h01")) @[arbiter.scala 58:58] 
    node T_6397 = and(io.mem.s2_nack, T_6396) @[arbiter.scala 58:49] 
    io.requestor[1].s2_nack <= T_6397 @[arbiter.scala 58:31] 
    io.requestor[1].resp.bits <- io.mem.resp.bits @[arbiter.scala 59:17] 
    node T_6398 = shr(io.mem.resp.bits.tag, 1) @[arbiter.scala 60:45] 
    io.requestor[1].resp.bits.tag <= T_6398 @[arbiter.scala 60:21] 
    io.requestor[1].replay_next <= io.mem.replay_next @[arbiter.scala 62:35] 
    
  module RocketTile : 
    input clk : Clock
    input reset : UInt<1>
    output io : {cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], flip prci : {reset : UInt<1>, id : UInt<1>, interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>}}}
    
    io is invalid
    inst core of Rocket @[tile.scala 45:20] 
    core.io is invalid
    core.clk <= clk
    core.reset <= reset
    inst icache of Frontend @[tile.scala 46:22] 
    icache.io is invalid
    icache.clk <= clk
    icache.reset <= reset
    inst DCache_1 of DCache @[tile.scala 50:31] 
    DCache_1.io is invalid
    DCache_1.clk <= clk
    DCache_1.reset <= reset
    core.io.prci <- io.prci @[tile.scala 58:16] 
    icache.io.cpu <- core.io.imem @[tile.scala 59:17] 
    inst fpuOpt of FPU @[tile.scala 61:42] 
    fpuOpt.io is invalid
    fpuOpt.clk <= clk
    fpuOpt.reset <= reset
    core.io.fpu <- fpuOpt.io @[tile.scala 62:37] 
    inst uncachedArb of ClientUncachedTileLinkIOArbiter @[tile.scala 123:27] 
    uncachedArb.io is invalid
    uncachedArb.clk <= clk
    uncachedArb.reset <= reset
    uncachedArb.io.in[0] <- icache.io.mem @[tile.scala 124:21] 
    io.uncached[0] <- uncachedArb.io.out @[tile.scala 128:15] 
    io.cached[0] <- DCache_1.io.mem @[tile.scala 129:13] 
    inst PTW_1 of PTW @[tile.scala 135:21] 
    PTW_1.io is invalid
    PTW_1.clk <= clk
    PTW_1.reset <= reset
    PTW_1.io.requestor[0] <- icache.io.ptw @[tile.scala 136:22] 
    PTW_1.io.requestor[1] <- DCache_1.io.ptw @[tile.scala 136:22] 
    core.io.ptw <- PTW_1.io.dpath @[tile.scala 138:17] 
    inst dcArb of HellaCacheArbiter @[tile.scala 141:21] 
    dcArb.io is invalid
    dcArb.clk <= clk
    dcArb.reset <= reset
    dcArb.io.requestor[0] <- PTW_1.io.mem @[tile.scala 142:22] 
    dcArb.io.requestor[1] <- core.io.dmem @[tile.scala 142:22] 
    DCache_1.io.cpu <- dcArb.io.mem @[tile.scala 143:14] 
    fpuOpt.io.cp_req.valid <= UInt<1>("h00") @[tile.scala 147:27] 
    fpuOpt.io.cp_resp.ready <= UInt<1>("h00") @[tile.scala 148:28] 
    
  module Queue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_1022 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_1022) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_1023 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1023
    node T_1024 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1024
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_1025 = ram[UInt<1>("h00")], clk
      T_1025 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_1139 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_1141 @[Decoupled.scala 138:16] 
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_1143 @[Decoupled.scala 139:16] 
    infer mport T_1144 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 140:15] 
    node T_1256 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_1256, 1) @[Decoupled.scala 155:32] 
    node T_1257 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_1258 = cat(T_1257, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_1258 @[Decoupled.scala 157:14] 
    
  module Queue_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_977 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_977) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_978 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_978
    node T_979 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_979
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_980 = ram[UInt<1>("h00")], clk
      T_980 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_1089 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_1089 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_1091 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_1091 @[Decoupled.scala 138:16] 
    node T_1093 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_1093 @[Decoupled.scala 139:16] 
    infer mport T_1094 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_1094 @[Decoupled.scala 140:15] 
    node T_1201 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_1201, 1) @[Decoupled.scala 155:32] 
    node T_1202 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_1203 = cat(T_1202, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_1203 @[Decoupled.scala 157:14] 
    
  module Queue_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}[2] @[Decoupled.scala 116:16] 
    reg T_1010 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_1012 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_1010, T_1012) @[Decoupled.scala 121:33] 
    node T_1015 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_1015) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_1016 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1016
    node T_1017 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1017
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_1018 = ram[T_1010], clk
      T_1018 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_1130 = eq(T_1010, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_1132 = add(T_1010, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1133 = tail(T_1132, 1) @[Counter.scala 21:22] 
      T_1010 <= T_1133 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_1135 = eq(T_1012, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_1137 = add(T_1012, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1138 = tail(T_1137, 1) @[Counter.scala 21:22] 
      T_1012 <= T_1138 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_1139 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_1141 @[Decoupled.scala 138:16] 
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_1143 @[Decoupled.scala 139:16] 
    infer mport T_1144 = ram[T_1012], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 140:15] 
    node T_1255 = sub(T_1010, T_1012) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_1255, 1) @[Decoupled.scala 155:32] 
    node T_1256 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_1257 = cat(T_1256, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_1257 @[Decoupled.scala 157:14] 
    
  module Queue_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[2] @[Decoupled.scala 116:16] 
    reg T_1010 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_1012 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_1010, T_1012) @[Decoupled.scala 121:33] 
    node T_1015 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_1015) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_1016 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_1016
    node T_1017 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_1017
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_1018 = ram[T_1010], clk
      T_1018 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_1130 = eq(T_1010, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_1132 = add(T_1010, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1133 = tail(T_1132, 1) @[Counter.scala 21:22] 
      T_1010 <= T_1133 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_1135 = eq(T_1012, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_1137 = add(T_1012, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1138 = tail(T_1137, 1) @[Counter.scala 21:22] 
      T_1012 <= T_1138 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_1139 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_1139 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_1141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_1141 @[Decoupled.scala 138:16] 
    node T_1143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_1143 @[Decoupled.scala 139:16] 
    infer mport T_1144 = ram[T_1012], clk
    io.deq.bits <- T_1144 @[Decoupled.scala 140:15] 
    node T_1255 = sub(T_1010, T_1012) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_1255, 1) @[Decoupled.scala 155:32] 
    node T_1256 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_1257 = cat(T_1256, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_1257 @[Decoupled.scala 157:14] 
    
  module TileLinkEnqueuer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst Queue_4 of Queue @[Decoupled.scala 179:19] 
    Queue_4.io is invalid
    Queue_4.clk <= clk
    Queue_4.reset <= reset
    Queue_4.io.enq.valid <= io.client.acquire.valid @[Decoupled.scala 180:20] 
    Queue_4.io.enq.bits <- io.client.acquire.bits @[Decoupled.scala 181:19] 
    io.client.acquire.ready <= Queue_4.io.enq.ready @[Decoupled.scala 182:15] 
    io.manager.acquire <- Queue_4.io.deq @[Enqueuer.scala 16:22] 
    inst Queue_1_1 of Queue_1 @[Decoupled.scala 179:19] 
    Queue_1_1.io is invalid
    Queue_1_1.clk <= clk
    Queue_1_1.reset <= reset
    Queue_1_1.io.enq.valid <= io.manager.probe.valid @[Decoupled.scala 180:20] 
    Queue_1_1.io.enq.bits <- io.manager.probe.bits @[Decoupled.scala 181:19] 
    io.manager.probe.ready <= Queue_1_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.client.probe <- Queue_1_1.io.deq @[Enqueuer.scala 17:22] 
    inst Queue_2_1 of Queue_2 @[Decoupled.scala 179:19] 
    Queue_2_1.io is invalid
    Queue_2_1.clk <= clk
    Queue_2_1.reset <= reset
    Queue_2_1.io.enq.valid <= io.client.release.valid @[Decoupled.scala 180:20] 
    Queue_2_1.io.enq.bits <- io.client.release.bits @[Decoupled.scala 181:19] 
    io.client.release.ready <= Queue_2_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.manager.release <- Queue_2_1.io.deq @[Enqueuer.scala 18:22] 
    inst Queue_3_1 of Queue_3 @[Decoupled.scala 179:19] 
    Queue_3_1.io is invalid
    Queue_3_1.clk <= clk
    Queue_3_1.reset <= reset
    Queue_3_1.io.enq.valid <= io.manager.grant.valid @[Decoupled.scala 180:20] 
    Queue_3_1.io.enq.bits <- io.manager.grant.bits @[Decoupled.scala 181:19] 
    io.manager.grant.ready <= Queue_3_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.client.grant <- Queue_3_1.io.deq @[Enqueuer.scala 19:22] 
    io.manager.finish <- io.client.finish @[Enqueuer.scala 20:22] 
    
  module ClientTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}, network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire acq_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 259:19] 
    acq_with_header is invalid @[Network.scala 259:19] 
    acq_with_header.bits.payload <- io.client.acquire.bits @[Network.scala 260:22] 
    acq_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 261:25] 
    node T_3894 = shl(io.client.acquire.bits.addr_block, 6) @[RocketChip.scala 391:60] 
    node T_3896 = leq(UInt<32>("h080000000"), T_3894) @[addrmap.scala 43:46] 
    node T_3898 = lt(T_3894, UInt<32>("h090000000")) @[addrmap.scala 43:56] 
    node T_3899 = and(T_3896, T_3898) @[addrmap.scala 43:51] 
    node T_3902 = mux(T_3899, UInt<1>("h00"), UInt<1>("h01")) @[RocketChip.scala 392:8] 
    acq_with_header.bits.header.dst <= T_3902 @[Network.scala 262:25] 
    acq_with_header.valid <= io.client.acquire.valid @[Network.scala 263:15] 
    io.client.acquire.ready <= acq_with_header.ready @[Network.scala 264:14] 
    wire rel_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 259:19] 
    rel_with_header is invalid @[Network.scala 259:19] 
    rel_with_header.bits.payload <- io.client.release.bits @[Network.scala 260:22] 
    rel_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 261:25] 
    node T_4464 = shl(io.client.release.bits.addr_block, 6) @[RocketChip.scala 391:60] 
    node T_4466 = leq(UInt<32>("h080000000"), T_4464) @[addrmap.scala 43:46] 
    node T_4468 = lt(T_4464, UInt<32>("h090000000")) @[addrmap.scala 43:56] 
    node T_4469 = and(T_4466, T_4468) @[addrmap.scala 43:51] 
    node T_4472 = mux(T_4469, UInt<1>("h00"), UInt<1>("h01")) @[RocketChip.scala 392:8] 
    rel_with_header.bits.header.dst <= T_4472 @[Network.scala 262:25] 
    rel_with_header.valid <= io.client.release.valid @[Network.scala 263:15] 
    io.client.release.ready <= rel_with_header.ready @[Network.scala 264:14] 
    wire fin_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}} @[Network.scala 246:19] 
    fin_with_header is invalid @[Network.scala 246:19] 
    fin_with_header.bits.payload <- io.client.finish.bits @[Network.scala 247:22] 
    fin_with_header.bits.header.src <= UInt<1>("h00") @[Network.scala 248:25] 
    fin_with_header.bits.header.dst <= io.client.finish.bits.manager_id @[Network.scala 249:25] 
    fin_with_header.valid <= io.client.finish.valid @[Network.scala 250:15] 
    io.client.finish.ready <= fin_with_header.ready @[Network.scala 251:14] 
    wire prb_without_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}} @[Network.scala 94:19] 
    prb_without_header is invalid @[Network.scala 94:19] 
    prb_without_header.valid <= io.network.probe.valid @[Network.scala 95:15] 
    prb_without_header.bits <- io.network.probe.bits.payload @[Network.scala 96:14] 
    io.network.probe.ready <= prb_without_header.ready @[Network.scala 97:14] 
    wire gnt_without_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}} @[Network.scala 94:19] 
    gnt_without_header is invalid @[Network.scala 94:19] 
    gnt_without_header.valid <= io.network.grant.valid @[Network.scala 95:15] 
    gnt_without_header.bits <- io.network.grant.bits.payload @[Network.scala 96:14] 
    io.network.grant.ready <= gnt_without_header.ready @[Network.scala 97:14] 
    io.network.acquire <- acq_with_header @[Network.scala 202:22] 
    io.network.release <- rel_with_header @[Network.scala 203:22] 
    io.network.finish <- fin_with_header @[Network.scala 204:21] 
    io.client.probe <- prb_without_header @[Network.scala 205:19] 
    io.client.grant.bits.manager_id <= io.network.grant.bits.header.src @[Network.scala 206:35] 
    io.client.grant <- gnt_without_header @[Network.scala 207:19] 
    
  module TileLinkEnqueuer_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst Queue_4_1 of Queue @[Decoupled.scala 179:19] 
    Queue_4_1.io is invalid
    Queue_4_1.clk <= clk
    Queue_4_1.reset <= reset
    Queue_4_1.io.enq.valid <= io.client.acquire.valid @[Decoupled.scala 180:20] 
    Queue_4_1.io.enq.bits <- io.client.acquire.bits @[Decoupled.scala 181:19] 
    io.client.acquire.ready <= Queue_4_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.manager.acquire <- Queue_4_1.io.deq @[Enqueuer.scala 16:22] 
    inst Queue_5_1 of Queue_1 @[Decoupled.scala 179:19] 
    Queue_5_1.io is invalid
    Queue_5_1.clk <= clk
    Queue_5_1.reset <= reset
    Queue_5_1.io.enq.valid <= io.manager.probe.valid @[Decoupled.scala 180:20] 
    Queue_5_1.io.enq.bits <- io.manager.probe.bits @[Decoupled.scala 181:19] 
    io.manager.probe.ready <= Queue_5_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.client.probe <- Queue_5_1.io.deq @[Enqueuer.scala 17:22] 
    inst Queue_6_1 of Queue_2 @[Decoupled.scala 179:19] 
    Queue_6_1.io is invalid
    Queue_6_1.clk <= clk
    Queue_6_1.reset <= reset
    Queue_6_1.io.enq.valid <= io.client.release.valid @[Decoupled.scala 180:20] 
    Queue_6_1.io.enq.bits <- io.client.release.bits @[Decoupled.scala 181:19] 
    io.client.release.ready <= Queue_6_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.manager.release <- Queue_6_1.io.deq @[Enqueuer.scala 18:22] 
    inst Queue_7_1 of Queue_3 @[Decoupled.scala 179:19] 
    Queue_7_1.io is invalid
    Queue_7_1.clk <= clk
    Queue_7_1.reset <= reset
    Queue_7_1.io.enq.valid <= io.manager.grant.valid @[Decoupled.scala 180:20] 
    Queue_7_1.io.enq.bits <- io.manager.grant.bits @[Decoupled.scala 181:19] 
    io.manager.grant.ready <= Queue_7_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.client.grant <- Queue_7_1.io.deq @[Enqueuer.scala 19:22] 
    io.manager.finish <- io.client.finish @[Enqueuer.scala 20:22] 
    
  module FinishQueue_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {manager_xact_id : UInt<4>, manager_id : UInt<1>}[2] @[Decoupled.scala 116:16] 
    reg T_218 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_220 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_218, T_220) @[Decoupled.scala 121:33] 
    node T_223 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_223) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_224 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_224
    node T_225 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_225
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_226 = ram[T_218], clk
      T_226 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_250 = eq(T_218, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_252 = add(T_218, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_253 = tail(T_252, 1) @[Counter.scala 21:22] 
      T_218 <= T_253 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_255 = eq(T_220, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_257 = add(T_220, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_258 = tail(T_257, 1) @[Counter.scala 21:22] 
      T_220 <= T_258 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_259 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_259 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_261 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_261 @[Decoupled.scala 138:16] 
    node T_263 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_263 @[Decoupled.scala 139:16] 
    infer mport T_264 = ram[T_220], clk
    io.deq.bits <- T_264 @[Decoupled.scala 140:15] 
    node T_287 = sub(T_218, T_220) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_287, 1) @[Decoupled.scala 155:32] 
    node T_288 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_289 = cat(T_288, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_289 @[Decoupled.scala 157:14] 
    
  module FinishUnit : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, refill : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, ready : UInt<1>}
    
    io is invalid
    node T_1035 = and(io.grant.ready, io.grant.valid) @[Decoupled.scala 16:42] 
    wire T_1044 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1044 is invalid @[Definitions.scala 846:34] 
    T_1044[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1046 = eq(io.grant.bits.payload.g_type, T_1044[0]) @[Util.scala 7:47] 
    node T_1047 = eq(io.grant.bits.payload.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1048 = mux(io.grant.bits.payload.is_builtin_type, T_1046, T_1047) @[Definitions.scala 274:33] 
    node T_1049 = and(UInt<1>("h01"), T_1048) @[Definitions.scala 274:27] 
    node T_1050 = and(T_1035, T_1049) @[Counters.scala 67:47] 
    reg T_1052 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1050 : @[Counter.scala 43:17] 
      node T_1054 = eq(T_1052, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1056 = add(T_1052, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1057 = tail(T_1056, 1) @[Counter.scala 21:22] 
      T_1052 <= T_1057 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_1058 = and(T_1050, T_1054) @[Counter.scala 44:20] 
    node T_1059 = mux(T_1049, T_1052, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_1060 = mux(T_1049, T_1058, T_1035) @[Counters.scala 69:19] 
    inst FinishQueue_1_1 of FinishQueue_1 @[Network.scala 158:19] 
    FinishQueue_1_1.io is invalid
    FinishQueue_1_1.clk <= clk
    FinishQueue_1_1.reset <= reset
    node T_1084 = and(io.grant.ready, io.grant.valid) @[Decoupled.scala 16:42] 
    node T_1087 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_1089 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_1090 = and(io.grant.bits.payload.is_builtin_type, T_1089) @[Definitions.scala 277:59] 
    node T_1092 = eq(T_1090, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_1093 = and(T_1087, T_1092) @[Definitions.scala 278:89] 
    node T_1094 = and(T_1084, T_1093) @[Network.scala 159:39] 
    wire T_1102 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1102 is invalid @[Definitions.scala 846:34] 
    T_1102[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1104 = eq(io.grant.bits.payload.g_type, T_1102[0]) @[Util.scala 7:47] 
    node T_1105 = eq(io.grant.bits.payload.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1106 = mux(io.grant.bits.payload.is_builtin_type, T_1104, T_1105) @[Definitions.scala 274:33] 
    node T_1107 = and(UInt<1>("h01"), T_1106) @[Definitions.scala 274:27] 
    node T_1109 = eq(T_1107, UInt<1>("h00")) @[Network.scala 159:62] 
    node T_1110 = or(T_1109, T_1060) @[Network.scala 159:84] 
    node T_1111 = and(T_1094, T_1110) @[Network.scala 159:58] 
    FinishQueue_1_1.io.enq.valid <= T_1111 @[Network.scala 159:20] 
    wire T_1134 : {manager_xact_id : UInt<4>} @[Definitions.scala 791:17] 
    T_1134 is invalid @[Definitions.scala 791:17] 
    T_1134.manager_xact_id <= io.grant.bits.payload.manager_xact_id @[Definitions.scala 792:23] 
    FinishQueue_1_1.io.enq.bits <- T_1134 @[Network.scala 160:19] 
    FinishQueue_1_1.io.enq.bits.manager_id <= io.grant.bits.header.src @[Network.scala 161:30] 
    io.finish.bits.header.src <= UInt<1>("h01") @[Network.scala 163:31] 
    io.finish.bits.header.dst <= FinishQueue_1_1.io.deq.bits.manager_id @[Network.scala 164:31] 
    io.finish.bits.payload <- FinishQueue_1_1.io.deq.bits @[Network.scala 165:28] 
    io.finish.valid <= FinishQueue_1_1.io.deq.valid @[Network.scala 166:21] 
    FinishQueue_1_1.io.deq.ready <= io.finish.ready @[Network.scala 167:20] 
    node T_1159 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_1161 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_1162 = and(io.grant.bits.payload.is_builtin_type, T_1161) @[Definitions.scala 277:59] 
    node T_1164 = eq(T_1162, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_1165 = and(T_1159, T_1164) @[Definitions.scala 278:89] 
    node T_1167 = eq(T_1165, UInt<1>("h00")) @[Network.scala 169:43] 
    node T_1168 = or(FinishQueue_1_1.io.enq.ready, T_1167) @[Network.scala 169:40] 
    node T_1169 = and(T_1168, io.grant.valid) @[Network.scala 169:61] 
    io.refill.valid <= T_1169 @[Network.scala 169:21] 
    io.refill.bits <- io.grant.bits.payload @[Network.scala 170:20] 
    node T_1172 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_1174 = eq(io.grant.bits.payload.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_1175 = and(io.grant.bits.payload.is_builtin_type, T_1174) @[Definitions.scala 277:59] 
    node T_1177 = eq(T_1175, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_1178 = and(T_1172, T_1177) @[Definitions.scala 278:89] 
    node T_1180 = eq(T_1178, UInt<1>("h00")) @[Network.scala 171:42] 
    node T_1181 = or(FinishQueue_1_1.io.enq.ready, T_1180) @[Network.scala 171:39] 
    node T_1182 = and(T_1181, io.refill.ready) @[Network.scala 171:60] 
    io.grant.ready <= T_1182 @[Network.scala 171:20] 
    io.ready <= FinishQueue_1_1.io.enq.ready @[Network.scala 172:14] 
    
  module ClientUncachedTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    inst finisher of FinishUnit @[Network.scala 226:24] 
    finisher.io is invalid
    finisher.clk <= clk
    finisher.reset <= reset
    finisher.io.grant <- io.network.grant @[Network.scala 227:21] 
    io.network.finish <- finisher.io.finish @[Network.scala 228:21] 
    wire acq_with_header : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 259:19] 
    acq_with_header is invalid @[Network.scala 259:19] 
    acq_with_header.bits.payload <- io.client.acquire.bits @[Network.scala 260:22] 
    acq_with_header.bits.header.src <= UInt<1>("h01") @[Network.scala 261:25] 
    node T_3330 = shl(io.client.acquire.bits.addr_block, 6) @[RocketChip.scala 391:60] 
    node T_3332 = leq(UInt<32>("h080000000"), T_3330) @[addrmap.scala 43:46] 
    node T_3334 = lt(T_3330, UInt<32>("h090000000")) @[addrmap.scala 43:56] 
    node T_3335 = and(T_3332, T_3334) @[addrmap.scala 43:51] 
    node T_3338 = mux(T_3335, UInt<1>("h00"), UInt<1>("h01")) @[RocketChip.scala 392:8] 
    acq_with_header.bits.header.dst <= T_3338 @[Network.scala 262:25] 
    acq_with_header.valid <= io.client.acquire.valid @[Network.scala 263:15] 
    io.client.acquire.ready <= acq_with_header.ready @[Network.scala 264:14] 
    io.network.acquire.bits <- acq_with_header.bits @[Network.scala 233:27] 
    node T_3339 = and(acq_with_header.valid, finisher.io.ready) @[Network.scala 234:53] 
    io.network.acquire.valid <= T_3339 @[Network.scala 234:28] 
    node T_3340 = and(io.network.acquire.ready, finisher.io.ready) @[Network.scala 235:53] 
    acq_with_header.ready <= T_3340 @[Network.scala 235:25] 
    io.client.grant <- finisher.io.refill @[Network.scala 236:19] 
    io.network.probe.ready <= UInt<1>("h00") @[Network.scala 237:26] 
    io.network.release.valid <= UInt<1>("h00") @[Network.scala 238:28] 
    
  module ManagerTileLinkNetworkPort : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip manager : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire T_6043 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}} @[Network.scala 300:19] 
    T_6043 is invalid @[Network.scala 300:19] 
    T_6043.bits.payload <- io.manager.grant.bits @[Network.scala 301:22] 
    T_6043.bits.header.src <= UInt<1>("h00") @[Network.scala 302:25] 
    T_6043.bits.header.dst <= io.manager.grant.bits.client_id @[Network.scala 303:25] 
    T_6043.valid <= io.manager.grant.valid @[Network.scala 304:15] 
    io.manager.grant.ready <= T_6043.ready @[Network.scala 305:14] 
    io.network.grant <- T_6043 @[Network.scala 285:20] 
    wire T_6598 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}} @[Network.scala 300:19] 
    T_6598 is invalid @[Network.scala 300:19] 
    T_6598.bits.payload <- io.manager.probe.bits @[Network.scala 301:22] 
    T_6598.bits.header.src <= UInt<1>("h00") @[Network.scala 302:25] 
    T_6598.bits.header.dst <= io.manager.probe.bits.client_id @[Network.scala 303:25] 
    T_6598.valid <= io.manager.probe.valid @[Network.scala 304:15] 
    io.manager.probe.ready <= T_6598.ready @[Network.scala 305:14] 
    io.network.probe <- T_6598 @[Network.scala 286:20] 
    wire T_6877 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}} @[Network.scala 94:19] 
    T_6877 is invalid @[Network.scala 94:19] 
    T_6877.valid <= io.network.acquire.valid @[Network.scala 95:15] 
    T_6877.bits <- io.network.acquire.bits.payload @[Network.scala 96:14] 
    io.network.acquire.ready <= T_6877.ready @[Network.scala 97:14] 
    io.manager.acquire <- T_6877 @[Network.scala 287:22] 
    io.manager.acquire.bits.client_id <= io.network.acquire.bits.header.src @[Network.scala 288:37] 
    wire T_6993 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}} @[Network.scala 94:19] 
    T_6993 is invalid @[Network.scala 94:19] 
    T_6993.valid <= io.network.release.valid @[Network.scala 95:15] 
    T_6993.bits <- io.network.release.bits.payload @[Network.scala 96:14] 
    io.network.release.ready <= T_6993.ready @[Network.scala 97:14] 
    io.manager.release <- T_6993 @[Network.scala 289:22] 
    io.manager.release.bits.client_id <= io.network.release.bits.header.src @[Network.scala 290:37] 
    wire T_7097 : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}} @[Network.scala 94:19] 
    T_7097 is invalid @[Network.scala 94:19] 
    T_7097.valid <= io.network.finish.valid @[Network.scala 95:15] 
    T_7097.bits <- io.network.finish.bits.payload @[Network.scala 96:14] 
    io.network.finish.ready <= T_7097.ready @[Network.scala 97:14] 
    io.manager.finish <- T_7097 @[Network.scala 291:21] 
    
  module TileLinkEnqueuer_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip client : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}, manager : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    io.manager.acquire <- io.client.acquire @[Enqueuer.scala 16:22] 
    io.client.probe <- io.manager.probe @[Enqueuer.scala 17:22] 
    io.manager.release <- io.client.release @[Enqueuer.scala 18:22] 
    io.client.grant <- io.manager.grant @[Enqueuer.scala 19:22] 
    io.manager.finish <- io.client.finish @[Enqueuer.scala 20:22] 
    
  module ManagerTileLinkNetworkPort_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip manager : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip network : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}}}
    
    io is invalid
    wire T_6043 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}} @[Network.scala 300:19] 
    T_6043 is invalid @[Network.scala 300:19] 
    T_6043.bits.payload <- io.manager.grant.bits @[Network.scala 301:22] 
    T_6043.bits.header.src <= UInt<1>("h01") @[Network.scala 302:25] 
    T_6043.bits.header.dst <= io.manager.grant.bits.client_id @[Network.scala 303:25] 
    T_6043.valid <= io.manager.grant.valid @[Network.scala 304:15] 
    io.manager.grant.ready <= T_6043.ready @[Network.scala 305:14] 
    io.network.grant <- T_6043 @[Network.scala 285:20] 
    wire T_6598 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}} @[Network.scala 300:19] 
    T_6598 is invalid @[Network.scala 300:19] 
    T_6598.bits.payload <- io.manager.probe.bits @[Network.scala 301:22] 
    T_6598.bits.header.src <= UInt<1>("h01") @[Network.scala 302:25] 
    T_6598.bits.header.dst <= io.manager.probe.bits.client_id @[Network.scala 303:25] 
    T_6598.valid <= io.manager.probe.valid @[Network.scala 304:15] 
    io.manager.probe.ready <= T_6598.ready @[Network.scala 305:14] 
    io.network.probe <- T_6598 @[Network.scala 286:20] 
    wire T_6877 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}} @[Network.scala 94:19] 
    T_6877 is invalid @[Network.scala 94:19] 
    T_6877.valid <= io.network.acquire.valid @[Network.scala 95:15] 
    T_6877.bits <- io.network.acquire.bits.payload @[Network.scala 96:14] 
    io.network.acquire.ready <= T_6877.ready @[Network.scala 97:14] 
    io.manager.acquire <- T_6877 @[Network.scala 287:22] 
    io.manager.acquire.bits.client_id <= io.network.acquire.bits.header.src @[Network.scala 288:37] 
    wire T_6993 : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}} @[Network.scala 94:19] 
    T_6993 is invalid @[Network.scala 94:19] 
    T_6993.valid <= io.network.release.valid @[Network.scala 95:15] 
    T_6993.bits <- io.network.release.bits.payload @[Network.scala 96:14] 
    io.network.release.ready <= T_6993.ready @[Network.scala 97:14] 
    io.manager.release <- T_6993 @[Network.scala 289:22] 
    io.manager.release.bits.client_id <= io.network.release.bits.header.src @[Network.scala 290:37] 
    wire T_7097 : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}} @[Network.scala 94:19] 
    T_7097 is invalid @[Network.scala 94:19] 
    T_7097.valid <= io.network.finish.valid @[Network.scala 95:15] 
    T_7097.bits <- io.network.finish.bits.payload @[Network.scala 96:14] 
    io.network.finish.ready <= T_7097.ready @[Network.scala 97:14] 
    io.manager.finish <- T_7097 @[Network.scala 291:21] 
    
  module LockingRRArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1134 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1136 : UInt, clk
    node T_1138 = neq(T_1134, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_1140 = and(UInt<1>("h01"), io.out.bits.payload.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1147 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1147 is invalid @[Definitions.scala 355:35] 
    T_1147[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1149 = eq(io.out.bits.payload.a_type, T_1147[0]) @[Util.scala 7:47] 
    node T_1150 = and(T_1140, T_1149) @[Definitions.scala 231:89] 
    node T_1151 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1152 = and(T_1151, T_1150) @[Arbiter.scala 42:25] 
    when T_1152 : @[Arbiter.scala 42:39] 
      T_1136 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1154 = eq(T_1134, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1156 = add(T_1134, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1157 = tail(T_1156, 1) @[Counter.scala 21:22] 
      T_1134 <= T_1157 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1138 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1136 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1159 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_1159 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_1164 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1165 = or(T_1164, validMask_2) @[Arbiter.scala 23:72] 
    node T_1166 = or(T_1165, validMask_3) @[Arbiter.scala 23:72] 
    node T_1167 = or(T_1166, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1168 = or(T_1167, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1169 = or(T_1168, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1171 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1173 = eq(T_1164, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1175 = eq(T_1165, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1177 = eq(T_1166, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1179 = eq(T_1167, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1181 = eq(T_1168, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1183 = eq(T_1169, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1184 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1185 = or(T_1184, T_1177) @[Arbiter.scala 64:50] 
    node T_1186 = and(T_1171, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1187 = or(T_1186, T_1179) @[Arbiter.scala 64:50] 
    node T_1188 = and(T_1173, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1189 = or(T_1188, T_1181) @[Arbiter.scala 64:50] 
    node T_1190 = and(T_1175, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1191 = or(T_1190, T_1183) @[Arbiter.scala 64:50] 
    node T_1193 = eq(T_1136, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1194 = mux(T_1138, T_1193, T_1185) @[Arbiter.scala 49:22] 
    node T_1195 = and(T_1194, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1195 @[Arbiter.scala 49:16] 
    node T_1197 = eq(T_1136, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1198 = mux(T_1138, T_1197, T_1187) @[Arbiter.scala 49:22] 
    node T_1199 = and(T_1198, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1199 @[Arbiter.scala 49:16] 
    node T_1201 = eq(T_1136, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1202 = mux(T_1138, T_1201, T_1189) @[Arbiter.scala 49:22] 
    node T_1203 = and(T_1202, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1203 @[Arbiter.scala 49:16] 
    node T_1205 = eq(T_1136, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1206 = mux(T_1138, T_1205, T_1191) @[Arbiter.scala 49:22] 
    node T_1207 = and(T_1206, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1207 @[Arbiter.scala 49:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module BasicBus : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter @[Network.scala 37:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13] 
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20] 
    node T_1529 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65] 
    node T_1530 = and(arb.io.out.valid, T_1529) @[Network.scala 42:35] 
    io.out[0].valid <= T_1530 @[Network.scala 42:15] 
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1532 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65] 
    node T_1533 = and(arb.io.out.valid, T_1532) @[Network.scala 42:35] 
    io.out[1].valid <= T_1533 @[Network.scala 42:15] 
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1535 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65] 
    node T_1536 = and(arb.io.out.valid, T_1535) @[Network.scala 42:35] 
    io.out[2].valid <= T_1536 @[Network.scala 42:15] 
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1538 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65] 
    node T_1539 = and(arb.io.out.valid, T_1538) @[Network.scala 42:35] 
    io.out[3].valid <= T_1539 @[Network.scala 42:15] 
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14] 
    
  module LockingRRArbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1100 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1102 : UInt, clk
    node T_1104 = neq(T_1100, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_1106 = eq(io.out.bits.payload.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_1107 = eq(io.out.bits.payload.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_1108 = eq(io.out.bits.payload.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_1109 = or(T_1106, T_1107) @[Util.scala 7:62] 
    node T_1110 = or(T_1109, T_1108) @[Util.scala 7:62] 
    node T_1111 = and(UInt<1>("h01"), T_1110) @[Definitions.scala 256:64] 
    node T_1112 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1113 = and(T_1112, T_1111) @[Arbiter.scala 42:25] 
    when T_1113 : @[Arbiter.scala 42:39] 
      T_1102 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1115 = eq(T_1100, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1117 = add(T_1100, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1118 = tail(T_1117, 1) @[Counter.scala 21:22] 
      T_1100 <= T_1118 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1104 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1102 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1120 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_1120 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_1125 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1126 = or(T_1125, validMask_2) @[Arbiter.scala 23:72] 
    node T_1127 = or(T_1126, validMask_3) @[Arbiter.scala 23:72] 
    node T_1128 = or(T_1127, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1129 = or(T_1128, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1130 = or(T_1129, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1132 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1134 = eq(T_1125, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1136 = eq(T_1126, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1138 = eq(T_1127, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1140 = eq(T_1128, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1142 = eq(T_1129, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1144 = eq(T_1130, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1145 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1146 = or(T_1145, T_1138) @[Arbiter.scala 64:50] 
    node T_1147 = and(T_1132, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1148 = or(T_1147, T_1140) @[Arbiter.scala 64:50] 
    node T_1149 = and(T_1134, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1150 = or(T_1149, T_1142) @[Arbiter.scala 64:50] 
    node T_1151 = and(T_1136, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1152 = or(T_1151, T_1144) @[Arbiter.scala 64:50] 
    node T_1154 = eq(T_1102, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1155 = mux(T_1104, T_1154, T_1146) @[Arbiter.scala 49:22] 
    node T_1156 = and(T_1155, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1156 @[Arbiter.scala 49:16] 
    node T_1158 = eq(T_1102, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1159 = mux(T_1104, T_1158, T_1148) @[Arbiter.scala 49:22] 
    node T_1160 = and(T_1159, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1160 @[Arbiter.scala 49:16] 
    node T_1162 = eq(T_1102, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1163 = mux(T_1104, T_1162, T_1150) @[Arbiter.scala 49:22] 
    node T_1164 = and(T_1163, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1164 @[Arbiter.scala 49:16] 
    node T_1166 = eq(T_1102, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1167 = mux(T_1104, T_1166, T_1152) @[Arbiter.scala 49:22] 
    node T_1168 = and(T_1167, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1168 @[Arbiter.scala 49:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module BasicBus_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_1 @[Network.scala 37:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13] 
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20] 
    node T_1483 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65] 
    node T_1484 = and(arb.io.out.valid, T_1483) @[Network.scala 42:35] 
    io.out[0].valid <= T_1484 @[Network.scala 42:15] 
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1486 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65] 
    node T_1487 = and(arb.io.out.valid, T_1486) @[Network.scala 42:35] 
    io.out[1].valid <= T_1487 @[Network.scala 42:15] 
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1489 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65] 
    node T_1490 = and(arb.io.out.valid, T_1489) @[Network.scala 42:35] 
    io.out[2].valid <= T_1490 @[Network.scala 42:15] 
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1492 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65] 
    node T_1493 = and(arb.io.out.valid, T_1492) @[Network.scala 42:35] 
    io.out[3].valid <= T_1493 @[Network.scala 42:15] 
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14] 
    
  module LockingRRArbiter_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    node T_964 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_964 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_969 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_970 = or(T_969, validMask_2) @[Arbiter.scala 23:72] 
    node T_971 = or(T_970, validMask_3) @[Arbiter.scala 23:72] 
    node T_972 = or(T_971, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_973 = or(T_972, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_974 = or(T_973, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_976 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_978 = eq(T_969, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_980 = eq(T_970, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_982 = eq(T_971, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_984 = eq(T_972, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_986 = eq(T_973, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_988 = eq(T_974, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_989 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_990 = or(T_989, T_982) @[Arbiter.scala 64:50] 
    node T_991 = and(T_976, grantMask_1) @[Arbiter.scala 64:34] 
    node T_992 = or(T_991, T_984) @[Arbiter.scala 64:50] 
    node T_993 = and(T_978, grantMask_2) @[Arbiter.scala 64:34] 
    node T_994 = or(T_993, T_986) @[Arbiter.scala 64:50] 
    node T_995 = and(T_980, grantMask_3) @[Arbiter.scala 64:34] 
    node T_996 = or(T_995, T_988) @[Arbiter.scala 64:50] 
    node T_997 = and(T_990, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[0].ready <= T_997 @[Arbiter.scala 52:16] 
    node T_998 = and(T_992, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[1].ready <= T_998 @[Arbiter.scala 52:16] 
    node T_999 = and(T_994, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[2].ready <= T_999 @[Arbiter.scala 52:16] 
    node T_1000 = and(T_996, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[3].ready <= T_1000 @[Arbiter.scala 52:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module BasicBus_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_2 @[Network.scala 37:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13] 
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20] 
    node T_1299 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65] 
    node T_1300 = and(arb.io.out.valid, T_1299) @[Network.scala 42:35] 
    io.out[0].valid <= T_1300 @[Network.scala 42:15] 
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1302 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65] 
    node T_1303 = and(arb.io.out.valid, T_1302) @[Network.scala 42:35] 
    io.out[1].valid <= T_1303 @[Network.scala 42:15] 
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1305 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65] 
    node T_1306 = and(arb.io.out.valid, T_1305) @[Network.scala 42:35] 
    io.out[2].valid <= T_1306 @[Network.scala 42:15] 
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1308 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65] 
    node T_1309 = and(arb.io.out.valid, T_1308) @[Network.scala 42:35] 
    io.out[3].valid <= T_1309 @[Network.scala 42:15] 
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14] 
    
  module LockingRRArbiter_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1100 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1102 : UInt, clk
    node T_1104 = neq(T_1100, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    wire T_1112 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1112 is invalid @[Definitions.scala 846:34] 
    T_1112[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1114 = eq(io.out.bits.payload.g_type, T_1112[0]) @[Util.scala 7:47] 
    node T_1115 = eq(io.out.bits.payload.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1116 = mux(io.out.bits.payload.is_builtin_type, T_1114, T_1115) @[Definitions.scala 274:33] 
    node T_1117 = and(UInt<1>("h01"), T_1116) @[Definitions.scala 274:27] 
    node T_1118 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1119 = and(T_1118, T_1117) @[Arbiter.scala 42:25] 
    when T_1119 : @[Arbiter.scala 42:39] 
      T_1102 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1121 = eq(T_1100, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1123 = add(T_1100, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1124 = tail(T_1123, 1) @[Counter.scala 21:22] 
      T_1100 <= T_1124 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1104 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1102 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1126 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_1126 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_1131 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1132 = or(T_1131, validMask_2) @[Arbiter.scala 23:72] 
    node T_1133 = or(T_1132, validMask_3) @[Arbiter.scala 23:72] 
    node T_1134 = or(T_1133, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1135 = or(T_1134, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1136 = or(T_1135, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1138 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1140 = eq(T_1131, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1142 = eq(T_1132, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1144 = eq(T_1133, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1146 = eq(T_1134, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1148 = eq(T_1135, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1150 = eq(T_1136, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1151 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1152 = or(T_1151, T_1144) @[Arbiter.scala 64:50] 
    node T_1153 = and(T_1138, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1154 = or(T_1153, T_1146) @[Arbiter.scala 64:50] 
    node T_1155 = and(T_1140, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1156 = or(T_1155, T_1148) @[Arbiter.scala 64:50] 
    node T_1157 = and(T_1142, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1158 = or(T_1157, T_1150) @[Arbiter.scala 64:50] 
    node T_1160 = eq(T_1102, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1161 = mux(T_1104, T_1160, T_1152) @[Arbiter.scala 49:22] 
    node T_1162 = and(T_1161, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1162 @[Arbiter.scala 49:16] 
    node T_1164 = eq(T_1102, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1165 = mux(T_1104, T_1164, T_1154) @[Arbiter.scala 49:22] 
    node T_1166 = and(T_1165, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1166 @[Arbiter.scala 49:16] 
    node T_1168 = eq(T_1102, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1169 = mux(T_1104, T_1168, T_1156) @[Arbiter.scala 49:22] 
    node T_1170 = and(T_1169, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1170 @[Arbiter.scala 49:16] 
    node T_1172 = eq(T_1102, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1173 = mux(T_1104, T_1172, T_1158) @[Arbiter.scala 49:22] 
    node T_1174 = and(T_1173, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1174 @[Arbiter.scala 49:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module BasicBus_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_3 @[Network.scala 37:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13] 
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20] 
    node T_1483 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65] 
    node T_1484 = and(arb.io.out.valid, T_1483) @[Network.scala 42:35] 
    io.out[0].valid <= T_1484 @[Network.scala 42:15] 
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1486 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65] 
    node T_1487 = and(arb.io.out.valid, T_1486) @[Network.scala 42:35] 
    io.out[1].valid <= T_1487 @[Network.scala 42:15] 
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1489 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65] 
    node T_1490 = and(arb.io.out.valid, T_1489) @[Network.scala 42:35] 
    io.out[2].valid <= T_1490 @[Network.scala 42:15] 
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1492 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65] 
    node T_1493 = and(arb.io.out.valid, T_1492) @[Network.scala 42:35] 
    io.out[3].valid <= T_1493 @[Network.scala 42:15] 
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14] 
    
  module LockingRRArbiter_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    node T_930 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_930 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_935 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_936 = or(T_935, validMask_2) @[Arbiter.scala 23:72] 
    node T_937 = or(T_936, validMask_3) @[Arbiter.scala 23:72] 
    node T_938 = or(T_937, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_939 = or(T_938, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_940 = or(T_939, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_942 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_944 = eq(T_935, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_946 = eq(T_936, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_948 = eq(T_937, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_950 = eq(T_938, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_952 = eq(T_939, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_954 = eq(T_940, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_955 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_956 = or(T_955, T_948) @[Arbiter.scala 64:50] 
    node T_957 = and(T_942, grantMask_1) @[Arbiter.scala 64:34] 
    node T_958 = or(T_957, T_950) @[Arbiter.scala 64:50] 
    node T_959 = and(T_944, grantMask_2) @[Arbiter.scala 64:34] 
    node T_960 = or(T_959, T_952) @[Arbiter.scala 64:50] 
    node T_961 = and(T_946, grantMask_3) @[Arbiter.scala 64:34] 
    node T_962 = or(T_961, T_954) @[Arbiter.scala 64:50] 
    node T_963 = and(T_956, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[0].ready <= T_963 @[Arbiter.scala 52:16] 
    node T_964 = and(T_958, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[1].ready <= T_964 @[Arbiter.scala 52:16] 
    node T_965 = and(T_960, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[2].ready <= T_965 @[Arbiter.scala 52:16] 
    node T_966 = and(T_962, io.out.ready) @[Arbiter.scala 52:21] 
    io.in[3].ready <= T_966 @[Arbiter.scala 52:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module BasicBus_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}}[4]}
    
    io is invalid
    inst arb of LockingRRArbiter_4 @[Network.scala 37:19] 
    arb.io is invalid
    arb.clk <= clk
    arb.reset <= reset
    arb.io.in <= io.in @[Network.scala 38:13] 
    arb.io.out.ready <= io.out[arb.io.out.bits.header.dst].ready @[Network.scala 40:20] 
    node T_1253 = eq(arb.io.out.bits.header.dst, UInt<1>("h00")) @[Network.scala 42:65] 
    node T_1254 = and(arb.io.out.valid, T_1253) @[Network.scala 42:35] 
    io.out[0].valid <= T_1254 @[Network.scala 42:15] 
    io.out[0].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1256 = eq(arb.io.out.bits.header.dst, UInt<1>("h01")) @[Network.scala 42:65] 
    node T_1257 = and(arb.io.out.valid, T_1256) @[Network.scala 42:35] 
    io.out[1].valid <= T_1257 @[Network.scala 42:15] 
    io.out[1].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1259 = eq(arb.io.out.bits.header.dst, UInt<2>("h02")) @[Network.scala 42:65] 
    node T_1260 = and(arb.io.out.valid, T_1259) @[Network.scala 42:35] 
    io.out[2].valid <= T_1260 @[Network.scala 42:15] 
    io.out[2].bits <- arb.io.out.bits @[Network.scala 43:14] 
    node T_1262 = eq(arb.io.out.bits.header.dst, UInt<2>("h03")) @[Network.scala 42:65] 
    node T_1263 = and(arb.io.out.valid, T_1262) @[Network.scala 42:35] 
    io.out[3].valid <= T_1263 @[Network.scala 42:15] 
    io.out[3].bits <- arb.io.out.bits @[Network.scala 43:14] 
    
  module PortedTileLinkCrossbar : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip clients_cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], flip clients_uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], flip managers : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}[2]}
    
    io is invalid
    inst TileLinkEnqueuer_4 of TileLinkEnqueuer @[Interconnect.scala 46:22] 
    TileLinkEnqueuer_4.io is invalid
    TileLinkEnqueuer_4.clk <= clk
    TileLinkEnqueuer_4.reset <= reset
    inst ClientTileLinkNetworkPort_1 of ClientTileLinkNetworkPort @[Interconnect.scala 49:28] 
    ClientTileLinkNetworkPort_1.io is invalid
    ClientTileLinkNetworkPort_1.clk <= clk
    ClientTileLinkNetworkPort_1.reset <= reset
    ClientTileLinkNetworkPort_1.io.client <- io.clients_cached[0] @[Interconnect.scala 50:26] 
    TileLinkEnqueuer_4.io.client <- ClientTileLinkNetworkPort_1.io.network @[Interconnect.scala 51:24] 
    inst TileLinkEnqueuer_1_1 of TileLinkEnqueuer_1 @[Interconnect.scala 46:22] 
    TileLinkEnqueuer_1_1.io is invalid
    TileLinkEnqueuer_1_1.clk <= clk
    TileLinkEnqueuer_1_1.reset <= reset
    inst ClientUncachedTileLinkNetworkPort_1 of ClientUncachedTileLinkNetworkPort @[Interconnect.scala 55:28] 
    ClientUncachedTileLinkNetworkPort_1.io is invalid
    ClientUncachedTileLinkNetworkPort_1.clk <= clk
    ClientUncachedTileLinkNetworkPort_1.reset <= reset
    ClientUncachedTileLinkNetworkPort_1.io.client <- io.clients_uncached[0] @[Interconnect.scala 56:26] 
    TileLinkEnqueuer_1_1.io.client <- ClientUncachedTileLinkNetworkPort_1.io.network @[Interconnect.scala 57:24] 
    inst ManagerTileLinkNetworkPort_2 of ManagerTileLinkNetworkPort @[Interconnect.scala 66:24] 
    ManagerTileLinkNetworkPort_2.io is invalid
    ManagerTileLinkNetworkPort_2.clk <= clk
    ManagerTileLinkNetworkPort_2.reset <= reset
    inst TileLinkEnqueuer_2_1 of TileLinkEnqueuer_2 @[Interconnect.scala 67:22] 
    TileLinkEnqueuer_2_1.io is invalid
    TileLinkEnqueuer_2_1.clk <= clk
    TileLinkEnqueuer_2_1.reset <= reset
    ManagerTileLinkNetworkPort_2.io.manager <- io.managers[0] @[Interconnect.scala 68:23] 
    ManagerTileLinkNetworkPort_2.io.network <- TileLinkEnqueuer_2_1.io.manager @[Interconnect.scala 69:23] 
    inst ManagerTileLinkNetworkPort_1_1 of ManagerTileLinkNetworkPort_1 @[Interconnect.scala 66:24] 
    ManagerTileLinkNetworkPort_1_1.io is invalid
    ManagerTileLinkNetworkPort_1_1.clk <= clk
    ManagerTileLinkNetworkPort_1_1.reset <= reset
    inst TileLinkEnqueuer_3_1 of TileLinkEnqueuer_2 @[Interconnect.scala 67:22] 
    TileLinkEnqueuer_3_1.io is invalid
    TileLinkEnqueuer_3_1.clk <= clk
    TileLinkEnqueuer_3_1.reset <= reset
    ManagerTileLinkNetworkPort_1_1.io.manager <- io.managers[1] @[Interconnect.scala 68:23] 
    ManagerTileLinkNetworkPort_1_1.io.network <- TileLinkEnqueuer_3_1.io.manager @[Interconnect.scala 69:23] 
    inst acqNet of BasicBus @[Interconnect.scala 114:22] 
    acqNet.io is invalid
    acqNet.clk <= clk
    acqNet.reset <= reset
    inst relNet of BasicBus_1 @[Interconnect.scala 115:22] 
    relNet.io is invalid
    relNet.clk <= clk
    relNet.reset <= reset
    inst prbNet of BasicBus_2 @[Interconnect.scala 116:22] 
    prbNet.io is invalid
    prbNet.clk <= clk
    prbNet.reset <= reset
    inst gntNet of BasicBus_3 @[Interconnect.scala 117:22] 
    gntNet.io is invalid
    gntNet.clk <= clk
    gntNet.reset <= reset
    inst ackNet of BasicBus_4 @[Interconnect.scala 118:22] 
    ackNet.io is invalid
    ackNet.clk <= clk
    ackNet.reset <= reset
    wire T_12724 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_12724 is invalid @[Network.scala 105:19] 
    T_12724.bits.header <- acqNet.io.out[0].bits.header @[Network.scala 106:21] 
    T_12724.bits.payload <- acqNet.io.out[0].bits.payload @[Network.scala 107:22] 
    T_12724.valid <= acqNet.io.out[0].valid @[Network.scala 108:15] 
    acqNet.io.out[0].ready <= T_12724.ready @[Network.scala 109:14] 
    node T_12952 = sub(acqNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_12953 = tail(T_12952, 1) @[Interconnect.scala 129:47] 
    T_12724.bits.header.src <= T_12953 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_2_1.io.client.acquire.valid <= T_12724.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_2_1.io.client.acquire.bits <- T_12724.bits @[Interconnect.scala 161:17] 
    T_12724.ready <= TileLinkEnqueuer_2_1.io.client.acquire.ready @[Interconnect.scala 162:13] 
    acqNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_13294 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_13294 is invalid @[Network.scala 105:19] 
    T_13294.bits.header <- acqNet.io.out[1].bits.header @[Network.scala 106:21] 
    T_13294.bits.payload <- acqNet.io.out[1].bits.payload @[Network.scala 107:22] 
    T_13294.valid <= acqNet.io.out[1].valid @[Network.scala 108:15] 
    acqNet.io.out[1].ready <= T_13294.ready @[Network.scala 109:14] 
    node T_13522 = sub(acqNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_13523 = tail(T_13522, 1) @[Interconnect.scala 129:47] 
    T_13294.bits.header.src <= T_13523 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_3_1.io.client.acquire.valid <= T_13294.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_3_1.io.client.acquire.bits <- T_13294.bits @[Interconnect.scala 161:17] 
    T_13294.ready <= TileLinkEnqueuer_3_1.io.client.acquire.ready @[Interconnect.scala 162:13] 
    acqNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_13624 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_13624 is invalid @[Network.scala 117:19] 
    T_13624.bits.header <- TileLinkEnqueuer_4.io.manager.acquire.bits.header @[Network.scala 118:21] 
    T_13624.bits.payload <- TileLinkEnqueuer_4.io.manager.acquire.bits.payload @[Network.scala 119:22] 
    T_13624.valid <= TileLinkEnqueuer_4.io.manager.acquire.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_4.io.manager.acquire.ready <= T_13624.ready @[Network.scala 121:14] 
    node T_13692 = add(TileLinkEnqueuer_4.io.manager.acquire.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_13693 = tail(T_13692, 1) @[Interconnect.scala 144:47] 
    T_13624.bits.header.src <= T_13693 @[Interconnect.scala 144:25] 
    acqNet.io.in[2].valid <= T_13624.valid @[Interconnect.scala 152:19] 
    acqNet.io.in[2].bits <- T_13624.bits @[Interconnect.scala 153:18] 
    T_13624.ready <= acqNet.io.in[2].ready @[Interconnect.scala 154:13] 
    acqNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_13794 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_13794 is invalid @[Network.scala 117:19] 
    T_13794.bits.header <- TileLinkEnqueuer_1_1.io.manager.acquire.bits.header @[Network.scala 118:21] 
    T_13794.bits.payload <- TileLinkEnqueuer_1_1.io.manager.acquire.bits.payload @[Network.scala 119:22] 
    T_13794.valid <= TileLinkEnqueuer_1_1.io.manager.acquire.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_1_1.io.manager.acquire.ready <= T_13794.ready @[Network.scala 121:14] 
    node T_13862 = add(TileLinkEnqueuer_1_1.io.manager.acquire.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_13863 = tail(T_13862, 1) @[Interconnect.scala 144:47] 
    T_13794.bits.header.src <= T_13863 @[Interconnect.scala 144:25] 
    acqNet.io.in[3].valid <= T_13794.valid @[Interconnect.scala 152:19] 
    acqNet.io.in[3].bits <- T_13794.bits @[Interconnect.scala 153:18] 
    T_13794.ready <= acqNet.io.in[3].ready @[Interconnect.scala 154:13] 
    acqNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_14201 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_14201 is invalid @[Network.scala 105:19] 
    T_14201.bits.header <- relNet.io.out[0].bits.header @[Network.scala 106:21] 
    T_14201.bits.payload <- relNet.io.out[0].bits.payload @[Network.scala 107:22] 
    T_14201.valid <= relNet.io.out[0].valid @[Network.scala 108:15] 
    relNet.io.out[0].ready <= T_14201.ready @[Network.scala 109:14] 
    node T_14427 = sub(relNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_14428 = tail(T_14427, 1) @[Interconnect.scala 129:47] 
    T_14201.bits.header.src <= T_14428 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_2_1.io.client.release.valid <= T_14201.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_2_1.io.client.release.bits <- T_14201.bits @[Interconnect.scala 161:17] 
    T_14201.ready <= TileLinkEnqueuer_2_1.io.client.release.ready @[Interconnect.scala 162:13] 
    relNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_14766 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_14766 is invalid @[Network.scala 105:19] 
    T_14766.bits.header <- relNet.io.out[1].bits.header @[Network.scala 106:21] 
    T_14766.bits.payload <- relNet.io.out[1].bits.payload @[Network.scala 107:22] 
    T_14766.valid <= relNet.io.out[1].valid @[Network.scala 108:15] 
    relNet.io.out[1].ready <= T_14766.ready @[Network.scala 109:14] 
    node T_14992 = sub(relNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_14993 = tail(T_14992, 1) @[Interconnect.scala 129:47] 
    T_14766.bits.header.src <= T_14993 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_3_1.io.client.release.valid <= T_14766.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_3_1.io.client.release.bits <- T_14766.bits @[Interconnect.scala 161:17] 
    T_14766.ready <= TileLinkEnqueuer_3_1.io.client.release.ready @[Interconnect.scala 162:13] 
    relNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_15091 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_15091 is invalid @[Network.scala 117:19] 
    T_15091.bits.header <- TileLinkEnqueuer_4.io.manager.release.bits.header @[Network.scala 118:21] 
    T_15091.bits.payload <- TileLinkEnqueuer_4.io.manager.release.bits.payload @[Network.scala 119:22] 
    T_15091.valid <= TileLinkEnqueuer_4.io.manager.release.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_4.io.manager.release.ready <= T_15091.ready @[Network.scala 121:14] 
    node T_15157 = add(TileLinkEnqueuer_4.io.manager.release.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_15158 = tail(T_15157, 1) @[Interconnect.scala 144:47] 
    T_15091.bits.header.src <= T_15158 @[Interconnect.scala 144:25] 
    relNet.io.in[2].valid <= T_15091.valid @[Interconnect.scala 152:19] 
    relNet.io.in[2].bits <- T_15091.bits @[Interconnect.scala 153:18] 
    T_15091.ready <= relNet.io.in[2].ready @[Interconnect.scala 154:13] 
    relNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_15256 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_15256 is invalid @[Network.scala 117:19] 
    T_15256.bits.header <- TileLinkEnqueuer_1_1.io.manager.release.bits.header @[Network.scala 118:21] 
    T_15256.bits.payload <- TileLinkEnqueuer_1_1.io.manager.release.bits.payload @[Network.scala 119:22] 
    T_15256.valid <= TileLinkEnqueuer_1_1.io.manager.release.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_1_1.io.manager.release.ready <= T_15256.ready @[Network.scala 121:14] 
    node T_15322 = add(TileLinkEnqueuer_1_1.io.manager.release.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_15323 = tail(T_15322, 1) @[Interconnect.scala 144:47] 
    T_15256.bits.header.src <= T_15323 @[Interconnect.scala 144:25] 
    relNet.io.in[3].valid <= T_15256.valid @[Interconnect.scala 152:19] 
    relNet.io.in[3].bits <- T_15256.bits @[Interconnect.scala 153:18] 
    T_15256.ready <= relNet.io.in[3].ready @[Interconnect.scala 154:13] 
    relNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_15409 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 117:19] 
    T_15409 is invalid @[Network.scala 117:19] 
    T_15409.bits.header <- TileLinkEnqueuer_2_1.io.client.probe.bits.header @[Network.scala 118:21] 
    T_15409.bits.payload <- TileLinkEnqueuer_2_1.io.client.probe.bits.payload @[Network.scala 119:22] 
    T_15409.valid <= TileLinkEnqueuer_2_1.io.client.probe.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_2_1.io.client.probe.ready <= T_15409.ready @[Network.scala 121:14] 
    node T_15467 = add(TileLinkEnqueuer_2_1.io.client.probe.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47] 
    node T_15468 = tail(T_15467, 1) @[Interconnect.scala 139:47] 
    T_15409.bits.header.dst <= T_15468 @[Interconnect.scala 139:25] 
    prbNet.io.in[0].valid <= T_15409.valid @[Interconnect.scala 152:19] 
    prbNet.io.in[0].bits <- T_15409.bits @[Interconnect.scala 153:18] 
    T_15409.ready <= prbNet.io.in[0].ready @[Interconnect.scala 154:13] 
    prbNet.io.out[0].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_15554 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 117:19] 
    T_15554 is invalid @[Network.scala 117:19] 
    T_15554.bits.header <- TileLinkEnqueuer_3_1.io.client.probe.bits.header @[Network.scala 118:21] 
    T_15554.bits.payload <- TileLinkEnqueuer_3_1.io.client.probe.bits.payload @[Network.scala 119:22] 
    T_15554.valid <= TileLinkEnqueuer_3_1.io.client.probe.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_3_1.io.client.probe.ready <= T_15554.ready @[Network.scala 121:14] 
    node T_15612 = add(TileLinkEnqueuer_3_1.io.client.probe.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47] 
    node T_15613 = tail(T_15612, 1) @[Interconnect.scala 139:47] 
    T_15554.bits.header.dst <= T_15613 @[Interconnect.scala 139:25] 
    prbNet.io.in[1].valid <= T_15554.valid @[Interconnect.scala 152:19] 
    prbNet.io.in[1].bits <- T_15554.bits @[Interconnect.scala 153:18] 
    T_15554.ready <= prbNet.io.in[1].ready @[Interconnect.scala 154:13] 
    prbNet.io.out[1].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_15939 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 105:19] 
    T_15939 is invalid @[Network.scala 105:19] 
    T_15939.bits.header <- prbNet.io.out[2].bits.header @[Network.scala 106:21] 
    T_15939.bits.payload <- prbNet.io.out[2].bits.payload @[Network.scala 107:22] 
    T_15939.valid <= prbNet.io.out[2].valid @[Network.scala 108:15] 
    prbNet.io.out[2].ready <= T_15939.ready @[Network.scala 109:14] 
    node T_16157 = sub(prbNet.io.out[2].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47] 
    node T_16158 = tail(T_16157, 1) @[Interconnect.scala 134:47] 
    T_15939.bits.header.dst <= T_16158 @[Interconnect.scala 134:25] 
    TileLinkEnqueuer_4.io.manager.probe.valid <= T_15939.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_4.io.manager.probe.bits <- T_15939.bits @[Interconnect.scala 161:17] 
    T_15939.ready <= TileLinkEnqueuer_4.io.manager.probe.ready @[Interconnect.scala 162:13] 
    prbNet.io.in[2].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_16484 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_block : UInt<26>, p_type : UInt<2>}}} @[Network.scala 105:19] 
    T_16484 is invalid @[Network.scala 105:19] 
    T_16484.bits.header <- prbNet.io.out[3].bits.header @[Network.scala 106:21] 
    T_16484.bits.payload <- prbNet.io.out[3].bits.payload @[Network.scala 107:22] 
    T_16484.valid <= prbNet.io.out[3].valid @[Network.scala 108:15] 
    prbNet.io.out[3].ready <= T_16484.ready @[Network.scala 109:14] 
    node T_16702 = sub(prbNet.io.out[3].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47] 
    node T_16703 = tail(T_16702, 1) @[Interconnect.scala 134:47] 
    T_16484.bits.header.dst <= T_16703 @[Interconnect.scala 134:25] 
    TileLinkEnqueuer_1_1.io.manager.probe.valid <= T_16484.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_1_1.io.manager.probe.bits <- T_16484.bits @[Interconnect.scala 161:17] 
    T_16484.ready <= TileLinkEnqueuer_1_1.io.manager.probe.ready @[Interconnect.scala 162:13] 
    prbNet.io.in[3].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_16801 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_16801 is invalid @[Network.scala 117:19] 
    T_16801.bits.header <- TileLinkEnqueuer_2_1.io.client.grant.bits.header @[Network.scala 118:21] 
    T_16801.bits.payload <- TileLinkEnqueuer_2_1.io.client.grant.bits.payload @[Network.scala 119:22] 
    T_16801.valid <= TileLinkEnqueuer_2_1.io.client.grant.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_2_1.io.client.grant.ready <= T_16801.ready @[Network.scala 121:14] 
    node T_16867 = add(TileLinkEnqueuer_2_1.io.client.grant.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47] 
    node T_16868 = tail(T_16867, 1) @[Interconnect.scala 139:47] 
    T_16801.bits.header.dst <= T_16868 @[Interconnect.scala 139:25] 
    gntNet.io.in[0].valid <= T_16801.valid @[Interconnect.scala 152:19] 
    gntNet.io.in[0].bits <- T_16801.bits @[Interconnect.scala 153:18] 
    T_16801.ready <= gntNet.io.in[0].ready @[Interconnect.scala 154:13] 
    gntNet.io.out[0].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_16966 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 117:19] 
    T_16966 is invalid @[Network.scala 117:19] 
    T_16966.bits.header <- TileLinkEnqueuer_3_1.io.client.grant.bits.header @[Network.scala 118:21] 
    T_16966.bits.payload <- TileLinkEnqueuer_3_1.io.client.grant.bits.payload @[Network.scala 119:22] 
    T_16966.valid <= TileLinkEnqueuer_3_1.io.client.grant.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_3_1.io.client.grant.ready <= T_16966.ready @[Network.scala 121:14] 
    node T_17032 = add(TileLinkEnqueuer_3_1.io.client.grant.bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 139:47] 
    node T_17033 = tail(T_17032, 1) @[Interconnect.scala 139:47] 
    T_16966.bits.header.dst <= T_17033 @[Interconnect.scala 139:25] 
    gntNet.io.in[1].valid <= T_16966.valid @[Interconnect.scala 152:19] 
    gntNet.io.in[1].bits <- T_16966.bits @[Interconnect.scala 153:18] 
    T_16966.ready <= gntNet.io.in[1].ready @[Interconnect.scala 154:13] 
    gntNet.io.out[1].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_17371 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_17371 is invalid @[Network.scala 105:19] 
    T_17371.bits.header <- gntNet.io.out[2].bits.header @[Network.scala 106:21] 
    T_17371.bits.payload <- gntNet.io.out[2].bits.payload @[Network.scala 107:22] 
    T_17371.valid <= gntNet.io.out[2].valid @[Network.scala 108:15] 
    gntNet.io.out[2].ready <= T_17371.ready @[Network.scala 109:14] 
    node T_17597 = sub(gntNet.io.out[2].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47] 
    node T_17598 = tail(T_17597, 1) @[Interconnect.scala 134:47] 
    T_17371.bits.header.dst <= T_17598 @[Interconnect.scala 134:25] 
    TileLinkEnqueuer_4.io.manager.grant.valid <= T_17371.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_4.io.manager.grant.bits <- T_17371.bits @[Interconnect.scala 161:17] 
    T_17371.ready <= TileLinkEnqueuer_4.io.manager.grant.ready @[Interconnect.scala 162:13] 
    gntNet.io.in[2].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_17936 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}} @[Network.scala 105:19] 
    T_17936 is invalid @[Network.scala 105:19] 
    T_17936.bits.header <- gntNet.io.out[3].bits.header @[Network.scala 106:21] 
    T_17936.bits.payload <- gntNet.io.out[3].bits.payload @[Network.scala 107:22] 
    T_17936.valid <= gntNet.io.out[3].valid @[Network.scala 108:15] 
    gntNet.io.out[3].ready <= T_17936.ready @[Network.scala 109:14] 
    node T_18162 = sub(gntNet.io.out[3].bits.header.dst, UInt<2>("h02")) @[Interconnect.scala 134:47] 
    node T_18163 = tail(T_18162, 1) @[Interconnect.scala 134:47] 
    T_17936.bits.header.dst <= T_18163 @[Interconnect.scala 134:25] 
    TileLinkEnqueuer_1_1.io.manager.grant.valid <= T_17936.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_1_1.io.manager.grant.bits <- T_17936.bits @[Interconnect.scala 161:17] 
    T_17936.ready <= TileLinkEnqueuer_1_1.io.manager.grant.ready @[Interconnect.scala 162:13] 
    gntNet.io.in[3].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_18486 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 105:19] 
    T_18486 is invalid @[Network.scala 105:19] 
    T_18486.bits.header <- ackNet.io.out[0].bits.header @[Network.scala 106:21] 
    T_18486.bits.payload <- ackNet.io.out[0].bits.payload @[Network.scala 107:22] 
    T_18486.valid <= ackNet.io.out[0].valid @[Network.scala 108:15] 
    ackNet.io.out[0].ready <= T_18486.ready @[Network.scala 109:14] 
    node T_18702 = sub(ackNet.io.out[0].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_18703 = tail(T_18702, 1) @[Interconnect.scala 129:47] 
    T_18486.bits.header.src <= T_18703 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_2_1.io.client.finish.valid <= T_18486.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_2_1.io.client.finish.bits <- T_18486.bits @[Interconnect.scala 161:17] 
    T_18486.ready <= TileLinkEnqueuer_2_1.io.client.finish.ready @[Interconnect.scala 162:13] 
    ackNet.io.in[0].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_19026 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 105:19] 
    T_19026 is invalid @[Network.scala 105:19] 
    T_19026.bits.header <- ackNet.io.out[1].bits.header @[Network.scala 106:21] 
    T_19026.bits.payload <- ackNet.io.out[1].bits.payload @[Network.scala 107:22] 
    T_19026.valid <= ackNet.io.out[1].valid @[Network.scala 108:15] 
    ackNet.io.out[1].ready <= T_19026.ready @[Network.scala 109:14] 
    node T_19242 = sub(ackNet.io.out[1].bits.header.src, UInt<2>("h02")) @[Interconnect.scala 129:47] 
    node T_19243 = tail(T_19242, 1) @[Interconnect.scala 129:47] 
    T_19026.bits.header.src <= T_19243 @[Interconnect.scala 129:25] 
    TileLinkEnqueuer_3_1.io.client.finish.valid <= T_19026.valid @[Interconnect.scala 160:18] 
    TileLinkEnqueuer_3_1.io.client.finish.bits <- T_19026.bits @[Interconnect.scala 161:17] 
    T_19026.ready <= TileLinkEnqueuer_3_1.io.client.finish.ready @[Interconnect.scala 162:13] 
    ackNet.io.in[1].valid <= UInt<1>("h00") @[Interconnect.scala 163:19] 
    wire T_19326 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 117:19] 
    T_19326 is invalid @[Network.scala 117:19] 
    T_19326.bits.header <- TileLinkEnqueuer_4.io.manager.finish.bits.header @[Network.scala 118:21] 
    T_19326.bits.payload <- TileLinkEnqueuer_4.io.manager.finish.bits.payload @[Network.scala 119:22] 
    T_19326.valid <= TileLinkEnqueuer_4.io.manager.finish.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_4.io.manager.finish.ready <= T_19326.ready @[Network.scala 121:14] 
    node T_19382 = add(TileLinkEnqueuer_4.io.manager.finish.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_19383 = tail(T_19382, 1) @[Interconnect.scala 144:47] 
    T_19326.bits.header.src <= T_19383 @[Interconnect.scala 144:25] 
    ackNet.io.in[2].valid <= T_19326.valid @[Interconnect.scala 152:19] 
    ackNet.io.in[2].bits <- T_19326.bits @[Interconnect.scala 153:18] 
    T_19326.ready <= ackNet.io.in[2].ready @[Interconnect.scala 154:13] 
    ackNet.io.out[2].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    wire T_19466 : {flip ready : UInt<1>, valid : UInt<1>, bits : {header : {src : UInt<2>, dst : UInt<2>}, payload : {manager_xact_id : UInt<4>}}} @[Network.scala 117:19] 
    T_19466 is invalid @[Network.scala 117:19] 
    T_19466.bits.header <- TileLinkEnqueuer_1_1.io.manager.finish.bits.header @[Network.scala 118:21] 
    T_19466.bits.payload <- TileLinkEnqueuer_1_1.io.manager.finish.bits.payload @[Network.scala 119:22] 
    T_19466.valid <= TileLinkEnqueuer_1_1.io.manager.finish.valid @[Network.scala 120:15] 
    TileLinkEnqueuer_1_1.io.manager.finish.ready <= T_19466.ready @[Network.scala 121:14] 
    node T_19522 = add(TileLinkEnqueuer_1_1.io.manager.finish.bits.header.src, UInt<2>("h02")) @[Interconnect.scala 144:47] 
    node T_19523 = tail(T_19522, 1) @[Interconnect.scala 144:47] 
    T_19466.bits.header.src <= T_19523 @[Interconnect.scala 144:25] 
    ackNet.io.in[3].valid <= T_19466.valid @[Interconnect.scala 152:19] 
    ackNet.io.in[3].bits <- T_19466.bits @[Interconnect.scala 153:18] 
    T_19466.ready <= ackNet.io.in[3].ready @[Interconnect.scala 154:13] 
    ackNet.io.out[3].ready <= UInt<1>("h00") @[Interconnect.scala 155:20] 
    
  module BufferedBroadcastVoluntaryReleaseTracker : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_78 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_79 = or(pending_orel_send, T_78) @[Trackers.scala 307:40] 
    node scoreboard_2 = or(T_79, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_103 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_103 is invalid @[Metadata.scala 309:20] 
    T_103.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_149 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_149 is invalid @[Metadata.scala 158:20] 
    T_149.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_103 @[Metadata.scala 338:13] 
    coh.outer <- T_149 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1519 = eq(state, UInt<4>("h00")) @[Broadcast.scala 81:18] 
    node T_1520 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_1521 = and(T_1519, T_1520) @[Broadcast.scala 81:29] 
    node T_1522 = and(T_1521, io.alloc.irel.should) @[Broadcast.scala 81:56] 
    node T_1524 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Broadcast.scala 81:83] 
    node T_1525 = and(T_1522, T_1524) @[Broadcast.scala 81:80] 
    node T_1527 = eq(T_1525, UInt<1>("h00")) @[Broadcast.scala 81:10] 
    node T_1528 = or(T_1527, reset) @[Broadcast.scala 81:9] 
    node T_1530 = eq(T_1528, UInt<1>("h00")) @[Broadcast.scala 81:9] 
    when T_1530 : @[Broadcast.scala 81:9] 
      printf(clk, UInt<1>(1), "Assertion failed: VoluntaryReleaseTracker accepted Release that wasn't voluntary!\n    at Broadcast.scala:81 assert(!(state === s_idle && io.inner.release.fire() && io.alloc.irel.should && !io.irel().isVoluntary()),\n") @[Broadcast.scala 81:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 81:9] 
      skip @[Broadcast.scala 81:9] 
    wire T_1544 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1544 is invalid @[Trackers.scala 150:54] 
    T_1544[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1544[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1544))
    node T_1552 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1553 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1554 = and(T_1552, T_1553) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1554 @[Trackers.scala 428:27] 
    node T_1555 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1556 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1557 = and(T_1555, T_1556) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1557 @[Trackers.scala 429:27] 
    node T_1558 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1559 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1560 = and(T_1558, T_1559) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1560 @[Trackers.scala 430:27] 
    node T_1561 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1562 = and(T_1561, UInt<1>("h00")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1562 @[Trackers.scala 431:23] 
    node T_1563 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1564 = and(T_1563, UInt<1>("h01")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1564 @[Trackers.scala 432:23] 
    node T_1565 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1566 = and(T_1565, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1566 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1567 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1567 @[Trackers.scala 435:19] 
    node T_1568 = or(scoreboard_2, vol_ognt_counter.pending) @[Broadcast.scala 117:46] 
    node T_1570 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_1571 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_1572 = mux(T_1571, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_1573 = and(T_1572, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_1576 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_1577 = and(T_1573, T_1576) @[Trackers.scala 254:95] 
    node T_1578 = and(T_1570, T_1577) @[Counters.scala 123:62] 
    node T_1580 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_1581 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_1582 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_1583 = or(T_1580, T_1581) @[Util.scala 7:62] 
    node T_1584 = or(T_1583, T_1582) @[Util.scala 7:62] 
    node T_1585 = and(UInt<1>("h01"), T_1584) @[Definitions.scala 256:64] 
    node T_1586 = and(T_1578, T_1585) @[Counters.scala 67:47] 
    reg T_1588 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1586 : @[Counter.scala 43:17] 
      node T_1590 = eq(T_1588, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1592 = add(T_1588, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1593 = tail(T_1592, 1) @[Counter.scala 21:22] 
      T_1588 <= T_1593 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_1594 = and(T_1586, T_1590) @[Counter.scala 44:20] 
    node T_1595 = mux(T_1585, T_1588, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_1596 = mux(T_1585, T_1594, T_1578) @[Counters.scala 69:19] 
    node T_1597 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_1598 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_1600 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_1601 = and(io.inner.grant.bits.is_builtin_type, T_1600) @[Definitions.scala 277:59] 
    node T_1602 = and(T_1598, T_1601) @[Trackers.scala 256:52] 
    node T_1603 = and(T_1597, T_1602) @[Counters.scala 124:64] 
    wire T_1611 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1611 is invalid @[Definitions.scala 846:34] 
    T_1611[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1613 = eq(io.inner.grant.bits.g_type, T_1611[0]) @[Util.scala 7:47] 
    node T_1614 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1615 = mux(io.inner.grant.bits.is_builtin_type, T_1613, T_1614) @[Definitions.scala 274:33] 
    node T_1616 = and(UInt<1>("h01"), T_1615) @[Definitions.scala 274:27] 
    node T_1617 = and(T_1603, T_1616) @[Counters.scala 67:47] 
    reg T_1619 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1617 : @[Counter.scala 43:17] 
      node T_1621 = eq(T_1619, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1623 = add(T_1619, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1624 = tail(T_1623, 1) @[Counter.scala 21:22] 
      T_1619 <= T_1624 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_1625 = and(T_1617, T_1621) @[Counter.scala 44:20] 
    node T_1626 = mux(T_1616, T_1619, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_1627 = mux(T_1616, T_1625, T_1603) @[Counters.scala 69:19] 
    reg T_1629 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1631 = eq(T_1627, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_1632 = and(T_1596, T_1631) @[Counters.scala 33:14] 
    when T_1632 : @[Counters.scala 33:24] 
      node T_1634 = add(T_1629, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_1635 = tail(T_1634, 1) @[Counters.scala 33:37] 
      T_1629 <= T_1635 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_1637 = eq(T_1596, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_1638 = and(T_1627, T_1637) @[Counters.scala 34:16] 
    when T_1638 : @[Counters.scala 34:24] 
      node T_1640 = sub(T_1629, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_1641 = tail(T_1640, 1) @[Counters.scala 34:37] 
      T_1629 <= T_1641 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_1643 = gt(T_1629, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_1643 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_1595 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_1596 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_1626 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_1627 @[Counters.scala 130:22] 
    node T_1644 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_1645 = and(T_1644, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_1646 = and(T_1645, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_1646 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_1648 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_1648 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_1649 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_1650 = and(T_1649, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_1651 = and(T_1650, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_1653 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1654 = and(T_1653, io.inner.release.bits.voluntary) @[Trackers.scala 644:61] 
    node T_1656 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 646:45] 
    node T_1657 = and(T_1654, T_1656) @[Trackers.scala 645:51] 
    node T_1658 = or(UInt<1>("h00"), T_1657) @[Trackers.scala 246:47] 
    node T_1659 = and(T_1658, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_1660 = or(T_1651, T_1659) @[Trackers.scala 268:41] 
    node T_1661 = and(T_1660, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_1661 : @[Trackers.scala 269:22] 
      node T_1663 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_1664 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_1665 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_1666 = or(T_1663, T_1664) @[Util.scala 7:62] 
      node T_1667 = or(T_1666, T_1665) @[Util.scala 7:62] 
      node T_1668 = and(UInt<1>("h01"), T_1667) @[Definitions.scala 256:64] 
      node T_1670 = eq(T_1668, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_1672 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_1673 = or(T_1670, T_1672) @[Definitions.scala 141:57] 
      when T_1673 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_1675 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_1676 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_1677 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_1678 = or(T_1675, T_1676) @[Util.scala 7:62] 
        node T_1679 = or(T_1678, T_1677) @[Util.scala 7:62] 
        node T_1680 = and(UInt<1>("h01"), T_1679) @[Definitions.scala 256:64] 
        node T_1681 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_1682 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_1683 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_1684 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_1685 = or(T_1682, T_1683) @[Util.scala 7:62] 
        node T_1686 = or(T_1685, T_1684) @[Util.scala 7:62] 
        node T_1687 = and(T_1681, T_1686) @[Trackers.scala 122:38] 
        node T_1688 = bits(T_1687, 0, 0) @[Bitwise.scala 33:15] 
        node T_1691 = mux(T_1688, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_1692 = not(T_1691) @[Trackers.scala 92:5] 
        node T_1694 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_1695 = not(T_1694) @[Trackers.scala 92:34] 
        node T_1696 = or(T_1692, T_1695) @[Trackers.scala 92:32] 
        node T_1698 = mux(T_1680, T_1696, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_1698 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_1700 = eq(T_1673, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_1700 : @[Trackers.scala 281:20] 
        node T_1701 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_1702 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_1703 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_1704 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_1705 = or(T_1702, T_1703) @[Util.scala 7:62] 
        node T_1706 = or(T_1705, T_1704) @[Util.scala 7:62] 
        node T_1707 = and(T_1701, T_1706) @[Trackers.scala 122:38] 
        node T_1708 = bits(T_1707, 0, 0) @[Bitwise.scala 33:15] 
        node T_1711 = mux(T_1708, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_1712 = not(T_1711) @[Trackers.scala 92:5] 
        node T_1714 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_1715 = not(T_1714) @[Trackers.scala 92:34] 
        node T_1716 = or(T_1712, T_1715) @[Trackers.scala 92:32] 
        node T_1717 = and(pending_irel_data, T_1716) @[Trackers.scala 282:49] 
        pending_irel_data <= T_1717 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_1718 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_1719 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_1720 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_1721 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_1722 = or(T_1718, T_1719) @[Util.scala 7:62] 
    node T_1723 = or(T_1722, T_1720) @[Util.scala 7:62] 
    node T_1724 = or(T_1723, T_1721) @[Util.scala 7:62] 
    node T_1725 = and(T_1724, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_1727 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_1728 = or(T_1727, T_1568) @[Trackers.scala 294:55] 
    node T_1730 = eq(T_1728, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_1731 = and(T_1725, T_1730) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_1731 @[Trackers.scala 292:26] 
    wire T_1763 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_1763 is invalid @[Definitions.scala 766:19] 
    T_1763.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_1763.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_1763.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_1763.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_1763.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_1763.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_1763.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_1824 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_1824 is invalid @[Definitions.scala 875:19] 
    T_1824.client_id <= T_1763.client_id @[Definitions.scala 876:19] 
    T_1824.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_1824.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_1824.client_xact_id <= T_1763.client_xact_id @[Definitions.scala 879:24] 
    T_1824.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_1824.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_1824.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_1824 @[Trackers.scala 296:25] 
    node scoreboard_0 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_1853 = eq(state, UInt<4>("h00")) @[Broadcast.scala 120:35] 
    node T_1855 = or(T_1853, UInt<1>("h00")) @[Broadcast.scala 120:46] 
    node T_1856 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1857 = and(T_1856, io.inner.release.bits.voluntary) @[Trackers.scala 644:61] 
    node T_1859 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 646:45] 
    node T_1860 = and(T_1857, T_1859) @[Trackers.scala 645:51] 
    node T_1861 = or(T_1855, T_1860) @[Broadcast.scala 120:64] 
    io.inner.release.ready <= T_1861 @[Broadcast.scala 120:26] 
    node T_1862 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    when T_1862 : @[Broadcast.scala 122:33] 
      data_buffer[io.inner.release.bits.addr_beat] <= io.inner.release.bits.data @[Broadcast.scala 122:68] 
      skip @[Broadcast.scala 122:33] 
    node T_1863 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_1864 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_1865 = or(T_1863, T_1864) @[Consts.scala 47:42] 
    node T_1867 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_1868 = or(UInt<1>("h00"), T_1867) @[Consts.scala 44:33] 
    node T_1869 = or(T_1865, T_1868) @[Consts.scala 47:59] 
    node T_1870 = mux(T_1869, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_1893 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_1893 is invalid @[Metadata.scala 158:20] 
    T_1893.state <= T_1870 @[Metadata.scala 159:16] 
    node T_1915 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_1916 = and(T_1915, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_1917 = and(T_1916, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_1921 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_1922 = or(T_1921, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_1922 : @[Trackers.scala 331:53] 
      node T_1924 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_1925 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_1926 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_1927 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_1928 = or(T_1925, T_1926) @[Util.scala 7:62] 
      node T_1929 = or(T_1928, T_1927) @[Util.scala 7:62] 
      node T_1930 = and(T_1924, T_1929) @[Trackers.scala 101:37] 
      node T_1931 = and(T_1930, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_1932 = bits(T_1931, 0, 0) @[Bitwise.scala 33:15] 
      node T_1935 = mux(T_1932, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1937 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1938 = and(T_1935, T_1937) @[Trackers.scala 89:31] 
      node T_1939 = or(pending_orel_data, T_1938) @[Trackers.scala 332:47] 
      node T_1940 = or(T_1939, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_1941 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_1942 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_1943 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_1944 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_1945 = or(T_1942, T_1943) @[Util.scala 7:62] 
      node T_1946 = or(T_1945, T_1944) @[Util.scala 7:62] 
      node T_1947 = and(T_1941, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1957 = and(T_1940, T_1956) @[Trackers.scala 334:34] 
      pending_orel_data <= T_1957 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when T_1917 : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_1959 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_1959 : @[Trackers.scala 338:36] 
      node T_1961 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_1962 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_1963 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_1964 = or(T_1961, T_1962) @[Util.scala 7:62] 
      node T_1965 = or(T_1964, T_1963) @[Util.scala 7:62] 
      node T_1966 = and(UInt<1>("h01"), T_1965) @[Definitions.scala 256:64] 
      node T_1968 = eq(T_1966, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_1970 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_1971 = or(T_1968, T_1970) @[Definitions.scala 141:57] 
      when T_1971 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_1974 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_1975 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_1976 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_1977 = or(T_1974, T_1975) @[Util.scala 7:62] 
      node T_1978 = or(T_1977, T_1976) @[Util.scala 7:62] 
      node T_1979 = and(UInt<1>("h01"), T_1978) @[Definitions.scala 256:64] 
      node T_1981 = eq(T_1979, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_1983 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_1984 = or(T_1981, T_1983) @[Definitions.scala 142:56] 
      when T_1984 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_1988 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_1991 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_1992 = and(io.outer.release.bits.voluntary, T_1991) @[Trackers.scala 348:51] 
    node T_1993 = and(T_1988, T_1992) @[Counters.scala 123:62] 
    node T_1995 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_1996 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_1997 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_1998 = or(T_1995, T_1996) @[Util.scala 7:62] 
    node T_1999 = or(T_1998, T_1997) @[Util.scala 7:62] 
    node T_2000 = and(UInt<1>("h01"), T_1999) @[Definitions.scala 256:64] 
    node T_2001 = and(T_1993, T_2000) @[Counters.scala 67:47] 
    reg T_2003 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2001 : @[Counter.scala 43:17] 
      node T_2005 = eq(T_2003, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2007 = add(T_2003, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2008 = tail(T_2007, 1) @[Counter.scala 21:22] 
      T_2003 <= T_2008 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2009 = and(T_2001, T_2005) @[Counter.scala 44:20] 
    node T_2010 = mux(T_2000, T_2003, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2011 = mux(T_2000, T_2009, T_1993) @[Counters.scala 69:19] 
    node T_2012 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2014 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2015 = and(io.outer.grant.bits.is_builtin_type, T_2014) @[Definitions.scala 277:59] 
    node T_2016 = and(T_2012, T_2015) @[Counters.scala 124:64] 
    wire T_2024 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2024 is invalid @[Definitions.scala 846:34] 
    T_2024[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2026 = eq(io.outer.grant.bits.g_type, T_2024[0]) @[Util.scala 7:47] 
    node T_2027 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2028 = mux(io.outer.grant.bits.is_builtin_type, T_2026, T_2027) @[Definitions.scala 274:33] 
    node T_2029 = and(UInt<1>("h01"), T_2028) @[Definitions.scala 274:27] 
    node T_2030 = and(T_2016, T_2029) @[Counters.scala 67:47] 
    reg T_2032 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2030 : @[Counter.scala 43:17] 
      node T_2034 = eq(T_2032, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2036 = add(T_2032, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2037 = tail(T_2036, 1) @[Counter.scala 21:22] 
      T_2032 <= T_2037 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2038 = and(T_2030, T_2034) @[Counter.scala 44:20] 
    node T_2039 = mux(T_2029, T_2032, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2040 = mux(T_2029, T_2038, T_2016) @[Counters.scala 69:19] 
    reg T_2042 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2044 = eq(T_2040, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2045 = and(T_2011, T_2044) @[Counters.scala 33:14] 
    when T_2045 : @[Counters.scala 33:24] 
      node T_2047 = add(T_2042, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2048 = tail(T_2047, 1) @[Counters.scala 33:37] 
      T_2042 <= T_2048 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2050 = eq(T_2011, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2051 = and(T_2040, T_2050) @[Counters.scala 34:16] 
    when T_2051 : @[Counters.scala 34:24] 
      node T_2053 = sub(T_2042, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2054 = tail(T_2053, 1) @[Counters.scala 34:37] 
      T_2042 <= T_2054 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2056 = gt(T_2042, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2056 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2010 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2011 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2039 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2040 @[Counters.scala 130:22] 
    node T_2058 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2059 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2060 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2061 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2062 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2063 = or(T_2060, T_2061) @[Util.scala 7:62] 
    node T_2064 = or(T_2063, T_2062) @[Util.scala 7:62] 
    node T_2065 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2066 = bits(T_2065, 0, 0) @[Trackers.scala 353:26] 
    node T_2067 = mux(T_2064, T_2066, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2068 = and(T_2059, T_2067) @[Trackers.scala 352:26] 
    node T_2069 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2070 = and(T_2069, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2071 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2072 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2073 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2074 = or(T_2071, T_2072) @[Util.scala 7:62] 
    node T_2075 = or(T_2074, T_2073) @[Util.scala 7:62] 
    node T_2076 = and(T_2070, T_2075) @[Trackers.scala 356:49] 
    node T_2077 = and(T_2076, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2078 = mux(UInt<1>("h01"), T_2068, T_2077) @[Trackers.scala 351:49] 
    node T_2079 = and(T_2058, T_2078) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2079 @[Trackers.scala 351:28] 
    node T_2082 = eq(T_1893.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2083 = mux(T_2082, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2084 = mux(T_2082, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2085 = mux(T_2082, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2086 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2087 = mux(T_2086, T_2085, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2088 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2089 = mux(T_2088, T_2084, T_2087) @[Mux.scala 46:16] 
    node T_2090 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2091 = mux(T_2090, T_2083, T_2089) @[Mux.scala 46:16] 
    wire T_2119 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2119 is invalid @[Definitions.scala 747:19] 
    T_2119.r_type <= T_2091 @[Definitions.scala 748:16] 
    T_2119.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2119.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2119.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2119.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2119.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2119 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2148 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_2149 = or(T_2148, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_2150 = or(T_2149, scoreboard_2) @[Trackers.scala 50:60] 
    node T_2151 = or(T_2150, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_2153 = eq(T_2151, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_2153 @[Trackers.scala 50:22] 
    node T_2154 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_2155 = and(T_2154, all_pending_done) @[Trackers.scala 51:27] 
    when T_2155 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      skip @[Trackers.scala 51:48] 
    
  module Queue_8 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>}[2] @[Decoupled.scala 116:16] 
    reg T_245 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_247 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_245, T_247) @[Decoupled.scala 121:33] 
    node T_250 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_250) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_251 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_251
    node T_252 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_252
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_253 = ram[T_245], clk
      T_253 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_280 = eq(T_245, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_282 = add(T_245, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_283 = tail(T_282, 1) @[Counter.scala 21:22] 
      T_245 <= T_283 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_285 = eq(T_247, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_287 = add(T_247, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_288 = tail(T_287, 1) @[Counter.scala 21:22] 
      T_247 <= T_288 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_289 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_289 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_291 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_291 @[Decoupled.scala 138:16] 
    node T_293 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_293 @[Decoupled.scala 139:16] 
    infer mport T_294 = ram[T_247], clk
    io.deq.bits <- T_294 @[Decoupled.scala 140:15] 
    node T_320 = sub(T_245, T_247) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_320, 1) @[Decoupled.scala 155:32] 
    node T_321 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_322 = cat(T_321, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_322 @[Decoupled.scala 157:14] 
    
  module BufferedBroadcastAcquireTracker : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<1>("h01") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<2>("h02") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<2>("h03") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_3 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<3>("h04") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_4 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<3>("h05") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_5 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<3>("h06") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module BufferedBroadcastAcquireTracker_6 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, alloc : {iacq : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, irel : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, oprb : {matches : UInt<1>, can : UInt<1>, flip should : UInt<1>}, idle : UInt<1>, addr_block : UInt<26>}}
    
    io is invalid
    wire all_pending_done : UInt<1> @[Trackers.scala 86:30] 
    all_pending_done is invalid @[Trackers.scala 86:30] 
    reg state : UInt<4>, clk with : (reset => (reset, UInt<4>("h00")))
    reg xact_addr_block : UInt<26>, clk with : (reset => (reset, UInt<26>("h00")))
    reg xact_allocate : UInt<1>, clk
    reg xact_amo_shift_bytes : UInt, clk
    reg xact_op_code : UInt, clk
    reg xact_addr_byte : UInt, clk
    reg xact_op_size : UInt, clk
    wire xact_addr_beat : UInt @[Trackers.scala 215:28] 
    xact_addr_beat is invalid @[Trackers.scala 215:28] 
    wire xact_iacq : {client_xact_id : UInt<1>, addr_beat : UInt<3>, client_id : UInt<1>, is_builtin_type : UInt<1>, a_type : UInt<3>} @[Trackers.scala 216:23] 
    xact_iacq is invalid @[Trackers.scala 216:23] 
    reg xact_vol_ir_r_type : UInt, clk
    reg xact_vol_ir_src : UInt, clk
    reg xact_vol_ir_client_xact_id : UInt, clk
    reg pending_irel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ignt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 241:30] 
    vol_ignt_counter is invalid @[Trackers.scala 241:30] 
    wire scoreboard_6 : UInt<1> @[Trackers.scala 454:26] 
    scoreboard_6 is invalid @[Trackers.scala 454:26] 
    wire ignt_data_idx : UInt @[Trackers.scala 455:27] 
    ignt_data_idx is invalid @[Trackers.scala 455:27] 
    wire ignt_data_done : UInt<1> @[Trackers.scala 456:28] 
    ignt_data_done is invalid @[Trackers.scala 456:28] 
    wire ifin_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 457:26] 
    ifin_counter is invalid @[Trackers.scala 457:26] 
    reg pending_put_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    reg pending_ignt_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 577:26] 
    ognt_counter is invalid @[Trackers.scala 577:26] 
    reg pending_iprbs : UInt<1>, clk
    node T_152 = bits(pending_iprbs, 0, 0) @[OneHot.scala 35:40] 
    reg pending_orel_send : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg pending_orel_data : UInt<8>, clk with : (reset => (reset, UInt<8>("h00")))
    wire vol_ognt_counter : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 306:30] 
    vol_ognt_counter is invalid @[Trackers.scala 306:30] 
    node T_170 = neq(pending_orel_data, UInt<1>("h00")) @[Trackers.scala 307:61] 
    node T_171 = or(pending_orel_send, T_170) @[Trackers.scala 307:40] 
    node scoreboard_3 = or(T_171, vol_ognt_counter.pending) @[Trackers.scala 307:65] 
    reg sending_orel : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire T_195 : {sharers : UInt<1>} @[Metadata.scala 309:20] 
    T_195 is invalid @[Metadata.scala 309:20] 
    T_195.sharers <= UInt<1>("h00") @[Metadata.scala 311:18] 
    wire T_241 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_241 is invalid @[Metadata.scala 158:20] 
    T_241.state <= UInt<1>("h00") @[Metadata.scala 159:16] 
    wire coh : {inner : {sharers : UInt<1>}, outer : {state : UInt<2>}} @[Metadata.scala 337:17] 
    coh is invalid @[Metadata.scala 337:17] 
    coh.inner <- T_195 @[Metadata.scala 338:13] 
    coh.outer <- T_241 @[Metadata.scala 339:13] 
    io.outer.finish.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.grant.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.release.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.outer.probe.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.outer.acquire.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.release.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.probe.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.finish.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    io.inner.grant.valid <= UInt<1>("h00") @[Trackers.scala 62:50] 
    io.inner.acquire.ready <= UInt<1>("h00") @[Trackers.scala 61:45] 
    node T_1611 = eq(state, UInt<4>("h00")) @[Broadcast.scala 98:18] 
    node T_1612 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1613 = and(T_1611, T_1612) @[Broadcast.scala 98:29] 
    node T_1614 = and(T_1613, io.alloc.iacq.should) @[Broadcast.scala 98:56] 
    node T_1616 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1623 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1623 is invalid @[Definitions.scala 355:35] 
    T_1623[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1625 = eq(io.inner.acquire.bits.a_type, T_1623[0]) @[Util.scala 7:47] 
    node T_1626 = and(T_1616, T_1625) @[Definitions.scala 231:89] 
    node T_1627 = and(T_1614, T_1626) @[Broadcast.scala 98:80] 
    node T_1629 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1636 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1636 is invalid @[Definitions.scala 355:35] 
    T_1636[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1638 = eq(io.inner.acquire.bits.a_type, T_1636[0]) @[Util.scala 7:47] 
    node T_1639 = and(T_1629, T_1638) @[Definitions.scala 231:89] 
    node T_1641 = eq(T_1639, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1643 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1644 = or(T_1641, T_1643) @[Definitions.scala 141:57] 
    node T_1646 = eq(T_1644, UInt<1>("h00")) @[Broadcast.scala 99:37] 
    node T_1647 = and(T_1627, T_1646) @[Broadcast.scala 99:34] 
    node T_1649 = eq(T_1647, UInt<1>("h00")) @[Broadcast.scala 98:10] 
    node T_1650 = or(T_1649, reset) @[Broadcast.scala 98:9] 
    node T_1652 = eq(T_1650, UInt<1>("h00")) @[Broadcast.scala 98:9] 
    when T_1652 : @[Broadcast.scala 98:9] 
      printf(clk, UInt<1>(1), "Assertion failed: AcquireTracker initialized with a tail data beat.\n    at Broadcast.scala:98 assert(!(state === s_idle && io.inner.acquire.fire() && io.alloc.iacq.should &&\n") @[Broadcast.scala 98:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 98:9] 
      skip @[Broadcast.scala 98:9] 
    node T_1653 = neq(state, UInt<4>("h00")) @[Broadcast.scala 102:18] 
    node T_1654 = and(T_1653, scoreboard_6) @[Broadcast.scala 102:29] 
    node T_1656 = eq(xact_iacq.a_type, UInt<3>("h05")) @[Definitions.scala 207:28] 
    node T_1658 = eq(xact_iacq.a_type, UInt<3>("h06")) @[Definitions.scala 207:28] 
    node T_1659 = or(T_1656, T_1658) @[Definitions.scala 219:73] 
    node T_1660 = and(xact_iacq.is_builtin_type, T_1659) @[Definitions.scala 218:58] 
    node T_1661 = and(T_1654, T_1660) @[Broadcast.scala 102:45] 
    node T_1663 = eq(T_1661, UInt<1>("h00")) @[Broadcast.scala 102:10] 
    node T_1664 = or(T_1663, reset) @[Broadcast.scala 102:9] 
    node T_1666 = eq(T_1664, UInt<1>("h00")) @[Broadcast.scala 102:9] 
    when T_1666 : @[Broadcast.scala 102:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support Prefetches.\n    at Broadcast.scala:102 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isPrefetch()),\n") @[Broadcast.scala 102:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 102:9] 
      skip @[Broadcast.scala 102:9] 
    node T_1667 = neq(state, UInt<4>("h00")) @[Broadcast.scala 105:18] 
    node T_1668 = and(T_1667, scoreboard_6) @[Broadcast.scala 105:29] 
    node T_1670 = eq(xact_iacq.a_type, UInt<3>("h04")) @[Definitions.scala 207:28] 
    node T_1671 = and(xact_iacq.is_builtin_type, T_1670) @[Definitions.scala 222:56] 
    node T_1672 = and(T_1668, T_1671) @[Broadcast.scala 105:45] 
    node T_1674 = eq(T_1672, UInt<1>("h00")) @[Broadcast.scala 105:10] 
    node T_1675 = or(T_1674, reset) @[Broadcast.scala 105:9] 
    node T_1677 = eq(T_1675, UInt<1>("h00")) @[Broadcast.scala 105:9] 
    when T_1677 : @[Broadcast.scala 105:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Broadcast Hub does not support PutAtomics.\n    at Broadcast.scala:105 assert(!(state =/= s_idle && pending_ignt && xact_iacq.isAtomic()),\n") @[Broadcast.scala 105:9] 
      stop(clk, UInt<1>(1), 1) @[Broadcast.scala 105:9] 
      skip @[Broadcast.scala 105:9] 
    wire T_1691 : UInt<64>[8] @[Trackers.scala 150:54] 
    T_1691 is invalid @[Trackers.scala 150:54] 
    T_1691[0] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[1] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[2] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[3] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[4] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[5] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[6] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    T_1691[7] <= UInt<64>("h00") @[Trackers.scala 150:54] 
    reg data_buffer : UInt<64>[8], clk with : (reset => (reset, T_1691))
    wire T_1709 : UInt<8>[8] @[Trackers.scala 179:55] 
    T_1709 is invalid @[Trackers.scala 179:55] 
    T_1709[0] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[1] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[2] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[3] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[4] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[5] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[6] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    T_1709[7] <= UInt<8>("h00") @[Trackers.scala 179:55] 
    reg wmask_buffer : UInt<8>[8], clk with : (reset => (reset, T_1709))
    node T_1714 = not(wmask_buffer[0]) @[Trackers.scala 180:56] 
    node T_1716 = eq(T_1714, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1717 = not(wmask_buffer[1]) @[Trackers.scala 180:56] 
    node T_1719 = eq(T_1717, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1720 = not(wmask_buffer[2]) @[Trackers.scala 180:56] 
    node T_1722 = eq(T_1720, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1723 = not(wmask_buffer[3]) @[Trackers.scala 180:56] 
    node T_1725 = eq(T_1723, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1726 = not(wmask_buffer[4]) @[Trackers.scala 180:56] 
    node T_1728 = eq(T_1726, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1729 = not(wmask_buffer[5]) @[Trackers.scala 180:56] 
    node T_1731 = eq(T_1729, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1732 = not(wmask_buffer[6]) @[Trackers.scala 180:56] 
    node T_1734 = eq(T_1732, UInt<1>("h00")) @[Trackers.scala 180:56] 
    node T_1735 = not(wmask_buffer[7]) @[Trackers.scala 180:56] 
    node T_1737 = eq(T_1735, UInt<1>("h00")) @[Trackers.scala 180:56] 
    wire data_valid : UInt<1>[8] @[Trackers.scala 180:23] 
    data_valid is invalid @[Trackers.scala 180:23] 
    data_valid[0] <= T_1716 @[Trackers.scala 180:23] 
    data_valid[1] <= T_1719 @[Trackers.scala 180:23] 
    data_valid[2] <= T_1722 @[Trackers.scala 180:23] 
    data_valid[3] <= T_1725 @[Trackers.scala 180:23] 
    data_valid[4] <= T_1728 @[Trackers.scala 180:23] 
    data_valid[5] <= T_1731 @[Trackers.scala 180:23] 
    data_valid[6] <= T_1734 @[Trackers.scala 180:23] 
    data_valid[7] <= T_1737 @[Trackers.scala 180:23] 
    node T_1747 = neq(state, UInt<4>("h00")) @[Trackers.scala 428:37] 
    node T_1748 = eq(io.inner.acquire.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1749 = and(T_1747, T_1748) @[Trackers.scala 428:49] 
    io.alloc.iacq.matches <= T_1749 @[Trackers.scala 428:27] 
    node T_1750 = neq(state, UInt<4>("h00")) @[Trackers.scala 429:37] 
    node T_1751 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1752 = and(T_1750, T_1751) @[Trackers.scala 429:49] 
    io.alloc.irel.matches <= T_1752 @[Trackers.scala 429:27] 
    node T_1753 = neq(state, UInt<4>("h00")) @[Trackers.scala 430:37] 
    node T_1754 = eq(io.outer.probe.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_1755 = and(T_1753, T_1754) @[Trackers.scala 430:49] 
    io.alloc.oprb.matches <= T_1755 @[Trackers.scala 430:27] 
    node T_1756 = eq(state, UInt<4>("h00")) @[Trackers.scala 431:32] 
    node T_1757 = and(T_1756, UInt<1>("h01")) @[Trackers.scala 431:43] 
    io.alloc.iacq.can <= T_1757 @[Trackers.scala 431:23] 
    node T_1758 = eq(state, UInt<4>("h00")) @[Trackers.scala 432:32] 
    node T_1759 = and(T_1758, UInt<1>("h00")) @[Trackers.scala 432:43] 
    io.alloc.irel.can <= T_1759 @[Trackers.scala 432:23] 
    node T_1760 = eq(state, UInt<4>("h00")) @[Trackers.scala 433:32] 
    node T_1761 = and(T_1760, UInt<1>("h00")) @[Trackers.scala 433:43] 
    io.alloc.oprb.can <= T_1761 @[Trackers.scala 433:23] 
    io.alloc.addr_block <= xact_addr_block @[Trackers.scala 434:25] 
    node T_1762 = eq(state, UInt<4>("h00")) @[Trackers.scala 435:28] 
    io.alloc.idle <= T_1762 @[Trackers.scala 435:19] 
    node T_1764 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1765 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1766 = and(T_1764, T_1765) @[Trackers.scala 462:61] 
    node T_1767 = and(T_1766, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1768 = eq(xact_iacq.addr_beat, io.inner.acquire.bits.addr_beat) @[Trackers.scala 471:67] 
    node T_1769 = and(T_1767, T_1768) @[Trackers.scala 471:44] 
    inst ignt_q of Queue_8 @[Trackers.scala 450:27] 
    ignt_q.io is invalid
    ignt_q.clk <= clk
    ignt_q.reset <= reset
    node T_1796 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1797 = and(T_1796, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1798 = and(T_1797, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_1800 = eq(T_1769, UInt<1>("h00")) @[Trackers.scala 475:29] 
    node T_1801 = and(T_1800, scoreboard_6) @[Trackers.scala 475:48] 
    node T_1802 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1803 = and(T_1801, T_1802) @[Trackers.scala 475:64] 
    node T_1805 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1812 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1812 is invalid @[Definitions.scala 355:35] 
    T_1812[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1814 = eq(io.inner.acquire.bits.a_type, T_1812[0]) @[Util.scala 7:47] 
    node T_1815 = and(T_1805, T_1814) @[Definitions.scala 231:89] 
    node T_1817 = eq(T_1815, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1819 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node T_1820 = or(T_1817, T_1819) @[Definitions.scala 141:57] 
    node T_1821 = and(T_1803, T_1820) @[Trackers.scala 476:54] 
    node T_1822 = or(T_1798, T_1821) @[Trackers.scala 474:47] 
    ignt_q.io.enq.valid <= T_1822 @[Trackers.scala 474:25] 
    ignt_q.io.enq.bits <- io.inner.acquire.bits @[Trackers.scala 477:24] 
    node T_1823 = mux(ignt_q.io.deq.valid, ignt_q.io.deq.bits, ignt_q.io.enq.bits) @[Trackers.scala 480:21] 
    xact_iacq <- T_1823 @[Trackers.scala 480:15] 
    xact_addr_beat <= xact_iacq.addr_beat @[Trackers.scala 481:20] 
    node T_1850 = gt(ignt_q.io.count, UInt<1>("h00")) @[Trackers.scala 482:37] 
    scoreboard_6 <= T_1850 @[Trackers.scala 482:18] 
    node T_1851 = neq(state, UInt<4>("h00")) @[Trackers.scala 485:17] 
    node T_1852 = or(T_1851, io.alloc.iacq.should) @[Trackers.scala 485:28] 
    when T_1852 : @[Trackers.scala 485:53] 
      node T_1853 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1862 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1862 is invalid @[Definitions.scala 354:26] 
      T_1862[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1862[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1862[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1864 = eq(io.inner.acquire.bits.a_type, T_1862[0]) @[Util.scala 7:47] 
      node T_1865 = eq(io.inner.acquire.bits.a_type, T_1862[1]) @[Util.scala 7:47] 
      node T_1866 = eq(io.inner.acquire.bits.a_type, T_1862[2]) @[Util.scala 7:47] 
      node T_1867 = or(T_1864, T_1865) @[Util.scala 7:62] 
      node T_1868 = or(T_1867, T_1866) @[Util.scala 7:62] 
      node T_1869 = and(io.inner.acquire.bits.is_builtin_type, T_1868) @[Definitions.scala 228:55] 
      node T_1870 = and(T_1853, T_1869) @[Trackers.scala 122:38] 
      node T_1871 = bits(T_1870, 0, 0) @[Bitwise.scala 33:15] 
      node T_1874 = mux(T_1871, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1875 = not(T_1874) @[Trackers.scala 92:5] 
      node T_1877 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1878 = not(T_1877) @[Trackers.scala 92:34] 
      node T_1879 = or(T_1875, T_1878) @[Trackers.scala 92:32] 
      node T_1880 = and(pending_put_data, T_1879) @[Trackers.scala 486:45] 
      node T_1881 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      node T_1883 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
      wire T_1890 : UInt<3>[1] @[Definitions.scala 355:35] 
      T_1890 is invalid @[Definitions.scala 355:35] 
      T_1890[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
      node T_1892 = eq(io.inner.acquire.bits.a_type, T_1890[0]) @[Util.scala 7:47] 
      node T_1893 = and(T_1883, T_1892) @[Definitions.scala 231:89] 
      node T_1894 = and(T_1881, T_1893) @[Trackers.scala 140:28] 
      node T_1896 = eq(io.inner.acquire.bits.addr_beat, UInt<1>("h00")) @[Trackers.scala 142:36] 
      node T_1897 = and(T_1894, T_1896) @[Trackers.scala 141:45] 
      node T_1902 = mux(UInt<1>("h01"), UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 33:12] 
      node T_1904 = cat(T_1902, UInt<1>("h00")) @[Cat.scala 20:58] 
      node T_1906 = mux(T_1897, T_1904, UInt<8>("h00")) @[Trackers.scala 137:8] 
      node T_1907 = or(T_1880, T_1906) @[Trackers.scala 487:60] 
      pending_put_data <= T_1907 @[Trackers.scala 486:24] 
      skip @[Trackers.scala 485:53] 
    node T_1908 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_1909 = and(T_1908, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_1910 = and(T_1909, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_1910 : @[Trackers.scala 492:30] 
      xact_addr_block <= io.inner.acquire.bits.addr_block @[Trackers.scala 493:23] 
      node T_1911 = bits(io.inner.acquire.bits.union, 0, 0) @[Definitions.scala 170:39] 
      node T_1912 = and(T_1911, UInt<1>("h00")) @[Trackers.scala 494:45] 
      xact_allocate <= T_1912 @[Trackers.scala 494:21] 
      node T_1915 = mul(UInt<4>("h08"), UInt<1>("h00")) @[Definitions.scala 183:65] 
      xact_amo_shift_bytes <= T_1915 @[Trackers.scala 495:28] 
      node T_1917 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1918 = and(io.inner.acquire.bits.is_builtin_type, T_1917) @[Definitions.scala 212:54] 
      node T_1920 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1921 = and(io.inner.acquire.bits.is_builtin_type, T_1920) @[Definitions.scala 212:54] 
      node T_1922 = or(T_1918, T_1921) @[Definitions.scala 173:36] 
      node T_1923 = bits(io.inner.acquire.bits.union, 5, 1) @[Definitions.scala 174:17] 
      node T_1924 = mux(T_1922, UInt<5>("h01"), T_1923) @[Definitions.scala 172:36] 
      xact_op_code <= T_1924 @[Trackers.scala 496:20] 
      node T_1925 = bits(io.inner.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
      xact_addr_byte <= T_1925 @[Trackers.scala 497:22] 
      node T_1926 = bits(io.inner.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
      xact_op_size <= T_1926 @[Trackers.scala 498:20] 
      node T_1928 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1929 = and(io.inner.acquire.bits.is_builtin_type, T_1928) @[Definitions.scala 212:54] 
      node T_1930 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
      wire T_1939 : UInt<3>[3] @[Definitions.scala 354:26] 
      T_1939 is invalid @[Definitions.scala 354:26] 
      T_1939[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
      T_1939[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
      T_1939[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
      node T_1941 = eq(io.inner.acquire.bits.a_type, T_1939[0]) @[Util.scala 7:47] 
      node T_1942 = eq(io.inner.acquire.bits.a_type, T_1939[1]) @[Util.scala 7:47] 
      node T_1943 = eq(io.inner.acquire.bits.a_type, T_1939[2]) @[Util.scala 7:47] 
      node T_1944 = or(T_1941, T_1942) @[Util.scala 7:62] 
      node T_1945 = or(T_1944, T_1943) @[Util.scala 7:62] 
      node T_1946 = and(io.inner.acquire.bits.is_builtin_type, T_1945) @[Definitions.scala 228:55] 
      node T_1947 = and(T_1930, T_1946) @[Trackers.scala 122:38] 
      node T_1948 = bits(T_1947, 0, 0) @[Bitwise.scala 33:15] 
      node T_1951 = mux(T_1948, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1952 = not(T_1951) @[Trackers.scala 92:5] 
      node T_1954 = dshl(UInt<1>("h01"), io.inner.acquire.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_1955 = not(T_1954) @[Trackers.scala 92:34] 
      node T_1956 = or(T_1952, T_1955) @[Trackers.scala 92:32] 
      node T_1958 = mux(T_1929, T_1956, UInt<1>("h00")) @[Trackers.scala 500:30] 
      pending_put_data <= T_1958 @[Trackers.scala 500:24] 
      pending_ignt_data <= UInt<1>("h00") @[Trackers.scala 504:25] 
      state <= UInt<4>("h05") @[Trackers.scala 505:13] 
      skip @[Trackers.scala 492:30] 
    node scoreboard_0 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 508:37] 
    node T_1961 = eq(state, UInt<4>("h00")) @[Broadcast.scala 146:35] 
    node T_1963 = or(T_1961, UInt<1>("h00")) @[Broadcast.scala 146:46] 
    node T_1964 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_1965 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_1966 = and(T_1964, T_1965) @[Trackers.scala 462:61] 
    node T_1967 = and(T_1966, scoreboard_6) @[Trackers.scala 463:53] 
    node T_1969 = and(UInt<1>("h01"), io.inner.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1976 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1976 is invalid @[Definitions.scala 355:35] 
    T_1976[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1978 = eq(io.inner.acquire.bits.a_type, T_1976[0]) @[Util.scala 7:47] 
    node T_1979 = and(T_1969, T_1978) @[Definitions.scala 231:89] 
    node T_1980 = and(T_1967, T_1979) @[Trackers.scala 465:49] 
    node T_1981 = or(T_1963, T_1980) @[Broadcast.scala 146:64] 
    io.inner.acquire.ready <= T_1981 @[Broadcast.scala 146:26] 
    node T_1982 = not(pending_ignt_data) @[Broadcast.scala 151:46] 
    node skip_outer_acquire = eq(T_1982, UInt<1>("h00")) @[Broadcast.scala 151:46] 
    node T_1991 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1992 = mux(T_1991, UInt<2>("h00"), UInt<2>("h02")) @[Mux.scala 46:16] 
    node T_1993 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1994 = mux(T_1993, UInt<2>("h00"), T_1992) @[Mux.scala 46:16] 
    node T_1995 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1996 = mux(T_1995, UInt<2>("h02"), T_1994) @[Mux.scala 46:16] 
    node T_1997 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_1998 = mux(T_1997, UInt<2>("h00"), T_1996) @[Mux.scala 46:16] 
    node T_1999 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2000 = mux(T_1999, UInt<2>("h02"), T_1998) @[Mux.scala 46:16] 
    node T_2001 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2002 = mux(T_2001, UInt<2>("h00"), T_2000) @[Mux.scala 46:16] 
    node T_2003 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_2004 = mux(T_2003, UInt<2>("h02"), T_2002) @[Mux.scala 46:16] 
    node T_2005 = mux(xact_iacq.is_builtin_type, T_2004, UInt<2>("h00")) @[Policies.scala 289:8] 
    wire T_2030 : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>} @[Definitions.scala 687:19] 
    T_2030 is invalid @[Definitions.scala 687:19] 
    T_2030.client_id <= UInt<1>("h00") @[Definitions.scala 688:19] 
    T_2030.p_type <= T_2005 @[Definitions.scala 689:16] 
    T_2030.addr_block <= xact_addr_block @[Definitions.scala 690:20] 
    node T_2055 = eq(skip_outer_acquire, UInt<1>("h00")) @[Broadcast.scala 155:9] 
    node T_2056 = mux(T_2055, UInt<4>("h06"), UInt<4>("h07")) @[Broadcast.scala 155:8] 
    wire T_2065 : {pending : UInt<1>, up : {idx : UInt, done : UInt<1>}, down : {idx : UInt, done : UInt<1>}} @[Trackers.scala 393:30] 
    T_2065 is invalid @[Trackers.scala 393:30] 
    node T_2073 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2074 = not(T_2073) @[Trackers.scala 98:5] 
    node T_2076 = dshl(UInt<1>("h01"), io.inner.probe.bits.client_id) @[OneHot.scala 44:15] 
    node T_2077 = not(T_2076) @[Trackers.scala 98:40] 
    node T_2078 = or(T_2074, T_2077) @[Trackers.scala 98:38] 
    node T_2079 = and(pending_iprbs, T_2078) @[Trackers.scala 395:38] 
    pending_iprbs <= T_2079 @[Trackers.scala 395:21] 
    node T_2080 = eq(state, UInt<4>("h05")) @[Trackers.scala 396:37] 
    node T_2082 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 396:72] 
    node T_2083 = and(T_2080, T_2082) @[Trackers.scala 396:55] 
    io.inner.probe.valid <= T_2083 @[Trackers.scala 396:28] 
    io.inner.probe.bits <- T_2030 @[Trackers.scala 397:27] 
    node T_2085 = and(io.inner.probe.ready, io.inner.probe.valid) @[Decoupled.scala 16:42] 
    node T_2087 = and(T_2085, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2089 = and(T_2087, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_2091 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2089 : @[Counter.scala 43:17] 
      node T_2093 = eq(T_2091, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2095 = add(T_2091, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2096 = tail(T_2095, 1) @[Counter.scala 21:22] 
      T_2091 <= T_2096 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2097 = and(T_2089, T_2093) @[Counter.scala 44:20] 
    node T_2098 = mux(UInt<1>("h00"), T_2091, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2099 = mux(UInt<1>("h00"), T_2097, T_2087) @[Counters.scala 69:19] 
    node T_2100 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2101 = neq(state, UInt<4>("h00")) @[Trackers.scala 404:44] 
    node T_2103 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 404:59] 
    node T_2104 = and(T_2101, T_2103) @[Trackers.scala 404:56] 
    node T_2105 = and(T_2100, T_2104) @[Counters.scala 124:64] 
    node T_2107 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2108 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2109 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2110 = or(T_2107, T_2108) @[Util.scala 7:62] 
    node T_2111 = or(T_2110, T_2109) @[Util.scala 7:62] 
    node T_2112 = and(UInt<1>("h01"), T_2111) @[Definitions.scala 256:64] 
    node T_2113 = and(T_2105, T_2112) @[Counters.scala 67:47] 
    reg T_2115 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2113 : @[Counter.scala 43:17] 
      node T_2117 = eq(T_2115, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2119 = add(T_2115, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2120 = tail(T_2119, 1) @[Counter.scala 21:22] 
      T_2115 <= T_2120 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2121 = and(T_2113, T_2117) @[Counter.scala 44:20] 
    node T_2122 = mux(T_2112, T_2115, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2123 = mux(T_2112, T_2121, T_2105) @[Counters.scala 69:19] 
    reg T_2125 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2127 = eq(T_2123, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2128 = and(T_2099, T_2127) @[Counters.scala 33:14] 
    when T_2128 : @[Counters.scala 33:24] 
      node T_2130 = add(T_2125, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2131 = tail(T_2130, 1) @[Counters.scala 33:37] 
      T_2125 <= T_2131 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2133 = eq(T_2099, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2134 = and(T_2123, T_2133) @[Counters.scala 34:16] 
    when T_2134 : @[Counters.scala 34:24] 
      node T_2136 = sub(T_2125, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2137 = tail(T_2136, 1) @[Counters.scala 34:37] 
      T_2125 <= T_2137 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2139 = gt(T_2125, UInt<1>("h00")) @[Counters.scala 126:27] 
    T_2065.pending <= T_2139 @[Counters.scala 126:20] 
    T_2065.up.idx <= T_2098 @[Counters.scala 127:19] 
    T_2065.up.done <= T_2099 @[Counters.scala 128:20] 
    T_2065.down.idx <= T_2122 @[Counters.scala 129:21] 
    T_2065.down.done <= T_2123 @[Counters.scala 130:22] 
    node T_2140 = eq(state, UInt<4>("h05")) @[Trackers.scala 406:18] 
    node T_2142 = neq(pending_iprbs, UInt<1>("h00")) @[Trackers.scala 406:55] 
    node T_2143 = or(T_2142, T_2065.pending) @[Trackers.scala 406:59] 
    node T_2145 = eq(T_2143, UInt<1>("h00")) @[Trackers.scala 406:39] 
    node T_2146 = and(T_2140, T_2145) @[Trackers.scala 406:36] 
    when T_2146 : @[Trackers.scala 406:85] 
      state <= T_2056 @[Trackers.scala 407:15] 
      skip @[Trackers.scala 406:85] 
    node T_2148 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2149 = eq(state, UInt<4>("h00")) @[Trackers.scala 254:19] 
    node T_2150 = mux(T_2149, io.alloc.irel.should, io.alloc.irel.matches) @[Trackers.scala 254:12] 
    node T_2151 = and(T_2150, io.inner.release.bits.voluntary) @[Trackers.scala 254:76] 
    node T_2154 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2155 = and(T_2151, T_2154) @[Trackers.scala 254:95] 
    node T_2156 = and(T_2148, T_2155) @[Counters.scala 123:62] 
    node T_2158 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2159 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2160 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2161 = or(T_2158, T_2159) @[Util.scala 7:62] 
    node T_2162 = or(T_2161, T_2160) @[Util.scala 7:62] 
    node T_2163 = and(UInt<1>("h01"), T_2162) @[Definitions.scala 256:64] 
    node T_2164 = and(T_2156, T_2163) @[Counters.scala 67:47] 
    reg T_2166 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2164 : @[Counter.scala 43:17] 
      node T_2168 = eq(T_2166, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2170 = add(T_2166, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2171 = tail(T_2170, 1) @[Counter.scala 21:22] 
      T_2166 <= T_2171 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2172 = and(T_2164, T_2168) @[Counter.scala 44:20] 
    node T_2173 = mux(T_2163, T_2166, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2174 = mux(T_2163, T_2172, T_2156) @[Counters.scala 69:19] 
    node T_2175 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2176 = neq(state, UInt<4>("h00")) @[Trackers.scala 256:40] 
    node T_2178 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2179 = and(io.inner.grant.bits.is_builtin_type, T_2178) @[Definitions.scala 277:59] 
    node T_2180 = and(T_2176, T_2179) @[Trackers.scala 256:52] 
    node T_2181 = and(T_2175, T_2180) @[Counters.scala 124:64] 
    wire T_2189 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2189 is invalid @[Definitions.scala 846:34] 
    T_2189[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2191 = eq(io.inner.grant.bits.g_type, T_2189[0]) @[Util.scala 7:47] 
    node T_2192 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2193 = mux(io.inner.grant.bits.is_builtin_type, T_2191, T_2192) @[Definitions.scala 274:33] 
    node T_2194 = and(UInt<1>("h01"), T_2193) @[Definitions.scala 274:27] 
    node T_2195 = and(T_2181, T_2194) @[Counters.scala 67:47] 
    reg T_2197 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2195 : @[Counter.scala 43:17] 
      node T_2199 = eq(T_2197, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2201 = add(T_2197, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2202 = tail(T_2201, 1) @[Counter.scala 21:22] 
      T_2197 <= T_2202 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2203 = and(T_2195, T_2199) @[Counter.scala 44:20] 
    node T_2204 = mux(T_2194, T_2197, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2205 = mux(T_2194, T_2203, T_2181) @[Counters.scala 69:19] 
    reg T_2207 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2209 = eq(T_2205, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2210 = and(T_2174, T_2209) @[Counters.scala 33:14] 
    when T_2210 : @[Counters.scala 33:24] 
      node T_2212 = add(T_2207, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2213 = tail(T_2212, 1) @[Counters.scala 33:37] 
      T_2207 <= T_2213 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2215 = eq(T_2174, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2216 = and(T_2205, T_2215) @[Counters.scala 34:16] 
    when T_2216 : @[Counters.scala 34:24] 
      node T_2218 = sub(T_2207, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2219 = tail(T_2218, 1) @[Counters.scala 34:37] 
      T_2207 <= T_2219 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2221 = gt(T_2207, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ignt_counter.pending <= T_2221 @[Counters.scala 126:20] 
    vol_ignt_counter.up.idx <= T_2173 @[Counters.scala 127:19] 
    vol_ignt_counter.up.done <= T_2174 @[Counters.scala 128:20] 
    vol_ignt_counter.down.idx <= T_2204 @[Counters.scala 129:21] 
    vol_ignt_counter.down.done <= T_2205 @[Counters.scala 130:22] 
    node T_2222 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2223 = and(T_2222, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2224 = and(T_2223, io.inner.release.valid) @[Trackers.scala 245:75] 
    when T_2224 : @[Trackers.scala 259:30] 
      xact_addr_block <= io.inner.release.bits.addr_block @[Trackers.scala 260:23] 
      node T_2226 = not(UInt<8>("h00")) @[Trackers.scala 264:28] 
      pending_irel_data <= T_2226 @[Trackers.scala 264:25] 
      state <= UInt<4>("h07") @[Trackers.scala 265:13] 
      skip @[Trackers.scala 259:30] 
    node T_2227 = eq(state, UInt<4>("h00")) @[Trackers.scala 245:40] 
    node T_2228 = and(T_2227, io.alloc.irel.should) @[Trackers.scala 245:51] 
    node T_2229 = and(T_2228, io.inner.release.valid) @[Trackers.scala 245:75] 
    node T_2230 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2231 = and(T_2230, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2232 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2233 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2234 = or(T_2232, T_2233) @[Util.scala 7:62] 
    node T_2236 = eq(T_2234, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2237 = and(T_2231, T_2236) @[Broadcast.scala 160:50] 
    node T_2239 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2240 = and(T_2237, T_2239) @[Broadcast.scala 161:63] 
    node T_2241 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2243 = eq(T_2241, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2244 = and(T_2240, T_2243) @[Broadcast.scala 162:44] 
    node T_2245 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2247 = eq(T_2245, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2248 = and(T_2244, T_2247) @[Broadcast.scala 163:49] 
    node T_2250 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2251 = and(T_2248, T_2250) @[Broadcast.scala 164:49] 
    node T_2252 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2253 = bits(T_2252, 0, 0) @[Trackers.scala 318:60] 
    node T_2254 = and(sending_orel, T_2253) @[Trackers.scala 318:40] 
    node T_2255 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2256 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2257 = and(T_2255, T_2256) @[Trackers.scala 319:47] 
    node T_2258 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2259 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2260 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2261 = or(T_2258, T_2259) @[Util.scala 7:62] 
    node T_2262 = or(T_2261, T_2260) @[Util.scala 7:62] 
    node T_2263 = or(T_2254, T_2257) @[Trackers.scala 320:39] 
    node T_2264 = and(T_2262, T_2263) @[Trackers.scala 320:19] 
    node T_2266 = eq(T_2264, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2267 = and(T_2251, T_2266) @[Broadcast.scala 165:52] 
    node T_2268 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2270 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2271 = and(T_2268, T_2270) @[Trackers.scala 387:61] 
    node T_2272 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2273 = and(T_2271, T_2272) @[Trackers.scala 388:51] 
    node T_2274 = or(T_2267, T_2273) @[Trackers.scala 246:47] 
    node T_2275 = and(T_2274, io.inner.release.valid) @[Trackers.scala 246:66] 
    node T_2276 = or(T_2229, T_2275) @[Trackers.scala 268:41] 
    node T_2277 = and(T_2276, io.inner.release.ready) @[Trackers.scala 268:61] 
    when T_2277 : @[Trackers.scala 269:22] 
      node T_2279 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2280 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2281 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2282 = or(T_2279, T_2280) @[Util.scala 7:62] 
      node T_2283 = or(T_2282, T_2281) @[Util.scala 7:62] 
      node T_2284 = and(UInt<1>("h01"), T_2283) @[Definitions.scala 256:64] 
      node T_2286 = eq(T_2284, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2288 = eq(io.inner.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2289 = or(T_2286, T_2288) @[Definitions.scala 141:57] 
      when T_2289 : @[Trackers.scala 270:32] 
        when io.inner.release.bits.voluntary : @[Trackers.scala 271:40] 
          xact_vol_ir_r_type <= io.inner.release.bits.r_type @[Trackers.scala 272:30] 
          xact_vol_ir_src <= io.inner.release.bits.client_id @[Trackers.scala 273:27] 
          xact_vol_ir_client_xact_id <= io.inner.release.bits.client_xact_id @[Trackers.scala 274:38] 
          skip @[Trackers.scala 271:40] 
        node T_2291 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2292 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2293 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2294 = or(T_2291, T_2292) @[Util.scala 7:62] 
        node T_2295 = or(T_2294, T_2293) @[Util.scala 7:62] 
        node T_2296 = and(UInt<1>("h01"), T_2295) @[Definitions.scala 256:64] 
        node T_2297 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2298 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2299 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2300 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2301 = or(T_2298, T_2299) @[Util.scala 7:62] 
        node T_2302 = or(T_2301, T_2300) @[Util.scala 7:62] 
        node T_2303 = and(T_2297, T_2302) @[Trackers.scala 122:38] 
        node T_2304 = bits(T_2303, 0, 0) @[Bitwise.scala 33:15] 
        node T_2307 = mux(T_2304, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2308 = not(T_2307) @[Trackers.scala 92:5] 
        node T_2310 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2311 = not(T_2310) @[Trackers.scala 92:34] 
        node T_2312 = or(T_2308, T_2311) @[Trackers.scala 92:32] 
        node T_2314 = mux(T_2296, T_2312, UInt<1>("h00")) @[Trackers.scala 278:33] 
        pending_irel_data <= T_2314 @[Trackers.scala 278:27] 
        skip @[Trackers.scala 270:32] 
      node T_2316 = eq(T_2289, UInt<1>("h00")) @[Trackers.scala 270:32] 
      when T_2316 : @[Trackers.scala 281:20] 
        node T_2317 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
        node T_2318 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
        node T_2319 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
        node T_2320 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
        node T_2321 = or(T_2318, T_2319) @[Util.scala 7:62] 
        node T_2322 = or(T_2321, T_2320) @[Util.scala 7:62] 
        node T_2323 = and(T_2317, T_2322) @[Trackers.scala 122:38] 
        node T_2324 = bits(T_2323, 0, 0) @[Bitwise.scala 33:15] 
        node T_2327 = mux(T_2324, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
        node T_2328 = not(T_2327) @[Trackers.scala 92:5] 
        node T_2330 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
        node T_2331 = not(T_2330) @[Trackers.scala 92:34] 
        node T_2332 = or(T_2328, T_2331) @[Trackers.scala 92:32] 
        node T_2333 = and(pending_irel_data, T_2332) @[Trackers.scala 282:49] 
        pending_irel_data <= T_2333 @[Trackers.scala 282:27] 
        skip @[Trackers.scala 281:20] 
      skip @[Trackers.scala 269:22] 
    node T_2334 = eq(state, UInt<4>("h03")) @[Util.scala 7:47] 
    node T_2335 = eq(state, UInt<4>("h04")) @[Util.scala 7:47] 
    node T_2336 = eq(state, UInt<4>("h05")) @[Util.scala 7:47] 
    node T_2337 = eq(state, UInt<4>("h07")) @[Util.scala 7:47] 
    node T_2338 = or(T_2334, T_2335) @[Util.scala 7:62] 
    node T_2339 = or(T_2338, T_2336) @[Util.scala 7:62] 
    node T_2340 = or(T_2339, T_2337) @[Util.scala 7:62] 
    node T_2341 = and(T_2340, vol_ignt_counter.pending) @[Trackers.scala 292:87] 
    node T_2343 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 294:51] 
    node T_2344 = or(T_2343, vol_ognt_counter.pending) @[Trackers.scala 294:55] 
    node T_2346 = eq(T_2344, UInt<1>("h00")) @[Trackers.scala 294:31] 
    node T_2347 = and(T_2341, T_2346) @[Trackers.scala 293:56] 
    io.inner.grant.valid <= T_2347 @[Trackers.scala 292:26] 
    wire T_2379 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 766:19] 
    T_2379 is invalid @[Definitions.scala 766:19] 
    T_2379.client_id <= xact_vol_ir_src @[Definitions.scala 767:19] 
    T_2379.voluntary <= UInt<1>("h01") @[Definitions.scala 768:19] 
    T_2379.r_type <= xact_vol_ir_r_type @[Definitions.scala 769:16] 
    T_2379.client_xact_id <= xact_vol_ir_client_xact_id @[Definitions.scala 770:24] 
    T_2379.addr_block <= xact_addr_block @[Definitions.scala 771:20] 
    T_2379.addr_beat <= UInt<1>("h00") @[Definitions.scala 772:19] 
    T_2379.data <= UInt<1>("h00") @[Definitions.scala 773:14] 
    wire T_2440 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_2440 is invalid @[Definitions.scala 875:19] 
    T_2440.client_id <= T_2379.client_id @[Definitions.scala 876:19] 
    T_2440.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 877:25] 
    T_2440.g_type <= UInt<3>("h00") @[Definitions.scala 878:16] 
    T_2440.client_xact_id <= T_2379.client_xact_id @[Definitions.scala 879:24] 
    T_2440.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 880:25] 
    T_2440.addr_beat <= UInt<1>("h00") @[Definitions.scala 881:19] 
    T_2440.data <= UInt<1>("h00") @[Definitions.scala 882:14] 
    io.inner.grant.bits <- T_2440 @[Trackers.scala 296:25] 
    node scoreboard_1 = neq(pending_irel_data, UInt<1>("h00")) @[Trackers.scala 298:38] 
    node T_2469 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2470 = and(T_2469, io.inner.release.bits.voluntary) @[Broadcast.scala 159:61] 
    node T_2471 = eq(state, UInt<4>("h00")) @[Util.scala 7:47] 
    node T_2472 = eq(state, UInt<4>("h08")) @[Util.scala 7:47] 
    node T_2473 = or(T_2471, T_2472) @[Util.scala 7:62] 
    node T_2475 = eq(T_2473, UInt<1>("h00")) @[Broadcast.scala 161:26] 
    node T_2476 = and(T_2470, T_2475) @[Broadcast.scala 160:50] 
    node T_2478 = eq(all_pending_done, UInt<1>("h00")) @[Broadcast.scala 162:26] 
    node T_2479 = and(T_2476, T_2478) @[Broadcast.scala 161:63] 
    node T_2480 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2482 = eq(T_2480, UInt<1>("h00")) @[Broadcast.scala 163:26] 
    node T_2483 = and(T_2479, T_2482) @[Broadcast.scala 162:44] 
    node T_2484 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_2486 = eq(T_2484, UInt<1>("h00")) @[Broadcast.scala 164:26] 
    node T_2487 = and(T_2483, T_2486) @[Broadcast.scala 163:49] 
    node T_2489 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Broadcast.scala 165:26] 
    node T_2490 = and(T_2487, T_2489) @[Broadcast.scala 164:49] 
    node T_2491 = dshr(pending_orel_data, io.inner.release.bits.addr_beat) @[Trackers.scala 318:60] 
    node T_2492 = bits(T_2491, 0, 0) @[Trackers.scala 318:60] 
    node T_2493 = and(sending_orel, T_2492) @[Trackers.scala 318:40] 
    node T_2494 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2495 = eq(io.inner.release.bits.addr_beat, io.outer.release.bits.addr_beat) @[Trackers.scala 319:64] 
    node T_2496 = and(T_2494, T_2495) @[Trackers.scala 319:47] 
    node T_2497 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2498 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2499 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2500 = or(T_2497, T_2498) @[Util.scala 7:62] 
    node T_2501 = or(T_2500, T_2499) @[Util.scala 7:62] 
    node T_2502 = or(T_2493, T_2496) @[Trackers.scala 320:39] 
    node T_2503 = and(T_2501, T_2502) @[Trackers.scala 320:19] 
    node T_2505 = eq(T_2503, UInt<1>("h00")) @[Broadcast.scala 166:26] 
    node T_2506 = and(T_2490, T_2505) @[Broadcast.scala 165:52] 
    node T_2507 = eq(io.inner.release.bits.addr_block, xact_addr_block) @[Definitions.scala 117:47] 
    node T_2509 = eq(io.inner.release.bits.voluntary, UInt<1>("h00")) @[Trackers.scala 388:26] 
    node T_2510 = and(T_2507, T_2509) @[Trackers.scala 387:61] 
    node T_2511 = eq(state, UInt<4>("h05")) @[Trackers.scala 389:32] 
    node T_2512 = and(T_2510, T_2511) @[Trackers.scala 388:51] 
    node T_2513 = or(T_2506, T_2512) @[Broadcast.scala 171:44] 
    io.inner.release.ready <= T_2513 @[Broadcast.scala 171:26] 
    node T_2514 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
    node T_2515 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2516 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2517 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2518 = or(T_2515, T_2516) @[Util.scala 7:62] 
    node T_2519 = or(T_2518, T_2517) @[Util.scala 7:62] 
    node T_2520 = and(T_2514, T_2519) @[Trackers.scala 166:20] 
    when T_2520 : @[Trackers.scala 166:42] 
      node T_2521 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_2522 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_2523 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_2524 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_2525 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_2526 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_2527 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_2528 = bits(wmask_buffer[io.inner.release.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_2529 = bits(T_2521, 0, 0) @[Bitwise.scala 33:15] 
      node T_2532 = mux(T_2529, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2533 = bits(T_2522, 0, 0) @[Bitwise.scala 33:15] 
      node T_2536 = mux(T_2533, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2537 = bits(T_2523, 0, 0) @[Bitwise.scala 33:15] 
      node T_2540 = mux(T_2537, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2541 = bits(T_2524, 0, 0) @[Bitwise.scala 33:15] 
      node T_2544 = mux(T_2541, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2545 = bits(T_2525, 0, 0) @[Bitwise.scala 33:15] 
      node T_2548 = mux(T_2545, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2549 = bits(T_2526, 0, 0) @[Bitwise.scala 33:15] 
      node T_2552 = mux(T_2549, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2553 = bits(T_2527, 0, 0) @[Bitwise.scala 33:15] 
      node T_2556 = mux(T_2553, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2557 = bits(T_2528, 0, 0) @[Bitwise.scala 33:15] 
      node T_2560 = mux(T_2557, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2561 = cat(T_2536, T_2532) @[Cat.scala 20:58] 
      node T_2562 = cat(T_2544, T_2540) @[Cat.scala 20:58] 
      node T_2563 = cat(T_2562, T_2561) @[Cat.scala 20:58] 
      node T_2564 = cat(T_2552, T_2548) @[Cat.scala 20:58] 
      node T_2565 = cat(T_2560, T_2556) @[Cat.scala 20:58] 
      node T_2566 = cat(T_2565, T_2564) @[Cat.scala 20:58] 
      node T_2567 = cat(T_2566, T_2563) @[Cat.scala 20:58] 
      node T_2568 = not(T_2567) @[Trackers.scala 195:27] 
      node T_2569 = and(T_2568, io.inner.release.bits.data) @[Trackers.scala 195:34] 
      node T_2570 = and(T_2567, data_buffer[io.inner.release.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_2571 = or(T_2569, T_2570) @[Trackers.scala 195:46] 
      data_buffer[io.inner.release.bits.addr_beat] <= T_2571 @[Trackers.scala 195:23] 
      node T_2573 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.inner.release.bits.addr_beat] <= T_2573 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 166:42] 
    node T_2574 = eq(UInt<5>("h01"), UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2575 = eq(UInt<5>("h01"), UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2576 = or(T_2574, T_2575) @[Consts.scala 47:42] 
    node T_2578 = eq(UInt<5>("h01"), UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2579 = or(UInt<1>("h00"), T_2578) @[Consts.scala 44:33] 
    node T_2580 = or(T_2576, T_2579) @[Consts.scala 47:59] 
    node T_2581 = mux(T_2580, UInt<2>("h02"), coh.outer.state) @[Policies.scala 257:23] 
    wire T_2604 : {state : UInt<2>} @[Metadata.scala 158:20] 
    T_2604 is invalid @[Metadata.scala 158:20] 
    T_2604.state <= T_2581 @[Metadata.scala 159:16] 
    node T_2630 = neq(state, UInt<4>("h00")) @[Trackers.scala 331:17] 
    node T_2631 = or(T_2630, io.alloc.irel.should) @[Trackers.scala 331:28] 
    when T_2631 : @[Trackers.scala 331:53] 
      node T_2633 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_2634 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2635 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2636 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2637 = or(T_2634, T_2635) @[Util.scala 7:62] 
      node T_2638 = or(T_2637, T_2636) @[Util.scala 7:62] 
      node T_2639 = and(T_2633, T_2638) @[Trackers.scala 101:37] 
      node T_2640 = and(T_2639, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_2641 = bits(T_2640, 0, 0) @[Bitwise.scala 33:15] 
      node T_2644 = mux(T_2641, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2646 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2647 = and(T_2644, T_2646) @[Trackers.scala 89:31] 
      node T_2648 = or(pending_orel_data, T_2647) @[Trackers.scala 332:47] 
      node T_2649 = or(T_2648, UInt<1>("h00")) @[Trackers.scala 333:58] 
      node T_2650 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
      node T_2651 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2652 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2653 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2654 = or(T_2651, T_2652) @[Util.scala 7:62] 
      node T_2655 = or(T_2654, T_2653) @[Util.scala 7:62] 
      node T_2656 = and(T_2650, T_2655) @[Trackers.scala 122:38] 
      node T_2657 = bits(T_2656, 0, 0) @[Bitwise.scala 33:15] 
      node T_2660 = mux(T_2657, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_2661 = not(T_2660) @[Trackers.scala 92:5] 
      node T_2663 = dshl(UInt<1>("h01"), io.outer.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_2664 = not(T_2663) @[Trackers.scala 92:34] 
      node T_2665 = or(T_2661, T_2664) @[Trackers.scala 92:32] 
      node T_2666 = and(T_2649, T_2665) @[Trackers.scala 334:34] 
      pending_orel_data <= T_2666 @[Trackers.scala 332:25] 
      skip @[Trackers.scala 331:53] 
    when UInt<1>("h00") : @[Trackers.scala 337:33] 
      pending_orel_send <= UInt<1>("h01") @[Trackers.scala 337:53] 
      skip @[Trackers.scala 337:33] 
    node T_2668 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    when T_2668 : @[Trackers.scala 338:36] 
      node T_2670 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2671 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2672 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2673 = or(T_2670, T_2671) @[Util.scala 7:62] 
      node T_2674 = or(T_2673, T_2672) @[Util.scala 7:62] 
      node T_2675 = and(UInt<1>("h01"), T_2674) @[Definitions.scala 256:64] 
      node T_2677 = eq(T_2675, UInt<1>("h00")) @[Definitions.scala 141:37] 
      node T_2679 = eq(io.outer.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
      node T_2680 = or(T_2677, T_2679) @[Definitions.scala 141:57] 
      when T_2680 : @[Trackers.scala 339:44] 
        sending_orel <= UInt<1>("h01") @[Trackers.scala 339:59] 
        skip @[Trackers.scala 339:44] 
      node T_2683 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_2684 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_2685 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_2686 = or(T_2683, T_2684) @[Util.scala 7:62] 
      node T_2687 = or(T_2686, T_2685) @[Util.scala 7:62] 
      node T_2688 = and(UInt<1>("h01"), T_2687) @[Definitions.scala 256:64] 
      node T_2690 = eq(T_2688, UInt<1>("h00")) @[Definitions.scala 142:36] 
      node T_2692 = eq(io.outer.release.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
      node T_2693 = or(T_2690, T_2692) @[Definitions.scala 142:56] 
      when T_2693 : @[Trackers.scala 340:44] 
        sending_orel <= UInt<1>("h00") @[Trackers.scala 340:59] 
        skip @[Trackers.scala 340:44] 
      pending_orel_send <= UInt<1>("h00") @[Trackers.scala 341:25] 
      skip @[Trackers.scala 338:36] 
    node T_2697 = and(io.outer.release.ready, io.outer.release.valid) @[Decoupled.scala 16:42] 
    node T_2700 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 259:37] 
    node T_2701 = and(io.outer.release.bits.voluntary, T_2700) @[Trackers.scala 348:51] 
    node T_2702 = and(T_2697, T_2701) @[Counters.scala 123:62] 
    node T_2704 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2705 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2706 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2707 = or(T_2704, T_2705) @[Util.scala 7:62] 
    node T_2708 = or(T_2707, T_2706) @[Util.scala 7:62] 
    node T_2709 = and(UInt<1>("h01"), T_2708) @[Definitions.scala 256:64] 
    node T_2710 = and(T_2702, T_2709) @[Counters.scala 67:47] 
    reg T_2712 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2710 : @[Counter.scala 43:17] 
      node T_2714 = eq(T_2712, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2716 = add(T_2712, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2717 = tail(T_2716, 1) @[Counter.scala 21:22] 
      T_2712 <= T_2717 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2718 = and(T_2710, T_2714) @[Counter.scala 44:20] 
    node T_2719 = mux(T_2709, T_2712, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2720 = mux(T_2709, T_2718, T_2702) @[Counters.scala 69:19] 
    node T_2721 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2723 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2724 = and(io.outer.grant.bits.is_builtin_type, T_2723) @[Definitions.scala 277:59] 
    node T_2725 = and(T_2721, T_2724) @[Counters.scala 124:64] 
    wire T_2733 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2733 is invalid @[Definitions.scala 846:34] 
    T_2733[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2735 = eq(io.outer.grant.bits.g_type, T_2733[0]) @[Util.scala 7:47] 
    node T_2736 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2737 = mux(io.outer.grant.bits.is_builtin_type, T_2735, T_2736) @[Definitions.scala 274:33] 
    node T_2738 = and(UInt<1>("h01"), T_2737) @[Definitions.scala 274:27] 
    node T_2739 = and(T_2725, T_2738) @[Counters.scala 67:47] 
    reg T_2741 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2739 : @[Counter.scala 43:17] 
      node T_2743 = eq(T_2741, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2745 = add(T_2741, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2746 = tail(T_2745, 1) @[Counter.scala 21:22] 
      T_2741 <= T_2746 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2747 = and(T_2739, T_2743) @[Counter.scala 44:20] 
    node T_2748 = mux(T_2738, T_2741, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_2749 = mux(T_2738, T_2747, T_2725) @[Counters.scala 69:19] 
    reg T_2751 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2753 = eq(T_2749, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2754 = and(T_2720, T_2753) @[Counters.scala 33:14] 
    when T_2754 : @[Counters.scala 33:24] 
      node T_2756 = add(T_2751, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2757 = tail(T_2756, 1) @[Counters.scala 33:37] 
      T_2751 <= T_2757 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2759 = eq(T_2720, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2760 = and(T_2749, T_2759) @[Counters.scala 34:16] 
    when T_2760 : @[Counters.scala 34:24] 
      node T_2762 = sub(T_2751, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2763 = tail(T_2762, 1) @[Counters.scala 34:37] 
      T_2751 <= T_2763 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2765 = gt(T_2751, UInt<1>("h00")) @[Counters.scala 126:27] 
    vol_ognt_counter.pending <= T_2765 @[Counters.scala 126:20] 
    vol_ognt_counter.up.idx <= T_2719 @[Counters.scala 127:19] 
    vol_ognt_counter.up.done <= T_2720 @[Counters.scala 128:20] 
    vol_ognt_counter.down.idx <= T_2748 @[Counters.scala 129:21] 
    vol_ognt_counter.down.done <= T_2749 @[Counters.scala 130:22] 
    node T_2767 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 351:31] 
    node T_2768 = eq(state, UInt<4>("h07")) @[Trackers.scala 352:14] 
    node T_2769 = eq(io.outer.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2770 = eq(io.outer.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2771 = eq(io.outer.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2772 = or(T_2769, T_2770) @[Util.scala 7:62] 
    node T_2773 = or(T_2772, T_2771) @[Util.scala 7:62] 
    node T_2774 = dshr(pending_orel_data, vol_ognt_counter.up.idx) @[Trackers.scala 353:26] 
    node T_2775 = bits(T_2774, 0, 0) @[Trackers.scala 353:26] 
    node T_2776 = mux(T_2773, T_2775, pending_orel_send) @[Trackers.scala 352:32] 
    node T_2777 = and(T_2768, T_2776) @[Trackers.scala 352:26] 
    node T_2778 = neq(state, UInt<4>("h00")) @[Trackers.scala 356:13] 
    node T_2779 = and(T_2778, io.alloc.irel.matches) @[Trackers.scala 356:24] 
    node T_2780 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_2781 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_2782 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_2783 = or(T_2780, T_2781) @[Util.scala 7:62] 
    node T_2784 = or(T_2783, T_2782) @[Util.scala 7:62] 
    node T_2785 = and(T_2779, T_2784) @[Trackers.scala 356:49] 
    node T_2786 = and(T_2785, io.inner.release.valid) @[Trackers.scala 357:29] 
    node T_2787 = mux(UInt<1>("h01"), T_2777, T_2786) @[Trackers.scala 351:49] 
    node T_2788 = and(T_2767, T_2787) @[Trackers.scala 351:43] 
    io.outer.release.valid <= T_2788 @[Trackers.scala 351:28] 
    node T_2791 = eq(T_2604.state, UInt<2>("h02")) @[Util.scala 7:47] 
    node T_2792 = mux(T_2791, UInt<3>("h00"), UInt<3>("h03")) @[Policies.scala 245:23] 
    node T_2793 = mux(T_2791, UInt<3>("h01"), UInt<3>("h04")) @[Policies.scala 246:23] 
    node T_2794 = mux(T_2791, UInt<3>("h02"), UInt<3>("h05")) @[Policies.scala 247:23] 
    node T_2795 = eq(UInt<5>("h013"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2796 = mux(T_2795, T_2794, UInt<3>("h05")) @[Mux.scala 46:16] 
    node T_2797 = eq(UInt<5>("h011"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2798 = mux(T_2797, T_2793, T_2796) @[Mux.scala 46:16] 
    node T_2799 = eq(UInt<5>("h010"), UInt<5>("h010")) @[Mux.scala 46:19] 
    node T_2800 = mux(T_2799, T_2792, T_2798) @[Mux.scala 46:16] 
    wire T_2828 : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>} @[Definitions.scala 747:19] 
    T_2828 is invalid @[Definitions.scala 747:19] 
    T_2828.r_type <= T_2800 @[Definitions.scala 748:16] 
    T_2828.client_xact_id <= UInt<1>("h00") @[Definitions.scala 749:24] 
    T_2828.addr_block <= xact_addr_block @[Definitions.scala 750:20] 
    T_2828.addr_beat <= vol_ognt_counter.up.idx @[Definitions.scala 751:19] 
    T_2828.data <= data_buffer[vol_ognt_counter.up.idx] @[Definitions.scala 752:14] 
    T_2828.voluntary <= UInt<1>("h01") @[Definitions.scala 753:19] 
    io.outer.release.bits <- T_2828 @[Trackers.scala 359:27] 
    when vol_ognt_counter.pending : @[Trackers.scala 365:37] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 365:60] 
      skip @[Trackers.scala 365:37] 
    node T_2857 = eq(xact_iacq.is_builtin_type, UInt<1>("h00")) @[Broadcast.scala 182:15] 
    node T_2860 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_2862 = and(T_2860, UInt<1>("h01")) @[Counters.scala 123:62] 
    node T_2864 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_2871 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_2871 is invalid @[Definitions.scala 355:35] 
    T_2871[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_2873 = eq(io.outer.acquire.bits.a_type, T_2871[0]) @[Util.scala 7:47] 
    node T_2874 = and(T_2864, T_2873) @[Definitions.scala 231:89] 
    node T_2875 = and(T_2862, T_2874) @[Counters.scala 67:47] 
    reg T_2877 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2875 : @[Counter.scala 43:17] 
      node T_2879 = eq(T_2877, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2881 = add(T_2877, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2882 = tail(T_2881, 1) @[Counter.scala 21:22] 
      T_2877 <= T_2882 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2883 = and(T_2875, T_2879) @[Counter.scala 44:20] 
    node T_2884 = mux(T_2874, T_2877, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2885 = mux(T_2874, T_2883, T_2862) @[Counters.scala 69:19] 
    node T_2886 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    node T_2888 = eq(io.outer.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_2889 = and(io.outer.grant.bits.is_builtin_type, T_2888) @[Definitions.scala 277:59] 
    node T_2891 = eq(T_2889, UInt<1>("h00")) @[Trackers.scala 599:33] 
    node T_2892 = and(T_2886, T_2891) @[Counters.scala 124:64] 
    wire T_2900 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_2900 is invalid @[Definitions.scala 846:34] 
    T_2900[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_2902 = eq(io.outer.grant.bits.g_type, T_2900[0]) @[Util.scala 7:47] 
    node T_2903 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_2904 = mux(io.outer.grant.bits.is_builtin_type, T_2902, T_2903) @[Definitions.scala 274:33] 
    node T_2905 = and(UInt<1>("h01"), T_2904) @[Definitions.scala 274:27] 
    node T_2906 = and(T_2892, T_2905) @[Counters.scala 67:47] 
    reg T_2908 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_2906 : @[Counter.scala 43:17] 
      node T_2910 = eq(T_2908, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_2912 = add(T_2908, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_2913 = tail(T_2912, 1) @[Counter.scala 21:22] 
      T_2908 <= T_2913 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_2914 = and(T_2906, T_2910) @[Counter.scala 44:20] 
    node T_2915 = mux(T_2905, T_2908, xact_addr_beat) @[Counters.scala 68:18] 
    node T_2916 = mux(T_2905, T_2914, T_2892) @[Counters.scala 69:19] 
    reg T_2918 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_2920 = eq(T_2916, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_2921 = and(T_2885, T_2920) @[Counters.scala 33:14] 
    when T_2921 : @[Counters.scala 33:24] 
      node T_2923 = add(T_2918, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_2924 = tail(T_2923, 1) @[Counters.scala 33:37] 
      T_2918 <= T_2924 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_2926 = eq(T_2885, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_2927 = and(T_2916, T_2926) @[Counters.scala 34:16] 
    when T_2927 : @[Counters.scala 34:24] 
      node T_2929 = sub(T_2918, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_2930 = tail(T_2929, 1) @[Counters.scala 34:37] 
      T_2918 <= T_2930 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_2932 = gt(T_2918, UInt<1>("h00")) @[Counters.scala 126:27] 
    ognt_counter.pending <= T_2932 @[Counters.scala 126:20] 
    ognt_counter.up.idx <= T_2884 @[Counters.scala 127:19] 
    ognt_counter.up.done <= T_2885 @[Counters.scala 128:20] 
    ognt_counter.down.idx <= T_2915 @[Counters.scala 129:21] 
    ognt_counter.down.done <= T_2916 @[Counters.scala 130:22] 
    node T_2933 = eq(state, UInt<4>("h06")) @[Trackers.scala 602:13] 
    node T_2935 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Trackers.scala 602:36] 
    node T_2936 = and(T_2933, T_2935) @[Trackers.scala 602:33] 
    node T_2937 = dshr(pending_put_data, ognt_counter.up.idx) @[Trackers.scala 605:30] 
    node T_2938 = bits(T_2937, 0, 0) @[Trackers.scala 605:30] 
    node T_2940 = eq(T_2938, UInt<1>("h00")) @[Trackers.scala 605:13] 
    wire T_2949 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_2949 is invalid @[Definitions.scala 354:26] 
    T_2949[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_2949[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_2949[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_2951 = eq(xact_iacq.a_type, T_2949[0]) @[Util.scala 7:47] 
    node T_2952 = eq(xact_iacq.a_type, T_2949[1]) @[Util.scala 7:47] 
    node T_2953 = eq(xact_iacq.a_type, T_2949[2]) @[Util.scala 7:47] 
    node T_2954 = or(T_2951, T_2952) @[Util.scala 7:62] 
    node T_2955 = or(T_2954, T_2953) @[Util.scala 7:62] 
    node T_2956 = and(xact_iacq.is_builtin_type, T_2955) @[Definitions.scala 228:55] 
    node T_2958 = eq(T_2956, UInt<1>("h00")) @[Trackers.scala 610:30] 
    node T_2959 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_2960 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_2961 = and(T_2959, T_2960) @[Trackers.scala 462:61] 
    node T_2962 = and(T_2961, scoreboard_6) @[Trackers.scala 463:53] 
    node T_2963 = and(io.inner.acquire.valid, T_2962) @[Trackers.scala 611:39] 
    node T_2964 = or(T_2958, T_2963) @[Trackers.scala 610:51] 
    node T_2965 = and(scoreboard_6, T_2964) @[Trackers.scala 610:26] 
    node T_2966 = mux(UInt<1>("h01"), T_2940, T_2965) @[Trackers.scala 604:14] 
    node T_2967 = or(xact_allocate, T_2966) @[Trackers.scala 603:24] 
    node T_2968 = and(T_2936, T_2967) @[Trackers.scala 602:57] 
    io.outer.acquire.valid <= T_2968 @[Trackers.scala 601:28] 
    node T_2971 = eq(xact_op_code, UInt<5>("h01")) @[Consts.scala 47:32] 
    node T_2972 = eq(xact_op_code, UInt<5>("h07")) @[Consts.scala 47:49] 
    node T_2973 = or(T_2971, T_2972) @[Consts.scala 47:42] 
    node T_2974 = bits(xact_op_code, 3, 3) @[Consts.scala 44:29] 
    node T_2975 = eq(xact_op_code, UInt<5>("h04")) @[Consts.scala 44:40] 
    node T_2976 = or(T_2974, T_2975) @[Consts.scala 44:33] 
    node T_2977 = or(T_2973, T_2976) @[Consts.scala 47:59] 
    node T_2978 = eq(xact_op_code, UInt<5>("h03")) @[Consts.scala 48:54] 
    node T_2979 = or(T_2977, T_2978) @[Consts.scala 48:47] 
    node T_2980 = eq(xact_op_code, UInt<5>("h06")) @[Consts.scala 48:71] 
    node T_2981 = or(T_2979, T_2980) @[Consts.scala 48:64] 
    node T_2982 = mux(T_2981, UInt<1>("h01"), UInt<1>("h00")) @[Policies.scala 240:8] 
    node T_2984 = cat(xact_op_code, UInt<1>("h01")) @[Cat.scala 20:58] 
    wire T_3015 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3015 is invalid @[Definitions.scala 412:19] 
    T_3015.is_builtin_type <= UInt<1>("h00") @[Definitions.scala 413:25] 
    T_3015.a_type <= T_2982 @[Definitions.scala 414:16] 
    T_3015.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3015.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3015.addr_beat <= UInt<1>("h00") @[Definitions.scala 417:19] 
    T_3015.data <= UInt<1>("h00") @[Definitions.scala 418:14] 
    T_3015.union <= T_2984 @[Definitions.scala 419:15] 
    node T_3067 = or(UInt<3>("h00"), xact_addr_byte) @[Definitions.scala 385:49] 
    node T_3068 = bits(T_3067, 2, 0) @[Definitions.scala 385:61] 
    node T_3070 = or(UInt<3>("h00"), xact_op_size) @[Definitions.scala 386:43] 
    node T_3071 = bits(T_3070, 2, 0) @[Definitions.scala 386:58] 
    node T_3073 = or(UInt<5>("h00"), xact_op_code) @[Definitions.scala 387:36] 
    node T_3074 = bits(T_3073, 4, 0) @[Definitions.scala 387:45] 
    node T_3076 = or(UInt<8>("h00"), wmask_buffer[ognt_counter.up.idx]) @[Definitions.scala 388:46] 
    node T_3077 = bits(T_3076, 7, 0) @[Definitions.scala 388:54] 
    node T_3080 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3081 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3082 = cat(T_3081, T_3080) @[Cat.scala 20:58] 
    node T_3084 = cat(T_3071, T_3074) @[Cat.scala 20:58] 
    node T_3085 = cat(T_3084, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3087 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3089 = cat(T_3077, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3091 = cat(T_3074, UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3092 = cat(T_3068, T_3071) @[Cat.scala 20:58] 
    node T_3093 = cat(T_3092, T_3091) @[Cat.scala 20:58] 
    node T_3095 = cat(UInt<5>("h00"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3097 = cat(UInt<5>("h01"), UInt<1>("h00")) @[Cat.scala 20:58] 
    node T_3098 = eq(UInt<3>("h06"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3099 = mux(T_3098, T_3097, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_3100 = eq(UInt<3>("h05"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3101 = mux(T_3100, T_3095, T_3099) @[Mux.scala 46:16] 
    node T_3102 = eq(UInt<3>("h04"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3103 = mux(T_3102, T_3093, T_3101) @[Mux.scala 46:16] 
    node T_3104 = eq(UInt<3>("h03"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3105 = mux(T_3104, T_3089, T_3103) @[Mux.scala 46:16] 
    node T_3106 = eq(UInt<3>("h02"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3107 = mux(T_3106, T_3087, T_3105) @[Mux.scala 46:16] 
    node T_3108 = eq(UInt<3>("h01"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3109 = mux(T_3108, T_3085, T_3107) @[Mux.scala 46:16] 
    node T_3110 = eq(UInt<3>("h00"), xact_iacq.a_type) @[Mux.scala 46:19] 
    node T_3111 = mux(T_3110, T_3082, T_3109) @[Mux.scala 46:16] 
    wire T_3140 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_3140 is invalid @[Definitions.scala 412:19] 
    T_3140.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_3140.a_type <= xact_iacq.a_type @[Definitions.scala 414:16] 
    T_3140.client_xact_id <= UInt<1>("h00") @[Definitions.scala 415:24] 
    T_3140.addr_block <= xact_addr_block @[Definitions.scala 416:20] 
    T_3140.addr_beat <= ognt_counter.up.idx @[Definitions.scala 417:19] 
    T_3140.data <= data_buffer[ognt_counter.up.idx] @[Definitions.scala 418:14] 
    T_3140.union <= T_3111 @[Definitions.scala 419:15] 
    node T_3168 = mux(T_2857, T_3015, T_3140) @[Trackers.scala 614:10] 
    io.outer.acquire.bits <- T_3168 @[Trackers.scala 613:27] 
    node T_3196 = eq(state, UInt<4>("h06")) @[Trackers.scala 632:16] 
    node T_3197 = and(T_3196, ognt_counter.up.done) @[Trackers.scala 632:36] 
    when T_3197 : @[Trackers.scala 632:61] 
      state <= UInt<4>("h07") @[Trackers.scala 632:69] 
      skip @[Trackers.scala 632:61] 
    when ognt_counter.pending : @[Trackers.scala 634:33] 
      io.outer.grant.ready <= UInt<1>("h01") @[Trackers.scala 634:56] 
      skip @[Trackers.scala 634:33] 
    node T_3199 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3207 : UInt<3>[2] @[Definitions.scala 845:26] 
    T_3207 is invalid @[Definitions.scala 845:26] 
    T_3207[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
    T_3207[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
    node T_3209 = eq(io.outer.grant.bits.g_type, T_3207[0]) @[Util.scala 7:47] 
    node T_3210 = eq(io.outer.grant.bits.g_type, T_3207[1]) @[Util.scala 7:47] 
    node T_3211 = or(T_3209, T_3210) @[Util.scala 7:62] 
    node T_3212 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3213 = mux(io.outer.grant.bits.is_builtin_type, T_3211, T_3212) @[Definitions.scala 270:42] 
    node T_3214 = and(T_3199, T_3213) @[Trackers.scala 172:20] 
    when T_3214 : @[Trackers.scala 172:42] 
      node T_3215 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 0, 0) @[Bitwise.scala 13:51] 
      node T_3216 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 1, 1) @[Bitwise.scala 13:51] 
      node T_3217 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 2, 2) @[Bitwise.scala 13:51] 
      node T_3218 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 3, 3) @[Bitwise.scala 13:51] 
      node T_3219 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 4, 4) @[Bitwise.scala 13:51] 
      node T_3220 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 5, 5) @[Bitwise.scala 13:51] 
      node T_3221 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 6, 6) @[Bitwise.scala 13:51] 
      node T_3222 = bits(wmask_buffer[io.outer.grant.bits.addr_beat], 7, 7) @[Bitwise.scala 13:51] 
      node T_3223 = bits(T_3215, 0, 0) @[Bitwise.scala 33:15] 
      node T_3226 = mux(T_3223, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3227 = bits(T_3216, 0, 0) @[Bitwise.scala 33:15] 
      node T_3230 = mux(T_3227, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3231 = bits(T_3217, 0, 0) @[Bitwise.scala 33:15] 
      node T_3234 = mux(T_3231, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3235 = bits(T_3218, 0, 0) @[Bitwise.scala 33:15] 
      node T_3238 = mux(T_3235, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3239 = bits(T_3219, 0, 0) @[Bitwise.scala 33:15] 
      node T_3242 = mux(T_3239, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3243 = bits(T_3220, 0, 0) @[Bitwise.scala 33:15] 
      node T_3246 = mux(T_3243, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3247 = bits(T_3221, 0, 0) @[Bitwise.scala 33:15] 
      node T_3250 = mux(T_3247, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3251 = bits(T_3222, 0, 0) @[Bitwise.scala 33:15] 
      node T_3254 = mux(T_3251, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3255 = cat(T_3230, T_3226) @[Cat.scala 20:58] 
      node T_3256 = cat(T_3238, T_3234) @[Cat.scala 20:58] 
      node T_3257 = cat(T_3256, T_3255) @[Cat.scala 20:58] 
      node T_3258 = cat(T_3246, T_3242) @[Cat.scala 20:58] 
      node T_3259 = cat(T_3254, T_3250) @[Cat.scala 20:58] 
      node T_3260 = cat(T_3259, T_3258) @[Cat.scala 20:58] 
      node T_3261 = cat(T_3260, T_3257) @[Cat.scala 20:58] 
      node T_3262 = not(T_3261) @[Trackers.scala 195:27] 
      node T_3263 = and(T_3262, io.outer.grant.bits.data) @[Trackers.scala 195:34] 
      node T_3264 = and(T_3261, data_buffer[io.outer.grant.bits.addr_beat]) @[Trackers.scala 195:55] 
      node T_3265 = or(T_3263, T_3264) @[Trackers.scala 195:46] 
      data_buffer[io.outer.grant.bits.addr_beat] <= T_3265 @[Trackers.scala 195:23] 
      node T_3267 = not(UInt<8>("h00")) @[Trackers.scala 196:27] 
      wmask_buffer[io.outer.grant.bits.addr_beat] <= T_3267 @[Trackers.scala 196:24] 
      skip @[Trackers.scala 172:42] 
    node T_3268 = or(scoreboard_3, ognt_counter.pending) @[Broadcast.scala 194:37] 
    node T_3269 = or(T_3268, vol_ognt_counter.pending) @[Broadcast.scala 194:61] 
    node T_3273 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    node T_3276 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_3278 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_3279 = and(io.inner.grant.bits.is_builtin_type, T_3278) @[Definitions.scala 277:59] 
    node T_3281 = eq(T_3279, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_3282 = and(T_3276, T_3281) @[Definitions.scala 278:89] 
    node T_3283 = and(T_3273, T_3282) @[Counters.scala 123:62] 
    wire T_3291 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3291 is invalid @[Definitions.scala 846:34] 
    T_3291[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3293 = eq(io.inner.grant.bits.g_type, T_3291[0]) @[Util.scala 7:47] 
    node T_3294 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3295 = mux(io.inner.grant.bits.is_builtin_type, T_3293, T_3294) @[Definitions.scala 274:33] 
    node T_3296 = and(UInt<1>("h01"), T_3295) @[Definitions.scala 274:27] 
    node T_3297 = and(T_3283, T_3296) @[Counters.scala 67:47] 
    reg T_3299 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3297 : @[Counter.scala 43:17] 
      node T_3301 = eq(T_3299, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3303 = add(T_3299, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3304 = tail(T_3303, 1) @[Counter.scala 21:22] 
      T_3299 <= T_3304 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3305 = and(T_3297, T_3301) @[Counter.scala 44:20] 
    node T_3306 = mux(T_3296, T_3299, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3307 = mux(T_3296, T_3305, T_3283) @[Counters.scala 69:19] 
    node T_3308 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_3310 = and(T_3308, UInt<1>("h01")) @[Counters.scala 124:64] 
    node T_3312 = and(T_3310, UInt<1>("h00")) @[Counters.scala 67:47] 
    reg T_3314 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3312 : @[Counter.scala 43:17] 
      node T_3316 = eq(T_3314, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3318 = add(T_3314, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3319 = tail(T_3318, 1) @[Counter.scala 21:22] 
      T_3314 <= T_3319 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3320 = and(T_3312, T_3316) @[Counter.scala 44:20] 
    node T_3321 = mux(UInt<1>("h00"), T_3314, UInt<1>("h00")) @[Counters.scala 68:18] 
    node T_3322 = mux(UInt<1>("h00"), T_3320, T_3310) @[Counters.scala 69:19] 
    reg T_3324 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_3326 = eq(T_3322, UInt<1>("h00")) @[Counters.scala 33:17] 
    node T_3327 = and(T_3307, T_3326) @[Counters.scala 33:14] 
    when T_3327 : @[Counters.scala 33:24] 
      node T_3329 = add(T_3324, UInt<1>("h01")) @[Counters.scala 33:37] 
      node T_3330 = tail(T_3329, 1) @[Counters.scala 33:37] 
      T_3324 <= T_3330 @[Counters.scala 33:30] 
      skip @[Counters.scala 33:24] 
    node T_3332 = eq(T_3307, UInt<1>("h00")) @[Counters.scala 34:19] 
    node T_3333 = and(T_3322, T_3332) @[Counters.scala 34:16] 
    when T_3333 : @[Counters.scala 34:24] 
      node T_3335 = sub(T_3324, UInt<1>("h01")) @[Counters.scala 34:37] 
      node T_3336 = tail(T_3335, 1) @[Counters.scala 34:37] 
      T_3324 <= T_3336 @[Counters.scala 34:30] 
      skip @[Counters.scala 34:24] 
    node T_3338 = gt(T_3324, UInt<1>("h00")) @[Counters.scala 126:27] 
    ifin_counter.pending <= T_3338 @[Counters.scala 126:20] 
    ifin_counter.up.idx <= T_3306 @[Counters.scala 127:19] 
    ifin_counter.up.done <= T_3307 @[Counters.scala 128:20] 
    ifin_counter.down.idx <= T_3321 @[Counters.scala 129:21] 
    ifin_counter.down.done <= T_3322 @[Counters.scala 130:22] 
    node T_3339 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3340 = and(T_3339, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3341 = and(T_3340, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3343 = eq(T_3341, UInt<1>("h00")) @[Trackers.scala 525:10] 
    when T_3343 : @[Trackers.scala 525:31] 
      node T_3345 = and(io.inner.release.ready, io.inner.release.valid) @[Decoupled.scala 16:42] 
      node T_3346 = eq(io.inner.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
      node T_3347 = eq(io.inner.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
      node T_3348 = eq(io.inner.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
      node T_3349 = or(T_3346, T_3347) @[Util.scala 7:62] 
      node T_3350 = or(T_3349, T_3348) @[Util.scala 7:62] 
      node T_3351 = and(T_3345, T_3350) @[Trackers.scala 101:37] 
      node T_3352 = and(T_3351, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3353 = bits(T_3352, 0, 0) @[Bitwise.scala 33:15] 
      node T_3356 = mux(T_3353, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3358 = dshl(UInt<1>("h01"), io.inner.release.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3359 = and(T_3356, T_3358) @[Trackers.scala 89:31] 
      node T_3360 = or(pending_ignt_data, T_3359) @[Trackers.scala 526:46] 
      node T_3362 = and(io.outer.grant.ready, io.outer.grant.valid) @[Decoupled.scala 16:42] 
      wire T_3370 : UInt<3>[2] @[Definitions.scala 845:26] 
      T_3370 is invalid @[Definitions.scala 845:26] 
      T_3370[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
      T_3370[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
      node T_3372 = eq(io.outer.grant.bits.g_type, T_3370[0]) @[Util.scala 7:47] 
      node T_3373 = eq(io.outer.grant.bits.g_type, T_3370[1]) @[Util.scala 7:47] 
      node T_3374 = or(T_3372, T_3373) @[Util.scala 7:62] 
      node T_3375 = eq(io.outer.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
      node T_3376 = mux(io.outer.grant.bits.is_builtin_type, T_3374, T_3375) @[Definitions.scala 270:42] 
      node T_3377 = and(T_3362, T_3376) @[Trackers.scala 101:37] 
      node T_3378 = and(T_3377, UInt<1>("h01")) @[Trackers.scala 101:58] 
      node T_3379 = bits(T_3378, 0, 0) @[Bitwise.scala 33:15] 
      node T_3382 = mux(T_3379, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3384 = dshl(UInt<1>("h01"), io.outer.grant.bits.addr_beat) @[OneHot.scala 44:15] 
      node T_3385 = and(T_3382, T_3384) @[Trackers.scala 89:31] 
      node T_3386 = or(T_3360, T_3385) @[Trackers.scala 527:77] 
      node T_3387 = or(T_3386, UInt<1>("h00")) @[Trackers.scala 528:75] 
      pending_ignt_data <= T_3387 @[Trackers.scala 526:25] 
      skip @[Trackers.scala 525:31] 
    node T_3388 = eq(state, UInt<4>("h00")) @[Trackers.scala 540:33] 
    node T_3389 = eq(state, UInt<4>("h01")) @[Trackers.scala 541:33] 
    node T_3390 = or(T_3388, T_3389) @[Trackers.scala 540:44] 
    node T_3392 = neq(pending_put_data, UInt<1>("h00")) @[Trackers.scala 542:44] 
    node T_3393 = or(T_3390, T_3392) @[Trackers.scala 541:49] 
    node T_3395 = eq(T_3393, UInt<1>("h00")) @[Trackers.scala 540:25] 
    node T_3412 = eq(UInt<3>("h06"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3413 = mux(T_3412, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_3414 = eq(UInt<3>("h05"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3415 = mux(T_3414, UInt<3>("h01"), T_3413) @[Mux.scala 46:16] 
    node T_3416 = eq(UInt<3>("h04"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3417 = mux(T_3416, UInt<3>("h04"), T_3415) @[Mux.scala 46:16] 
    node T_3418 = eq(UInt<3>("h03"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3419 = mux(T_3418, UInt<3>("h03"), T_3417) @[Mux.scala 46:16] 
    node T_3420 = eq(UInt<3>("h02"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3421 = mux(T_3420, UInt<3>("h03"), T_3419) @[Mux.scala 46:16] 
    node T_3422 = eq(UInt<3>("h01"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3423 = mux(T_3422, UInt<3>("h05"), T_3421) @[Mux.scala 46:16] 
    node T_3424 = eq(UInt<3>("h00"), ignt_q.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_3425 = mux(T_3424, UInt<3>("h04"), T_3423) @[Mux.scala 46:16] 
    node T_3426 = mux(ignt_q.io.deq.bits.is_builtin_type, T_3425, UInt<1>("h00")) @[Policies.scala 301:8] 
    wire T_3455 : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>} @[Definitions.scala 875:19] 
    T_3455 is invalid @[Definitions.scala 875:19] 
    T_3455.client_id <= ignt_q.io.deq.bits.client_id @[Definitions.scala 876:19] 
    T_3455.is_builtin_type <= ignt_q.io.deq.bits.is_builtin_type @[Definitions.scala 877:25] 
    T_3455.g_type <= T_3426 @[Definitions.scala 878:16] 
    T_3455.client_xact_id <= ignt_q.io.deq.bits.client_xact_id @[Definitions.scala 879:24] 
    T_3455.manager_xact_id <= UInt<3>("h07") @[Definitions.scala 880:25] 
    T_3455.addr_beat <= ignt_q.io.deq.bits.addr_beat @[Definitions.scala 881:19] 
    T_3455.data <= data_buffer[ignt_data_idx] @[Definitions.scala 882:14] 
    node T_3483 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_3491 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_3491 is invalid @[Definitions.scala 846:34] 
    T_3491[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_3493 = eq(io.inner.grant.bits.g_type, T_3491[0]) @[Util.scala 7:47] 
    node T_3494 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_3495 = mux(io.inner.grant.bits.is_builtin_type, T_3493, T_3494) @[Definitions.scala 274:33] 
    node T_3496 = and(UInt<1>("h01"), T_3495) @[Definitions.scala 274:27] 
    node T_3497 = and(T_3483, T_3496) @[Counters.scala 67:47] 
    reg T_3499 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_3497 : @[Counter.scala 43:17] 
      node T_3501 = eq(T_3499, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_3503 = add(T_3499, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_3504 = tail(T_3503, 1) @[Counter.scala 21:22] 
      T_3499 <= T_3504 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node T_3505 = and(T_3497, T_3501) @[Counter.scala 44:20] 
    node T_3506 = mux(T_3496, T_3499, ignt_q.io.deq.bits.addr_beat) @[Counters.scala 68:18] 
    node T_3507 = mux(T_3496, T_3505, T_3483) @[Counters.scala 69:19] 
    ignt_data_idx <= T_3506 @[Trackers.scala 551:19] 
    ignt_data_done <= T_3507 @[Trackers.scala 552:20] 
    ignt_q.io.deq.ready <= UInt<1>("h00") @[Trackers.scala 553:25] 
    node T_3510 = eq(vol_ignt_counter.pending, UInt<1>("h00")) @[Trackers.scala 554:10] 
    when T_3510 : @[Trackers.scala 554:37] 
      ignt_q.io.deq.ready <= ignt_data_done @[Trackers.scala 555:27] 
      io.inner.grant.bits <- T_3455 @[Trackers.scala 556:27] 
      io.inner.grant.bits.addr_beat <= ignt_data_idx @[Trackers.scala 557:37] 
      node T_3511 = eq(state, UInt<4>("h07")) @[Trackers.scala 558:19] 
      node T_3512 = and(T_3511, scoreboard_6) @[Trackers.scala 558:30] 
      when T_3512 : @[Trackers.scala 558:47] 
        node T_3514 = eq(T_3269, UInt<1>("h00")) @[Trackers.scala 559:33] 
        wire T_3522 : UInt<3>[2] @[Definitions.scala 845:26] 
        T_3522 is invalid @[Definitions.scala 845:26] 
        T_3522[0] <= UInt<3>("h05") @[Definitions.scala 845:26] 
        T_3522[1] <= UInt<3>("h04") @[Definitions.scala 845:26] 
        node T_3524 = eq(io.inner.grant.bits.g_type, T_3522[0]) @[Util.scala 7:47] 
        node T_3525 = eq(io.inner.grant.bits.g_type, T_3522[1]) @[Util.scala 7:47] 
        node T_3526 = or(T_3524, T_3525) @[Util.scala 7:62] 
        node T_3527 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
        node T_3528 = mux(io.inner.grant.bits.is_builtin_type, T_3526, T_3527) @[Definitions.scala 270:42] 
        node T_3529 = dshr(pending_ignt_data, ignt_data_idx) @[Trackers.scala 562:32] 
        node T_3530 = bits(T_3529, 0, 0) @[Trackers.scala 562:32] 
        node T_3531 = mux(UInt<1>("h01"), T_3530, io.outer.grant.valid) @[Trackers.scala 561:16] 
        node T_3532 = mux(T_3528, T_3531, T_3395) @[Trackers.scala 560:14] 
        node T_3533 = and(T_3514, T_3532) @[Trackers.scala 559:51] 
        io.inner.grant.valid <= T_3533 @[Trackers.scala 559:30] 
        skip @[Trackers.scala 558:47] 
      skip @[Trackers.scala 554:37] 
    node T_3534 = eq(state, UInt<4>("h07")) @[Trackers.scala 569:36] 
    io.inner.finish.ready <= T_3534 @[Trackers.scala 569:27] 
    node T_3535 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3536 = and(T_3535, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3537 = and(T_3536, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    when T_3537 : @[Broadcast.scala 196:28] 
      node T_3539 = not(UInt<1>("h00")) @[Broadcast.scala 70:29] 
      node T_3540 = not(io.incoherent[0]) @[Trackers.scala 383:46] 
      node T_3541 = and(T_3539, T_3540) @[Trackers.scala 383:44] 
      pending_iprbs <= T_3541 @[Trackers.scala 383:21] 
      skip @[Broadcast.scala 196:28] 
    node T_3542 = eq(state, UInt<4>("h00")) @[Trackers.scala 467:40] 
    node T_3543 = and(T_3542, io.alloc.iacq.should) @[Trackers.scala 467:51] 
    node T_3544 = and(T_3543, io.inner.acquire.valid) @[Trackers.scala 467:75] 
    node T_3546 = eq(xact_iacq.client_xact_id, io.inner.acquire.bits.client_xact_id) @[Trackers.scala 462:31] 
    node T_3547 = eq(xact_iacq.client_id, io.inner.acquire.bits.client_id) @[Trackers.scala 463:28] 
    node T_3548 = and(T_3546, T_3547) @[Trackers.scala 462:61] 
    node T_3549 = and(T_3548, scoreboard_6) @[Trackers.scala 463:53] 
    node T_3550 = or(UInt<1>("h00"), T_3549) @[Trackers.scala 468:47] 
    node T_3551 = and(T_3550, io.inner.acquire.valid) @[Trackers.scala 468:66] 
    node T_3552 = or(T_3544, T_3551) @[Broadcast.scala 200:54] 
    node T_3553 = and(io.inner.acquire.ready, io.inner.acquire.valid) @[Decoupled.scala 16:42] 
    wire T_3562 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_3562 is invalid @[Definitions.scala 354:26] 
    T_3562[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_3562[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_3562[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_3564 = eq(io.inner.acquire.bits.a_type, T_3562[0]) @[Util.scala 7:47] 
    node T_3565 = eq(io.inner.acquire.bits.a_type, T_3562[1]) @[Util.scala 7:47] 
    node T_3566 = eq(io.inner.acquire.bits.a_type, T_3562[2]) @[Util.scala 7:47] 
    node T_3567 = or(T_3564, T_3565) @[Util.scala 7:62] 
    node T_3568 = or(T_3567, T_3566) @[Util.scala 7:62] 
    node T_3569 = and(io.inner.acquire.bits.is_builtin_type, T_3568) @[Definitions.scala 228:55] 
    node T_3570 = and(T_3553, T_3569) @[Trackers.scala 183:20] 
    node T_3571 = and(T_3570, T_3552) @[Trackers.scala 183:41] 
    when T_3571 : @[Trackers.scala 183:51] 
      node T_3573 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3574 = and(io.inner.acquire.bits.is_builtin_type, T_3573) @[Definitions.scala 212:54] 
      node T_3596 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3598 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3599 = and(io.inner.acquire.bits.is_builtin_type, T_3598) @[Definitions.scala 212:54] 
      node T_3601 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3602 = and(io.inner.acquire.bits.is_builtin_type, T_3601) @[Definitions.scala 212:54] 
      node T_3603 = or(T_3599, T_3602) @[Definitions.scala 190:56] 
      node T_3604 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3606 = mux(T_3603, T_3604, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3607 = mux(T_3574, T_3596, T_3606) @[Definitions.scala 192:8] 
      node T_3608 = bits(T_3607, 0, 0) @[Bitwise.scala 13:51] 
      node T_3609 = bits(T_3607, 1, 1) @[Bitwise.scala 13:51] 
      node T_3610 = bits(T_3607, 2, 2) @[Bitwise.scala 13:51] 
      node T_3611 = bits(T_3607, 3, 3) @[Bitwise.scala 13:51] 
      node T_3612 = bits(T_3607, 4, 4) @[Bitwise.scala 13:51] 
      node T_3613 = bits(T_3607, 5, 5) @[Bitwise.scala 13:51] 
      node T_3614 = bits(T_3607, 6, 6) @[Bitwise.scala 13:51] 
      node T_3615 = bits(T_3607, 7, 7) @[Bitwise.scala 13:51] 
      node T_3616 = bits(T_3608, 0, 0) @[Bitwise.scala 33:15] 
      node T_3619 = mux(T_3616, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3620 = bits(T_3609, 0, 0) @[Bitwise.scala 33:15] 
      node T_3623 = mux(T_3620, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3624 = bits(T_3610, 0, 0) @[Bitwise.scala 33:15] 
      node T_3627 = mux(T_3624, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3628 = bits(T_3611, 0, 0) @[Bitwise.scala 33:15] 
      node T_3631 = mux(T_3628, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3632 = bits(T_3612, 0, 0) @[Bitwise.scala 33:15] 
      node T_3635 = mux(T_3632, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3636 = bits(T_3613, 0, 0) @[Bitwise.scala 33:15] 
      node T_3639 = mux(T_3636, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3640 = bits(T_3614, 0, 0) @[Bitwise.scala 33:15] 
      node T_3643 = mux(T_3640, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3644 = bits(T_3615, 0, 0) @[Bitwise.scala 33:15] 
      node T_3647 = mux(T_3644, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_3648 = cat(T_3623, T_3619) @[Cat.scala 20:58] 
      node T_3649 = cat(T_3631, T_3627) @[Cat.scala 20:58] 
      node T_3650 = cat(T_3649, T_3648) @[Cat.scala 20:58] 
      node T_3651 = cat(T_3639, T_3635) @[Cat.scala 20:58] 
      node T_3652 = cat(T_3647, T_3643) @[Cat.scala 20:58] 
      node T_3653 = cat(T_3652, T_3651) @[Cat.scala 20:58] 
      node T_3654 = cat(T_3653, T_3650) @[Cat.scala 20:58] 
      node T_3655 = not(T_3654) @[Trackers.scala 186:29] 
      node T_3656 = and(T_3655, data_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 186:35] 
      node T_3657 = and(T_3654, io.inner.acquire.bits.data) @[Trackers.scala 186:64] 
      node T_3658 = or(T_3656, T_3657) @[Trackers.scala 186:56] 
      data_buffer[io.inner.acquire.bits.addr_beat] <= T_3658 @[Trackers.scala 186:25] 
      node T_3660 = eq(io.inner.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_3661 = and(io.inner.acquire.bits.is_builtin_type, T_3660) @[Definitions.scala 212:54] 
      node T_3683 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_3685 = eq(io.inner.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_3686 = and(io.inner.acquire.bits.is_builtin_type, T_3685) @[Definitions.scala 212:54] 
      node T_3688 = eq(io.inner.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_3689 = and(io.inner.acquire.bits.is_builtin_type, T_3688) @[Definitions.scala 212:54] 
      node T_3690 = or(T_3686, T_3689) @[Definitions.scala 190:56] 
      node T_3691 = bits(io.inner.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_3693 = mux(T_3690, T_3691, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_3694 = mux(T_3661, T_3683, T_3693) @[Definitions.scala 192:8] 
      node T_3695 = or(T_3694, wmask_buffer[io.inner.acquire.bits.addr_beat]) @[Trackers.scala 187:45] 
      wmask_buffer[io.inner.acquire.bits.addr_beat] <= T_3695 @[Trackers.scala 187:26] 
      skip @[Trackers.scala 183:51] 
    node T_3697 = or(UInt<1>("h00"), scoreboard_0) @[Trackers.scala 50:60] 
    node T_3698 = or(T_3697, scoreboard_1) @[Trackers.scala 50:60] 
    node T_3699 = or(T_3698, vol_ignt_counter.pending) @[Trackers.scala 50:60] 
    node T_3700 = or(T_3699, scoreboard_3) @[Trackers.scala 50:60] 
    node T_3701 = or(T_3700, vol_ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3702 = or(T_3701, ognt_counter.pending) @[Trackers.scala 50:60] 
    node T_3703 = or(T_3702, scoreboard_6) @[Trackers.scala 50:60] 
    node T_3704 = or(T_3703, ifin_counter.pending) @[Trackers.scala 50:60] 
    node T_3706 = eq(T_3704, UInt<1>("h00")) @[Trackers.scala 50:25] 
    all_pending_done <= T_3706 @[Trackers.scala 50:22] 
    node T_3707 = eq(state, UInt<4>("h07")) @[Trackers.scala 51:16] 
    node T_3708 = and(T_3707, all_pending_done) @[Trackers.scala 51:27] 
    when T_3708 : @[Trackers.scala 51:48] 
      state <= UInt<4>("h00") @[Trackers.scala 52:13] 
      wmask_buffer[0] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[1] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[2] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[3] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[4] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[5] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[6] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      wmask_buffer[7] <= UInt<1>("h00") @[Trackers.scala 200:35] 
      skip @[Trackers.scala 51:48] 
    
  module LockingRRArbiter_5 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1462 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1464 : UInt, clk
    node T_1466 = neq(T_1462, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_1468 = and(UInt<1>("h01"), io.out.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1475 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1475 is invalid @[Definitions.scala 355:35] 
    T_1475[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1477 = eq(io.out.bits.a_type, T_1475[0]) @[Util.scala 7:47] 
    node T_1478 = and(T_1468, T_1477) @[Definitions.scala 231:89] 
    node T_1479 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1480 = and(T_1479, T_1478) @[Arbiter.scala 42:25] 
    when T_1480 : @[Arbiter.scala 42:39] 
      T_1464 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1482 = eq(T_1462, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1484 = add(T_1462, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1485 = tail(T_1484, 1) @[Counter.scala 21:22] 
      T_1462 <= T_1485 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1466 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1464 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1487 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<3>, clk
    when T_1487 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75] 
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75] 
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75] 
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75] 
    node T_1496 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1497 = or(T_1496, validMask_2) @[Arbiter.scala 23:72] 
    node T_1498 = or(T_1497, validMask_3) @[Arbiter.scala 23:72] 
    node T_1499 = or(T_1498, validMask_4) @[Arbiter.scala 23:72] 
    node T_1500 = or(T_1499, validMask_5) @[Arbiter.scala 23:72] 
    node T_1501 = or(T_1500, validMask_6) @[Arbiter.scala 23:72] 
    node T_1502 = or(T_1501, validMask_7) @[Arbiter.scala 23:72] 
    node T_1503 = or(T_1502, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1504 = or(T_1503, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1505 = or(T_1504, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1506 = or(T_1505, io.in[3].valid) @[Arbiter.scala 23:72] 
    node T_1507 = or(T_1506, io.in[4].valid) @[Arbiter.scala 23:72] 
    node T_1508 = or(T_1507, io.in[5].valid) @[Arbiter.scala 23:72] 
    node T_1509 = or(T_1508, io.in[6].valid) @[Arbiter.scala 23:72] 
    node T_1511 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1513 = eq(T_1496, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1515 = eq(T_1497, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1517 = eq(T_1498, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1519 = eq(T_1499, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1521 = eq(T_1500, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1523 = eq(T_1501, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1525 = eq(T_1502, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1527 = eq(T_1503, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1529 = eq(T_1504, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1531 = eq(T_1505, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1533 = eq(T_1506, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1535 = eq(T_1507, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1537 = eq(T_1508, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1539 = eq(T_1509, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1540 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1541 = or(T_1540, T_1525) @[Arbiter.scala 64:50] 
    node T_1542 = and(T_1511, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1543 = or(T_1542, T_1527) @[Arbiter.scala 64:50] 
    node T_1544 = and(T_1513, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1545 = or(T_1544, T_1529) @[Arbiter.scala 64:50] 
    node T_1546 = and(T_1515, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1547 = or(T_1546, T_1531) @[Arbiter.scala 64:50] 
    node T_1548 = and(T_1517, grantMask_4) @[Arbiter.scala 64:34] 
    node T_1549 = or(T_1548, T_1533) @[Arbiter.scala 64:50] 
    node T_1550 = and(T_1519, grantMask_5) @[Arbiter.scala 64:34] 
    node T_1551 = or(T_1550, T_1535) @[Arbiter.scala 64:50] 
    node T_1552 = and(T_1521, grantMask_6) @[Arbiter.scala 64:34] 
    node T_1553 = or(T_1552, T_1537) @[Arbiter.scala 64:50] 
    node T_1554 = and(T_1523, grantMask_7) @[Arbiter.scala 64:34] 
    node T_1555 = or(T_1554, T_1539) @[Arbiter.scala 64:50] 
    node T_1557 = eq(T_1464, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1558 = mux(T_1466, T_1557, T_1541) @[Arbiter.scala 49:22] 
    node T_1559 = and(T_1558, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1559 @[Arbiter.scala 49:16] 
    node T_1561 = eq(T_1464, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1562 = mux(T_1466, T_1561, T_1543) @[Arbiter.scala 49:22] 
    node T_1563 = and(T_1562, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1563 @[Arbiter.scala 49:16] 
    node T_1565 = eq(T_1464, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1566 = mux(T_1466, T_1565, T_1545) @[Arbiter.scala 49:22] 
    node T_1567 = and(T_1566, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1567 @[Arbiter.scala 49:16] 
    node T_1569 = eq(T_1464, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1570 = mux(T_1466, T_1569, T_1547) @[Arbiter.scala 49:22] 
    node T_1571 = and(T_1570, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1571 @[Arbiter.scala 49:16] 
    node T_1573 = eq(T_1464, UInt<3>("h04")) @[Arbiter.scala 49:39] 
    node T_1574 = mux(T_1466, T_1573, T_1549) @[Arbiter.scala 49:22] 
    node T_1575 = and(T_1574, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[4].ready <= T_1575 @[Arbiter.scala 49:16] 
    node T_1577 = eq(T_1464, UInt<3>("h05")) @[Arbiter.scala 49:39] 
    node T_1578 = mux(T_1466, T_1577, T_1551) @[Arbiter.scala 49:22] 
    node T_1579 = and(T_1578, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[5].ready <= T_1579 @[Arbiter.scala 49:16] 
    node T_1581 = eq(T_1464, UInt<3>("h06")) @[Arbiter.scala 49:39] 
    node T_1582 = mux(T_1466, T_1581, T_1553) @[Arbiter.scala 49:22] 
    node T_1583 = and(T_1582, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[6].ready <= T_1583 @[Arbiter.scala 49:16] 
    node T_1585 = eq(T_1464, UInt<3>("h07")) @[Arbiter.scala 49:39] 
    node T_1586 = mux(T_1466, T_1585, T_1555) @[Arbiter.scala 49:22] 
    node T_1587 = and(T_1586, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[7].ready <= T_1587 @[Arbiter.scala 49:16] 
    when io.in[6].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[5].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[4].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[3].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_7 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_6 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_5 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_4 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module LockingRRArbiter_6 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1412 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1414 : UInt, clk
    node T_1416 = neq(T_1412, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_1418 = eq(io.out.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_1419 = eq(io.out.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_1420 = eq(io.out.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_1421 = or(T_1418, T_1419) @[Util.scala 7:62] 
    node T_1422 = or(T_1421, T_1420) @[Util.scala 7:62] 
    node T_1423 = and(UInt<1>("h01"), T_1422) @[Definitions.scala 256:64] 
    node T_1424 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1425 = and(T_1424, T_1423) @[Arbiter.scala 42:25] 
    when T_1425 : @[Arbiter.scala 42:39] 
      T_1414 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1427 = eq(T_1412, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1429 = add(T_1412, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1430 = tail(T_1429, 1) @[Counter.scala 21:22] 
      T_1412 <= T_1430 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1416 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1414 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1432 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<3>, clk
    when T_1432 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75] 
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75] 
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75] 
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75] 
    node T_1441 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1442 = or(T_1441, validMask_2) @[Arbiter.scala 23:72] 
    node T_1443 = or(T_1442, validMask_3) @[Arbiter.scala 23:72] 
    node T_1444 = or(T_1443, validMask_4) @[Arbiter.scala 23:72] 
    node T_1445 = or(T_1444, validMask_5) @[Arbiter.scala 23:72] 
    node T_1446 = or(T_1445, validMask_6) @[Arbiter.scala 23:72] 
    node T_1447 = or(T_1446, validMask_7) @[Arbiter.scala 23:72] 
    node T_1448 = or(T_1447, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1449 = or(T_1448, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1450 = or(T_1449, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1451 = or(T_1450, io.in[3].valid) @[Arbiter.scala 23:72] 
    node T_1452 = or(T_1451, io.in[4].valid) @[Arbiter.scala 23:72] 
    node T_1453 = or(T_1452, io.in[5].valid) @[Arbiter.scala 23:72] 
    node T_1454 = or(T_1453, io.in[6].valid) @[Arbiter.scala 23:72] 
    node T_1456 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1458 = eq(T_1441, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1460 = eq(T_1442, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1462 = eq(T_1443, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1464 = eq(T_1444, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1466 = eq(T_1445, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1468 = eq(T_1446, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1470 = eq(T_1447, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1472 = eq(T_1448, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1474 = eq(T_1449, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1476 = eq(T_1450, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1478 = eq(T_1451, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1480 = eq(T_1452, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1482 = eq(T_1453, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1484 = eq(T_1454, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1485 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1486 = or(T_1485, T_1470) @[Arbiter.scala 64:50] 
    node T_1487 = and(T_1456, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1488 = or(T_1487, T_1472) @[Arbiter.scala 64:50] 
    node T_1489 = and(T_1458, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1490 = or(T_1489, T_1474) @[Arbiter.scala 64:50] 
    node T_1491 = and(T_1460, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1492 = or(T_1491, T_1476) @[Arbiter.scala 64:50] 
    node T_1493 = and(T_1462, grantMask_4) @[Arbiter.scala 64:34] 
    node T_1494 = or(T_1493, T_1478) @[Arbiter.scala 64:50] 
    node T_1495 = and(T_1464, grantMask_5) @[Arbiter.scala 64:34] 
    node T_1496 = or(T_1495, T_1480) @[Arbiter.scala 64:50] 
    node T_1497 = and(T_1466, grantMask_6) @[Arbiter.scala 64:34] 
    node T_1498 = or(T_1497, T_1482) @[Arbiter.scala 64:50] 
    node T_1499 = and(T_1468, grantMask_7) @[Arbiter.scala 64:34] 
    node T_1500 = or(T_1499, T_1484) @[Arbiter.scala 64:50] 
    node T_1502 = eq(T_1414, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1503 = mux(T_1416, T_1502, T_1486) @[Arbiter.scala 49:22] 
    node T_1504 = and(T_1503, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1504 @[Arbiter.scala 49:16] 
    node T_1506 = eq(T_1414, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1507 = mux(T_1416, T_1506, T_1488) @[Arbiter.scala 49:22] 
    node T_1508 = and(T_1507, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1508 @[Arbiter.scala 49:16] 
    node T_1510 = eq(T_1414, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1511 = mux(T_1416, T_1510, T_1490) @[Arbiter.scala 49:22] 
    node T_1512 = and(T_1511, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1512 @[Arbiter.scala 49:16] 
    node T_1514 = eq(T_1414, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1515 = mux(T_1416, T_1514, T_1492) @[Arbiter.scala 49:22] 
    node T_1516 = and(T_1515, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1516 @[Arbiter.scala 49:16] 
    node T_1518 = eq(T_1414, UInt<3>("h04")) @[Arbiter.scala 49:39] 
    node T_1519 = mux(T_1416, T_1518, T_1494) @[Arbiter.scala 49:22] 
    node T_1520 = and(T_1519, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[4].ready <= T_1520 @[Arbiter.scala 49:16] 
    node T_1522 = eq(T_1414, UInt<3>("h05")) @[Arbiter.scala 49:39] 
    node T_1523 = mux(T_1416, T_1522, T_1496) @[Arbiter.scala 49:22] 
    node T_1524 = and(T_1523, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[5].ready <= T_1524 @[Arbiter.scala 49:16] 
    node T_1526 = eq(T_1414, UInt<3>("h06")) @[Arbiter.scala 49:39] 
    node T_1527 = mux(T_1416, T_1526, T_1498) @[Arbiter.scala 49:22] 
    node T_1528 = and(T_1527, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[6].ready <= T_1528 @[Arbiter.scala 49:16] 
    node T_1530 = eq(T_1414, UInt<3>("h07")) @[Arbiter.scala 49:39] 
    node T_1531 = mux(T_1416, T_1530, T_1500) @[Arbiter.scala 49:22] 
    node T_1532 = and(T_1531, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[7].ready <= T_1532 @[Arbiter.scala 49:16] 
    when io.in[6].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[5].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[4].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[3].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_7 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_6 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_5 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_4 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module ClientTileLinkIOArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}[8], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst LockingRRArbiter_5_1 of LockingRRArbiter_5 @[Arbiters.scala 41:21] 
    LockingRRArbiter_5_1.io is invalid
    LockingRRArbiter_5_1.clk <= clk
    LockingRRArbiter_5_1.reset <= reset
    LockingRRArbiter_5_1.io.in[0].valid <= io.in[0].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[0].bits <- io.in[0].acquire.bits @[Arbiters.scala 44:16] 
    node T_12220 = cat(io.in[0].acquire.bits.client_xact_id, UInt<3>("h00")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[0].bits.client_xact_id <= T_12220 @[Arbiters.scala 45:31] 
    io.in[0].acquire.ready <= LockingRRArbiter_5_1.io.in[0].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[1].valid <= io.in[1].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[1].bits <- io.in[1].acquire.bits @[Arbiters.scala 44:16] 
    node T_12222 = cat(io.in[1].acquire.bits.client_xact_id, UInt<3>("h01")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[1].bits.client_xact_id <= T_12222 @[Arbiters.scala 45:31] 
    io.in[1].acquire.ready <= LockingRRArbiter_5_1.io.in[1].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[2].valid <= io.in[2].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[2].bits <- io.in[2].acquire.bits @[Arbiters.scala 44:16] 
    node T_12224 = cat(io.in[2].acquire.bits.client_xact_id, UInt<3>("h02")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[2].bits.client_xact_id <= T_12224 @[Arbiters.scala 45:31] 
    io.in[2].acquire.ready <= LockingRRArbiter_5_1.io.in[2].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[3].valid <= io.in[3].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[3].bits <- io.in[3].acquire.bits @[Arbiters.scala 44:16] 
    node T_12226 = cat(io.in[3].acquire.bits.client_xact_id, UInt<3>("h03")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[3].bits.client_xact_id <= T_12226 @[Arbiters.scala 45:31] 
    io.in[3].acquire.ready <= LockingRRArbiter_5_1.io.in[3].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[4].valid <= io.in[4].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[4].bits <- io.in[4].acquire.bits @[Arbiters.scala 44:16] 
    node T_12228 = cat(io.in[4].acquire.bits.client_xact_id, UInt<3>("h04")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[4].bits.client_xact_id <= T_12228 @[Arbiters.scala 45:31] 
    io.in[4].acquire.ready <= LockingRRArbiter_5_1.io.in[4].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[5].valid <= io.in[5].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[5].bits <- io.in[5].acquire.bits @[Arbiters.scala 44:16] 
    node T_12230 = cat(io.in[5].acquire.bits.client_xact_id, UInt<3>("h05")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[5].bits.client_xact_id <= T_12230 @[Arbiters.scala 45:31] 
    io.in[5].acquire.ready <= LockingRRArbiter_5_1.io.in[5].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[6].valid <= io.in[6].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[6].bits <- io.in[6].acquire.bits @[Arbiters.scala 44:16] 
    node T_12232 = cat(io.in[6].acquire.bits.client_xact_id, UInt<3>("h06")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[6].bits.client_xact_id <= T_12232 @[Arbiters.scala 45:31] 
    io.in[6].acquire.ready <= LockingRRArbiter_5_1.io.in[6].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_5_1.io.in[7].valid <= io.in[7].acquire.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_5_1.io.in[7].bits <- io.in[7].acquire.bits @[Arbiters.scala 44:16] 
    node T_12234 = cat(io.in[7].acquire.bits.client_xact_id, UInt<3>("h07")) @[Cat.scala 20:58] 
    LockingRRArbiter_5_1.io.in[7].bits.client_xact_id <= T_12234 @[Arbiters.scala 45:31] 
    io.in[7].acquire.ready <= LockingRRArbiter_5_1.io.in[7].ready @[Arbiters.scala 46:17] 
    io.out.acquire <- LockingRRArbiter_5_1.io.out @[Arbiters.scala 48:10] 
    inst LockingRRArbiter_6_1 of LockingRRArbiter_6 @[Arbiters.scala 41:21] 
    LockingRRArbiter_6_1.io is invalid
    LockingRRArbiter_6_1.clk <= clk
    LockingRRArbiter_6_1.reset <= reset
    LockingRRArbiter_6_1.io.in[0].valid <= io.in[0].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[0].bits <- io.in[0].release.bits @[Arbiters.scala 44:16] 
    node T_12236 = cat(io.in[0].release.bits.client_xact_id, UInt<3>("h00")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[0].bits.client_xact_id <= T_12236 @[Arbiters.scala 45:31] 
    io.in[0].release.ready <= LockingRRArbiter_6_1.io.in[0].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[1].valid <= io.in[1].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[1].bits <- io.in[1].release.bits @[Arbiters.scala 44:16] 
    node T_12238 = cat(io.in[1].release.bits.client_xact_id, UInt<3>("h01")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[1].bits.client_xact_id <= T_12238 @[Arbiters.scala 45:31] 
    io.in[1].release.ready <= LockingRRArbiter_6_1.io.in[1].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[2].valid <= io.in[2].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[2].bits <- io.in[2].release.bits @[Arbiters.scala 44:16] 
    node T_12240 = cat(io.in[2].release.bits.client_xact_id, UInt<3>("h02")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[2].bits.client_xact_id <= T_12240 @[Arbiters.scala 45:31] 
    io.in[2].release.ready <= LockingRRArbiter_6_1.io.in[2].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[3].valid <= io.in[3].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[3].bits <- io.in[3].release.bits @[Arbiters.scala 44:16] 
    node T_12242 = cat(io.in[3].release.bits.client_xact_id, UInt<3>("h03")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[3].bits.client_xact_id <= T_12242 @[Arbiters.scala 45:31] 
    io.in[3].release.ready <= LockingRRArbiter_6_1.io.in[3].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[4].valid <= io.in[4].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[4].bits <- io.in[4].release.bits @[Arbiters.scala 44:16] 
    node T_12244 = cat(io.in[4].release.bits.client_xact_id, UInt<3>("h04")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[4].bits.client_xact_id <= T_12244 @[Arbiters.scala 45:31] 
    io.in[4].release.ready <= LockingRRArbiter_6_1.io.in[4].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[5].valid <= io.in[5].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[5].bits <- io.in[5].release.bits @[Arbiters.scala 44:16] 
    node T_12246 = cat(io.in[5].release.bits.client_xact_id, UInt<3>("h05")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[5].bits.client_xact_id <= T_12246 @[Arbiters.scala 45:31] 
    io.in[5].release.ready <= LockingRRArbiter_6_1.io.in[5].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[6].valid <= io.in[6].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[6].bits <- io.in[6].release.bits @[Arbiters.scala 44:16] 
    node T_12248 = cat(io.in[6].release.bits.client_xact_id, UInt<3>("h06")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[6].bits.client_xact_id <= T_12248 @[Arbiters.scala 45:31] 
    io.in[6].release.ready <= LockingRRArbiter_6_1.io.in[6].ready @[Arbiters.scala 46:17] 
    LockingRRArbiter_6_1.io.in[7].valid <= io.in[7].release.valid @[Arbiters.scala 43:17] 
    LockingRRArbiter_6_1.io.in[7].bits <- io.in[7].release.bits @[Arbiters.scala 44:16] 
    node T_12250 = cat(io.in[7].release.bits.client_xact_id, UInt<3>("h07")) @[Cat.scala 20:58] 
    LockingRRArbiter_6_1.io.in[7].bits.client_xact_id <= T_12250 @[Arbiters.scala 45:31] 
    io.in[7].release.ready <= LockingRRArbiter_6_1.io.in[7].ready @[Arbiters.scala 46:17] 
    io.out.release <- LockingRRArbiter_6_1.io.out @[Arbiters.scala 48:10] 
    io.in[0].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[1].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[2].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[3].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[4].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[5].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[6].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[7].probe.valid <= io.out.probe.valid @[Arbiters.scala 96:23] 
    io.in[0].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[1].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[2].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[3].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[4].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[5].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[6].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    io.in[7].probe.bits <- io.out.probe.bits @[Arbiters.scala 97:22] 
    node T_12251 = and(io.in[0].probe.ready, io.in[1].probe.ready) @[Arbiters.scala 98:45] 
    node T_12252 = and(T_12251, io.in[2].probe.ready) @[Arbiters.scala 98:45] 
    node T_12253 = and(T_12252, io.in[3].probe.ready) @[Arbiters.scala 98:45] 
    node T_12254 = and(T_12253, io.in[4].probe.ready) @[Arbiters.scala 98:45] 
    node T_12255 = and(T_12254, io.in[5].probe.ready) @[Arbiters.scala 98:45] 
    node T_12256 = and(T_12255, io.in[6].probe.ready) @[Arbiters.scala 98:45] 
    node T_12257 = and(T_12256, io.in[7].probe.ready) @[Arbiters.scala 98:45] 
    io.out.probe.ready <= T_12257 @[Arbiters.scala 98:16] 
    io.out.grant.ready <= UInt<1>("h00") @[Arbiters.scala 83:16] 
    io.in[0].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12260 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12262 = eq(T_12260, UInt<1>("h00")) @[Arbiters.scala 86:31] 
    when T_12262 : @[Arbiters.scala 86:44] 
      io.in[0].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[0].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[0].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12263 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[0].grant.bits.client_xact_id <= T_12263 @[Arbiters.scala 91:35] 
    io.in[1].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12265 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12267 = eq(T_12265, UInt<1>("h01")) @[Arbiters.scala 86:31] 
    when T_12267 : @[Arbiters.scala 86:44] 
      io.in[1].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[1].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[1].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12268 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[1].grant.bits.client_xact_id <= T_12268 @[Arbiters.scala 91:35] 
    io.in[2].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12270 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12272 = eq(T_12270, UInt<2>("h02")) @[Arbiters.scala 86:31] 
    when T_12272 : @[Arbiters.scala 86:44] 
      io.in[2].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[2].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[2].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12273 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[2].grant.bits.client_xact_id <= T_12273 @[Arbiters.scala 91:35] 
    io.in[3].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12275 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12277 = eq(T_12275, UInt<2>("h03")) @[Arbiters.scala 86:31] 
    when T_12277 : @[Arbiters.scala 86:44] 
      io.in[3].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[3].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[3].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12278 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[3].grant.bits.client_xact_id <= T_12278 @[Arbiters.scala 91:35] 
    io.in[4].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12280 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12282 = eq(T_12280, UInt<3>("h04")) @[Arbiters.scala 86:31] 
    when T_12282 : @[Arbiters.scala 86:44] 
      io.in[4].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[4].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[4].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12283 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[4].grant.bits.client_xact_id <= T_12283 @[Arbiters.scala 91:35] 
    io.in[5].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12285 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12287 = eq(T_12285, UInt<3>("h05")) @[Arbiters.scala 86:31] 
    when T_12287 : @[Arbiters.scala 86:44] 
      io.in[5].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[5].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[5].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12288 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[5].grant.bits.client_xact_id <= T_12288 @[Arbiters.scala 91:35] 
    io.in[6].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12290 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12292 = eq(T_12290, UInt<3>("h06")) @[Arbiters.scala 86:31] 
    when T_12292 : @[Arbiters.scala 86:44] 
      io.in[6].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[6].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[6].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12293 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[6].grant.bits.client_xact_id <= T_12293 @[Arbiters.scala 91:35] 
    io.in[7].grant.valid <= UInt<1>("h00") @[Arbiters.scala 85:21] 
    node T_12295 = bits(io.out.grant.bits.client_xact_id, 2, 0) @[Arbiters.scala 147:59] 
    node T_12297 = eq(T_12295, UInt<3>("h07")) @[Arbiters.scala 86:31] 
    when T_12297 : @[Arbiters.scala 86:44] 
      io.in[7].grant.valid <= io.out.grant.valid @[Arbiters.scala 87:23] 
      io.out.grant.ready <= io.in[7].grant.ready @[Arbiters.scala 88:20] 
      skip @[Arbiters.scala 86:44] 
    io.in[7].grant.bits <- io.out.grant.bits @[Arbiters.scala 90:20] 
    node T_12298 = shr(io.out.grant.bits.client_xact_id, 3) @[Arbiters.scala 143:25] 
    io.in[7].grant.bits.client_xact_id <= T_12298 @[Arbiters.scala 91:35] 
    
  module LockingRRArbiter_7 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1262 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1264 : UInt, clk
    node T_1266 = neq(T_1262, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_1268 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1269 = and(T_1268, UInt<1>("h00")) @[Arbiter.scala 42:25] 
    when T_1269 : @[Arbiter.scala 42:39] 
      T_1264 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1271 = eq(T_1262, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1273 = add(T_1262, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1274 = tail(T_1273, 1) @[Counter.scala 21:22] 
      T_1262 <= T_1274 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1266 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1264 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1276 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<3>, clk
    when T_1276 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75] 
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75] 
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75] 
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75] 
    node T_1285 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1286 = or(T_1285, validMask_2) @[Arbiter.scala 23:72] 
    node T_1287 = or(T_1286, validMask_3) @[Arbiter.scala 23:72] 
    node T_1288 = or(T_1287, validMask_4) @[Arbiter.scala 23:72] 
    node T_1289 = or(T_1288, validMask_5) @[Arbiter.scala 23:72] 
    node T_1290 = or(T_1289, validMask_6) @[Arbiter.scala 23:72] 
    node T_1291 = or(T_1290, validMask_7) @[Arbiter.scala 23:72] 
    node T_1292 = or(T_1291, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1293 = or(T_1292, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1294 = or(T_1293, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1295 = or(T_1294, io.in[3].valid) @[Arbiter.scala 23:72] 
    node T_1296 = or(T_1295, io.in[4].valid) @[Arbiter.scala 23:72] 
    node T_1297 = or(T_1296, io.in[5].valid) @[Arbiter.scala 23:72] 
    node T_1298 = or(T_1297, io.in[6].valid) @[Arbiter.scala 23:72] 
    node T_1300 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1302 = eq(T_1285, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1304 = eq(T_1286, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1306 = eq(T_1287, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1308 = eq(T_1288, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1310 = eq(T_1289, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1312 = eq(T_1290, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1314 = eq(T_1291, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1316 = eq(T_1292, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1318 = eq(T_1293, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1320 = eq(T_1294, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1322 = eq(T_1295, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1324 = eq(T_1296, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1326 = eq(T_1297, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1328 = eq(T_1298, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1329 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1330 = or(T_1329, T_1314) @[Arbiter.scala 64:50] 
    node T_1331 = and(T_1300, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1332 = or(T_1331, T_1316) @[Arbiter.scala 64:50] 
    node T_1333 = and(T_1302, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1334 = or(T_1333, T_1318) @[Arbiter.scala 64:50] 
    node T_1335 = and(T_1304, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1336 = or(T_1335, T_1320) @[Arbiter.scala 64:50] 
    node T_1337 = and(T_1306, grantMask_4) @[Arbiter.scala 64:34] 
    node T_1338 = or(T_1337, T_1322) @[Arbiter.scala 64:50] 
    node T_1339 = and(T_1308, grantMask_5) @[Arbiter.scala 64:34] 
    node T_1340 = or(T_1339, T_1324) @[Arbiter.scala 64:50] 
    node T_1341 = and(T_1310, grantMask_6) @[Arbiter.scala 64:34] 
    node T_1342 = or(T_1341, T_1326) @[Arbiter.scala 64:50] 
    node T_1343 = and(T_1312, grantMask_7) @[Arbiter.scala 64:34] 
    node T_1344 = or(T_1343, T_1328) @[Arbiter.scala 64:50] 
    node T_1346 = eq(T_1264, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1347 = mux(T_1266, T_1346, T_1330) @[Arbiter.scala 49:22] 
    node T_1348 = and(T_1347, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1348 @[Arbiter.scala 49:16] 
    node T_1350 = eq(T_1264, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1351 = mux(T_1266, T_1350, T_1332) @[Arbiter.scala 49:22] 
    node T_1352 = and(T_1351, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1352 @[Arbiter.scala 49:16] 
    node T_1354 = eq(T_1264, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1355 = mux(T_1266, T_1354, T_1334) @[Arbiter.scala 49:22] 
    node T_1356 = and(T_1355, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1356 @[Arbiter.scala 49:16] 
    node T_1358 = eq(T_1264, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1359 = mux(T_1266, T_1358, T_1336) @[Arbiter.scala 49:22] 
    node T_1360 = and(T_1359, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1360 @[Arbiter.scala 49:16] 
    node T_1362 = eq(T_1264, UInt<3>("h04")) @[Arbiter.scala 49:39] 
    node T_1363 = mux(T_1266, T_1362, T_1338) @[Arbiter.scala 49:22] 
    node T_1364 = and(T_1363, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[4].ready <= T_1364 @[Arbiter.scala 49:16] 
    node T_1366 = eq(T_1264, UInt<3>("h05")) @[Arbiter.scala 49:39] 
    node T_1367 = mux(T_1266, T_1366, T_1340) @[Arbiter.scala 49:22] 
    node T_1368 = and(T_1367, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[5].ready <= T_1368 @[Arbiter.scala 49:16] 
    node T_1370 = eq(T_1264, UInt<3>("h06")) @[Arbiter.scala 49:39] 
    node T_1371 = mux(T_1266, T_1370, T_1342) @[Arbiter.scala 49:22] 
    node T_1372 = and(T_1371, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[6].ready <= T_1372 @[Arbiter.scala 49:16] 
    node T_1374 = eq(T_1264, UInt<3>("h07")) @[Arbiter.scala 49:39] 
    node T_1375 = mux(T_1266, T_1374, T_1344) @[Arbiter.scala 49:22] 
    node T_1376 = and(T_1375, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[7].ready <= T_1376 @[Arbiter.scala 49:16] 
    when io.in[6].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[5].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[4].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[3].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_7 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_6 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_5 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_4 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module LockingRRArbiter_8 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}[8], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, chosen : UInt<3>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<3>("h07")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_1462 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_1464 : UInt, clk
    node T_1466 = neq(T_1462, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    wire T_1474 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1474 is invalid @[Definitions.scala 846:34] 
    T_1474[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1476 = eq(io.out.bits.g_type, T_1474[0]) @[Util.scala 7:47] 
    node T_1477 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1478 = mux(io.out.bits.is_builtin_type, T_1476, T_1477) @[Definitions.scala 274:33] 
    node T_1479 = and(UInt<1>("h01"), T_1478) @[Definitions.scala 274:27] 
    node T_1480 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_1481 = and(T_1480, T_1479) @[Arbiter.scala 42:25] 
    when T_1481 : @[Arbiter.scala 42:39] 
      T_1464 <= io.chosen @[Arbiter.scala 43:15] 
      node T_1483 = eq(T_1462, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1485 = add(T_1462, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1486 = tail(T_1485, 1) @[Counter.scala 21:22] 
      T_1462 <= T_1486 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_1466 : @[Arbiter.scala 47:19] 
      io.chosen <= T_1464 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_1488 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<3>, clk
    when T_1488 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_4 = gt(UInt<3>("h04"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_5 = gt(UInt<3>("h05"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_6 = gt(UInt<3>("h06"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_7 = gt(UInt<3>("h07"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node validMask_4 = and(io.in[4].valid, grantMask_4) @[Arbiter.scala 60:75] 
    node validMask_5 = and(io.in[5].valid, grantMask_5) @[Arbiter.scala 60:75] 
    node validMask_6 = and(io.in[6].valid, grantMask_6) @[Arbiter.scala 60:75] 
    node validMask_7 = and(io.in[7].valid, grantMask_7) @[Arbiter.scala 60:75] 
    node T_1497 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_1498 = or(T_1497, validMask_2) @[Arbiter.scala 23:72] 
    node T_1499 = or(T_1498, validMask_3) @[Arbiter.scala 23:72] 
    node T_1500 = or(T_1499, validMask_4) @[Arbiter.scala 23:72] 
    node T_1501 = or(T_1500, validMask_5) @[Arbiter.scala 23:72] 
    node T_1502 = or(T_1501, validMask_6) @[Arbiter.scala 23:72] 
    node T_1503 = or(T_1502, validMask_7) @[Arbiter.scala 23:72] 
    node T_1504 = or(T_1503, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_1505 = or(T_1504, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_1506 = or(T_1505, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_1507 = or(T_1506, io.in[3].valid) @[Arbiter.scala 23:72] 
    node T_1508 = or(T_1507, io.in[4].valid) @[Arbiter.scala 23:72] 
    node T_1509 = or(T_1508, io.in[5].valid) @[Arbiter.scala 23:72] 
    node T_1510 = or(T_1509, io.in[6].valid) @[Arbiter.scala 23:72] 
    node T_1512 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1514 = eq(T_1497, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1516 = eq(T_1498, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1518 = eq(T_1499, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1520 = eq(T_1500, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1522 = eq(T_1501, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1524 = eq(T_1502, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1526 = eq(T_1503, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1528 = eq(T_1504, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1530 = eq(T_1505, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1532 = eq(T_1506, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1534 = eq(T_1507, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1536 = eq(T_1508, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1538 = eq(T_1509, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1540 = eq(T_1510, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_1541 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_1542 = or(T_1541, T_1526) @[Arbiter.scala 64:50] 
    node T_1543 = and(T_1512, grantMask_1) @[Arbiter.scala 64:34] 
    node T_1544 = or(T_1543, T_1528) @[Arbiter.scala 64:50] 
    node T_1545 = and(T_1514, grantMask_2) @[Arbiter.scala 64:34] 
    node T_1546 = or(T_1545, T_1530) @[Arbiter.scala 64:50] 
    node T_1547 = and(T_1516, grantMask_3) @[Arbiter.scala 64:34] 
    node T_1548 = or(T_1547, T_1532) @[Arbiter.scala 64:50] 
    node T_1549 = and(T_1518, grantMask_4) @[Arbiter.scala 64:34] 
    node T_1550 = or(T_1549, T_1534) @[Arbiter.scala 64:50] 
    node T_1551 = and(T_1520, grantMask_5) @[Arbiter.scala 64:34] 
    node T_1552 = or(T_1551, T_1536) @[Arbiter.scala 64:50] 
    node T_1553 = and(T_1522, grantMask_6) @[Arbiter.scala 64:34] 
    node T_1554 = or(T_1553, T_1538) @[Arbiter.scala 64:50] 
    node T_1555 = and(T_1524, grantMask_7) @[Arbiter.scala 64:34] 
    node T_1556 = or(T_1555, T_1540) @[Arbiter.scala 64:50] 
    node T_1558 = eq(T_1464, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_1559 = mux(T_1466, T_1558, T_1542) @[Arbiter.scala 49:22] 
    node T_1560 = and(T_1559, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_1560 @[Arbiter.scala 49:16] 
    node T_1562 = eq(T_1464, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_1563 = mux(T_1466, T_1562, T_1544) @[Arbiter.scala 49:22] 
    node T_1564 = and(T_1563, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_1564 @[Arbiter.scala 49:16] 
    node T_1566 = eq(T_1464, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_1567 = mux(T_1466, T_1566, T_1546) @[Arbiter.scala 49:22] 
    node T_1568 = and(T_1567, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_1568 @[Arbiter.scala 49:16] 
    node T_1570 = eq(T_1464, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_1571 = mux(T_1466, T_1570, T_1548) @[Arbiter.scala 49:22] 
    node T_1572 = and(T_1571, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_1572 @[Arbiter.scala 49:16] 
    node T_1574 = eq(T_1464, UInt<3>("h04")) @[Arbiter.scala 49:39] 
    node T_1575 = mux(T_1466, T_1574, T_1550) @[Arbiter.scala 49:22] 
    node T_1576 = and(T_1575, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[4].ready <= T_1576 @[Arbiter.scala 49:16] 
    node T_1578 = eq(T_1464, UInt<3>("h05")) @[Arbiter.scala 49:39] 
    node T_1579 = mux(T_1466, T_1578, T_1552) @[Arbiter.scala 49:22] 
    node T_1580 = and(T_1579, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[5].ready <= T_1580 @[Arbiter.scala 49:16] 
    node T_1582 = eq(T_1464, UInt<3>("h06")) @[Arbiter.scala 49:39] 
    node T_1583 = mux(T_1466, T_1582, T_1554) @[Arbiter.scala 49:22] 
    node T_1584 = and(T_1583, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[6].ready <= T_1584 @[Arbiter.scala 49:16] 
    node T_1586 = eq(T_1464, UInt<3>("h07")) @[Arbiter.scala 49:39] 
    node T_1587 = mux(T_1466, T_1586, T_1556) @[Arbiter.scala 49:22] 
    node T_1588 = and(T_1587, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[7].ready <= T_1588 @[Arbiter.scala 49:16] 
    when io.in[6].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h06") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[5].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h05") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[4].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<3>("h04") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[3].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h03") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_7 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h07") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_6 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h06") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_5 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h05") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_4 : @[Arbiter.scala 71:25] 
      choice <= UInt<3>("h04") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module L2BroadcastHub : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    inst trackerList_0 of BufferedBroadcastVoluntaryReleaseTracker @[Broadcast.scala 17:13] 
    trackerList_0.io is invalid
    trackerList_0.clk <= clk
    trackerList_0.reset <= reset
    inst trackerList_1 of BufferedBroadcastAcquireTracker @[Broadcast.scala 20:13] 
    trackerList_1.io is invalid
    trackerList_1.clk <= clk
    trackerList_1.reset <= reset
    inst trackerList_2 of BufferedBroadcastAcquireTracker_1 @[Broadcast.scala 20:13] 
    trackerList_2.io is invalid
    trackerList_2.clk <= clk
    trackerList_2.reset <= reset
    inst trackerList_3 of BufferedBroadcastAcquireTracker_2 @[Broadcast.scala 20:13] 
    trackerList_3.io is invalid
    trackerList_3.clk <= clk
    trackerList_3.reset <= reset
    inst trackerList_4 of BufferedBroadcastAcquireTracker_3 @[Broadcast.scala 20:13] 
    trackerList_4.io is invalid
    trackerList_4.clk <= clk
    trackerList_4.reset <= reset
    inst trackerList_5 of BufferedBroadcastAcquireTracker_4 @[Broadcast.scala 20:13] 
    trackerList_5.io is invalid
    trackerList_5.clk <= clk
    trackerList_5.reset <= reset
    inst trackerList_6 of BufferedBroadcastAcquireTracker_5 @[Broadcast.scala 20:13] 
    trackerList_6.io is invalid
    trackerList_6.clk <= clk
    trackerList_6.reset <= reset
    inst trackerList_7 of BufferedBroadcastAcquireTracker_6 @[Broadcast.scala 20:13] 
    trackerList_7.io is invalid
    trackerList_7.clk <= clk
    trackerList_7.reset <= reset
    trackerList_0.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_1.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_2.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_3.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_4.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_5.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_6.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    trackerList_7.io.incoherent <= io.incoherent @[Broadcast.scala 24:48] 
    inst outer_arb of ClientTileLinkIOArbiter @[Broadcast.scala 28:25] 
    outer_arb.io is invalid
    outer_arb.clk <= clk
    outer_arb.reset <= reset
    outer_arb.io.in[0] <- trackerList_0.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[1] <- trackerList_1.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[2] <- trackerList_2.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[3] <- trackerList_3.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[4] <- trackerList_4.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[5] <- trackerList_5.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[6] <- trackerList_6.io.outer @[Broadcast.scala 30:19] 
    outer_arb.io.in[7] <- trackerList_7.io.outer @[Broadcast.scala 30:19] 
    io.outer <- outer_arb.io.out @[Broadcast.scala 31:12] 
    node T_1215 = and(io.inner.acquire.valid, io.inner.release.valid) @[Broadcast.scala 35:28] 
    node T_1216 = eq(io.inner.release.bits.addr_block, io.inner.acquire.bits.addr_block) @[Definitions.scala 116:63] 
    node irel_vs_iacq_conflict = and(T_1215, T_1216) @[Broadcast.scala 36:28] 
    node T_1218 = eq(irel_vs_iacq_conflict, UInt<1>("h00")) @[Broadcast.scala 43:26] 
    node T_1219 = cat(trackerList_1.io.inner.acquire.ready, trackerList_0.io.inner.acquire.ready) @[Cat.scala 20:58] 
    node T_1220 = cat(trackerList_3.io.inner.acquire.ready, trackerList_2.io.inner.acquire.ready) @[Cat.scala 20:58] 
    node T_1221 = cat(T_1220, T_1219) @[Cat.scala 20:58] 
    node T_1222 = cat(trackerList_5.io.inner.acquire.ready, trackerList_4.io.inner.acquire.ready) @[Cat.scala 20:58] 
    node T_1223 = cat(trackerList_7.io.inner.acquire.ready, trackerList_6.io.inner.acquire.ready) @[Cat.scala 20:58] 
    node T_1224 = cat(T_1223, T_1222) @[Cat.scala 20:58] 
    node T_1225 = cat(T_1224, T_1221) @[Cat.scala 20:58] 
    node T_1226 = cat(trackerList_1.io.alloc.iacq.can, trackerList_0.io.alloc.iacq.can) @[Cat.scala 20:58] 
    node T_1227 = cat(trackerList_3.io.alloc.iacq.can, trackerList_2.io.alloc.iacq.can) @[Cat.scala 20:58] 
    node T_1228 = cat(T_1227, T_1226) @[Cat.scala 20:58] 
    node T_1229 = cat(trackerList_5.io.alloc.iacq.can, trackerList_4.io.alloc.iacq.can) @[Cat.scala 20:58] 
    node T_1230 = cat(trackerList_7.io.alloc.iacq.can, trackerList_6.io.alloc.iacq.can) @[Cat.scala 20:58] 
    node T_1231 = cat(T_1230, T_1229) @[Cat.scala 20:58] 
    node T_1232 = cat(T_1231, T_1228) @[Cat.scala 20:58] 
    node T_1233 = bits(T_1232, 0, 0) @[OneHot.scala 63:71] 
    node T_1234 = bits(T_1232, 1, 1) @[OneHot.scala 63:71] 
    node T_1235 = bits(T_1232, 2, 2) @[OneHot.scala 63:71] 
    node T_1236 = bits(T_1232, 3, 3) @[OneHot.scala 63:71] 
    node T_1237 = bits(T_1232, 4, 4) @[OneHot.scala 63:71] 
    node T_1238 = bits(T_1232, 5, 5) @[OneHot.scala 63:71] 
    node T_1239 = bits(T_1232, 6, 6) @[OneHot.scala 63:71] 
    node T_1240 = bits(T_1232, 7, 7) @[OneHot.scala 63:71] 
    node T_1251 = mux(T_1240, UInt<8>("h080"), UInt<8>("h00")) @[Mux.scala 31:69] 
    node T_1252 = mux(T_1239, UInt<8>("h040"), T_1251) @[Mux.scala 31:69] 
    node T_1253 = mux(T_1238, UInt<8>("h020"), T_1252) @[Mux.scala 31:69] 
    node T_1254 = mux(T_1237, UInt<8>("h010"), T_1253) @[Mux.scala 31:69] 
    node T_1255 = mux(T_1236, UInt<8>("h08"), T_1254) @[Mux.scala 31:69] 
    node T_1256 = mux(T_1235, UInt<8>("h04"), T_1255) @[Mux.scala 31:69] 
    node T_1257 = mux(T_1234, UInt<8>("h02"), T_1256) @[Mux.scala 31:69] 
    node T_1258 = mux(T_1233, UInt<8>("h01"), T_1257) @[Mux.scala 31:69] 
    node T_1259 = cat(trackerList_1.io.alloc.iacq.matches, trackerList_0.io.alloc.iacq.matches) @[Cat.scala 20:58] 
    node T_1260 = cat(trackerList_3.io.alloc.iacq.matches, trackerList_2.io.alloc.iacq.matches) @[Cat.scala 20:58] 
    node T_1261 = cat(T_1260, T_1259) @[Cat.scala 20:58] 
    node T_1262 = cat(trackerList_5.io.alloc.iacq.matches, trackerList_4.io.alloc.iacq.matches) @[Cat.scala 20:58] 
    node T_1263 = cat(trackerList_7.io.alloc.iacq.matches, trackerList_6.io.alloc.iacq.matches) @[Cat.scala 20:58] 
    node T_1264 = cat(T_1263, T_1262) @[Cat.scala 20:58] 
    node T_1265 = cat(T_1264, T_1261) @[Cat.scala 20:58] 
    node T_1267 = neq(T_1265, UInt<1>("h00")) @[Agents.scala 90:34] 
    node T_1269 = eq(T_1267, UInt<1>("h00")) @[Agents.scala 90:22] 
    node T_1271 = mux(T_1269, T_1232, T_1265) @[Agents.scala 93:21] 
    node T_1272 = and(T_1271, T_1225) @[Agents.scala 93:62] 
    node T_1274 = neq(T_1272, UInt<1>("h00")) @[Agents.scala 93:76] 
    node T_1275 = and(T_1274, T_1218) @[Agents.scala 93:80] 
    node T_1276 = and(T_1275, UInt<1>("h01")) @[Agents.scala 93:92] 
    io.inner.acquire.ready <= T_1276 @[Agents.scala 93:14] 
    node T_1277 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1278 = and(T_1277, T_1218) @[Agents.scala 95:41] 
    trackerList_0.io.inner.acquire.valid <= T_1278 @[Agents.scala 95:17] 
    trackerList_0.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1279 = bits(T_1258, 0, 0) @[Agents.scala 98:40] 
    node T_1280 = and(T_1279, T_1269) @[Agents.scala 98:44] 
    node T_1281 = and(T_1280, T_1218) @[Agents.scala 98:58] 
    trackerList_0.io.alloc.iacq.should <= T_1281 @[Agents.scala 98:20] 
    node T_1282 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1283 = and(T_1282, T_1218) @[Agents.scala 95:41] 
    trackerList_1.io.inner.acquire.valid <= T_1283 @[Agents.scala 95:17] 
    trackerList_1.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1284 = bits(T_1258, 1, 1) @[Agents.scala 98:40] 
    node T_1285 = and(T_1284, T_1269) @[Agents.scala 98:44] 
    node T_1286 = and(T_1285, T_1218) @[Agents.scala 98:58] 
    trackerList_1.io.alloc.iacq.should <= T_1286 @[Agents.scala 98:20] 
    node T_1287 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1288 = and(T_1287, T_1218) @[Agents.scala 95:41] 
    trackerList_2.io.inner.acquire.valid <= T_1288 @[Agents.scala 95:17] 
    trackerList_2.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1289 = bits(T_1258, 2, 2) @[Agents.scala 98:40] 
    node T_1290 = and(T_1289, T_1269) @[Agents.scala 98:44] 
    node T_1291 = and(T_1290, T_1218) @[Agents.scala 98:58] 
    trackerList_2.io.alloc.iacq.should <= T_1291 @[Agents.scala 98:20] 
    node T_1292 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1293 = and(T_1292, T_1218) @[Agents.scala 95:41] 
    trackerList_3.io.inner.acquire.valid <= T_1293 @[Agents.scala 95:17] 
    trackerList_3.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1294 = bits(T_1258, 3, 3) @[Agents.scala 98:40] 
    node T_1295 = and(T_1294, T_1269) @[Agents.scala 98:44] 
    node T_1296 = and(T_1295, T_1218) @[Agents.scala 98:58] 
    trackerList_3.io.alloc.iacq.should <= T_1296 @[Agents.scala 98:20] 
    node T_1297 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1298 = and(T_1297, T_1218) @[Agents.scala 95:41] 
    trackerList_4.io.inner.acquire.valid <= T_1298 @[Agents.scala 95:17] 
    trackerList_4.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1299 = bits(T_1258, 4, 4) @[Agents.scala 98:40] 
    node T_1300 = and(T_1299, T_1269) @[Agents.scala 98:44] 
    node T_1301 = and(T_1300, T_1218) @[Agents.scala 98:58] 
    trackerList_4.io.alloc.iacq.should <= T_1301 @[Agents.scala 98:20] 
    node T_1302 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1303 = and(T_1302, T_1218) @[Agents.scala 95:41] 
    trackerList_5.io.inner.acquire.valid <= T_1303 @[Agents.scala 95:17] 
    trackerList_5.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1304 = bits(T_1258, 5, 5) @[Agents.scala 98:40] 
    node T_1305 = and(T_1304, T_1269) @[Agents.scala 98:44] 
    node T_1306 = and(T_1305, T_1218) @[Agents.scala 98:58] 
    trackerList_5.io.alloc.iacq.should <= T_1306 @[Agents.scala 98:20] 
    node T_1307 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1308 = and(T_1307, T_1218) @[Agents.scala 95:41] 
    trackerList_6.io.inner.acquire.valid <= T_1308 @[Agents.scala 95:17] 
    trackerList_6.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1309 = bits(T_1258, 6, 6) @[Agents.scala 98:40] 
    node T_1310 = and(T_1309, T_1269) @[Agents.scala 98:44] 
    node T_1311 = and(T_1310, T_1218) @[Agents.scala 98:58] 
    trackerList_6.io.alloc.iacq.should <= T_1311 @[Agents.scala 98:20] 
    node T_1312 = and(io.inner.acquire.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1313 = and(T_1312, T_1218) @[Agents.scala 95:41] 
    trackerList_7.io.inner.acquire.valid <= T_1313 @[Agents.scala 95:17] 
    trackerList_7.io.inner.acquire.bits <- io.inner.acquire.bits @[Agents.scala 96:16] 
    node T_1314 = bits(T_1258, 7, 7) @[Agents.scala 98:40] 
    node T_1315 = and(T_1314, T_1269) @[Agents.scala 98:44] 
    node T_1316 = and(T_1315, T_1218) @[Agents.scala 98:58] 
    trackerList_7.io.alloc.iacq.should <= T_1316 @[Agents.scala 98:20] 
    node T_1317 = cat(trackerList_1.io.inner.release.ready, trackerList_0.io.inner.release.ready) @[Cat.scala 20:58] 
    node T_1318 = cat(trackerList_3.io.inner.release.ready, trackerList_2.io.inner.release.ready) @[Cat.scala 20:58] 
    node T_1319 = cat(T_1318, T_1317) @[Cat.scala 20:58] 
    node T_1320 = cat(trackerList_5.io.inner.release.ready, trackerList_4.io.inner.release.ready) @[Cat.scala 20:58] 
    node T_1321 = cat(trackerList_7.io.inner.release.ready, trackerList_6.io.inner.release.ready) @[Cat.scala 20:58] 
    node T_1322 = cat(T_1321, T_1320) @[Cat.scala 20:58] 
    node T_1323 = cat(T_1322, T_1319) @[Cat.scala 20:58] 
    node T_1324 = cat(trackerList_1.io.alloc.irel.can, trackerList_0.io.alloc.irel.can) @[Cat.scala 20:58] 
    node T_1325 = cat(trackerList_3.io.alloc.irel.can, trackerList_2.io.alloc.irel.can) @[Cat.scala 20:58] 
    node T_1326 = cat(T_1325, T_1324) @[Cat.scala 20:58] 
    node T_1327 = cat(trackerList_5.io.alloc.irel.can, trackerList_4.io.alloc.irel.can) @[Cat.scala 20:58] 
    node T_1328 = cat(trackerList_7.io.alloc.irel.can, trackerList_6.io.alloc.irel.can) @[Cat.scala 20:58] 
    node T_1329 = cat(T_1328, T_1327) @[Cat.scala 20:58] 
    node T_1330 = cat(T_1329, T_1326) @[Cat.scala 20:58] 
    node T_1331 = bits(T_1330, 0, 0) @[OneHot.scala 63:71] 
    node T_1332 = bits(T_1330, 1, 1) @[OneHot.scala 63:71] 
    node T_1333 = bits(T_1330, 2, 2) @[OneHot.scala 63:71] 
    node T_1334 = bits(T_1330, 3, 3) @[OneHot.scala 63:71] 
    node T_1335 = bits(T_1330, 4, 4) @[OneHot.scala 63:71] 
    node T_1336 = bits(T_1330, 5, 5) @[OneHot.scala 63:71] 
    node T_1337 = bits(T_1330, 6, 6) @[OneHot.scala 63:71] 
    node T_1338 = bits(T_1330, 7, 7) @[OneHot.scala 63:71] 
    node T_1349 = mux(T_1338, UInt<8>("h080"), UInt<8>("h00")) @[Mux.scala 31:69] 
    node T_1350 = mux(T_1337, UInt<8>("h040"), T_1349) @[Mux.scala 31:69] 
    node T_1351 = mux(T_1336, UInt<8>("h020"), T_1350) @[Mux.scala 31:69] 
    node T_1352 = mux(T_1335, UInt<8>("h010"), T_1351) @[Mux.scala 31:69] 
    node T_1353 = mux(T_1334, UInt<8>("h08"), T_1352) @[Mux.scala 31:69] 
    node T_1354 = mux(T_1333, UInt<8>("h04"), T_1353) @[Mux.scala 31:69] 
    node T_1355 = mux(T_1332, UInt<8>("h02"), T_1354) @[Mux.scala 31:69] 
    node T_1356 = mux(T_1331, UInt<8>("h01"), T_1355) @[Mux.scala 31:69] 
    node T_1357 = cat(trackerList_1.io.alloc.irel.matches, trackerList_0.io.alloc.irel.matches) @[Cat.scala 20:58] 
    node T_1358 = cat(trackerList_3.io.alloc.irel.matches, trackerList_2.io.alloc.irel.matches) @[Cat.scala 20:58] 
    node T_1359 = cat(T_1358, T_1357) @[Cat.scala 20:58] 
    node T_1360 = cat(trackerList_5.io.alloc.irel.matches, trackerList_4.io.alloc.irel.matches) @[Cat.scala 20:58] 
    node T_1361 = cat(trackerList_7.io.alloc.irel.matches, trackerList_6.io.alloc.irel.matches) @[Cat.scala 20:58] 
    node T_1362 = cat(T_1361, T_1360) @[Cat.scala 20:58] 
    node T_1363 = cat(T_1362, T_1359) @[Cat.scala 20:58] 
    node T_1365 = neq(T_1363, UInt<1>("h00")) @[Agents.scala 90:34] 
    node T_1367 = eq(T_1365, UInt<1>("h00")) @[Agents.scala 90:22] 
    node T_1370 = mux(T_1367, T_1330, T_1363) @[Agents.scala 93:21] 
    node T_1371 = and(T_1370, T_1323) @[Agents.scala 93:62] 
    node T_1373 = neq(T_1371, UInt<1>("h00")) @[Agents.scala 93:76] 
    node T_1374 = and(T_1373, UInt<1>("h01")) @[Agents.scala 93:80] 
    node T_1375 = and(T_1374, UInt<1>("h01")) @[Agents.scala 93:92] 
    io.inner.release.ready <= T_1375 @[Agents.scala 93:14] 
    node T_1376 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1377 = and(T_1376, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_0.io.inner.release.valid <= T_1377 @[Agents.scala 95:17] 
    trackerList_0.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1378 = bits(T_1356, 0, 0) @[Agents.scala 98:40] 
    node T_1379 = and(T_1378, T_1367) @[Agents.scala 98:44] 
    node T_1380 = and(T_1379, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_0.io.alloc.irel.should <= T_1380 @[Agents.scala 98:20] 
    node T_1381 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1382 = and(T_1381, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_1.io.inner.release.valid <= T_1382 @[Agents.scala 95:17] 
    trackerList_1.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1383 = bits(T_1356, 1, 1) @[Agents.scala 98:40] 
    node T_1384 = and(T_1383, T_1367) @[Agents.scala 98:44] 
    node T_1385 = and(T_1384, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_1.io.alloc.irel.should <= T_1385 @[Agents.scala 98:20] 
    node T_1386 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1387 = and(T_1386, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_2.io.inner.release.valid <= T_1387 @[Agents.scala 95:17] 
    trackerList_2.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1388 = bits(T_1356, 2, 2) @[Agents.scala 98:40] 
    node T_1389 = and(T_1388, T_1367) @[Agents.scala 98:44] 
    node T_1390 = and(T_1389, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_2.io.alloc.irel.should <= T_1390 @[Agents.scala 98:20] 
    node T_1391 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1392 = and(T_1391, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_3.io.inner.release.valid <= T_1392 @[Agents.scala 95:17] 
    trackerList_3.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1393 = bits(T_1356, 3, 3) @[Agents.scala 98:40] 
    node T_1394 = and(T_1393, T_1367) @[Agents.scala 98:44] 
    node T_1395 = and(T_1394, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_3.io.alloc.irel.should <= T_1395 @[Agents.scala 98:20] 
    node T_1396 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1397 = and(T_1396, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_4.io.inner.release.valid <= T_1397 @[Agents.scala 95:17] 
    trackerList_4.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1398 = bits(T_1356, 4, 4) @[Agents.scala 98:40] 
    node T_1399 = and(T_1398, T_1367) @[Agents.scala 98:44] 
    node T_1400 = and(T_1399, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_4.io.alloc.irel.should <= T_1400 @[Agents.scala 98:20] 
    node T_1401 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1402 = and(T_1401, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_5.io.inner.release.valid <= T_1402 @[Agents.scala 95:17] 
    trackerList_5.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1403 = bits(T_1356, 5, 5) @[Agents.scala 98:40] 
    node T_1404 = and(T_1403, T_1367) @[Agents.scala 98:44] 
    node T_1405 = and(T_1404, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_5.io.alloc.irel.should <= T_1405 @[Agents.scala 98:20] 
    node T_1406 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1407 = and(T_1406, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_6.io.inner.release.valid <= T_1407 @[Agents.scala 95:17] 
    trackerList_6.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1408 = bits(T_1356, 6, 6) @[Agents.scala 98:40] 
    node T_1409 = and(T_1408, T_1367) @[Agents.scala 98:44] 
    node T_1410 = and(T_1409, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_6.io.alloc.irel.should <= T_1410 @[Agents.scala 98:20] 
    node T_1411 = and(io.inner.release.valid, UInt<1>("h01")) @[Agents.scala 95:29] 
    node T_1412 = and(T_1411, UInt<1>("h01")) @[Agents.scala 95:41] 
    trackerList_7.io.inner.release.valid <= T_1412 @[Agents.scala 95:17] 
    trackerList_7.io.inner.release.bits <- io.inner.release.bits @[Agents.scala 96:16] 
    node T_1413 = bits(T_1356, 7, 7) @[Agents.scala 98:40] 
    node T_1414 = and(T_1413, T_1367) @[Agents.scala 98:44] 
    node T_1415 = and(T_1414, UInt<1>("h01")) @[Agents.scala 98:58] 
    trackerList_7.io.alloc.irel.should <= T_1415 @[Agents.scala 98:20] 
    inst LockingRRArbiter_7_1 of LockingRRArbiter_7 @[Agents.scala 52:21] 
    LockingRRArbiter_7_1.io is invalid
    LockingRRArbiter_7_1.clk <= clk
    LockingRRArbiter_7_1.reset <= reset
    io.inner.probe <- LockingRRArbiter_7_1.io.out @[Agents.scala 53:9] 
    LockingRRArbiter_7_1.io.in[0] <- trackerList_0.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[1] <- trackerList_1.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[2] <- trackerList_2.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[3] <- trackerList_3.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[4] <- trackerList_4.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[5] <- trackerList_5.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[6] <- trackerList_6.io.inner.probe @[Agents.scala 54:15] 
    LockingRRArbiter_7_1.io.in[7] <- trackerList_7.io.inner.probe @[Agents.scala 54:15] 
    inst LockingRRArbiter_8_1 of LockingRRArbiter_8 @[Agents.scala 52:21] 
    LockingRRArbiter_8_1.io is invalid
    LockingRRArbiter_8_1.clk <= clk
    LockingRRArbiter_8_1.reset <= reset
    io.inner.grant <- LockingRRArbiter_8_1.io.out @[Agents.scala 53:9] 
    LockingRRArbiter_8_1.io.in[0] <- trackerList_0.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[1] <- trackerList_1.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[2] <- trackerList_2.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[3] <- trackerList_3.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[4] <- trackerList_4.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[5] <- trackerList_5.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[6] <- trackerList_6.io.inner.grant @[Agents.scala 54:15] 
    LockingRRArbiter_8_1.io.in[7] <- trackerList_7.io.inner.grant @[Agents.scala 54:15] 
    trackerList_0.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_1.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_2.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_3.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_4.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_5.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_6.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    trackerList_7.io.inner.finish.bits <- io.inner.finish.bits @[Agents.scala 61:21] 
    node T_1417 = eq(io.inner.finish.bits.manager_xact_id, UInt<1>("h00")) @[Agents.scala 62:70] 
    node T_1418 = and(io.inner.finish.valid, T_1417) @[Agents.scala 62:63] 
    trackerList_0.io.inner.finish.valid <= T_1418 @[Agents.scala 62:51] 
    node T_1420 = eq(io.inner.finish.bits.manager_xact_id, UInt<1>("h01")) @[Agents.scala 62:70] 
    node T_1421 = and(io.inner.finish.valid, T_1420) @[Agents.scala 62:63] 
    trackerList_1.io.inner.finish.valid <= T_1421 @[Agents.scala 62:51] 
    node T_1423 = eq(io.inner.finish.bits.manager_xact_id, UInt<2>("h02")) @[Agents.scala 62:70] 
    node T_1424 = and(io.inner.finish.valid, T_1423) @[Agents.scala 62:63] 
    trackerList_2.io.inner.finish.valid <= T_1424 @[Agents.scala 62:51] 
    node T_1426 = eq(io.inner.finish.bits.manager_xact_id, UInt<2>("h03")) @[Agents.scala 62:70] 
    node T_1427 = and(io.inner.finish.valid, T_1426) @[Agents.scala 62:63] 
    trackerList_3.io.inner.finish.valid <= T_1427 @[Agents.scala 62:51] 
    node T_1429 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h04")) @[Agents.scala 62:70] 
    node T_1430 = and(io.inner.finish.valid, T_1429) @[Agents.scala 62:63] 
    trackerList_4.io.inner.finish.valid <= T_1430 @[Agents.scala 62:51] 
    node T_1432 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h05")) @[Agents.scala 62:70] 
    node T_1433 = and(io.inner.finish.valid, T_1432) @[Agents.scala 62:63] 
    trackerList_5.io.inner.finish.valid <= T_1433 @[Agents.scala 62:51] 
    node T_1435 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h06")) @[Agents.scala 62:70] 
    node T_1436 = and(io.inner.finish.valid, T_1435) @[Agents.scala 62:63] 
    trackerList_6.io.inner.finish.valid <= T_1436 @[Agents.scala 62:51] 
    node T_1438 = eq(io.inner.finish.bits.manager_xact_id, UInt<3>("h07")) @[Agents.scala 62:70] 
    node T_1439 = and(io.inner.finish.valid, T_1438) @[Agents.scala 62:63] 
    trackerList_7.io.inner.finish.valid <= T_1439 @[Agents.scala 62:51] 
    node T_1441 = and(io.inner.finish.bits.manager_xact_id, UInt<2>("h03")) @[Util.scala 18:26] 
    node T_1443 = geq(io.inner.finish.bits.manager_xact_id, UInt<3>("h04")) @[Util.scala 19:17] 
    node T_1445 = and(T_1441, UInt<1>("h01")) @[Util.scala 18:26] 
    node T_1447 = geq(T_1441, UInt<2>("h02")) @[Util.scala 19:17] 
    node T_1449 = and(T_1445, UInt<1>("h00")) @[Util.scala 18:26] 
    node T_1451 = geq(T_1445, UInt<1>("h01")) @[Util.scala 19:17] 
    node T_1452 = mux(T_1451, trackerList_7.io.inner.finish.ready, trackerList_6.io.inner.finish.ready) @[Util.scala 19:12] 
    node T_1454 = and(T_1445, UInt<1>("h00")) @[Util.scala 18:26] 
    node T_1456 = geq(T_1445, UInt<1>("h01")) @[Util.scala 19:17] 
    node T_1457 = mux(T_1456, trackerList_5.io.inner.finish.ready, trackerList_4.io.inner.finish.ready) @[Util.scala 19:12] 
    node T_1458 = mux(T_1447, T_1452, T_1457) @[Util.scala 19:12] 
    node T_1460 = and(T_1441, UInt<1>("h01")) @[Util.scala 18:26] 
    node T_1462 = geq(T_1441, UInt<2>("h02")) @[Util.scala 19:17] 
    node T_1464 = and(T_1460, UInt<1>("h00")) @[Util.scala 18:26] 
    node T_1466 = geq(T_1460, UInt<1>("h01")) @[Util.scala 19:17] 
    node T_1467 = mux(T_1466, trackerList_3.io.inner.finish.ready, trackerList_2.io.inner.finish.ready) @[Util.scala 19:12] 
    node T_1469 = and(T_1460, UInt<1>("h00")) @[Util.scala 18:26] 
    node T_1471 = geq(T_1460, UInt<1>("h01")) @[Util.scala 19:17] 
    node T_1472 = mux(T_1471, trackerList_1.io.inner.finish.ready, trackerList_0.io.inner.finish.ready) @[Util.scala 19:12] 
    node T_1473 = mux(T_1462, T_1467, T_1472) @[Util.scala 19:12] 
    node T_1474 = mux(T_1443, T_1458, T_1473) @[Util.scala 19:12] 
    io.inner.finish.ready <= T_1474 @[Agents.scala 63:14] 
    io.outer.probe.ready <= UInt<1>("h00") @[Agents.scala 158:26] 
    io.outer.finish.valid <= UInt<1>("h00") @[Agents.scala 159:27] 
    node T_1478 = eq(io.outer.probe.valid, UInt<1>("h00")) @[Agents.scala 160:12] 
    node T_1479 = or(T_1478, reset) @[Agents.scala 160:11] 
    node T_1481 = eq(T_1479, UInt<1>("h00")) @[Agents.scala 160:11] 
    when T_1481 : @[Agents.scala 160:11] 
      printf(clk, UInt<1>(1), "Assertion failed: L2 agent got illegal probe\n    at Agents.scala:160 assert(!io.outer.probe.valid, \"L2 agent got illegal probe\")\n") @[Agents.scala 160:11] 
      stop(clk, UInt<1>(1), 1) @[Agents.scala 160:11] 
      skip @[Agents.scala 160:11] 
    
  module MMIOTileLinkManager : 
    input clk : Clock
    input reset : UInt<1>
    output io : {inner : {flip acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>, client_id : UInt<1>}}, grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, flip finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>}}, probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>, client_id : UInt<1>}}, flip release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>, client_id : UInt<1>}}}, flip incoherent : UInt<1>[1], outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.inner.probe.valid <= UInt<1>("h00") @[Mmio.scala 17:24] 
    io.inner.release.ready <= UInt<1>("h00") @[Mmio.scala 18:26] 
    node T_880 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_882 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_889 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_889 is invalid @[Definitions.scala 355:35] 
    T_889[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_891 = eq(io.outer.acquire.bits.a_type, T_889[0]) @[Util.scala 7:47] 
    node T_892 = and(T_882, T_891) @[Definitions.scala 231:89] 
    node multibeat_fire = and(T_880, T_892) @[Mmio.scala 20:48] 
    node T_894 = eq(io.outer.acquire.bits.addr_beat, UInt<1>("h00")) @[Mmio.scala 21:63] 
    node multibeat_start = and(multibeat_fire, T_894) @[Mmio.scala 21:40] 
    node T_896 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 22:61] 
    node multibeat_end = and(multibeat_fire, T_896) @[Mmio.scala 22:38] 
    reg xact_pending : UInt<9>, clk with : (reset => (reset, UInt<9>("h00")))
    node T_898 = not(xact_pending) @[Mmio.scala 29:37] 
    node T_899 = bits(T_898, 0, 0) @[OneHot.scala 35:40] 
    node T_900 = bits(T_898, 1, 1) @[OneHot.scala 35:40] 
    node T_901 = bits(T_898, 2, 2) @[OneHot.scala 35:40] 
    node T_902 = bits(T_898, 3, 3) @[OneHot.scala 35:40] 
    node T_903 = bits(T_898, 4, 4) @[OneHot.scala 35:40] 
    node T_904 = bits(T_898, 5, 5) @[OneHot.scala 35:40] 
    node T_905 = bits(T_898, 6, 6) @[OneHot.scala 35:40] 
    node T_906 = bits(T_898, 7, 7) @[OneHot.scala 35:40] 
    node T_907 = bits(T_898, 8, 8) @[OneHot.scala 35:40] 
    node T_917 = mux(T_906, UInt<3>("h07"), UInt<4>("h08")) @[Mux.scala 31:69] 
    node T_918 = mux(T_905, UInt<3>("h06"), T_917) @[Mux.scala 31:69] 
    node T_919 = mux(T_904, UInt<3>("h05"), T_918) @[Mux.scala 31:69] 
    node T_920 = mux(T_903, UInt<3>("h04"), T_919) @[Mux.scala 31:69] 
    node T_921 = mux(T_902, UInt<2>("h03"), T_920) @[Mux.scala 31:69] 
    node T_922 = mux(T_901, UInt<2>("h02"), T_921) @[Mux.scala 31:69] 
    node T_923 = mux(T_900, UInt<1>("h01"), T_922) @[Mux.scala 31:69] 
    node xact_id_sel = mux(T_899, UInt<1>("h00"), T_923) @[Mux.scala 31:69] 
    reg xact_id_reg : UInt<4>, clk
    when multibeat_start : @[Reg.scala 29:19] 
      xact_id_reg <= xact_id_sel @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    reg xact_multibeat : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node outer_xact_id = mux(xact_multibeat, xact_id_reg, xact_id_sel) @[Mmio.scala 32:26] 
    node T_925 = not(xact_pending) @[Mmio.scala 33:33] 
    node T_927 = eq(T_925, UInt<1>("h00")) @[Mmio.scala 33:33] 
    node xact_free = eq(T_927, UInt<1>("h00")) @[Mmio.scala 33:19] 
    reg xact_buffer : {client_id : UInt<1>, client_xact_id : UInt<1>}[9], clk
    node T_1464 = and(io.outer.acquire.ready, xact_free) @[Mmio.scala 36:52] 
    io.inner.acquire.ready <= T_1464 @[Mmio.scala 36:26] 
    node T_1465 = and(io.inner.acquire.valid, xact_free) @[Mmio.scala 37:52] 
    io.outer.acquire.valid <= T_1465 @[Mmio.scala 37:26] 
    io.outer.acquire.bits <- io.inner.acquire.bits @[Mmio.scala 38:26] 
    io.outer.acquire.bits.client_xact_id <= outer_xact_id @[Mmio.scala 39:40] 
    node T_1466 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1468 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1475 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1475 is invalid @[Definitions.scala 355:35] 
    T_1475[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1477 = eq(io.outer.acquire.bits.a_type, T_1475[0]) @[Util.scala 7:47] 
    node T_1478 = and(T_1468, T_1477) @[Definitions.scala 231:89] 
    node T_1480 = eq(T_1478, UInt<1>("h00")) @[Mmio.scala 42:5] 
    node T_1482 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44] 
    node T_1483 = or(T_1480, T_1482) @[Mmio.scala 42:28] 
    node T_1484 = and(T_1466, T_1483) @[Mmio.scala 45:19] 
    node T_1486 = dshl(UInt<1>("h01"), io.outer.acquire.bits.client_xact_id) @[OneHot.scala 44:15] 
    node T_1488 = mux(T_1484, T_1486, UInt<1>("h00")) @[Mmio.scala 45:8] 
    node T_1489 = or(xact_pending, T_1488) @[Mmio.scala 54:33] 
    node T_1490 = and(io.inner.finish.ready, io.inner.finish.valid) @[Decoupled.scala 16:42] 
    node T_1492 = dshl(UInt<1>("h01"), io.inner.finish.bits.manager_xact_id) @[OneHot.scala 44:15] 
    node T_1494 = mux(T_1490, T_1492, UInt<1>("h00")) @[Mmio.scala 52:9] 
    node T_1495 = not(T_1494) @[Mmio.scala 52:5] 
    node T_1496 = and(T_1489, T_1495) @[Mmio.scala 54:73] 
    node T_1497 = and(io.inner.grant.ready, io.inner.grant.valid) @[Decoupled.scala 16:42] 
    wire T_1505 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1505 is invalid @[Definitions.scala 846:34] 
    T_1505[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1507 = eq(io.inner.grant.bits.g_type, T_1505[0]) @[Util.scala 7:47] 
    node T_1508 = eq(io.inner.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1509 = mux(io.inner.grant.bits.is_builtin_type, T_1507, T_1508) @[Definitions.scala 274:33] 
    node T_1510 = and(UInt<1>("h01"), T_1509) @[Definitions.scala 274:27] 
    node T_1512 = eq(T_1510, UInt<1>("h00")) @[Mmio.scala 42:5] 
    node T_1514 = eq(io.inner.grant.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44] 
    node T_1515 = or(T_1512, T_1514) @[Mmio.scala 42:28] 
    node T_1516 = and(T_1497, T_1515) @[Mmio.scala 48:20] 
    node T_1519 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Definitions.scala 278:43] 
    node T_1521 = eq(io.inner.grant.bits.g_type, UInt<3>("h00")) @[Definitions.scala 277:70] 
    node T_1522 = and(io.inner.grant.bits.is_builtin_type, T_1521) @[Definitions.scala 277:59] 
    node T_1524 = eq(T_1522, UInt<1>("h00")) @[Definitions.scala 278:92] 
    node T_1525 = and(T_1519, T_1524) @[Definitions.scala 278:89] 
    node T_1527 = eq(T_1525, UInt<1>("h00")) @[Mmio.scala 48:46] 
    node T_1528 = and(T_1516, T_1527) @[Mmio.scala 48:43] 
    node T_1530 = dshl(UInt<1>("h01"), io.inner.grant.bits.manager_xact_id) @[OneHot.scala 44:15] 
    node T_1532 = mux(T_1528, T_1530, UInt<1>("h00")) @[Mmio.scala 48:9] 
    node T_1533 = not(T_1532) @[Mmio.scala 48:5] 
    node T_1534 = and(T_1496, T_1533) @[Mmio.scala 55:73] 
    xact_pending <= T_1534 @[Mmio.scala 54:16] 
    node T_1535 = and(io.outer.acquire.ready, io.outer.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1537 = and(UInt<1>("h01"), io.outer.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1544 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1544 is invalid @[Definitions.scala 355:35] 
    T_1544[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1546 = eq(io.outer.acquire.bits.a_type, T_1544[0]) @[Util.scala 7:47] 
    node T_1547 = and(T_1537, T_1546) @[Definitions.scala 231:89] 
    node T_1549 = eq(T_1547, UInt<1>("h00")) @[Mmio.scala 42:5] 
    node T_1551 = eq(io.outer.acquire.bits.addr_beat, UInt<3>("h07")) @[Mmio.scala 42:44] 
    node T_1552 = or(T_1549, T_1551) @[Mmio.scala 42:28] 
    node T_1553 = and(T_1535, T_1552) @[Mmio.scala 58:33] 
    when T_1553 : @[Mmio.scala 58:71] 
      xact_buffer[outer_xact_id] <- io.inner.acquire.bits @[Mmio.scala 59:32] 
      skip @[Mmio.scala 58:71] 
    when multibeat_start : @[Mmio.scala 62:26] 
      xact_multibeat <= UInt<1>("h01") @[Mmio.scala 62:43] 
      skip @[Mmio.scala 62:26] 
    when multibeat_end : @[Mmio.scala 63:26] 
      xact_multibeat <= UInt<1>("h00") @[Mmio.scala 63:43] 
      skip @[Mmio.scala 63:26] 
    io.outer.grant.ready <= io.inner.grant.ready @[Mmio.scala 66:24] 
    io.inner.grant.valid <= io.outer.grant.valid @[Mmio.scala 67:24] 
    io.inner.grant.bits <- io.outer.grant.bits @[Mmio.scala 68:24] 
    io.inner.grant.bits.client_id <= xact_buffer[io.outer.grant.bits.client_xact_id].client_id @[Mmio.scala 69:33] 
    io.inner.grant.bits.client_xact_id <= xact_buffer[io.outer.grant.bits.client_xact_id].client_xact_id @[Mmio.scala 70:38] 
    io.inner.grant.bits.manager_xact_id <= io.outer.grant.bits.client_xact_id @[Mmio.scala 71:39] 
    io.inner.finish.ready <= UInt<1>("h01") @[Mmio.scala 72:25] 
    
  module ClientUncachedTileLinkIOArbiter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    io.out <- io.in[0] @[Arbiters.scala 181:19] 
    
  module TileLinkMemoryInterconnect : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    inst ClientUncachedTileLinkIOArbiter_1_1 of ClientUncachedTileLinkIOArbiter_1 @[Interconnect.scala 309:28] 
    ClientUncachedTileLinkIOArbiter_1_1.io is invalid
    ClientUncachedTileLinkIOArbiter_1_1.clk <= clk
    ClientUncachedTileLinkIOArbiter_1_1.reset <= reset
    ClientUncachedTileLinkIOArbiter_1_1.io.in[0] <- io.in[0] @[Interconnect.scala 310:22] 
    io.out[0] <- ClientUncachedTileLinkIOArbiter_1_1.io.out @[Interconnect.scala 299:11] 
    node T_3009 = dshr(ClientUncachedTileLinkIOArbiter_1_1.io.out.acquire.bits.addr_block, UInt<1>("h00")) @[Interconnect.scala 300:68] 
    io.out[0].acquire.bits.addr_block <= T_3009 @[Interconnect.scala 300:35] 
    
  module LockingRRArbiter_9 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_766 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_768 : UInt, clk
    node T_770 = neq(T_766, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    node T_772 = and(UInt<1>("h01"), io.out.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_779 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_779 is invalid @[Definitions.scala 355:35] 
    T_779[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_781 = eq(io.out.bits.a_type, T_779[0]) @[Util.scala 7:47] 
    node T_782 = and(T_772, T_781) @[Definitions.scala 231:89] 
    node T_783 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_784 = and(T_783, T_782) @[Arbiter.scala 42:25] 
    when T_784 : @[Arbiter.scala 42:39] 
      T_768 <= io.chosen @[Arbiter.scala 43:15] 
      node T_786 = eq(T_766, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_788 = add(T_766, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_789 = tail(T_788, 1) @[Counter.scala 21:22] 
      T_766 <= T_789 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_770 : @[Arbiter.scala 47:19] 
      io.chosen <= T_768 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_791 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<1>, clk
    when T_791 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node T_794 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_795 = or(T_794, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_797 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_799 = eq(T_794, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_801 = eq(T_795, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_802 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_803 = or(T_802, T_799) @[Arbiter.scala 64:50] 
    node T_804 = and(T_797, grantMask_1) @[Arbiter.scala 64:34] 
    node T_805 = or(T_804, T_801) @[Arbiter.scala 64:50] 
    node T_807 = eq(T_768, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_808 = mux(T_770, T_807, T_803) @[Arbiter.scala 49:22] 
    node T_809 = and(T_808, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_809 @[Arbiter.scala 49:16] 
    node T_811 = eq(T_768, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_812 = mux(T_770, T_811, T_805) @[Arbiter.scala 49:22] 
    node T_813 = and(T_812, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_813 @[Arbiter.scala 49:16] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module ReorderQueue : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<1>, tag : UInt<4>}}, deq : {flip valid : UInt<1>, flip tag : UInt<4>, data : UInt<1>, matches : UInt<1>}}
    
    io is invalid
    cmem T_31 : UInt<1>[16] @[util.scala 214:23] 
    wire T_53 : UInt<1>[16] @[util.scala 215:53] 
    T_53 is invalid @[util.scala 215:53] 
    T_53[0] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[1] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[2] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[3] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[4] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[5] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[6] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[7] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[8] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[9] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[10] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[11] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[12] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[13] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[14] <= UInt<1>("h01") @[util.scala 215:53] 
    T_53[15] <= UInt<1>("h01") @[util.scala 215:53] 
    reg T_57 : UInt<1>[16], clk with : (reset => (reset, T_53))
    io.enq.ready <= T_57[io.enq.bits.tag] @[util.scala 217:18] 
    infer mport T_59 = T_31[io.deq.tag], clk
    io.deq.data <= T_59 @[util.scala 218:17] 
    node T_61 = eq(T_57[io.deq.tag], UInt<1>("h00")) @[util.scala 219:23] 
    io.deq.matches <= T_61 @[util.scala 219:20] 
    node T_62 = and(io.enq.valid, io.enq.ready) @[util.scala 221:24] 
    when T_62 : @[util.scala 221:41] 
      infer mport T_63 = T_31[io.enq.bits.tag], clk
      T_63 <= io.enq.bits.data @[util.scala 222:33] 
      T_57[io.enq.bits.tag] <= UInt<1>("h00") @[util.scala 223:33] 
      skip @[util.scala 221:41] 
    when io.deq.valid : @[util.scala 226:25] 
      T_57[io.deq.tag] <= UInt<1>("h01") @[util.scala 227:28] 
      skip @[util.scala 226:25] 
    
  module ClientTileLinkIOUnwrapper : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst acqArb of LockingRRArbiter_9 @[Tilelink.scala 55:22] 
    acqArb.io is invalid
    acqArb.clk <= clk
    acqArb.reset <= reset
    inst acqRoq of ReorderQueue @[Tilelink.scala 58:22] 
    acqRoq.io is invalid
    acqRoq.clk <= clk
    acqRoq.reset <= reset
    inst relRoq of ReorderQueue @[Tilelink.scala 59:22] 
    relRoq.io is invalid
    relRoq.clk <= clk
    relRoq.reset <= reset
    node T_1359 = and(UInt<1>("h01"), io.in.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_1366 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_1366 is invalid @[Definitions.scala 355:35] 
    T_1366[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_1368 = eq(io.in.acquire.bits.a_type, T_1366[0]) @[Util.scala 7:47] 
    node T_1369 = and(T_1359, T_1368) @[Definitions.scala 231:89] 
    node T_1371 = eq(T_1369, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1373 = eq(io.in.acquire.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node acq_roq_enq = or(T_1371, T_1373) @[Definitions.scala 141:57] 
    node T_1375 = eq(io.in.release.bits.r_type, UInt<3>("h00")) @[Util.scala 7:47] 
    node T_1376 = eq(io.in.release.bits.r_type, UInt<3>("h01")) @[Util.scala 7:47] 
    node T_1377 = eq(io.in.release.bits.r_type, UInt<3>("h02")) @[Util.scala 7:47] 
    node T_1378 = or(T_1375, T_1376) @[Util.scala 7:62] 
    node T_1379 = or(T_1378, T_1377) @[Util.scala 7:62] 
    node T_1380 = and(UInt<1>("h01"), T_1379) @[Definitions.scala 256:64] 
    node T_1382 = eq(T_1380, UInt<1>("h00")) @[Definitions.scala 141:37] 
    node T_1384 = eq(io.in.release.bits.addr_beat, UInt<1>("h00")) @[Definitions.scala 141:71] 
    node rel_roq_enq = or(T_1382, T_1384) @[Definitions.scala 141:57] 
    node T_1386 = eq(acq_roq_enq, UInt<1>("h00")) @[Tilelink.scala 68:23] 
    node acq_roq_ready = or(T_1386, acqRoq.io.enq.ready) @[Tilelink.scala 68:36] 
    node T_1388 = eq(rel_roq_enq, UInt<1>("h00")) @[Tilelink.scala 69:23] 
    node rel_roq_ready = or(T_1388, relRoq.io.enq.ready) @[Tilelink.scala 69:36] 
    node T_1389 = and(io.in.acquire.valid, acqArb.io.in[0].ready) @[util.scala 238:53] 
    node T_1390 = and(T_1389, acq_roq_enq) @[util.scala 238:53] 
    acqRoq.io.enq.valid <= T_1390 @[Tilelink.scala 81:23] 
    acqRoq.io.enq.bits.data <= io.in.acquire.bits.is_builtin_type @[Tilelink.scala 82:27] 
    acqRoq.io.enq.bits.tag <= io.in.acquire.bits.client_xact_id @[Tilelink.scala 83:26] 
    node T_1391 = and(io.in.acquire.valid, acq_roq_ready) @[util.scala 238:53] 
    acqArb.io.in[0].valid <= T_1391 @[Tilelink.scala 85:25] 
    node T_1394 = mux(io.in.acquire.bits.is_builtin_type, io.in.acquire.bits.a_type, UInt<3>("h01")) @[Tilelink.scala 88:17] 
    node T_1396 = cat(UInt<3>("h07"), UInt<5>("h00")) @[Cat.scala 20:58] 
    node T_1397 = cat(T_1396, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1398 = mux(io.in.acquire.bits.is_builtin_type, io.in.acquire.bits.union, T_1397) @[Tilelink.scala 94:16] 
    wire T_1427 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_1427 is invalid @[Definitions.scala 412:19] 
    T_1427.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_1427.a_type <= T_1394 @[Definitions.scala 414:16] 
    T_1427.client_xact_id <= io.in.acquire.bits.client_xact_id @[Definitions.scala 415:24] 
    T_1427.addr_block <= io.in.acquire.bits.addr_block @[Definitions.scala 416:20] 
    T_1427.addr_beat <= io.in.acquire.bits.addr_beat @[Definitions.scala 417:19] 
    T_1427.data <= io.in.acquire.bits.data @[Definitions.scala 418:14] 
    T_1427.union <= T_1398 @[Definitions.scala 419:15] 
    acqArb.io.in[0].bits <- T_1427 @[Tilelink.scala 86:24] 
    node T_1455 = and(acq_roq_ready, acqArb.io.in[0].ready) @[util.scala 238:53] 
    io.in.acquire.ready <= T_1455 @[Tilelink.scala 96:23] 
    node T_1456 = and(io.in.release.valid, acqArb.io.in[1].ready) @[util.scala 238:53] 
    node T_1457 = and(T_1456, rel_roq_enq) @[util.scala 238:53] 
    relRoq.io.enq.valid <= T_1457 @[Tilelink.scala 98:23] 
    relRoq.io.enq.bits.data <= io.in.release.bits.voluntary @[Tilelink.scala 99:27] 
    relRoq.io.enq.bits.tag <= io.in.release.bits.client_xact_id @[Tilelink.scala 100:26] 
    node T_1458 = and(io.in.release.valid, rel_roq_ready) @[util.scala 238:53] 
    acqArb.io.in[1].valid <= T_1458 @[Tilelink.scala 102:25] 
    node T_1482 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_1507 = or(UInt<3>("h00"), UInt<1>("h00")) @[Definitions.scala 385:49] 
    node T_1508 = bits(T_1507, 2, 0) @[Definitions.scala 385:61] 
    node T_1510 = or(UInt<3>("h00"), UInt<3>("h07")) @[Definitions.scala 386:43] 
    node T_1511 = bits(T_1510, 2, 0) @[Definitions.scala 386:58] 
    node T_1513 = or(UInt<5>("h00"), UInt<1>("h00")) @[Definitions.scala 387:36] 
    node T_1514 = bits(T_1513, 4, 0) @[Definitions.scala 387:45] 
    node T_1516 = or(UInt<8>("h00"), T_1482) @[Definitions.scala 388:46] 
    node T_1517 = bits(T_1516, 7, 0) @[Definitions.scala 388:54] 
    node T_1520 = cat(T_1514, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1521 = cat(T_1508, T_1511) @[Cat.scala 20:58] 
    node T_1522 = cat(T_1521, T_1520) @[Cat.scala 20:58] 
    node T_1524 = cat(T_1511, T_1514) @[Cat.scala 20:58] 
    node T_1525 = cat(T_1524, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1527 = cat(T_1517, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1529 = cat(T_1517, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1531 = cat(T_1514, UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1532 = cat(T_1508, T_1511) @[Cat.scala 20:58] 
    node T_1533 = cat(T_1532, T_1531) @[Cat.scala 20:58] 
    node T_1535 = cat(UInt<5>("h00"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1537 = cat(UInt<5>("h01"), UInt<1>("h01")) @[Cat.scala 20:58] 
    node T_1538 = eq(UInt<3>("h06"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1539 = mux(T_1538, T_1537, UInt<1>("h00")) @[Mux.scala 46:16] 
    node T_1540 = eq(UInt<3>("h05"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1541 = mux(T_1540, T_1535, T_1539) @[Mux.scala 46:16] 
    node T_1542 = eq(UInt<3>("h04"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1543 = mux(T_1542, T_1533, T_1541) @[Mux.scala 46:16] 
    node T_1544 = eq(UInt<3>("h03"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1545 = mux(T_1544, T_1529, T_1543) @[Mux.scala 46:16] 
    node T_1546 = eq(UInt<3>("h02"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1547 = mux(T_1546, T_1527, T_1545) @[Mux.scala 46:16] 
    node T_1548 = eq(UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1549 = mux(T_1548, T_1525, T_1547) @[Mux.scala 46:16] 
    node T_1550 = eq(UInt<3>("h00"), UInt<3>("h03")) @[Mux.scala 46:19] 
    node T_1551 = mux(T_1550, T_1522, T_1549) @[Mux.scala 46:16] 
    wire T_1580 : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>} @[Definitions.scala 412:19] 
    T_1580 is invalid @[Definitions.scala 412:19] 
    T_1580.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 413:25] 
    T_1580.a_type <= UInt<3>("h03") @[Definitions.scala 414:16] 
    T_1580.client_xact_id <= io.in.release.bits.client_xact_id @[Definitions.scala 415:24] 
    T_1580.addr_block <= io.in.release.bits.addr_block @[Definitions.scala 416:20] 
    T_1580.addr_beat <= io.in.release.bits.addr_beat @[Definitions.scala 417:19] 
    T_1580.data <= io.in.release.bits.data @[Definitions.scala 418:14] 
    T_1580.union <= T_1551 @[Definitions.scala 419:15] 
    acqArb.io.in[1].bits <- T_1580 @[Tilelink.scala 103:24] 
    node T_1608 = and(rel_roq_ready, acqArb.io.in[1].ready) @[util.scala 238:53] 
    io.in.release.ready <= T_1608 @[Tilelink.scala 108:23] 
    io.out.acquire <- acqArb.io.out @[Tilelink.scala 110:18] 
    node T_1609 = and(io.out.grant.ready, io.out.grant.valid) @[Decoupled.scala 16:42] 
    wire T_1617 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1617 is invalid @[Definitions.scala 846:34] 
    T_1617[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1619 = eq(io.out.grant.bits.g_type, T_1617[0]) @[Util.scala 7:47] 
    node T_1620 = eq(io.out.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1621 = mux(io.out.grant.bits.is_builtin_type, T_1619, T_1620) @[Definitions.scala 274:33] 
    node T_1622 = and(UInt<1>("h01"), T_1621) @[Definitions.scala 274:27] 
    node T_1624 = eq(T_1622, UInt<1>("h00")) @[Definitions.scala 142:36] 
    node T_1626 = eq(io.out.grant.bits.addr_beat, UInt<3>("h07")) @[Definitions.scala 142:69] 
    node T_1627 = or(T_1624, T_1626) @[Definitions.scala 142:56] 
    node grant_deq_roq = and(T_1609, T_1627) @[Tilelink.scala 112:43] 
    node T_1628 = and(acqRoq.io.deq.matches, grant_deq_roq) @[Tilelink.scala 114:48] 
    acqRoq.io.deq.valid <= T_1628 @[Tilelink.scala 114:23] 
    acqRoq.io.deq.tag <= io.out.grant.bits.client_xact_id @[Tilelink.scala 115:21] 
    node T_1630 = eq(acqRoq.io.deq.matches, UInt<1>("h00")) @[Tilelink.scala 117:26] 
    node T_1631 = and(T_1630, grant_deq_roq) @[Tilelink.scala 117:49] 
    relRoq.io.deq.valid <= T_1631 @[Tilelink.scala 117:23] 
    relRoq.io.deq.tag <= io.out.grant.bits.client_xact_id @[Tilelink.scala 118:21] 
    node T_1633 = eq(grant_deq_roq, UInt<1>("h00")) @[Tilelink.scala 120:10] 
    node T_1634 = or(T_1633, acqRoq.io.deq.matches) @[Tilelink.scala 120:25] 
    node T_1635 = or(T_1634, relRoq.io.deq.matches) @[Tilelink.scala 120:50] 
    node T_1636 = or(T_1635, reset) @[Tilelink.scala 120:9] 
    node T_1638 = eq(T_1636, UInt<1>("h00")) @[Tilelink.scala 120:9] 
    when T_1638 : @[Tilelink.scala 120:9] 
      printf(clk, UInt<1>(1), "Assertion failed: TileLink Unwrapper: client_xact_id mismatch\n    at Tilelink.scala:120 assert(!grant_deq_roq || acqRoq.io.deq.matches || relRoq.io.deq.matches,\n") @[Tilelink.scala 120:9] 
      stop(clk, UInt<1>(1), 1) @[Tilelink.scala 120:9] 
      skip @[Tilelink.scala 120:9] 
    node T_1639 = mux(acqRoq.io.deq.data, io.out.grant.bits.g_type, UInt<1>("h00")) @[Tilelink.scala 128:17] 
    wire acq_grant : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    acq_grant is invalid @[Definitions.scala 856:19] 
    acq_grant.is_builtin_type <= acqRoq.io.deq.data @[Definitions.scala 857:25] 
    acq_grant.g_type <= T_1639 @[Definitions.scala 858:16] 
    acq_grant.client_xact_id <= io.out.grant.bits.client_xact_id @[Definitions.scala 859:24] 
    acq_grant.manager_xact_id <= io.out.grant.bits.manager_xact_id @[Definitions.scala 860:25] 
    acq_grant.addr_beat <= io.out.grant.bits.addr_beat @[Definitions.scala 861:19] 
    acq_grant.data <= io.out.grant.bits.data @[Definitions.scala 862:14] 
    node T_1694 = eq(io.in.release.valid, UInt<1>("h00")) @[Tilelink.scala 134:10] 
    node T_1695 = or(T_1694, io.in.release.bits.voluntary) @[Tilelink.scala 134:31] 
    node T_1696 = or(T_1695, reset) @[Tilelink.scala 134:9] 
    node T_1698 = eq(T_1696, UInt<1>("h00")) @[Tilelink.scala 134:9] 
    when T_1698 : @[Tilelink.scala 134:9] 
      printf(clk, UInt<1>(1), "Assertion failed: Unwrapper can only process voluntary releases.\n    at Tilelink.scala:134 assert(!io.in.release.valid || io.in.release.bits.isVoluntary(), \"Unwrapper can only process voluntary releases.\")\n") @[Tilelink.scala 134:9] 
      stop(clk, UInt<1>(1), 1) @[Tilelink.scala 134:9] 
      skip @[Tilelink.scala 134:9] 
    wire rel_grant : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    rel_grant is invalid @[Definitions.scala 856:19] 
    rel_grant.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    rel_grant.g_type <= UInt<3>("h00") @[Definitions.scala 858:16] 
    rel_grant.client_xact_id <= io.out.grant.bits.client_xact_id @[Definitions.scala 859:24] 
    rel_grant.manager_xact_id <= io.out.grant.bits.manager_xact_id @[Definitions.scala 860:25] 
    rel_grant.addr_beat <= io.out.grant.bits.addr_beat @[Definitions.scala 861:19] 
    rel_grant.data <= io.out.grant.bits.data @[Definitions.scala 862:14] 
    io.in.grant.valid <= io.out.grant.valid @[Tilelink.scala 143:21] 
    node T_1754 = mux(acqRoq.io.deq.matches, acq_grant, rel_grant) @[Tilelink.scala 144:26] 
    io.in.grant.bits <- T_1754 @[Tilelink.scala 144:20] 
    io.out.grant.ready <= io.in.grant.ready @[Tilelink.scala 145:22] 
    io.in.probe.valid <= UInt<1>("h00") @[Tilelink.scala 147:21] 
    
  module ClientTileLinkEnqueuer : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip inner : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}, outer : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<4>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<1>, manager_id : UInt<1>}}}}
    
    io is invalid
    io.outer.acquire <- io.inner.acquire @[Enqueuer.scala 40:20] 
    io.inner.probe <- io.outer.probe @[Enqueuer.scala 41:20] 
    io.outer.release <- io.inner.release @[Enqueuer.scala 42:20] 
    io.inner.grant <- io.outer.grant @[Enqueuer.scala 43:20] 
    io.outer.finish <- io.inner.finish @[Enqueuer.scala 44:20] 
    
  module ReorderQueue_2 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : {addr_beat : UInt<3>, subblock : UInt<1>}, tag : UInt<4>}}, deq : {flip valid : UInt<1>, flip tag : UInt<4>, data : {addr_beat : UInt<3>, subblock : UInt<1>}, matches : UInt<1>}}
    
    io is invalid
    cmem T_229 : {addr_beat : UInt<3>, subblock : UInt<1>}[16] @[util.scala 214:23] 
    wire T_251 : UInt<1>[16] @[util.scala 215:53] 
    T_251 is invalid @[util.scala 215:53] 
    T_251[0] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[1] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[2] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[3] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[4] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[5] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[6] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[7] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[8] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[9] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[10] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[11] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[12] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[13] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[14] <= UInt<1>("h01") @[util.scala 215:53] 
    T_251[15] <= UInt<1>("h01") @[util.scala 215:53] 
    reg T_255 : UInt<1>[16], clk with : (reset => (reset, T_251))
    io.enq.ready <= T_255[io.enq.bits.tag] @[util.scala 217:18] 
    infer mport T_257 = T_229[io.deq.tag], clk
    io.deq.data <- T_257 @[util.scala 218:17] 
    node T_281 = eq(T_255[io.deq.tag], UInt<1>("h00")) @[util.scala 219:23] 
    io.deq.matches <= T_281 @[util.scala 219:20] 
    node T_282 = and(io.enq.valid, io.enq.ready) @[util.scala 221:24] 
    when T_282 : @[util.scala 221:41] 
      infer mport T_283 = T_229[io.enq.bits.tag], clk
      T_283 <- io.enq.bits.data @[util.scala 222:33] 
      T_255[io.enq.bits.tag] <= UInt<1>("h00") @[util.scala 223:33] 
      skip @[util.scala 221:41] 
    when io.deq.valid : @[util.scala 226:25] 
      T_255[io.deq.tag] <= UInt<1>("h01") @[util.scala 227:28] 
      skip @[util.scala 226:25] 
    
  module IdMapper : 
    input clk : Clock
    input reset : UInt<1>
    output io : {req : {flip valid : UInt<1>, ready : UInt<1>, flip in_id : UInt<4>, out_id : UInt<5>}, resp : {flip valid : UInt<1>, matches : UInt<1>, flip out_id : UInt<5>, in_id : UInt<4>}}
    
    io is invalid
    io.req.ready <= UInt<1>("h01") @[Nasti.scala 31:18] 
    io.req.out_id <= io.req.in_id @[Nasti.scala 32:19] 
    io.resp.matches <= UInt<1>("h01") @[Nasti.scala 33:21] 
    io.resp.in_id <= io.resp.out_id @[Nasti.scala 34:19] 
    
  module LockingArbiter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, client_id : UInt<1>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_766 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_768 : UInt, clk
    node T_770 = neq(T_766, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    wire T_778 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_778 is invalid @[Definitions.scala 846:34] 
    T_778[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_780 = eq(io.out.bits.g_type, T_778[0]) @[Util.scala 7:47] 
    node T_781 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_782 = mux(io.out.bits.is_builtin_type, T_780, T_781) @[Definitions.scala 274:33] 
    node T_783 = and(UInt<1>("h01"), T_782) @[Definitions.scala 274:27] 
    node T_784 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_785 = and(T_784, T_783) @[Arbiter.scala 42:25] 
    when T_785 : @[Arbiter.scala 42:39] 
      T_768 <= io.chosen @[Arbiter.scala 43:15] 
      node T_787 = eq(T_766, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_789 = add(T_766, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_790 = tail(T_789, 1) @[Counter.scala 21:22] 
      T_766 <= T_790 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_770 : @[Arbiter.scala 47:19] 
      io.chosen <= T_768 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_793 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_795 = eq(T_768, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_796 = mux(T_770, T_795, UInt<1>("h01")) @[Arbiter.scala 49:22] 
    node T_797 = and(T_796, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_797 @[Arbiter.scala 49:16] 
    node T_799 = eq(T_768, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_800 = mux(T_770, T_799, T_793) @[Arbiter.scala 49:22] 
    node T_801 = and(T_800, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_801 @[Arbiter.scala 49:16] 
    when io.in[0].valid : @[Arbiter.scala 80:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 80:36] 
      skip @[Arbiter.scala 80:27] 
    
  module NastiIOTileLinkIOConverter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, nasti : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
    
    io is invalid
    wire T_688 : UInt<3>[3] @[Definitions.scala 354:26] 
    T_688 is invalid @[Definitions.scala 354:26] 
    T_688[0] <= UInt<3>("h02") @[Definitions.scala 354:26] 
    T_688[1] <= UInt<3>("h03") @[Definitions.scala 354:26] 
    T_688[2] <= UInt<3>("h04") @[Definitions.scala 354:26] 
    node T_690 = eq(io.tl.acquire.bits.a_type, T_688[0]) @[Util.scala 7:47] 
    node T_691 = eq(io.tl.acquire.bits.a_type, T_688[1]) @[Util.scala 7:47] 
    node T_692 = eq(io.tl.acquire.bits.a_type, T_688[2]) @[Util.scala 7:47] 
    node T_693 = or(T_690, T_691) @[Util.scala 7:62] 
    node T_694 = or(T_693, T_692) @[Util.scala 7:62] 
    node has_data = and(io.tl.acquire.bits.is_builtin_type, T_694) @[Definitions.scala 228:55] 
    wire T_703 : UInt<3>[3] @[Definitions.scala 356:29] 
    T_703 is invalid @[Definitions.scala 356:29] 
    T_703[0] <= UInt<3>("h02") @[Definitions.scala 356:29] 
    T_703[1] <= UInt<3>("h00") @[Definitions.scala 356:29] 
    T_703[2] <= UInt<3>("h04") @[Definitions.scala 356:29] 
    node T_705 = eq(io.tl.acquire.bits.a_type, T_703[0]) @[Util.scala 7:47] 
    node T_706 = eq(io.tl.acquire.bits.a_type, T_703[1]) @[Util.scala 7:47] 
    node T_707 = eq(io.tl.acquire.bits.a_type, T_703[2]) @[Util.scala 7:47] 
    node T_708 = or(T_705, T_706) @[Util.scala 7:62] 
    node T_709 = or(T_708, T_707) @[Util.scala 7:62] 
    node is_subblock = and(io.tl.acquire.bits.is_builtin_type, T_709) @[Definitions.scala 215:62] 
    node T_711 = and(UInt<1>("h01"), io.tl.acquire.bits.is_builtin_type) @[Definitions.scala 231:70] 
    wire T_718 : UInt<3>[1] @[Definitions.scala 355:35] 
    T_718 is invalid @[Definitions.scala 355:35] 
    T_718[0] <= UInt<3>("h03") @[Definitions.scala 355:35] 
    node T_720 = eq(io.tl.acquire.bits.a_type, T_718[0]) @[Util.scala 7:47] 
    node is_multibeat = and(T_711, T_720) @[Definitions.scala 231:89] 
    node T_721 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 16:42] 
    node T_722 = and(T_721, is_multibeat) @[Nasti.scala 95:26] 
    reg tl_cnt_out : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_722 : @[Counter.scala 43:17] 
      node T_725 = eq(tl_cnt_out, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_727 = add(tl_cnt_out, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_728 = tail(T_727, 1) @[Counter.scala 21:22] 
      tl_cnt_out <= T_728 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node tl_wrap_out = and(T_722, T_725) @[Counter.scala 44:20] 
    node T_730 = eq(has_data, UInt<1>("h00")) @[Nasti.scala 97:42] 
    node get_valid = and(io.tl.acquire.valid, T_730) @[Nasti.scala 97:39] 
    node put_valid = and(io.tl.acquire.valid, has_data) @[Nasti.scala 98:39] 
    inst roq of ReorderQueue_2 @[Nasti.scala 103:19] 
    roq.io is invalid
    roq.clk <= clk
    roq.reset <= reset
    inst get_id_mapper of IdMapper @[Nasti.scala 106:29] 
    get_id_mapper.io is invalid
    get_id_mapper.clk <= clk
    get_id_mapper.reset <= reset
    inst put_id_mapper of IdMapper @[Nasti.scala 107:29] 
    put_id_mapper.io is invalid
    put_id_mapper.clk <= clk
    put_id_mapper.reset <= reset
    node T_755 = eq(io.tl.acquire.bits.addr_beat, UInt<1>("h00")) @[Nasti.scala 110:65] 
    node put_id_mask = or(is_subblock, T_755) @[Nasti.scala 110:33] 
    node T_757 = eq(put_id_mask, UInt<1>("h00")) @[Nasti.scala 111:52] 
    node put_id_ready = or(put_id_mapper.io.req.ready, T_757) @[Nasti.scala 111:49] 
    reg w_inflight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg w_id : UInt<5>, clk with : (reset => (reset, UInt<5>("h00")))
    node aw_ready = or(w_inflight, io.nasti.aw.ready) @[Nasti.scala 125:29] 
    node T_760 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 16:42] 
    node T_762 = eq(roq.io.deq.data.subblock, UInt<1>("h00")) @[Nasti.scala 133:26] 
    node T_763 = and(T_760, T_762) @[Nasti.scala 133:23] 
    reg nasti_cnt_out : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_763 : @[Counter.scala 43:17] 
      node T_766 = eq(nasti_cnt_out, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_768 = add(nasti_cnt_out, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_769 = tail(T_768, 1) @[Counter.scala 21:22] 
      nasti_cnt_out <= T_769 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node nasti_wrap_out = and(T_763, T_766) @[Counter.scala 44:20] 
    node T_770 = and(get_valid, io.nasti.ar.ready) @[util.scala 238:53] 
    node T_771 = and(T_770, get_id_mapper.io.req.ready) @[util.scala 238:53] 
    roq.io.enq.valid <= T_771 @[Nasti.scala 135:20] 
    roq.io.enq.bits.tag <= io.nasti.ar.bits.id @[Nasti.scala 136:23] 
    roq.io.enq.bits.data.addr_beat <= io.tl.acquire.bits.addr_beat @[Nasti.scala 137:34] 
    roq.io.enq.bits.data.subblock <= is_subblock @[Nasti.scala 138:33] 
    node T_772 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 16:42] 
    node T_773 = or(nasti_wrap_out, roq.io.deq.data.subblock) @[Nasti.scala 139:60] 
    node T_774 = and(T_772, T_773) @[Nasti.scala 139:41] 
    roq.io.deq.valid <= T_774 @[Nasti.scala 139:20] 
    roq.io.deq.tag <= io.nasti.r.bits.id @[Nasti.scala 140:18] 
    node T_775 = and(get_valid, roq.io.enq.ready) @[util.scala 238:53] 
    node T_776 = and(T_775, io.nasti.ar.ready) @[util.scala 238:53] 
    get_id_mapper.io.req.valid <= T_776 @[Nasti.scala 142:30] 
    get_id_mapper.io.req.in_id <= io.tl.acquire.bits.client_xact_id @[Nasti.scala 143:30] 
    node T_777 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 16:42] 
    node T_778 = and(T_777, io.nasti.r.bits.last) @[Nasti.scala 144:52] 
    get_id_mapper.io.resp.valid <= T_778 @[Nasti.scala 144:31] 
    get_id_mapper.io.resp.out_id <= io.nasti.r.bits.id @[Nasti.scala 145:32] 
    node T_779 = and(put_valid, aw_ready) @[util.scala 238:53] 
    node T_780 = and(T_779, io.nasti.w.ready) @[util.scala 238:53] 
    node T_781 = and(T_780, put_id_mask) @[util.scala 238:53] 
    put_id_mapper.io.req.valid <= T_781 @[Nasti.scala 147:30] 
    put_id_mapper.io.req.in_id <= io.tl.acquire.bits.client_xact_id @[Nasti.scala 148:30] 
    node T_782 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 16:42] 
    put_id_mapper.io.resp.valid <= T_782 @[Nasti.scala 149:31] 
    put_id_mapper.io.resp.out_id <= io.nasti.b.bits.id @[Nasti.scala 150:32] 
    node T_783 = and(get_valid, roq.io.enq.ready) @[util.scala 238:53] 
    node T_784 = and(T_783, get_id_mapper.io.req.ready) @[util.scala 238:53] 
    io.nasti.ar.valid <= T_784 @[Nasti.scala 153:21] 
    wire T_792 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_792 is invalid @[Definitions.scala 357:30] 
    T_792[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_792[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_794 = eq(io.tl.acquire.bits.a_type, T_792[0]) @[Util.scala 7:47] 
    node T_795 = eq(io.tl.acquire.bits.a_type, T_792[1]) @[Util.scala 7:47] 
    node T_796 = or(T_794, T_795) @[Util.scala 7:62] 
    node T_797 = and(io.tl.acquire.bits.is_builtin_type, T_796) @[Definitions.scala 300:27] 
    node T_798 = bits(io.tl.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_800 = mux(T_797, T_798, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_801 = cat(io.tl.acquire.bits.addr_block, io.tl.acquire.bits.addr_beat) @[Cat.scala 20:58] 
    node T_802 = cat(T_801, T_800) @[Cat.scala 20:58] 
    node T_803 = bits(io.tl.acquire.bits.union, 8, 6) @[Definitions.scala 176:38] 
    node T_813 = eq(UInt<3>("h07"), T_803) @[Mux.scala 46:19] 
    node T_814 = mux(T_813, UInt<2>("h03"), UInt<3>("h07")) @[Mux.scala 46:16] 
    node T_815 = eq(UInt<3>("h03"), T_803) @[Mux.scala 46:19] 
    node T_816 = mux(T_815, UInt<2>("h03"), T_814) @[Mux.scala 46:16] 
    node T_817 = eq(UInt<3>("h06"), T_803) @[Mux.scala 46:19] 
    node T_818 = mux(T_817, UInt<2>("h02"), T_816) @[Mux.scala 46:16] 
    node T_819 = eq(UInt<3>("h02"), T_803) @[Mux.scala 46:19] 
    node T_820 = mux(T_819, UInt<2>("h02"), T_818) @[Mux.scala 46:16] 
    node T_821 = eq(UInt<3>("h05"), T_803) @[Mux.scala 46:19] 
    node T_822 = mux(T_821, UInt<1>("h01"), T_820) @[Mux.scala 46:16] 
    node T_823 = eq(UInt<3>("h01"), T_803) @[Mux.scala 46:19] 
    node T_824 = mux(T_823, UInt<1>("h01"), T_822) @[Mux.scala 46:16] 
    node T_825 = eq(UInt<3>("h04"), T_803) @[Mux.scala 46:19] 
    node T_826 = mux(T_825, UInt<1>("h00"), T_824) @[Mux.scala 46:16] 
    node T_827 = eq(UInt<3>("h00"), T_803) @[Mux.scala 46:19] 
    node T_828 = mux(T_827, UInt<1>("h00"), T_826) @[Mux.scala 46:16] 
    node T_830 = mux(is_subblock, T_828, UInt<2>("h03")) @[Nasti.scala 157:15] 
    node T_833 = mux(is_subblock, UInt<1>("h00"), UInt<3>("h07")) @[Nasti.scala 160:14] 
    wire T_853 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 165:18] 
    T_853 is invalid @[nasti.scala 165:18] 
    T_853.id <= get_id_mapper.io.req.out_id @[nasti.scala 166:11] 
    T_853.addr <= T_802 @[nasti.scala 167:13] 
    T_853.len <= T_833 @[nasti.scala 168:12] 
    T_853.size <= T_830 @[nasti.scala 169:13] 
    T_853.burst <= UInt<2>("h01") @[nasti.scala 170:14] 
    T_853.lock <= UInt<1>("h00") @[nasti.scala 171:13] 
    T_853.cache <= UInt<1>("h00") @[nasti.scala 172:14] 
    T_853.prot <= UInt<1>("h00") @[nasti.scala 173:13] 
    T_853.qos <= UInt<1>("h00") @[nasti.scala 174:12] 
    T_853.region <= UInt<1>("h00") @[nasti.scala 175:15] 
    T_853.user <= UInt<1>("h00") @[nasti.scala 176:13] 
    io.nasti.ar.bits <- T_853 @[Nasti.scala 154:20] 
    node T_872 = eq(io.tl.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
    node T_873 = and(io.tl.acquire.bits.is_builtin_type, T_872) @[Definitions.scala 212:54] 
    node T_895 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_897 = eq(io.tl.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node T_898 = and(io.tl.acquire.bits.is_builtin_type, T_897) @[Definitions.scala 212:54] 
    node T_900 = eq(io.tl.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_901 = and(io.tl.acquire.bits.is_builtin_type, T_900) @[Definitions.scala 212:54] 
    node T_902 = or(T_898, T_901) @[Definitions.scala 190:56] 
    node T_903 = bits(io.tl.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
    node T_905 = mux(T_902, T_903, UInt<1>("h00")) @[Definitions.scala 192:30] 
    node T_906 = mux(T_873, T_895, T_905) @[Definitions.scala 192:8] 
    node T_907 = not(T_906) @[Nasti.scala 179:23] 
    node all_inside_0_0 = bits(T_907, 0, 0) @[Nasti.scala 179:52] 
    node all_inside_0_1 = bits(T_907, 1, 1) @[Nasti.scala 179:52] 
    node all_inside_0_2 = bits(T_907, 2, 2) @[Nasti.scala 179:52] 
    node all_inside_0_3 = bits(T_907, 3, 3) @[Nasti.scala 179:52] 
    node all_inside_0_4 = bits(T_907, 4, 4) @[Nasti.scala 179:52] 
    node all_inside_0_5 = bits(T_907, 5, 5) @[Nasti.scala 179:52] 
    node all_inside_0_6 = bits(T_907, 6, 6) @[Nasti.scala 179:52] 
    node all_inside_0_7 = bits(T_907, 7, 7) @[Nasti.scala 179:52] 
    node T_908 = and(all_inside_0_0, all_inside_0_1) @[Nasti.scala 167:72] 
    node T_909 = and(all_inside_0_2, all_inside_0_3) @[Nasti.scala 167:72] 
    node T_910 = and(all_inside_0_4, all_inside_0_5) @[Nasti.scala 167:72] 
    node T_911 = and(all_inside_0_6, all_inside_0_7) @[Nasti.scala 167:72] 
    node T_912 = and(T_908, T_909) @[Nasti.scala 167:72] 
    node T_913 = and(T_910, T_911) @[Nasti.scala 167:72] 
    node T_914 = and(T_912, T_913) @[Nasti.scala 167:72] 
    node T_918 = and(UInt<1>("h01"), T_913) @[Nasti.scala 169:72] 
    node T_919 = and(UInt<1>("h01"), T_912) @[Nasti.scala 169:72] 
    node T_920 = or(T_918, T_919) @[Nasti.scala 172:49] 
    node T_921 = cat(UInt<1>("h00"), T_919) @[Cat.scala 20:58] 
    node T_923 = mux(T_920, UInt<2>("h02"), UInt<2>("h03")) @[Nasti.scala 174:21] 
    node T_924 = and(T_918, T_909) @[Nasti.scala 169:72] 
    node T_925 = and(T_918, T_908) @[Nasti.scala 169:72] 
    node T_926 = and(T_919, T_911) @[Nasti.scala 169:72] 
    node T_927 = and(T_919, T_910) @[Nasti.scala 169:72] 
    node T_928 = or(T_925, T_927) @[Nasti.scala 171:49] 
    node T_929 = or(T_924, T_925) @[Nasti.scala 172:49] 
    node T_930 = or(T_929, T_926) @[Nasti.scala 172:49] 
    node T_931 = or(T_930, T_927) @[Nasti.scala 172:49] 
    node T_932 = cat(T_921, T_928) @[Cat.scala 20:58] 
    node T_934 = mux(T_931, UInt<1>("h01"), T_923) @[Nasti.scala 174:21] 
    node T_935 = and(T_924, all_inside_0_1) @[Nasti.scala 169:72] 
    node T_936 = and(T_924, all_inside_0_0) @[Nasti.scala 169:72] 
    node T_937 = and(T_925, all_inside_0_3) @[Nasti.scala 169:72] 
    node T_938 = and(T_925, all_inside_0_2) @[Nasti.scala 169:72] 
    node T_939 = and(T_926, all_inside_0_5) @[Nasti.scala 169:72] 
    node T_940 = and(T_926, all_inside_0_4) @[Nasti.scala 169:72] 
    node T_941 = and(T_927, all_inside_0_7) @[Nasti.scala 169:72] 
    node T_942 = and(T_927, all_inside_0_6) @[Nasti.scala 169:72] 
    node T_943 = or(T_936, T_938) @[Nasti.scala 171:49] 
    node T_944 = or(T_943, T_940) @[Nasti.scala 171:49] 
    node T_945 = or(T_944, T_942) @[Nasti.scala 171:49] 
    node T_946 = or(T_935, T_936) @[Nasti.scala 172:49] 
    node T_947 = or(T_946, T_937) @[Nasti.scala 172:49] 
    node T_948 = or(T_947, T_938) @[Nasti.scala 172:49] 
    node T_949 = or(T_948, T_939) @[Nasti.scala 172:49] 
    node T_950 = or(T_949, T_940) @[Nasti.scala 172:49] 
    node T_951 = or(T_950, T_941) @[Nasti.scala 172:49] 
    node T_952 = or(T_951, T_942) @[Nasti.scala 172:49] 
    node put_offset = cat(T_932, T_945) @[Cat.scala 20:58] 
    node put_size = mux(T_952, UInt<1>("h00"), T_934) @[Nasti.scala 174:21] 
    node T_955 = eq(w_inflight, UInt<1>("h00")) @[Nasti.scala 182:50] 
    node T_956 = and(put_valid, io.nasti.w.ready) @[util.scala 238:53] 
    node T_957 = and(T_956, put_id_ready) @[util.scala 238:53] 
    node T_958 = and(T_957, T_955) @[util.scala 238:53] 
    io.nasti.aw.valid <= T_958 @[Nasti.scala 182:21] 
    wire T_966 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_966 is invalid @[Definitions.scala 357:30] 
    T_966[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_966[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_968 = eq(io.tl.acquire.bits.a_type, T_966[0]) @[Util.scala 7:47] 
    node T_969 = eq(io.tl.acquire.bits.a_type, T_966[1]) @[Util.scala 7:47] 
    node T_970 = or(T_968, T_969) @[Util.scala 7:62] 
    node T_971 = and(io.tl.acquire.bits.is_builtin_type, T_970) @[Definitions.scala 300:27] 
    node T_972 = bits(io.tl.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_974 = mux(T_971, T_972, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_975 = cat(io.tl.acquire.bits.addr_block, io.tl.acquire.bits.addr_beat) @[Cat.scala 20:58] 
    node T_976 = cat(T_975, T_974) @[Cat.scala 20:58] 
    node T_978 = mux(is_multibeat, UInt<1>("h00"), put_offset) @[Nasti.scala 186:15] 
    node T_979 = or(T_976, T_978) @[Nasti.scala 185:43] 
    node T_981 = mux(is_multibeat, UInt<2>("h03"), put_size) @[Nasti.scala 187:15] 
    node T_984 = mux(is_multibeat, UInt<3>("h07"), UInt<1>("h00")) @[Nasti.scala 188:14] 
    wire T_997 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 145:18] 
    T_997 is invalid @[nasti.scala 145:18] 
    T_997.id <= put_id_mapper.io.req.out_id @[nasti.scala 146:11] 
    T_997.addr <= T_979 @[nasti.scala 147:13] 
    T_997.len <= T_984 @[nasti.scala 148:12] 
    T_997.size <= T_981 @[nasti.scala 149:13] 
    T_997.burst <= UInt<2>("h01") @[nasti.scala 150:14] 
    T_997.lock <= UInt<1>("h00") @[nasti.scala 151:13] 
    T_997.cache <= UInt<4>("h00") @[nasti.scala 152:14] 
    T_997.prot <= UInt<3>("h00") @[nasti.scala 153:13] 
    T_997.qos <= UInt<4>("h00") @[nasti.scala 154:12] 
    T_997.region <= UInt<4>("h00") @[nasti.scala 155:15] 
    T_997.user <= UInt<1>("h00") @[nasti.scala 156:13] 
    io.nasti.aw.bits <- T_997 @[Nasti.scala 183:20] 
    node T_1015 = and(put_valid, aw_ready) @[util.scala 238:53] 
    node T_1016 = and(T_1015, put_id_ready) @[util.scala 238:53] 
    io.nasti.w.valid <= T_1016 @[Nasti.scala 190:20] 
    node T_1018 = eq(io.tl.acquire.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
    node T_1019 = and(io.tl.acquire.bits.is_builtin_type, T_1018) @[Definitions.scala 212:54] 
    node T_1041 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_1043 = eq(io.tl.acquire.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node T_1044 = and(io.tl.acquire.bits.is_builtin_type, T_1043) @[Definitions.scala 212:54] 
    node T_1046 = eq(io.tl.acquire.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_1047 = and(io.tl.acquire.bits.is_builtin_type, T_1046) @[Definitions.scala 212:54] 
    node T_1048 = or(T_1044, T_1047) @[Definitions.scala 190:56] 
    node T_1049 = bits(io.tl.acquire.bits.union, 8, 1) @[Definitions.scala 191:25] 
    node T_1051 = mux(T_1048, T_1049, UInt<1>("h00")) @[Definitions.scala 192:30] 
    node T_1052 = mux(T_1019, T_1041, T_1051) @[Definitions.scala 192:8] 
    node T_1054 = eq(tl_cnt_out, UInt<3>("h07")) @[Nasti.scala 196:18] 
    node T_1056 = eq(is_multibeat, UInt<1>("h00")) @[Nasti.scala 196:45] 
    node T_1057 = mux(w_inflight, T_1054, T_1056) @[Nasti.scala 195:15] 
    wire T_1064 : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 185:17] 
    T_1064 is invalid @[nasti.scala 185:17] 
    T_1064.strb <= T_1052 @[nasti.scala 186:12] 
    T_1064.data <= io.tl.acquire.bits.data @[nasti.scala 187:12] 
    T_1064.last <= T_1057 @[nasti.scala 188:12] 
    T_1064.id <= w_id @[nasti.scala 189:12] 
    T_1064.user <= UInt<1>("h00") @[nasti.scala 190:12] 
    io.nasti.w.bits <- T_1064 @[Nasti.scala 191:19] 
    node T_1071 = and(aw_ready, io.nasti.w.ready) @[util.scala 238:53] 
    node T_1072 = and(T_1071, put_id_ready) @[util.scala 238:53] 
    node T_1073 = and(roq.io.enq.ready, io.nasti.ar.ready) @[util.scala 238:53] 
    node T_1074 = and(T_1073, get_id_mapper.io.req.ready) @[util.scala 238:53] 
    node T_1075 = mux(has_data, T_1072, T_1074) @[Nasti.scala 198:29] 
    io.tl.acquire.ready <= T_1075 @[Nasti.scala 198:23] 
    node T_1077 = eq(w_inflight, UInt<1>("h00")) @[Nasti.scala 202:9] 
    node T_1078 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 16:42] 
    node T_1079 = and(T_1077, T_1078) @[Nasti.scala 202:21] 
    node T_1080 = and(T_1079, is_multibeat) @[Nasti.scala 202:45] 
    when T_1080 : @[Nasti.scala 202:62] 
      w_inflight <= UInt<1>("h01") @[Nasti.scala 203:16] 
      w_id <= put_id_mapper.io.req.out_id @[Nasti.scala 204:10] 
      skip @[Nasti.scala 202:62] 
    when w_inflight : @[Nasti.scala 207:21] 
      when tl_wrap_out : @[Nasti.scala 208:24] 
        w_inflight <= UInt<1>("h00") @[Nasti.scala 208:37] 
        skip @[Nasti.scala 208:24] 
      skip @[Nasti.scala 207:21] 
    node T_1083 = and(io.tl.grant.ready, io.tl.grant.valid) @[Decoupled.scala 16:42] 
    wire T_1091 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_1091 is invalid @[Definitions.scala 846:34] 
    T_1091[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_1093 = eq(io.tl.grant.bits.g_type, T_1091[0]) @[Util.scala 7:47] 
    node T_1094 = eq(io.tl.grant.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_1095 = mux(io.tl.grant.bits.is_builtin_type, T_1093, T_1094) @[Definitions.scala 274:33] 
    node T_1096 = and(UInt<1>("h01"), T_1095) @[Definitions.scala 274:27] 
    node T_1097 = and(T_1083, T_1096) @[Nasti.scala 213:24] 
    reg tl_cnt_in : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    when T_1097 : @[Counter.scala 43:17] 
      node T_1100 = eq(tl_cnt_in, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_1102 = add(tl_cnt_in, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_1103 = tail(T_1102, 1) @[Counter.scala 21:22] 
      tl_cnt_in <= T_1103 @[Counter.scala 21:13] 
      skip @[Counter.scala 43:17] 
    node tl_wrap_in = and(T_1097, T_1100) @[Counter.scala 44:20] 
    inst gnt_arb of LockingArbiter @[Nasti.scala 214:23] 
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    io.tl.grant <- gnt_arb.io.out @[Nasti.scala 216:15] 
    gnt_arb.io.in[0].valid <= io.nasti.r.valid @[Nasti.scala 218:26] 
    io.nasti.r.ready <= gnt_arb.io.in[0].ready @[Nasti.scala 219:20] 
    node T_1135 = mux(roq.io.deq.data.subblock, UInt<3>("h04"), UInt<3>("h05")) @[Nasti.scala 222:17] 
    node T_1137 = mux(roq.io.deq.data.subblock, roq.io.deq.data.addr_beat, tl_cnt_in) @[Nasti.scala 226:20] 
    wire T_1165 : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_1165 is invalid @[Definitions.scala 856:19] 
    T_1165.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_1165.g_type <= T_1135 @[Definitions.scala 858:16] 
    T_1165.client_xact_id <= get_id_mapper.io.resp.in_id @[Definitions.scala 859:24] 
    T_1165.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_1165.addr_beat <= T_1137 @[Definitions.scala 861:19] 
    T_1165.data <= io.nasti.r.bits.data @[Definitions.scala 862:14] 
    gnt_arb.io.in[0].bits <- T_1165 @[Nasti.scala 220:25] 
    node T_1193 = eq(roq.io.deq.valid, UInt<1>("h00")) @[Nasti.scala 229:10] 
    node T_1194 = or(T_1193, roq.io.deq.matches) @[Nasti.scala 229:28] 
    node T_1195 = or(T_1194, reset) @[Nasti.scala 229:9] 
    node T_1197 = eq(T_1195, UInt<1>("h00")) @[Nasti.scala 229:9] 
    when T_1197 : @[Nasti.scala 229:9] 
      printf(clk, UInt<1>(1), "Assertion failed: TL -> NASTI converter ReorderQueue: NASTI tag error\n    at Nasti.scala:229 assert(!roq.io.deq.valid || roq.io.deq.matches,\n") @[Nasti.scala 229:9] 
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 229:9] 
      skip @[Nasti.scala 229:9] 
    node T_1199 = eq(gnt_arb.io.in[0].valid, UInt<1>("h00")) @[Nasti.scala 231:10] 
    node T_1200 = or(T_1199, get_id_mapper.io.resp.matches) @[Nasti.scala 231:34] 
    node T_1201 = or(T_1200, reset) @[Nasti.scala 231:9] 
    node T_1203 = eq(T_1201, UInt<1>("h00")) @[Nasti.scala 231:9] 
    when T_1203 : @[Nasti.scala 231:9] 
      printf(clk, UInt<1>(1), "Assertion failed: TL -> NASTI ID Mapper: NASTI tag error\n    at Nasti.scala:231 assert(!gnt_arb.io.in(0).valid || get_id_mapper.io.resp.matches,\n") @[Nasti.scala 231:9] 
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 231:9] 
      skip @[Nasti.scala 231:9] 
    gnt_arb.io.in[1].valid <= io.nasti.b.valid @[Nasti.scala 234:26] 
    io.nasti.b.ready <= gnt_arb.io.in[1].ready @[Nasti.scala 235:20] 
    wire T_1236 : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_1236 is invalid @[Definitions.scala 856:19] 
    T_1236.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_1236.g_type <= UInt<3>("h03") @[Definitions.scala 858:16] 
    T_1236.client_xact_id <= put_id_mapper.io.resp.in_id @[Definitions.scala 859:24] 
    T_1236.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_1236.addr_beat <= UInt<1>("h00") @[Definitions.scala 861:19] 
    T_1236.data <= UInt<1>("h00") @[Definitions.scala 862:14] 
    gnt_arb.io.in[1].bits <- T_1236 @[Nasti.scala 236:25] 
    node T_1264 = eq(gnt_arb.io.in[1].valid, UInt<1>("h00")) @[Nasti.scala 243:10] 
    node T_1265 = or(T_1264, put_id_mapper.io.resp.matches) @[Nasti.scala 243:34] 
    node T_1266 = or(T_1265, reset) @[Nasti.scala 243:9] 
    node T_1268 = eq(T_1266, UInt<1>("h00")) @[Nasti.scala 243:9] 
    when T_1268 : @[Nasti.scala 243:9] 
      printf(clk, UInt<1>(1), "Assertion failed: NASTI tag error\n    at Nasti.scala:243 assert(!gnt_arb.io.in(1).valid || put_id_mapper.io.resp.matches, \"NASTI tag error\")\n") @[Nasti.scala 243:9] 
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 243:9] 
      skip @[Nasti.scala 243:9] 
    node T_1270 = eq(io.nasti.r.valid, UInt<1>("h00")) @[Nasti.scala 245:10] 
    node T_1272 = eq(io.nasti.r.bits.resp, UInt<1>("h00")) @[Nasti.scala 245:52] 
    node T_1273 = or(T_1270, T_1272) @[Nasti.scala 245:28] 
    node T_1274 = or(T_1273, reset) @[Nasti.scala 245:9] 
    node T_1276 = eq(T_1274, UInt<1>("h00")) @[Nasti.scala 245:9] 
    when T_1276 : @[Nasti.scala 245:9] 
      printf(clk, UInt<1>(1), "Assertion failed: NASTI read error\n    at Nasti.scala:245 assert(!io.nasti.r.valid || io.nasti.r.bits.resp === UInt(0), \"NASTI read error\")\n") @[Nasti.scala 245:9] 
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 245:9] 
      skip @[Nasti.scala 245:9] 
    node T_1278 = eq(io.nasti.b.valid, UInt<1>("h00")) @[Nasti.scala 246:10] 
    node T_1280 = eq(io.nasti.b.bits.resp, UInt<1>("h00")) @[Nasti.scala 246:52] 
    node T_1281 = or(T_1278, T_1280) @[Nasti.scala 246:28] 
    node T_1282 = or(T_1281, reset) @[Nasti.scala 246:9] 
    node T_1284 = eq(T_1282, UInt<1>("h00")) @[Nasti.scala 246:9] 
    when T_1284 : @[Nasti.scala 246:9] 
      printf(clk, UInt<1>(1), "Assertion failed: NASTI write error\n    at Nasti.scala:246 assert(!io.nasti.b.valid || io.nasti.b.bits.resp === UInt(0), \"NASTI write error\")\n") @[Nasti.scala 246:9] 
      stop(clk, UInt<1>(1), 1) @[Nasti.scala 246:9] 
      skip @[Nasti.scala 246:9] 
    
  module Queue_15 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_122 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_122) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_123 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_123
    node T_124 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_124
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_125 = ram[UInt<1>("h00")], clk
      T_125 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_139 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_139 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_141 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_141 @[Decoupled.scala 138:16] 
    node T_143 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_143 @[Decoupled.scala 139:16] 
    infer mport T_144 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_144 @[Decoupled.scala 140:15] 
    node T_156 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_156, 1) @[Decoupled.scala 155:32] 
    node T_157 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_158 = cat(T_157, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_158 @[Decoupled.scala 157:14] 
    
  module Queue_17 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}[2] @[Decoupled.scala 116:16] 
    reg T_65 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_67 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_65, T_67) @[Decoupled.scala 121:33] 
    node T_70 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_70) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_71 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_71
    node T_72 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_72
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_73 = ram[T_65], clk
      T_73 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_80 = eq(T_65, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_82 = add(T_65, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_83 = tail(T_82, 1) @[Counter.scala 21:22] 
      T_65 <= T_83 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_85 = eq(T_67, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_87 = add(T_67, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_88 = tail(T_87, 1) @[Counter.scala 21:22] 
      T_67 <= T_88 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_89 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_89 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_91 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_91 @[Decoupled.scala 138:16] 
    node T_93 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_93 @[Decoupled.scala 139:16] 
    infer mport T_94 = ram[T_67], clk
    io.deq.bits <- T_94 @[Decoupled.scala 140:15] 
    node T_100 = sub(T_65, T_67) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_100, 1) @[Decoupled.scala 155:32] 
    node T_101 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_102 = cat(T_101, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_102 @[Decoupled.scala 157:14] 
    
  module Queue_18 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<2>}
    
    io is invalid
    cmem ram : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}[2] @[Decoupled.scala 116:16] 
    reg T_65 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg T_67 : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(T_65, T_67) @[Decoupled.scala 121:33] 
    node T_70 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_70) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_71 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_71
    node T_72 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_72
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_73 = ram[T_65], clk
      T_73 <- io.enq.bits @[Decoupled.scala 128:24] 
      node T_80 = eq(T_65, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_82 = add(T_65, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_83 = tail(T_82, 1) @[Counter.scala 21:22] 
      T_65 <= T_83 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      node T_85 = eq(T_67, UInt<1>("h01")) @[Counter.scala 20:24] 
      node T_87 = add(T_67, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_88 = tail(T_87, 1) @[Counter.scala 21:22] 
      T_67 <= T_88 @[Counter.scala 21:13] 
      skip @[Decoupled.scala 131:17] 
    node T_89 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_89 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_91 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_91 @[Decoupled.scala 138:16] 
    node T_93 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_93 @[Decoupled.scala 139:16] 
    infer mport T_94 = ram[T_67], clk
    io.deq.bits <- T_94 @[Decoupled.scala 140:15] 
    node T_100 = sub(T_65, T_67) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_100, 1) @[Decoupled.scala 155:32] 
    node T_101 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_102 = cat(T_101, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_102 @[Decoupled.scala 157:14] 
    
  module Queue_19 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_50 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_50) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_51 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_51
    node T_52 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_52
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_53 = ram[UInt<1>("h00")], clk
      T_53 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_59 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_59 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_61 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_61 @[Decoupled.scala 138:16] 
    node T_63 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_63 @[Decoupled.scala 139:16] 
    infer mport T_64 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_64 @[Decoupled.scala 140:15] 
    node T_68 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_68, 1) @[Decoupled.scala 155:32] 
    node T_69 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_70 = cat(T_69, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_70 @[Decoupled.scala 157:14] 
    
  module OuterMemorySystem : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip tiles_cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], flip tiles_uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], flip incoherent : UInt<1>[1], mem_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[1], mem_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mem_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip bus_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    inst l1tol2net of PortedTileLinkCrossbar @[RocketChip.scala 397:25] 
    l1tol2net.io is invalid
    l1tol2net.clk <= clk
    l1tol2net.reset <= reset
    inst managerEndpoints_0 of L2BroadcastHub @[Configs.scala 164:15] 
    managerEndpoints_0.io is invalid
    managerEndpoints_0.clk <= clk
    managerEndpoints_0.reset <= reset
    managerEndpoints_0.io.incoherent <= io.incoherent @[RocketChip.scala 401:43] 
    inst mmioManager of MMIOTileLinkManager @[RocketChip.scala 403:27] 
    mmioManager.io is invalid
    mmioManager.clk <= clk
    mmioManager.reset <= reset
    io.mmio <- mmioManager.io.outer @[RocketChip.scala 408:11] 
    l1tol2net.io.clients_cached <= io.tiles_cached @[RocketChip.scala 418:31] 
    l1tol2net.io.clients_uncached[0] <- io.tiles_uncached[0] @[RocketChip.scala 419:33] 
    l1tol2net.io.managers[0] <- managerEndpoints_0.io.inner @[RocketChip.scala 420:25] 
    l1tol2net.io.managers[1] <- mmioManager.io.inner @[RocketChip.scala 420:25] 
    inst mem_ic of TileLinkMemoryInterconnect @[RocketChip.scala 435:22] 
    mem_ic.io is invalid
    mem_ic.clk <= clk
    mem_ic.reset <= reset
    inst ClientTileLinkIOUnwrapper_1 of ClientTileLinkIOUnwrapper @[RocketChip.scala 438:24] 
    ClientTileLinkIOUnwrapper_1.io is invalid
    ClientTileLinkIOUnwrapper_1.clk <= clk
    ClientTileLinkIOUnwrapper_1.reset <= reset
    inst ClientTileLinkEnqueuer_1 of ClientTileLinkEnqueuer @[Enqueuer.scala 49:19] 
    ClientTileLinkEnqueuer_1.io is invalid
    ClientTileLinkEnqueuer_1.clk <= clk
    ClientTileLinkEnqueuer_1.reset <= reset
    ClientTileLinkEnqueuer_1.io.inner <- managerEndpoints_0.io.outer @[Enqueuer.scala 50:16] 
    ClientTileLinkIOUnwrapper_1.io.in <- ClientTileLinkEnqueuer_1.io.outer @[RocketChip.scala 439:18] 
    mem_ic.io.in[0] <- ClientTileLinkIOUnwrapper_1.io.out @[Tilelink.scala 165:9] 
    inst NastiIOTileLinkIOConverter_1 of NastiIOTileLinkIOConverter @[RocketChip.scala 129:22] 
    NastiIOTileLinkIOConverter_1.io is invalid
    NastiIOTileLinkIOConverter_1.clk <= clk
    NastiIOTileLinkIOConverter_1.reset <= reset
    NastiIOTileLinkIOConverter_1.io.tl <- mem_ic.io.out[0] @[RocketChip.scala 130:16] 
    inst Queue_15_1 of Queue_15 @[Decoupled.scala 179:19] 
    Queue_15_1.io is invalid
    Queue_15_1.clk <= clk
    Queue_15_1.reset <= reset
    Queue_15_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.ar.valid @[Decoupled.scala 180:20] 
    Queue_15_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.ar.bits @[Decoupled.scala 181:19] 
    NastiIOTileLinkIOConverter_1.io.nasti.ar.ready <= Queue_15_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.mem_axi[0].ar <- Queue_15_1.io.deq @[RocketChip.scala 122:14] 
    inst Queue_16_1 of Queue_15 @[Decoupled.scala 179:19] 
    Queue_16_1.io is invalid
    Queue_16_1.clk <= clk
    Queue_16_1.reset <= reset
    Queue_16_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.aw.valid @[Decoupled.scala 180:20] 
    Queue_16_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.aw.bits @[Decoupled.scala 181:19] 
    NastiIOTileLinkIOConverter_1.io.nasti.aw.ready <= Queue_16_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.mem_axi[0].aw <- Queue_16_1.io.deq @[RocketChip.scala 123:14] 
    inst Queue_17_1 of Queue_17 @[Decoupled.scala 179:19] 
    Queue_17_1.io is invalid
    Queue_17_1.clk <= clk
    Queue_17_1.reset <= reset
    Queue_17_1.io.enq.valid <= NastiIOTileLinkIOConverter_1.io.nasti.w.valid @[Decoupled.scala 180:20] 
    Queue_17_1.io.enq.bits <- NastiIOTileLinkIOConverter_1.io.nasti.w.bits @[Decoupled.scala 181:19] 
    NastiIOTileLinkIOConverter_1.io.nasti.w.ready <= Queue_17_1.io.enq.ready @[Decoupled.scala 182:15] 
    io.mem_axi[0].w <- Queue_17_1.io.deq @[RocketChip.scala 124:14] 
    inst Queue_18_1 of Queue_18 @[Decoupled.scala 179:19] 
    Queue_18_1.io is invalid
    Queue_18_1.clk <= clk
    Queue_18_1.reset <= reset
    Queue_18_1.io.enq.valid <= io.mem_axi[0].r.valid @[Decoupled.scala 180:20] 
    Queue_18_1.io.enq.bits <- io.mem_axi[0].r.bits @[Decoupled.scala 181:19] 
    io.mem_axi[0].r.ready <= Queue_18_1.io.enq.ready @[Decoupled.scala 182:15] 
    NastiIOTileLinkIOConverter_1.io.nasti.r <- Queue_18_1.io.deq @[RocketChip.scala 125:14] 
    inst Queue_19_1 of Queue_19 @[Decoupled.scala 179:19] 
    Queue_19_1.io is invalid
    Queue_19_1.clk <= clk
    Queue_19_1.reset <= reset
    Queue_19_1.io.enq.valid <= io.mem_axi[0].b.valid @[Decoupled.scala 180:20] 
    Queue_19_1.io.enq.bits <- io.mem_axi[0].b.bits @[Decoupled.scala 181:19] 
    io.mem_axi[0].b.ready <= Queue_19_1.io.enq.ready @[Decoupled.scala 182:15] 
    NastiIOTileLinkIOConverter_1.io.nasti.b <- Queue_19_1.io.deq @[RocketChip.scala 126:14] 
    io.mem_axi[0].ar.bits.cache <= UInt<4>("h03") @[RocketChip.scala 447:25] 
    io.mem_axi[0].aw.bits.cache <= UInt<4>("h03") @[RocketChip.scala 448:25] 
    
  module LockingRRArbiter_10 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, chosen : UInt<1>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<1>("h00")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_518 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_520 : UInt, clk
    node T_522 = neq(T_518, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    wire T_530 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_530 is invalid @[Definitions.scala 846:34] 
    T_530[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_532 = eq(io.out.bits.g_type, T_530[0]) @[Util.scala 7:47] 
    node T_533 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_534 = mux(io.out.bits.is_builtin_type, T_532, T_533) @[Definitions.scala 274:33] 
    node T_535 = and(UInt<1>("h01"), T_534) @[Definitions.scala 274:27] 
    node T_536 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_537 = and(T_536, T_535) @[Arbiter.scala 42:25] 
    when T_537 : @[Arbiter.scala 42:39] 
      T_520 <= io.chosen @[Arbiter.scala 43:15] 
      node T_539 = eq(T_518, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_541 = add(T_518, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_542 = tail(T_541, 1) @[Counter.scala 21:22] 
      T_518 <= T_542 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_522 : @[Arbiter.scala 47:19] 
      io.chosen <= T_520 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_544 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<1>, clk
    when T_544 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node T_547 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_548 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_549 = or(T_548, T_547) @[Arbiter.scala 64:50] 
    node T_551 = eq(T_520, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_552 = mux(T_522, T_551, T_549) @[Arbiter.scala 49:22] 
    node T_553 = and(T_552, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_553 @[Arbiter.scala 49:16] 
    
  module ClientUncachedTileLinkIORouter : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    wire T_1246 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_1246 is invalid @[Definitions.scala 357:30] 
    T_1246[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_1246[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_1248 = eq(io.in.acquire.bits.a_type, T_1246[0]) @[Util.scala 7:47] 
    node T_1249 = eq(io.in.acquire.bits.a_type, T_1246[1]) @[Util.scala 7:47] 
    node T_1250 = or(T_1248, T_1249) @[Util.scala 7:62] 
    node T_1251 = and(io.in.acquire.bits.is_builtin_type, T_1250) @[Definitions.scala 300:27] 
    node T_1252 = bits(io.in.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_1254 = mux(T_1251, T_1252, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_1255 = cat(io.in.acquire.bits.addr_block, io.in.acquire.bits.addr_beat) @[Cat.scala 20:58] 
    node T_1256 = cat(T_1255, T_1254) @[Cat.scala 20:58] 
    node T_1258 = leq(UInt<1>("h00"), T_1256) @[addrmap.scala 43:46] 
    node T_1260 = lt(T_1256, UInt<31>("h048000000")) @[addrmap.scala 43:56] 
    node acq_route = and(T_1258, T_1260) @[addrmap.scala 43:51] 
    io.in.acquire.ready <= UInt<1>("h00") @[Interconnect.scala 206:23] 
    node T_1262 = bits(acq_route, 0, 0) @[Interconnect.scala 209:58] 
    node T_1263 = and(io.in.acquire.valid, T_1262) @[Interconnect.scala 209:46] 
    io.out[0].acquire.valid <= T_1263 @[Interconnect.scala 209:23] 
    io.out[0].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22] 
    node T_1264 = bits(acq_route, 0, 0) @[Interconnect.scala 211:20] 
    when T_1264 : @[Interconnect.scala 211:25] 
      io.in.acquire.ready <= io.out[0].acquire.ready @[Interconnect.scala 211:47] 
      skip @[Interconnect.scala 211:25] 
    inst gnt_arb of LockingRRArbiter_10 @[Interconnect.scala 214:23] 
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    gnt_arb.io.in[0] <- io.out[0].grant @[Interconnect.scala 216:17] 
    io.in.grant <- gnt_arb.io.out @[Interconnect.scala 217:15] 
    node T_1288 = eq(io.in.acquire.valid, UInt<1>("h00")) @[Interconnect.scala 219:10] 
    node T_1290 = neq(acq_route, UInt<1>("h00")) @[Interconnect.scala 219:44] 
    node T_1291 = or(T_1288, T_1290) @[Interconnect.scala 219:31] 
    node T_1292 = or(T_1291, reset) @[Interconnect.scala 219:9] 
    node T_1294 = eq(T_1292, UInt<1>("h00")) @[Interconnect.scala 219:9] 
    when T_1294 : @[Interconnect.scala 219:9] 
      printf(clk, UInt<1>(1), "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n") @[Interconnect.scala 219:9] 
      stop(clk, UInt<1>(1), 1) @[Interconnect.scala 219:9] 
      skip @[Interconnect.scala 219:9] 
    
  module ClientUncachedTileLinkIOCrossbar : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1]}
    
    io is invalid
    inst ClientUncachedTileLinkIORouter_1 of ClientUncachedTileLinkIORouter @[Interconnect.scala 235:24] 
    ClientUncachedTileLinkIORouter_1.io is invalid
    ClientUncachedTileLinkIORouter_1.clk <= clk
    ClientUncachedTileLinkIORouter_1.reset <= reset
    ClientUncachedTileLinkIORouter_1.io.in <- io.in[0] @[Interconnect.scala 236:18] 
    io.out <= ClientUncachedTileLinkIORouter_1.io.out @[Interconnect.scala 237:12] 
    
  module LockingRRArbiter_11 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}, chosen : UInt<2>}
    
    io is invalid
    wire choice : UInt
    choice is invalid
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 32:13] 
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 33:16] 
    io.out.bits <- io.in[io.chosen].bits @[Arbiter.scala 34:15] 
    reg T_794 : UInt<3>, clk with : (reset => (reset, UInt<3>("h00")))
    reg T_796 : UInt, clk
    node T_798 = neq(T_794, UInt<1>("h00")) @[Arbiter.scala 39:34] 
    wire T_806 : UInt<3>[1] @[Definitions.scala 846:34] 
    T_806 is invalid @[Definitions.scala 846:34] 
    T_806[0] <= UInt<3>("h05") @[Definitions.scala 846:34] 
    node T_808 = eq(io.out.bits.g_type, T_806[0]) @[Util.scala 7:47] 
    node T_809 = eq(io.out.bits.g_type, UInt<1>("h00")) @[Util.scala 7:47] 
    node T_810 = mux(io.out.bits.is_builtin_type, T_808, T_809) @[Definitions.scala 274:33] 
    node T_811 = and(UInt<1>("h01"), T_810) @[Definitions.scala 274:27] 
    node T_812 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    node T_813 = and(T_812, T_811) @[Arbiter.scala 42:25] 
    when T_813 : @[Arbiter.scala 42:39] 
      T_796 <= io.chosen @[Arbiter.scala 43:15] 
      node T_815 = eq(T_794, UInt<3>("h07")) @[Counter.scala 20:24] 
      node T_817 = add(T_794, UInt<1>("h01")) @[Counter.scala 21:22] 
      node T_818 = tail(T_817, 1) @[Counter.scala 21:22] 
      T_794 <= T_818 @[Counter.scala 21:13] 
      skip @[Arbiter.scala 42:39] 
    when T_798 : @[Arbiter.scala 47:19] 
      io.chosen <= T_796 @[Arbiter.scala 47:31] 
      skip @[Arbiter.scala 47:19] 
    node T_820 = and(io.out.ready, io.out.valid) @[Decoupled.scala 16:42] 
    reg lastGrant : UInt<2>, clk
    when T_820 : @[Reg.scala 29:19] 
      lastGrant <= io.chosen @[Reg.scala 29:23] 
      skip @[Reg.scala 29:19] 
    node grantMask_0 = gt(UInt<1>("h00"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_1 = gt(UInt<1>("h01"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_2 = gt(UInt<2>("h02"), lastGrant) @[Arbiter.scala 59:48] 
    node grantMask_3 = gt(UInt<2>("h03"), lastGrant) @[Arbiter.scala 59:48] 
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 60:75] 
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 60:75] 
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 60:75] 
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 60:75] 
    node T_825 = or(validMask_0, validMask_1) @[Arbiter.scala 23:72] 
    node T_826 = or(T_825, validMask_2) @[Arbiter.scala 23:72] 
    node T_827 = or(T_826, validMask_3) @[Arbiter.scala 23:72] 
    node T_828 = or(T_827, io.in[0].valid) @[Arbiter.scala 23:72] 
    node T_829 = or(T_828, io.in[1].valid) @[Arbiter.scala 23:72] 
    node T_830 = or(T_829, io.in[2].valid) @[Arbiter.scala 23:72] 
    node T_832 = eq(validMask_0, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_834 = eq(T_825, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_836 = eq(T_826, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_838 = eq(T_827, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_840 = eq(T_828, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_842 = eq(T_829, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_844 = eq(T_830, UInt<1>("h00")) @[Arbiter.scala 23:82] 
    node T_845 = and(UInt<1>("h01"), grantMask_0) @[Arbiter.scala 64:34] 
    node T_846 = or(T_845, T_838) @[Arbiter.scala 64:50] 
    node T_847 = and(T_832, grantMask_1) @[Arbiter.scala 64:34] 
    node T_848 = or(T_847, T_840) @[Arbiter.scala 64:50] 
    node T_849 = and(T_834, grantMask_2) @[Arbiter.scala 64:34] 
    node T_850 = or(T_849, T_842) @[Arbiter.scala 64:50] 
    node T_851 = and(T_836, grantMask_3) @[Arbiter.scala 64:34] 
    node T_852 = or(T_851, T_844) @[Arbiter.scala 64:50] 
    node T_854 = eq(T_796, UInt<1>("h00")) @[Arbiter.scala 49:39] 
    node T_855 = mux(T_798, T_854, T_846) @[Arbiter.scala 49:22] 
    node T_856 = and(T_855, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[0].ready <= T_856 @[Arbiter.scala 49:16] 
    node T_858 = eq(T_796, UInt<1>("h01")) @[Arbiter.scala 49:39] 
    node T_859 = mux(T_798, T_858, T_848) @[Arbiter.scala 49:22] 
    node T_860 = and(T_859, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[1].ready <= T_860 @[Arbiter.scala 49:16] 
    node T_862 = eq(T_796, UInt<2>("h02")) @[Arbiter.scala 49:39] 
    node T_863 = mux(T_798, T_862, T_850) @[Arbiter.scala 49:22] 
    node T_864 = and(T_863, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[2].ready <= T_864 @[Arbiter.scala 49:16] 
    node T_866 = eq(T_796, UInt<2>("h03")) @[Arbiter.scala 49:39] 
    node T_867 = mux(T_798, T_866, T_852) @[Arbiter.scala 49:22] 
    node T_868 = and(T_867, io.out.ready) @[Arbiter.scala 49:55] 
    io.in[3].ready <= T_868 @[Arbiter.scala 49:16] 
    when io.in[2].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<2>("h02") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[1].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h01") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when io.in[0].valid : @[Arbiter.scala 69:27] 
      choice <= UInt<1>("h00") @[Arbiter.scala 69:36] 
      skip @[Arbiter.scala 69:27] 
    when validMask_3 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h03") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_2 : @[Arbiter.scala 71:25] 
      choice <= UInt<2>("h02") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    when validMask_1 : @[Arbiter.scala 71:25] 
      choice <= UInt<1>("h01") @[Arbiter.scala 71:34] 
      skip @[Arbiter.scala 71:25] 
    
  module ClientUncachedTileLinkIORouter_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    wire T_1855 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_1855 is invalid @[Definitions.scala 357:30] 
    T_1855[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_1855[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_1857 = eq(io.in.acquire.bits.a_type, T_1855[0]) @[Util.scala 7:47] 
    node T_1858 = eq(io.in.acquire.bits.a_type, T_1855[1]) @[Util.scala 7:47] 
    node T_1859 = or(T_1857, T_1858) @[Util.scala 7:62] 
    node T_1860 = and(io.in.acquire.bits.is_builtin_type, T_1859) @[Definitions.scala 300:27] 
    node T_1861 = bits(io.in.acquire.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_1863 = mux(T_1860, T_1861, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_1864 = cat(io.in.acquire.bits.addr_block, io.in.acquire.bits.addr_beat) @[Cat.scala 20:58] 
    node T_1865 = cat(T_1864, T_1863) @[Cat.scala 20:58] 
    node T_1867 = leq(UInt<1>("h00"), T_1865) @[addrmap.scala 43:46] 
    node T_1869 = lt(T_1865, UInt<13>("h01000")) @[addrmap.scala 43:56] 
    node T_1870 = and(T_1867, T_1869) @[addrmap.scala 43:51] 
    node T_1872 = leq(UInt<13>("h01000"), T_1865) @[addrmap.scala 43:46] 
    node T_1874 = lt(T_1865, UInt<14>("h02000")) @[addrmap.scala 43:56] 
    node T_1875 = and(T_1872, T_1874) @[addrmap.scala 43:51] 
    node T_1877 = leq(UInt<31>("h040000000"), T_1865) @[addrmap.scala 43:46] 
    node T_1879 = lt(T_1865, UInt<31>("h044000000")) @[addrmap.scala 43:56] 
    node T_1880 = and(T_1877, T_1879) @[addrmap.scala 43:51] 
    node T_1882 = leq(UInt<31>("h044000000"), T_1865) @[addrmap.scala 43:46] 
    node T_1884 = lt(T_1865, UInt<31>("h048000000")) @[addrmap.scala 43:56] 
    node T_1885 = and(T_1882, T_1884) @[addrmap.scala 43:51] 
    node T_1886 = cat(T_1875, T_1870) @[Cat.scala 20:58] 
    node T_1887 = cat(T_1885, T_1880) @[Cat.scala 20:58] 
    node acq_route = cat(T_1887, T_1886) @[Cat.scala 20:58] 
    io.in.acquire.ready <= UInt<1>("h00") @[Interconnect.scala 206:23] 
    node T_1889 = bits(acq_route, 0, 0) @[Interconnect.scala 209:58] 
    node T_1890 = and(io.in.acquire.valid, T_1889) @[Interconnect.scala 209:46] 
    io.out[0].acquire.valid <= T_1890 @[Interconnect.scala 209:23] 
    io.out[0].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22] 
    node T_1891 = bits(acq_route, 0, 0) @[Interconnect.scala 211:20] 
    when T_1891 : @[Interconnect.scala 211:25] 
      io.in.acquire.ready <= io.out[0].acquire.ready @[Interconnect.scala 211:47] 
      skip @[Interconnect.scala 211:25] 
    node T_1892 = bits(acq_route, 1, 1) @[Interconnect.scala 209:58] 
    node T_1893 = and(io.in.acquire.valid, T_1892) @[Interconnect.scala 209:46] 
    io.out[1].acquire.valid <= T_1893 @[Interconnect.scala 209:23] 
    io.out[1].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22] 
    node T_1894 = bits(acq_route, 1, 1) @[Interconnect.scala 211:20] 
    when T_1894 : @[Interconnect.scala 211:25] 
      io.in.acquire.ready <= io.out[1].acquire.ready @[Interconnect.scala 211:47] 
      skip @[Interconnect.scala 211:25] 
    node T_1895 = bits(acq_route, 2, 2) @[Interconnect.scala 209:58] 
    node T_1896 = and(io.in.acquire.valid, T_1895) @[Interconnect.scala 209:46] 
    io.out[2].acquire.valid <= T_1896 @[Interconnect.scala 209:23] 
    io.out[2].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22] 
    node T_1897 = bits(acq_route, 2, 2) @[Interconnect.scala 211:20] 
    when T_1897 : @[Interconnect.scala 211:25] 
      io.in.acquire.ready <= io.out[2].acquire.ready @[Interconnect.scala 211:47] 
      skip @[Interconnect.scala 211:25] 
    node T_1898 = bits(acq_route, 3, 3) @[Interconnect.scala 209:58] 
    node T_1899 = and(io.in.acquire.valid, T_1898) @[Interconnect.scala 209:46] 
    io.out[3].acquire.valid <= T_1899 @[Interconnect.scala 209:23] 
    io.out[3].acquire.bits <- io.in.acquire.bits @[Interconnect.scala 210:22] 
    node T_1900 = bits(acq_route, 3, 3) @[Interconnect.scala 211:20] 
    when T_1900 : @[Interconnect.scala 211:25] 
      io.in.acquire.ready <= io.out[3].acquire.ready @[Interconnect.scala 211:47] 
      skip @[Interconnect.scala 211:25] 
    inst gnt_arb of LockingRRArbiter_11 @[Interconnect.scala 214:23] 
    gnt_arb.io is invalid
    gnt_arb.clk <= clk
    gnt_arb.reset <= reset
    gnt_arb.io.in[0] <- io.out[0].grant @[Interconnect.scala 216:17] 
    gnt_arb.io.in[1] <- io.out[1].grant @[Interconnect.scala 216:17] 
    gnt_arb.io.in[2] <- io.out[2].grant @[Interconnect.scala 216:17] 
    gnt_arb.io.in[3] <- io.out[3].grant @[Interconnect.scala 216:17] 
    io.in.grant <- gnt_arb.io.out @[Interconnect.scala 217:15] 
    node T_1924 = eq(io.in.acquire.valid, UInt<1>("h00")) @[Interconnect.scala 219:10] 
    node T_1926 = neq(acq_route, UInt<1>("h00")) @[Interconnect.scala 219:44] 
    node T_1927 = or(T_1924, T_1926) @[Interconnect.scala 219:31] 
    node T_1928 = or(T_1927, reset) @[Interconnect.scala 219:9] 
    node T_1930 = eq(T_1928, UInt<1>("h00")) @[Interconnect.scala 219:9] 
    when T_1930 : @[Interconnect.scala 219:9] 
      printf(clk, UInt<1>(1), "Assertion failed: No valid route\n    at Interconnect.scala:219 assert(!io.in.acquire.valid || acq_route.orR, \"No valid route\")\n") @[Interconnect.scala 219:9] 
      stop(clk, UInt<1>(1), 1) @[Interconnect.scala 219:9] 
      skip @[Interconnect.scala 219:9] 
    
  module ClientUncachedTileLinkIOCrossbar_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst ClientUncachedTileLinkIORouter_1_1 of ClientUncachedTileLinkIORouter_1 @[Interconnect.scala 235:24] 
    ClientUncachedTileLinkIORouter_1_1.io is invalid
    ClientUncachedTileLinkIORouter_1_1.clk <= clk
    ClientUncachedTileLinkIORouter_1_1.reset <= reset
    ClientUncachedTileLinkIORouter_1_1.io.in <- io.in[0] @[Interconnect.scala 236:18] 
    io.out <= ClientUncachedTileLinkIORouter_1_1.io.out @[Interconnect.scala 237:12] 
    
  module TileLinkRecursiveInterconnect_1 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst xbar of ClientUncachedTileLinkIOCrossbar_1 @[Interconnect.scala 269:20] 
    xbar.io is invalid
    xbar.clk <= clk
    xbar.reset <= reset
    xbar.io.in <= io.in @[Interconnect.scala 270:14] 
    io.out[0] <- xbar.io.out[0] @[Interconnect.scala 272:10] 
    io.out[1] <- xbar.io.out[1] @[Interconnect.scala 272:10] 
    io.out[2] <- xbar.io.out[2] @[Interconnect.scala 272:10] 
    io.out[3] <- xbar.io.out[3] @[Interconnect.scala 272:10] 
    
  module TileLinkRecursiveInterconnect : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip in : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], out : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[4]}
    
    io is invalid
    inst xbar of ClientUncachedTileLinkIOCrossbar @[Interconnect.scala 269:20] 
    xbar.io is invalid
    xbar.clk <= clk
    xbar.reset <= reset
    xbar.io.in <= io.in @[Interconnect.scala 270:14] 
    inst TileLinkRecursiveInterconnect_1_1 of TileLinkRecursiveInterconnect_1 @[Interconnect.scala 280:26] 
    TileLinkRecursiveInterconnect_1_1.io is invalid
    TileLinkRecursiveInterconnect_1_1.clk <= clk
    TileLinkRecursiveInterconnect_1_1.reset <= reset
    TileLinkRecursiveInterconnect_1_1.io.in[0] <- xbar.io.out[0] @[Interconnect.scala 281:25] 
    io.out[0] <- TileLinkRecursiveInterconnect_1_1.io.out[0] @[Interconnect.scala 272:10] 
    io.out[1] <- TileLinkRecursiveInterconnect_1_1.io.out[1] @[Interconnect.scala 272:10] 
    io.out[2] <- TileLinkRecursiveInterconnect_1_1.io.out[2] @[Interconnect.scala 272:10] 
    io.out[3] <- TileLinkRecursiveInterconnect_1_1.io.out[3] @[Interconnect.scala 272:10] 
    
  module Queue_20 : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, count : UInt<1>}
    
    io is invalid
    cmem ram : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}[1] @[Decoupled.scala 116:16] 
    reg maybe_full : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node ptr_match = eq(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 121:33] 
    node T_221 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 122:28] 
    node empty = and(ptr_match, T_221) @[Decoupled.scala 122:25] 
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 123:24] 
    node T_222 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 16:42] 
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= T_222
    node T_223 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 16:42] 
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= T_223
    when do_enq : @[Decoupled.scala 127:17] 
      infer mport T_224 = ram[UInt<1>("h00")], clk
      T_224 <- io.enq.bits @[Decoupled.scala 128:24] 
      skip @[Decoupled.scala 127:17] 
    when do_deq : @[Decoupled.scala 131:17] 
      skip @[Decoupled.scala 131:17] 
    node T_249 = neq(do_enq, do_deq) @[Decoupled.scala 134:16] 
    when T_249 : @[Decoupled.scala 134:27] 
      maybe_full <= do_enq @[Decoupled.scala 135:16] 
      skip @[Decoupled.scala 134:27] 
    node T_251 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 138:19] 
    io.deq.valid <= T_251 @[Decoupled.scala 138:16] 
    node T_253 = eq(full, UInt<1>("h00")) @[Decoupled.scala 139:19] 
    io.enq.ready <= T_253 @[Decoupled.scala 139:16] 
    infer mport T_254 = ram[UInt<1>("h00")], clk
    io.deq.bits <- T_254 @[Decoupled.scala 140:15] 
    node T_277 = sub(UInt<1>("h00"), UInt<1>("h00")) @[Decoupled.scala 155:32] 
    node ptr_diff = tail(T_277, 1) @[Decoupled.scala 155:32] 
    node T_278 = and(maybe_full, ptr_match) @[Decoupled.scala 157:32] 
    node T_279 = cat(T_278, ptr_diff) @[Cat.scala 20:58] 
    io.count <= T_279 @[Decoupled.scala 157:14] 
    
  module PLIC : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip devices : {valid : UInt<1>, flip ready : UInt<1>, flip complete : UInt<1>}[2], harts : UInt<1>[2], flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}}
    
    io is invalid
    wire T_477 : UInt<1>[3] @[Plic.scala 71:44] 
    T_477 is invalid @[Plic.scala 71:44] 
    T_477[0] <= UInt<1>("h01") @[Plic.scala 71:44] 
    T_477[1] <= UInt<1>("h01") @[Plic.scala 71:44] 
    T_477[2] <= UInt<1>("h01") @[Plic.scala 71:44] 
    wire priority : UInt<1>[3]
    priority is invalid
    priority <= T_477
    wire T_489 : UInt<1>[2] @[Plic.scala 74:40] 
    T_489 is invalid @[Plic.scala 74:40] 
    T_489[0] <= UInt<1>("h00") @[Plic.scala 74:40] 
    T_489[1] <= UInt<1>("h00") @[Plic.scala 74:40] 
    wire threshold : UInt<1>[2]
    threshold is invalid
    threshold <= T_489
    wire T_502 : UInt<1>[3] @[Plic.scala 75:50] 
    T_502 is invalid @[Plic.scala 75:50] 
    T_502[0] <= UInt<1>("h00") @[Plic.scala 75:50] 
    T_502[1] <= UInt<1>("h00") @[Plic.scala 75:50] 
    T_502[2] <= UInt<1>("h00") @[Plic.scala 75:50] 
    reg pending : UInt<1>[3], clk with : (reset => (reset, T_502))
    reg enables : UInt<1>[3][2], clk
    node T_545 = eq(pending[1], UInt<1>("h00")) @[Plic.scala 79:16] 
    io.devices[0].ready <= T_545 @[Plic.scala 79:13] 
    io.devices[0].complete <= UInt<1>("h00") @[Plic.scala 80:16] 
    when io.devices[0].valid : @[Plic.scala 81:20] 
      pending[1] <= UInt<1>("h01") @[Plic.scala 81:24] 
      skip @[Plic.scala 81:20] 
    node T_549 = eq(pending[2], UInt<1>("h00")) @[Plic.scala 79:16] 
    io.devices[1].ready <= T_549 @[Plic.scala 79:13] 
    io.devices[1].complete <= UInt<1>("h00") @[Plic.scala 80:16] 
    when io.devices[1].valid : @[Plic.scala 81:20] 
      pending[2] <= UInt<1>("h01") @[Plic.scala 81:24] 
      skip @[Plic.scala 81:20] 
    wire maxDevs : UInt<2>[2] @[Plic.scala 94:21] 
    maxDevs is invalid @[Plic.scala 94:21] 
    node T_559 = and(pending[1], enables[0][1]) @[Plic.scala 98:21] 
    node T_560 = cat(T_559, priority[1]) @[Cat.scala 20:58] 
    node T_561 = and(pending[2], enables[0][2]) @[Plic.scala 98:21] 
    node T_562 = cat(T_561, priority[2]) @[Cat.scala 20:58] 
    node T_564 = shl(UInt<1>("h01"), 1) @[Plic.scala 99:45] 
    node T_567 = geq(T_564, T_560) @[Plic.scala 89:29] 
    node T_568 = mux(T_567, T_564, T_560) @[Plic.scala 90:11] 
    node T_570 = add(UInt<1>("h01"), UInt<1>("h00")) @[Plic.scala 90:73] 
    node T_571 = tail(T_570, 1) @[Plic.scala 90:73] 
    node T_572 = mux(T_567, UInt<1>("h00"), T_571) @[Plic.scala 90:43] 
    node T_574 = geq(T_568, T_562) @[Plic.scala 89:29] 
    node T_575 = mux(T_574, T_568, T_562) @[Plic.scala 90:11] 
    node T_577 = add(UInt<2>("h02"), UInt<1>("h00")) @[Plic.scala 90:73] 
    node T_578 = tail(T_577, 1) @[Plic.scala 90:73] 
    node T_579 = mux(T_574, T_572, T_578) @[Plic.scala 90:43] 
    reg T_580 : UInt, clk
    T_580 <= T_579
    maxDevs[0] <= T_580 @[Plic.scala 101:19] 
    reg T_581 : UInt, clk
    T_581 <= T_575
    node T_583 = cat(UInt<1>("h01"), threshold[0]) @[Cat.scala 20:58] 
    node T_584 = gt(T_581, T_583) @[Plic.scala 102:42] 
    io.harts[0] <= T_584 @[Plic.scala 102:20] 
    node T_585 = and(pending[1], enables[1][1]) @[Plic.scala 98:21] 
    node T_586 = cat(T_585, priority[1]) @[Cat.scala 20:58] 
    node T_587 = and(pending[2], enables[1][2]) @[Plic.scala 98:21] 
    node T_588 = cat(T_587, priority[2]) @[Cat.scala 20:58] 
    node T_590 = shl(UInt<1>("h01"), 1) @[Plic.scala 99:45] 
    node T_593 = geq(T_590, T_586) @[Plic.scala 89:29] 
    node T_594 = mux(T_593, T_590, T_586) @[Plic.scala 90:11] 
    node T_596 = add(UInt<1>("h01"), UInt<1>("h00")) @[Plic.scala 90:73] 
    node T_597 = tail(T_596, 1) @[Plic.scala 90:73] 
    node T_598 = mux(T_593, UInt<1>("h00"), T_597) @[Plic.scala 90:43] 
    node T_600 = geq(T_594, T_588) @[Plic.scala 89:29] 
    node T_601 = mux(T_600, T_594, T_588) @[Plic.scala 90:11] 
    node T_603 = add(UInt<2>("h02"), UInt<1>("h00")) @[Plic.scala 90:73] 
    node T_604 = tail(T_603, 1) @[Plic.scala 90:73] 
    node T_605 = mux(T_600, T_598, T_604) @[Plic.scala 90:43] 
    reg T_606 : UInt, clk
    T_606 <= T_605
    maxDevs[1] <= T_606 @[Plic.scala 101:19] 
    reg T_607 : UInt, clk
    T_607 <= T_601
    node T_609 = cat(UInt<1>("h01"), threshold[1]) @[Cat.scala 20:58] 
    node T_610 = gt(T_607, T_609) @[Plic.scala 102:42] 
    io.harts[1] <= T_610 @[Plic.scala 102:20] 
    inst acq of Queue_20 @[Decoupled.scala 179:19] 
    acq.io is invalid
    acq.clk <= clk
    acq.reset <= reset
    acq.io.enq.valid <= io.tl.acquire.valid @[Decoupled.scala 180:20] 
    acq.io.enq.bits <- io.tl.acquire.bits @[Decoupled.scala 181:19] 
    io.tl.acquire.ready <= acq.io.enq.ready @[Decoupled.scala 182:15] 
    node T_634 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 16:42] 
    node T_636 = eq(acq.io.deq.bits.a_type, UInt<3>("h00")) @[Definitions.scala 212:64] 
    node T_637 = and(acq.io.deq.bits.is_builtin_type, T_636) @[Definitions.scala 212:54] 
    node read = and(T_634, T_637) @[Plic.scala 106:25] 
    node T_638 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 16:42] 
    node T_640 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_641 = and(acq.io.deq.bits.is_builtin_type, T_640) @[Definitions.scala 212:54] 
    node write = and(T_638, T_641) @[Plic.scala 107:26] 
    node T_642 = and(acq.io.deq.ready, acq.io.deq.valid) @[Decoupled.scala 16:42] 
    node T_644 = eq(T_642, UInt<1>("h00")) @[Plic.scala 108:10] 
    node T_645 = or(T_644, read) @[Plic.scala 108:22] 
    node T_646 = or(T_645, write) @[Plic.scala 108:30] 
    node T_647 = or(T_646, reset) @[Plic.scala 108:9] 
    node T_649 = eq(T_647, UInt<1>("h00")) @[Plic.scala 108:9] 
    when T_649 : @[Plic.scala 108:9] 
      printf(clk, UInt<1>(1), "Assertion failed: unsupported PLIC operation\n    at Plic.scala:108 assert(!acq.fire() || read || write, \"unsupported PLIC operation\")\n") @[Plic.scala 108:9] 
      stop(clk, UInt<1>(1), 1) @[Plic.scala 108:9] 
      skip @[Plic.scala 108:9] 
    wire T_657 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_657 is invalid @[Definitions.scala 357:30] 
    T_657[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_657[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_659 = eq(acq.io.deq.bits.a_type, T_657[0]) @[Util.scala 7:47] 
    node T_660 = eq(acq.io.deq.bits.a_type, T_657[1]) @[Util.scala 7:47] 
    node T_661 = or(T_659, T_660) @[Util.scala 7:62] 
    node T_662 = and(acq.io.deq.bits.is_builtin_type, T_661) @[Definitions.scala 300:27] 
    node T_663 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_665 = mux(T_662, T_663, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_666 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
    node T_667 = cat(T_666, T_665) @[Cat.scala 20:58] 
    node addr = bits(T_667, 25, 0) @[Plic.scala 109:34] 
    node T_669 = sub(addr, UInt<22>("h0200000")) @[Plic.scala 113:16] 
    node T_670 = tail(T_669, 1) @[Plic.scala 113:16] 
    node claimant = bits(T_670, 12, 12) @[Plic.scala 113:31] 
    wire hart : UInt
    hart is invalid
    hart <= claimant
    node T_672 = add(maxDevs[claimant], UInt<1>("h00")) @[Plic.scala 115:36] 
    node myMaxDev = tail(T_672, 1) @[Plic.scala 115:36] 
    wire rdata : UInt<64>
    rdata is invalid
    rdata <= UInt<64>("h00")
    node T_678 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
    node T_679 = and(acq.io.deq.bits.is_builtin_type, T_678) @[Definitions.scala 212:54] 
    node T_696 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_698 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node T_699 = and(acq.io.deq.bits.is_builtin_type, T_698) @[Definitions.scala 212:54] 
    node T_701 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_702 = and(acq.io.deq.bits.is_builtin_type, T_701) @[Definitions.scala 212:54] 
    node T_703 = or(T_699, T_702) @[Definitions.scala 190:56] 
    node T_704 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
    node T_706 = mux(T_703, T_704, UInt<1>("h00")) @[Definitions.scala 192:30] 
    node T_707 = mux(T_679, T_696, T_706) @[Definitions.scala 192:8] 
    node T_708 = bits(T_707, 0, 0) @[Bitwise.scala 13:51] 
    node T_709 = bits(T_707, 1, 1) @[Bitwise.scala 13:51] 
    node T_710 = bits(T_707, 2, 2) @[Bitwise.scala 13:51] 
    node T_711 = bits(T_707, 3, 3) @[Bitwise.scala 13:51] 
    node T_712 = bits(T_707, 4, 4) @[Bitwise.scala 13:51] 
    node T_713 = bits(T_707, 5, 5) @[Bitwise.scala 13:51] 
    node T_714 = bits(T_707, 6, 6) @[Bitwise.scala 13:51] 
    node T_715 = bits(T_707, 7, 7) @[Bitwise.scala 13:51] 
    node T_716 = bits(T_708, 0, 0) @[Bitwise.scala 33:15] 
    node T_719 = mux(T_716, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_720 = bits(T_709, 0, 0) @[Bitwise.scala 33:15] 
    node T_723 = mux(T_720, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_724 = bits(T_710, 0, 0) @[Bitwise.scala 33:15] 
    node T_727 = mux(T_724, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_728 = bits(T_711, 0, 0) @[Bitwise.scala 33:15] 
    node T_731 = mux(T_728, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_732 = bits(T_712, 0, 0) @[Bitwise.scala 33:15] 
    node T_735 = mux(T_732, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_736 = bits(T_713, 0, 0) @[Bitwise.scala 33:15] 
    node T_739 = mux(T_736, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_740 = bits(T_714, 0, 0) @[Bitwise.scala 33:15] 
    node T_743 = mux(T_740, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_744 = bits(T_715, 0, 0) @[Bitwise.scala 33:15] 
    node T_747 = mux(T_744, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_748 = cat(T_723, T_719) @[Cat.scala 20:58] 
    node T_749 = cat(T_731, T_727) @[Cat.scala 20:58] 
    node T_750 = cat(T_749, T_748) @[Cat.scala 20:58] 
    node T_751 = cat(T_739, T_735) @[Cat.scala 20:58] 
    node T_752 = cat(T_747, T_743) @[Cat.scala 20:58] 
    node T_753 = cat(T_752, T_751) @[Cat.scala 20:58] 
    node T_754 = cat(T_753, T_750) @[Cat.scala 20:58] 
    node T_755 = and(acq.io.deq.bits.data, T_754) @[Plic.scala 118:37] 
    node T_757 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
    node T_758 = and(acq.io.deq.bits.is_builtin_type, T_757) @[Definitions.scala 212:54] 
    node T_775 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_777 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node T_778 = and(acq.io.deq.bits.is_builtin_type, T_777) @[Definitions.scala 212:54] 
    node T_780 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_781 = and(acq.io.deq.bits.is_builtin_type, T_780) @[Definitions.scala 212:54] 
    node T_782 = or(T_778, T_781) @[Definitions.scala 190:56] 
    node T_783 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
    node T_785 = mux(T_782, T_783, UInt<1>("h00")) @[Definitions.scala 192:30] 
    node T_786 = mux(T_758, T_775, T_785) @[Definitions.scala 192:8] 
    node T_787 = bits(T_786, 0, 0) @[Bitwise.scala 13:51] 
    node T_788 = bits(T_786, 1, 1) @[Bitwise.scala 13:51] 
    node T_789 = bits(T_786, 2, 2) @[Bitwise.scala 13:51] 
    node T_790 = bits(T_786, 3, 3) @[Bitwise.scala 13:51] 
    node T_791 = bits(T_786, 4, 4) @[Bitwise.scala 13:51] 
    node T_792 = bits(T_786, 5, 5) @[Bitwise.scala 13:51] 
    node T_793 = bits(T_786, 6, 6) @[Bitwise.scala 13:51] 
    node T_794 = bits(T_786, 7, 7) @[Bitwise.scala 13:51] 
    node T_795 = bits(T_787, 0, 0) @[Bitwise.scala 33:15] 
    node T_798 = mux(T_795, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_799 = bits(T_788, 0, 0) @[Bitwise.scala 33:15] 
    node T_802 = mux(T_799, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_803 = bits(T_789, 0, 0) @[Bitwise.scala 33:15] 
    node T_806 = mux(T_803, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_807 = bits(T_790, 0, 0) @[Bitwise.scala 33:15] 
    node T_810 = mux(T_807, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_811 = bits(T_791, 0, 0) @[Bitwise.scala 33:15] 
    node T_814 = mux(T_811, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_815 = bits(T_792, 0, 0) @[Bitwise.scala 33:15] 
    node T_818 = mux(T_815, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_819 = bits(T_793, 0, 0) @[Bitwise.scala 33:15] 
    node T_822 = mux(T_819, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_823 = bits(T_794, 0, 0) @[Bitwise.scala 33:15] 
    node T_826 = mux(T_823, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_827 = cat(T_802, T_798) @[Cat.scala 20:58] 
    node T_828 = cat(T_810, T_806) @[Cat.scala 20:58] 
    node T_829 = cat(T_828, T_827) @[Cat.scala 20:58] 
    node T_830 = cat(T_818, T_814) @[Cat.scala 20:58] 
    node T_831 = cat(T_826, T_822) @[Cat.scala 20:58] 
    node T_832 = cat(T_831, T_830) @[Cat.scala 20:58] 
    node T_833 = cat(T_832, T_829) @[Cat.scala 20:58] 
    node T_834 = not(T_833) @[Plic.scala 118:73] 
    node T_835 = and(rdata, T_834) @[Plic.scala 118:71] 
    node masked_wdata = or(T_755, T_835) @[Plic.scala 118:62] 
    node T_837 = geq(addr, UInt<22>("h0200000")) @[Plic.scala 120:14] 
    when T_837 : @[Plic.scala 120:31] 
      node T_840 = cat(myMaxDev, UInt<31>("h00")) @[Cat.scala 20:58] 
      node T_841 = cat(T_840, threshold[claimant]) @[Cat.scala 20:58] 
      node T_843 = mul(UInt<1>("h00"), UInt<7>("h040")) @[Plic.scala 124:110] 
      node T_844 = dshr(T_841, T_843) @[Plic.scala 124:101] 
      rdata <= T_844 @[Plic.scala 124:11] 
      node T_845 = bits(addr, 2, 2) @[Plic.scala 126:23] 
      node T_846 = and(read, T_845) @[Plic.scala 126:16] 
      when T_846 : @[Plic.scala 126:52] 
        pending[myMaxDev] <= UInt<1>("h00") @[Plic.scala 127:25] 
        skip @[Plic.scala 126:52] 
      when write : @[Plic.scala 129:18] 
        node T_849 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
        node T_850 = and(acq.io.deq.bits.is_builtin_type, T_849) @[Definitions.scala 212:54] 
        node T_867 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
        node T_869 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
        node T_870 = and(acq.io.deq.bits.is_builtin_type, T_869) @[Definitions.scala 212:54] 
        node T_872 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
        node T_873 = and(acq.io.deq.bits.is_builtin_type, T_872) @[Definitions.scala 212:54] 
        node T_874 = or(T_870, T_873) @[Definitions.scala 190:56] 
        node T_875 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
        node T_877 = mux(T_874, T_875, UInt<1>("h00")) @[Definitions.scala 192:30] 
        node T_878 = mux(T_850, T_867, T_877) @[Definitions.scala 192:8] 
        node T_879 = bits(T_878, 4, 4) @[Plic.scala 130:64] 
        when T_879 : @[Plic.scala 130:120] 
          node T_880 = shr(acq.io.deq.bits.data, 32) @[Plic.scala 131:34] 
          node T_881 = bits(T_880, 1, 0) @[Plic.scala 131:74] 
          when enables[hart][T_881] : @[Plic.scala 132:31] 
            node T_883 = sub(T_881, UInt<1>("h01")) @[Plic.scala 132:47] 
            node T_884 = tail(T_883, 1) @[Plic.scala 132:47] 
            io.devices[T_884].complete <= UInt<1>("h01") @[Plic.scala 132:60] 
            skip @[Plic.scala 132:31] 
          skip @[Plic.scala 130:120] 
        node T_890 = eq(T_879, UInt<1>("h00")) @[Plic.scala 130:120] 
        when T_890 : @[Plic.scala 133:19] 
          skip @[Plic.scala 133:19] 
        skip @[Plic.scala 129:18] 
      skip @[Plic.scala 120:31] 
    node T_892 = geq(addr, UInt<14>("h02000")) @[Plic.scala 137:20] 
    node T_894 = eq(T_837, UInt<1>("h00")) @[Plic.scala 120:31] 
    node T_895 = and(T_894, T_892) @[Plic.scala 137:39] 
    when T_895 : @[Plic.scala 137:39] 
      node T_897 = sub(addr, UInt<14>("h02000")) @[Plic.scala 139:33] 
      node T_898 = tail(T_897, 1) @[Plic.scala 139:33] 
      node T_899 = bits(T_898, 7, 7) @[Plic.scala 139:50] 
      hart <= T_899 @[Plic.scala 141:10] 
      node T_902 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Plic.scala 146:18] 
      when T_902 : @[Plic.scala 146:36] 
        node T_903 = cat(enables[hart][2], enables[hart][1]) @[Cat.scala 20:58] 
        node T_904 = cat(T_903, enables[hart][0]) @[Cat.scala 20:58] 
        rdata <= T_904 @[Plic.scala 147:15] 
        when write : @[Plic.scala 149:24] 
          node T_908 = bits(masked_wdata, 0, 0) @[Plic.scala 149:66] 
          enables[T_899][0] <= T_908 @[Plic.scala 149:51] 
          skip @[Plic.scala 149:24] 
        when write : @[Plic.scala 149:24] 
          node T_912 = bits(masked_wdata, 1, 1) @[Plic.scala 149:66] 
          enables[T_899][1] <= T_912 @[Plic.scala 149:51] 
          skip @[Plic.scala 149:24] 
        when write : @[Plic.scala 149:24] 
          node T_916 = bits(masked_wdata, 2, 2) @[Plic.scala 149:66] 
          enables[T_899][2] <= T_916 @[Plic.scala 149:51] 
          skip @[Plic.scala 149:24] 
        skip @[Plic.scala 146:36] 
      skip @[Plic.scala 137:39] 
    node T_918 = geq(addr, UInt<13>("h01000")) @[Plic.scala 153:20] 
    node T_920 = eq(T_837, UInt<1>("h00")) @[Plic.scala 120:31] 
    node T_922 = eq(T_892, UInt<1>("h00")) @[Plic.scala 137:39] 
    node T_923 = and(T_920, T_922) @[Plic.scala 137:39] 
    node T_924 = and(T_923, T_918) @[Plic.scala 153:40] 
    when T_924 : @[Plic.scala 153:40] 
      node T_926 = cat(pending[2], pending[1]) @[Plic.scala 157:22] 
      node T_927 = cat(T_926, pending[0]) @[Plic.scala 157:22] 
      node T_929 = mul(UInt<1>("h00"), UInt<7>("h040")) @[Plic.scala 157:38] 
      node T_930 = dshr(T_927, T_929) @[Plic.scala 157:29] 
      rdata <= T_930 @[Plic.scala 157:11] 
      skip @[Plic.scala 153:40] 
    node T_932 = eq(T_837, UInt<1>("h00")) @[Plic.scala 120:31] 
    node T_934 = eq(T_892, UInt<1>("h00")) @[Plic.scala 137:39] 
    node T_935 = and(T_932, T_934) @[Plic.scala 137:39] 
    node T_937 = eq(T_918, UInt<1>("h00")) @[Plic.scala 153:40] 
    node T_938 = and(T_935, T_937) @[Plic.scala 153:40] 
    when T_938 : @[Plic.scala 158:15] 
      node T_939 = bits(addr, 3, 3) @[Plic.scala 162:16] 
      node T_941 = eq(T_939, UInt<1>("h00")) @[Plic.scala 164:18] 
      when T_941 : @[Plic.scala 164:37] 
        node T_943 = cat(UInt<31>("h00"), priority[0]) @[Cat.scala 20:58] 
        node T_945 = cat(UInt<31>("h00"), priority[1]) @[Cat.scala 20:58] 
        node T_946 = cat(T_945, T_943) @[Cat.scala 20:58] 
        rdata <= T_946 @[Plic.scala 165:15] 
        skip @[Plic.scala 164:37] 
      node T_948 = eq(T_939, UInt<1>("h01")) @[Plic.scala 164:18] 
      when T_948 : @[Plic.scala 164:37] 
        node T_950 = cat(UInt<31>("h00"), priority[2]) @[Cat.scala 20:58] 
        rdata <= T_950 @[Plic.scala 165:15] 
        skip @[Plic.scala 164:37] 
      skip @[Plic.scala 158:15] 
    priority[0] <= UInt<1>("h00") @[Plic.scala 173:15] 
    pending[0] <= UInt<1>("h00") @[Plic.scala 174:14] 
    enables[0][0] <= UInt<1>("h00") @[Plic.scala 176:10] 
    enables[1][0] <= UInt<1>("h00") @[Plic.scala 176:10] 
    io.tl.grant.valid <= acq.io.deq.valid @[Plic.scala 178:21] 
    acq.io.deq.ready <= io.tl.grant.ready @[Plic.scala 179:13] 
    node T_971 = eq(UInt<3>("h06"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_972 = mux(T_971, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_973 = eq(UInt<3>("h05"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_974 = mux(T_973, UInt<3>("h01"), T_972) @[Mux.scala 46:16] 
    node T_975 = eq(UInt<3>("h04"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_976 = mux(T_975, UInt<3>("h04"), T_974) @[Mux.scala 46:16] 
    node T_977 = eq(UInt<3>("h03"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_978 = mux(T_977, UInt<3>("h03"), T_976) @[Mux.scala 46:16] 
    node T_979 = eq(UInt<3>("h02"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_980 = mux(T_979, UInt<3>("h03"), T_978) @[Mux.scala 46:16] 
    node T_981 = eq(UInt<3>("h01"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_982 = mux(T_981, UInt<3>("h05"), T_980) @[Mux.scala 46:16] 
    node T_983 = eq(UInt<3>("h00"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_984 = mux(T_983, UInt<3>("h04"), T_982) @[Mux.scala 46:16] 
    wire T_1009 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_1009 is invalid @[Definitions.scala 856:19] 
    T_1009.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_1009.g_type <= T_984 @[Definitions.scala 858:16] 
    T_1009.client_xact_id <= acq.io.deq.bits.client_xact_id @[Definitions.scala 859:24] 
    T_1009.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_1009.addr_beat <= UInt<1>("h00") @[Definitions.scala 861:19] 
    T_1009.data <= rdata @[Definitions.scala 862:14] 
    io.tl.grant.bits <- T_1009 @[Plic.scala 180:20] 
    
  module LevelGateway : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip interrupt : UInt<1>, plic : {valid : UInt<1>, flip ready : UInt<1>, flip complete : UInt<1>}}
    
    io is invalid
    reg inFlight : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_6 = and(io.interrupt, io.plic.ready) @[Plic.scala 25:22] 
    when T_6 : @[Plic.scala 25:40] 
      inFlight <= UInt<1>("h01") @[Plic.scala 25:51] 
      skip @[Plic.scala 25:40] 
    when io.plic.complete : @[Plic.scala 26:27] 
      inFlight <= UInt<1>("h00") @[Plic.scala 26:38] 
      skip @[Plic.scala 26:27] 
    node T_10 = eq(inFlight, UInt<1>("h00")) @[Plic.scala 27:36] 
    node T_11 = and(io.interrupt, T_10) @[Plic.scala 27:33] 
    io.plic.valid <= T_11 @[Plic.scala 27:17] 
    
  module DebugModule : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip db : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, op : UInt<2>, data : UInt<34>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<34>}}}, debugInterrupts : UInt<1>[1], flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, ndreset : UInt<1>, fullreset : UInt<1>}
    
    io is invalid
    wire CONTROLReset : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 422:26] 
    CONTROLReset is invalid @[Debug.scala 422:26] 
    wire CONTROLWrEn : UInt<1> @[Debug.scala 423:25] 
    CONTROLWrEn is invalid @[Debug.scala 423:25] 
    reg CONTROLReg : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>}, clk
    wire CONTROLWrData : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 425:28] 
    CONTROLWrData is invalid @[Debug.scala 425:28] 
    wire CONTROLRdData : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 426:28] 
    CONTROLRdData is invalid @[Debug.scala 426:28] 
    reg ndresetCtrReg : UInt<1>, clk
    wire DMINFORdData : {reserved0 : UInt<2>, abussize : UInt<7>, serialcount : UInt<4>, access128 : UInt<1>, access64 : UInt<1>, access32 : UInt<1>, access16 : UInt<1>, accesss8 : UInt<1>, dramsize : UInt<6>, haltsum : UInt<1>, reserved1 : UInt<3>, authenticated : UInt<1>, authbusy : UInt<1>, authtype : UInt<2>, version : UInt<2>} @[Debug.scala 429:27] 
    DMINFORdData is invalid @[Debug.scala 429:27] 
    wire HALTSUMRdData : {serialfull : UInt<1>, serialvalid : UInt<1>, acks : UInt<32>} @[Debug.scala 431:28] 
    HALTSUMRdData is invalid @[Debug.scala 431:28] 
    wire RAMWrData : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 433:24] 
    RAMWrData is invalid @[Debug.scala 433:24] 
    wire RAMRdData : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 434:24] 
    RAMRdData is invalid @[Debug.scala 434:24] 
    wire SETHALTNOTWrEn : UInt<1> @[Debug.scala 438:28] 
    SETHALTNOTWrEn is invalid @[Debug.scala 438:28] 
    wire SETHALTNOTWrData : UInt<10> @[Debug.scala 439:30] 
    SETHALTNOTWrData is invalid @[Debug.scala 439:30] 
    wire CLEARDEBINTWrEn : UInt<1> @[Debug.scala 440:29] 
    CLEARDEBINTWrEn is invalid @[Debug.scala 440:29] 
    wire CLEARDEBINTWrData : UInt<10> @[Debug.scala 441:31] 
    CLEARDEBINTWrData is invalid @[Debug.scala 441:31] 
    wire T_655 : UInt<1>[1] @[Debug.scala 445:57] 
    T_655 is invalid @[Debug.scala 445:57] 
    T_655[0] <= UInt<1>("h00") @[Debug.scala 445:57] 
    reg interruptRegs : UInt<1>[1], clk with : (reset => (reset, T_655))
    wire T_666 : UInt<1>[1] @[Debug.scala 447:59] 
    T_666 is invalid @[Debug.scala 447:59] 
    T_666[0] <= UInt<1>("h00") @[Debug.scala 447:59] 
    reg haltnotRegs : UInt<1>[1], clk with : (reset => (reset, T_666))
    wire haltnotStatus : UInt<32>[1] @[Debug.scala 450:27] 
    haltnotStatus is invalid @[Debug.scala 450:27] 
    wire rdHaltnotStatus : UInt<32> @[Debug.scala 451:29] 
    rdHaltnotStatus is invalid @[Debug.scala 451:29] 
    node haltnotSummary = neq(haltnotStatus[0], UInt<1>("h00")) @[Debug.scala 453:48] 
    cmem ramMem : UInt<64>[8] @[Debug.scala 469:22] 
    wire ramAddr : UInt<3> @[Debug.scala 470:23] 
    ramAddr is invalid @[Debug.scala 470:23] 
    wire ramRdData : UInt<64> @[Debug.scala 471:23] 
    ramRdData is invalid @[Debug.scala 471:23] 
    wire ramWrData : UInt<64> @[Debug.scala 472:23] 
    ramWrData is invalid @[Debug.scala 472:23] 
    wire ramWrMask : UInt<64> @[Debug.scala 473:23] 
    ramWrMask is invalid @[Debug.scala 473:23] 
    wire ramWrEn : UInt<1> @[Debug.scala 474:23] 
    ramWrEn is invalid @[Debug.scala 474:23] 
    wire dbRamAddr : UInt<4> @[Debug.scala 476:25] 
    dbRamAddr is invalid @[Debug.scala 476:25] 
    wire dbRamRdData : UInt<32> @[Debug.scala 477:26] 
    dbRamRdData is invalid @[Debug.scala 477:26] 
    wire dbRamWrData : UInt<32> @[Debug.scala 478:25] 
    dbRamWrData is invalid @[Debug.scala 478:25] 
    wire dbRamWrEn : UInt<1> @[Debug.scala 479:25] 
    dbRamWrEn is invalid @[Debug.scala 479:25] 
    wire dbRamRdEn : UInt<1> @[Debug.scala 480:25] 
    dbRamRdEn is invalid @[Debug.scala 480:25] 
    wire sbRamAddr : UInt<3> @[Debug.scala 482:25] 
    sbRamAddr is invalid @[Debug.scala 482:25] 
    wire sbRamRdData : UInt<64> @[Debug.scala 483:26] 
    sbRamRdData is invalid @[Debug.scala 483:26] 
    wire sbRamWrData : UInt<64> @[Debug.scala 484:25] 
    sbRamWrData is invalid @[Debug.scala 484:25] 
    wire sbRamWrEn : UInt<1> @[Debug.scala 485:25] 
    sbRamWrEn is invalid @[Debug.scala 485:25] 
    wire sbRamRdEn : UInt<1> @[Debug.scala 486:25] 
    sbRamRdEn is invalid @[Debug.scala 486:25] 
    wire sbRomRdData : UInt<64> @[Debug.scala 488:31] 
    sbRomRdData is invalid @[Debug.scala 488:31] 
    wire dbRdEn : UInt<1> @[Debug.scala 493:22] 
    dbRdEn is invalid @[Debug.scala 493:22] 
    wire dbWrEn : UInt<1> @[Debug.scala 494:22] 
    dbWrEn is invalid @[Debug.scala 494:22] 
    wire dbRdData : UInt<34> @[Debug.scala 495:22] 
    dbRdData is invalid @[Debug.scala 495:22] 
    reg dbStateReg : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    wire dbResult : {resp : UInt<2>, data : UInt<34>} @[Debug.scala 500:23] 
    dbResult is invalid @[Debug.scala 500:23] 
    wire dbReq : {addr : UInt<5>, op : UInt<2>, data : UInt<34>} @[Debug.scala 502:23] 
    dbReq is invalid @[Debug.scala 502:23] 
    reg dbRespReg : {resp : UInt<2>, data : UInt<34>}, clk
    wire rdCondWrFailure : UInt<1> @[Debug.scala 505:29] 
    rdCondWrFailure is invalid @[Debug.scala 505:29] 
    wire dbWrNeeded : UInt<1> @[Debug.scala 506:24] 
    dbWrNeeded is invalid @[Debug.scala 506:24] 
    wire sbAddr : UInt<12> @[Debug.scala 509:22] 
    sbAddr is invalid @[Debug.scala 509:22] 
    wire sbRdData : UInt<64> @[Debug.scala 510:22] 
    sbRdData is invalid @[Debug.scala 510:22] 
    wire sbWrData : UInt<64> @[Debug.scala 511:22] 
    sbWrData is invalid @[Debug.scala 511:22] 
    wire sbWrMask : UInt<64> @[Debug.scala 512:22] 
    sbWrMask is invalid @[Debug.scala 512:22] 
    wire sbWrEn : UInt<1> @[Debug.scala 513:22] 
    sbWrEn is invalid @[Debug.scala 513:22] 
    wire sbRdEn : UInt<1> @[Debug.scala 514:22] 
    sbRdEn is invalid @[Debug.scala 514:22] 
    wire stallFromDb : UInt<1> @[Debug.scala 516:25] 
    stallFromDb is invalid @[Debug.scala 516:25] 
    wire stallFromSb : UInt<1> @[Debug.scala 517:25] 
    stallFromSb is invalid @[Debug.scala 517:25] 
    io.debugInterrupts[0] <= interruptRegs[0] @[Debug.scala 523:35] 
    when CONTROLWrEn : @[Debug.scala 533:24] 
      node T_720 = eq(CONTROLWrData.hartid, UInt<1>("h00")) @[Debug.scala 534:34] 
      when T_720 : @[Debug.scala 534:55] 
        node T_721 = or(interruptRegs[0], CONTROLWrData.interrupt) @[Debug.scala 535:62] 
        interruptRegs[0] <= T_721 @[Debug.scala 535:34] 
        skip @[Debug.scala 534:55] 
      skip @[Debug.scala 533:24] 
    node T_723 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 533:24] 
    node T_724 = and(T_723, dbRamWrEn) @[Debug.scala 537:28] 
    when T_724 : @[Debug.scala 537:28] 
      node T_726 = eq(CONTROLReg.hartid, UInt<1>("h00")) @[Debug.scala 538:31] 
      when T_726 : @[Debug.scala 538:51] 
        node T_727 = or(interruptRegs[0], RAMWrData.interrupt) @[Debug.scala 539:63] 
        interruptRegs[0] <= T_727 @[Debug.scala 539:34] 
        skip @[Debug.scala 538:51] 
      skip @[Debug.scala 537:28] 
    node T_729 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 533:24] 
    node T_731 = eq(dbRamWrEn, UInt<1>("h00")) @[Debug.scala 537:28] 
    node T_732 = and(T_729, T_731) @[Debug.scala 537:28] 
    node T_733 = and(T_732, CLEARDEBINTWrEn) @[Debug.scala 541:33] 
    when T_733 : @[Debug.scala 541:33] 
      node T_735 = eq(CLEARDEBINTWrData, UInt<10>("h00")) @[Debug.scala 542:31] 
      when T_735 : @[Debug.scala 542:71] 
        interruptRegs[0] <= UInt<1>("h00") @[Debug.scala 543:34] 
        skip @[Debug.scala 542:71] 
      skip @[Debug.scala 541:33] 
    when SETHALTNOTWrEn : @[Debug.scala 559:26] 
      node T_738 = eq(SETHALTNOTWrData, UInt<10>("h00")) @[Debug.scala 560:30] 
      when T_738 : @[Debug.scala 560:70] 
        haltnotRegs[0] <= UInt<1>("h01") @[Debug.scala 561:32] 
        skip @[Debug.scala 560:70] 
      skip @[Debug.scala 559:26] 
    node T_741 = eq(SETHALTNOTWrEn, UInt<1>("h00")) @[Debug.scala 559:26] 
    node T_742 = and(T_741, CONTROLWrEn) @[Debug.scala 563:31] 
    when T_742 : @[Debug.scala 563:31] 
      node T_744 = eq(CONTROLWrData.hartid, UInt<1>("h00")) @[Debug.scala 564:34] 
      when T_744 : @[Debug.scala 564:55] 
        node T_745 = and(haltnotRegs[0], CONTROLWrData.haltnot) @[Debug.scala 565:58] 
        haltnotRegs[0] <= T_745 @[Debug.scala 565:32] 
        skip @[Debug.scala 564:55] 
      skip @[Debug.scala 563:31] 
    node T_747 = eq(SETHALTNOTWrEn, UInt<1>("h00")) @[Debug.scala 559:26] 
    node T_749 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 563:31] 
    node T_750 = and(T_747, T_749) @[Debug.scala 563:31] 
    node T_751 = and(T_750, dbRamWrEn) @[Debug.scala 567:28] 
    when T_751 : @[Debug.scala 567:28] 
      node T_753 = eq(CONTROLReg.hartid, UInt<1>("h00")) @[Debug.scala 568:31] 
      when T_753 : @[Debug.scala 568:51] 
        node T_754 = and(haltnotRegs[0], RAMWrData.haltnot) @[Debug.scala 569:59] 
        haltnotRegs[0] <= T_754 @[Debug.scala 569:32] 
        skip @[Debug.scala 568:51] 
      skip @[Debug.scala 567:28] 
    haltnotStatus[0] <= haltnotRegs[0] @[Debug.scala 575:23] 
    CONTROLReset.interrupt <= UInt<1>("h00") @[Debug.scala 582:30] 
    CONTROLReset.haltnot <= UInt<1>("h00") @[Debug.scala 583:30] 
    CONTROLReset.reserved0 <= UInt<1>("h00") @[Debug.scala 584:30] 
    CONTROLReset.buserror <= UInt<1>("h00") @[Debug.scala 585:30] 
    CONTROLReset.serial <= UInt<1>("h00") @[Debug.scala 586:30] 
    CONTROLReset.autoincrement <= UInt<1>("h00") @[Debug.scala 587:30] 
    CONTROLReset.access <= UInt<2>("h02") @[Debug.scala 588:30] 
    CONTROLReset.hartid <= UInt<1>("h00") @[Debug.scala 589:30] 
    CONTROLReset.ndreset <= UInt<1>("h00") @[Debug.scala 590:30] 
    CONTROLReset.fullreset <= UInt<1>("h00") @[Debug.scala 591:30] 
    DMINFORdData.reserved0 <= UInt<1>("h00") @[Debug.scala 596:30] 
    DMINFORdData.abussize <= UInt<1>("h00") @[Debug.scala 597:30] 
    DMINFORdData.serialcount <= UInt<1>("h00") @[Debug.scala 598:30] 
    DMINFORdData.access128 <= UInt<1>("h00") @[Debug.scala 599:30] 
    DMINFORdData.access64 <= UInt<1>("h00") @[Debug.scala 600:30] 
    DMINFORdData.access32 <= UInt<1>("h00") @[Debug.scala 601:30] 
    DMINFORdData.access16 <= UInt<1>("h00") @[Debug.scala 602:30] 
    DMINFORdData.accesss8 <= UInt<1>("h00") @[Debug.scala 603:30] 
    DMINFORdData.dramsize <= UInt<4>("h0f") @[Debug.scala 604:30] 
    DMINFORdData.haltsum <= UInt<1>("h00") @[Debug.scala 605:30] 
    DMINFORdData.reserved1 <= UInt<1>("h00") @[Debug.scala 606:30] 
    DMINFORdData.authenticated <= UInt<1>("h01") @[Debug.scala 607:30] 
    DMINFORdData.authbusy <= UInt<1>("h00") @[Debug.scala 608:30] 
    DMINFORdData.authtype <= UInt<1>("h00") @[Debug.scala 609:30] 
    DMINFORdData.version <= UInt<1>("h01") @[Debug.scala 610:30] 
    HALTSUMRdData.serialfull <= UInt<1>("h00") @[Debug.scala 612:29] 
    HALTSUMRdData.serialvalid <= UInt<1>("h00") @[Debug.scala 613:29] 
    HALTSUMRdData.acks <= haltnotSummary @[Debug.scala 614:29] 
    dbReq <- io.db.req.bits @[Debug.scala 620:9] 
    node T_782 = bits(dbReq.addr, 3, 0) @[Debug.scala 624:28] 
    dbRamAddr <= T_782 @[Debug.scala 624:15] 
    dbRamWrData <= dbReq.data @[Debug.scala 625:15] 
    node T_783 = bits(sbAddr, 5, 3) @[Debug.scala 626:24] 
    sbRamAddr <= T_783 @[Debug.scala 626:15] 
    sbRamWrData <= sbWrData @[Debug.scala 627:15] 
    node T_788 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    node T_793 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    wire T_799 : UInt<32>[2] @[Debug.scala 630:77] 
    T_799 is invalid @[Debug.scala 630:77] 
    T_799[0] <= T_788 @[Debug.scala 630:77] 
    T_799[1] <= T_793 @[Debug.scala 630:77] 
    wire dbRamWrMask : UInt<32>[2]
    dbRamWrMask is invalid
    dbRamWrMask <= T_799
    node T_804 = bits(dbRamAddr, 0, 0) @[Debug.scala 634:29] 
    node T_805 = bits(ramRdData, 31, 0) @[Debug.scala 636:16] 
    node T_806 = bits(ramRdData, 63, 32) @[Debug.scala 636:16] 
    wire T_812 : UInt<32>[2] @[Debug.scala 635:73] 
    T_812 is invalid @[Debug.scala 635:73] 
    T_812[0] <= T_805 @[Debug.scala 635:73] 
    T_812[1] <= T_806 @[Debug.scala 635:73] 
    wire T_821 : UInt<32>[2] @[Debug.scala 638:66] 
    T_821 is invalid @[Debug.scala 638:66] 
    T_821[0] <= UInt<32>("h00") @[Debug.scala 638:66] 
    T_821[1] <= UInt<32>("h00") @[Debug.scala 638:66] 
    dbRamWrMask <= T_821 @[Debug.scala 638:17] 
    node T_827 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 33:12] 
    dbRamWrMask[T_804] <= T_827 @[Debug.scala 639:27] 
    dbRamRdData <= T_812[T_804] @[Debug.scala 640:17] 
    sbRamRdData <= ramRdData @[Debug.scala 645:15] 
    node T_828 = cat(dbRamWrMask[1], dbRamWrMask[0]) @[Debug.scala 647:53] 
    node T_829 = mux(sbRamWrEn, sbWrMask, T_828) @[Debug.scala 647:19] 
    ramWrMask <= T_829 @[Debug.scala 647:13] 
    node T_830 = or(dbRamWrEn, dbRamRdEn) @[Debug.scala 649:24] 
    node T_831 = or(sbRamRdEn, sbRamWrEn) @[Debug.scala 649:50] 
    node T_832 = and(T_830, T_831) @[Debug.scala 649:37] 
    node T_834 = eq(T_832, UInt<1>("h00")) @[Debug.scala 649:11] 
    node T_835 = or(T_834, reset) @[Debug.scala 649:10] 
    node T_837 = eq(T_835, UInt<1>("h00")) @[Debug.scala 649:10] 
    when T_837 : @[Debug.scala 649:10] 
      printf(clk, UInt<1>(1), "Assertion failed: Stall logic should have prevented concurrent SB/DB RAM Access\n    at Debug.scala:649 assert (!((dbRamWrEn | dbRamRdEn) & (sbRamRdEn | sbRamWrEn)), \"Stall logic should have prevented concurrent SB/DB RAM Access\")\n") @[Debug.scala 649:10] 
      stop(clk, UInt<1>(1), 1) @[Debug.scala 649:10] 
      skip @[Debug.scala 649:10] 
    node dbRamWrDataVec = cat(dbRamWrData, dbRamWrData) @[Cat.scala 20:58] 
    node T_838 = and(ramWrMask, sbRamWrData) @[Debug.scala 654:16] 
    node T_839 = not(ramWrMask) @[Debug.scala 654:37] 
    node T_840 = and(T_839, ramRdData) @[Debug.scala 654:48] 
    node T_841 = or(T_838, T_840) @[Debug.scala 654:34] 
    node T_842 = and(ramWrMask, dbRamWrDataVec) @[Debug.scala 655:16] 
    node T_843 = not(ramWrMask) @[Debug.scala 655:37] 
    node T_844 = and(T_843, ramRdData) @[Debug.scala 655:48] 
    node T_845 = or(T_842, T_844) @[Debug.scala 655:34] 
    node T_846 = mux(sbRamWrEn, T_841, T_845) @[Debug.scala 653:19] 
    ramWrData <= T_846 @[Debug.scala 653:13] 
    node T_847 = or(sbRamWrEn, sbRamRdEn) @[Debug.scala 657:30] 
    node T_848 = shr(dbRamAddr, 1) @[Debug.scala 658:15] 
    node T_849 = mux(T_847, sbRamAddr, T_848) @[Debug.scala 657:19] 
    ramAddr <= T_849 @[Debug.scala 657:13] 
    infer mport T_850 = ramMem[ramAddr], clk
    ramRdData <= T_850 @[Debug.scala 660:13] 
    when ramWrEn : @[Debug.scala 661:18] 
      infer mport T_851 = ramMem[ramAddr], clk
      T_851 <= ramWrData @[Debug.scala 661:36] 
      skip @[Debug.scala 661:18] 
    node T_852 = or(sbRamWrEn, dbRamWrEn) @[Debug.scala 663:24] 
    ramWrEn <= T_852 @[Debug.scala 663:11] 
    wire T_875 : {interrupt : UInt<1>, haltnot : UInt<1>, reserved0 : UInt<10>, buserror : UInt<3>, serial : UInt<3>, autoincrement : UInt<1>, access : UInt<3>, hartid : UInt<10>, ndreset : UInt<1>, fullreset : UInt<1>} @[Debug.scala 679:48] 
    T_875 is invalid @[Debug.scala 679:48] 
    node T_886 = bits(dbReq.data, 0, 0) @[Debug.scala 679:48] 
    T_875.fullreset <= T_886 @[Debug.scala 679:48] 
    node T_887 = bits(dbReq.data, 1, 1) @[Debug.scala 679:48] 
    T_875.ndreset <= T_887 @[Debug.scala 679:48] 
    node T_888 = bits(dbReq.data, 11, 2) @[Debug.scala 679:48] 
    T_875.hartid <= T_888 @[Debug.scala 679:48] 
    node T_889 = bits(dbReq.data, 14, 12) @[Debug.scala 679:48] 
    T_875.access <= T_889 @[Debug.scala 679:48] 
    node T_890 = bits(dbReq.data, 15, 15) @[Debug.scala 679:48] 
    T_875.autoincrement <= T_890 @[Debug.scala 679:48] 
    node T_891 = bits(dbReq.data, 18, 16) @[Debug.scala 679:48] 
    T_875.serial <= T_891 @[Debug.scala 679:48] 
    node T_892 = bits(dbReq.data, 21, 19) @[Debug.scala 679:48] 
    T_875.buserror <= T_892 @[Debug.scala 679:48] 
    node T_893 = bits(dbReq.data, 31, 22) @[Debug.scala 679:48] 
    T_875.reserved0 <= T_893 @[Debug.scala 679:48] 
    node T_894 = bits(dbReq.data, 32, 32) @[Debug.scala 679:48] 
    T_875.haltnot <= T_894 @[Debug.scala 679:48] 
    node T_895 = bits(dbReq.data, 33, 33) @[Debug.scala 679:48] 
    T_875.interrupt <= T_895 @[Debug.scala 679:48] 
    CONTROLWrData <- T_875 @[Debug.scala 679:17] 
    wire T_904 : {interrupt : UInt<1>, haltnot : UInt<1>, data : UInt<32>} @[Debug.scala 680:44] 
    T_904 is invalid @[Debug.scala 680:44] 
    node T_908 = bits(dbReq.data, 31, 0) @[Debug.scala 680:44] 
    T_904.data <= T_908 @[Debug.scala 680:44] 
    node T_909 = bits(dbReq.data, 32, 32) @[Debug.scala 680:44] 
    T_904.haltnot <= T_909 @[Debug.scala 680:44] 
    node T_910 = bits(dbReq.data, 33, 33) @[Debug.scala 680:44] 
    T_904.interrupt <= T_910 @[Debug.scala 680:44] 
    RAMWrData <- T_904 @[Debug.scala 680:17] 
    dbRamWrEn <= UInt<1>("h00") @[Debug.scala 682:14] 
    CONTROLWrEn <= UInt<1>("h00") @[Debug.scala 683:15] 
    node T_913 = shr(dbReq.addr, 4) @[Debug.scala 684:21] 
    node T_915 = eq(T_913, UInt<1>("h00")) @[Debug.scala 684:27] 
    when T_915 : @[Debug.scala 684:40] 
      dbRamWrEn <= dbWrEn @[Debug.scala 685:15] 
      skip @[Debug.scala 684:40] 
    node T_917 = eq(dbReq.addr, UInt<5>("h010")) @[Debug.scala 686:27] 
    node T_919 = eq(T_915, UInt<1>("h00")) @[Debug.scala 684:40] 
    node T_920 = and(T_919, T_917) @[Debug.scala 686:42] 
    when T_920 : @[Debug.scala 686:42] 
      CONTROLWrEn <= dbWrEn @[Debug.scala 687:18] 
      skip @[Debug.scala 686:42] 
    node T_922 = eq(T_915, UInt<1>("h00")) @[Debug.scala 684:40] 
    node T_924 = eq(T_917, UInt<1>("h00")) @[Debug.scala 686:42] 
    node T_925 = and(T_922, T_924) @[Debug.scala 686:42] 
    when T_925 : @[Debug.scala 688:15] 
      skip @[Debug.scala 688:15] 
    when reset : @[Debug.scala 692:16] 
      CONTROLReg <- CONTROLReset @[Debug.scala 693:16] 
      ndresetCtrReg <= UInt<1>("h00") @[Debug.scala 694:19] 
      skip @[Debug.scala 692:16] 
    node T_928 = eq(reset, UInt<1>("h00")) @[Debug.scala 692:16] 
    node T_929 = and(T_928, CONTROLWrEn) @[Debug.scala 695:28] 
    when T_929 : @[Debug.scala 695:28] 
      CONTROLReg.hartid <= CONTROLWrData.hartid @[Debug.scala 707:30] 
      node T_930 = or(CONTROLReg.fullreset, CONTROLWrData.fullreset) @[Debug.scala 708:54] 
      CONTROLReg.fullreset <= T_930 @[Debug.scala 708:30] 
      when CONTROLWrData.ndreset : @[Debug.scala 709:33] 
        ndresetCtrReg <= UInt<1>("h01") @[Debug.scala 710:21] 
        skip @[Debug.scala 709:33] 
      node T_933 = eq(CONTROLWrData.ndreset, UInt<1>("h00")) @[Debug.scala 709:33] 
      when T_933 : @[Debug.scala 711:17] 
        node T_935 = eq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 712:42] 
        node T_938 = sub(ndresetCtrReg, UInt<1>("h01")) @[Debug.scala 712:79] 
        node T_939 = tail(T_938, 1) @[Debug.scala 712:79] 
        node T_940 = mux(T_935, UInt<1>("h00"), T_939) @[Debug.scala 712:27] 
        ndresetCtrReg <= T_940 @[Debug.scala 712:21] 
        skip @[Debug.scala 711:17] 
      skip @[Debug.scala 695:28] 
    node T_942 = eq(reset, UInt<1>("h00")) @[Debug.scala 692:16] 
    node T_944 = eq(CONTROLWrEn, UInt<1>("h00")) @[Debug.scala 695:28] 
    node T_945 = and(T_942, T_944) @[Debug.scala 695:28] 
    when T_945 : @[Debug.scala 714:15] 
      node T_947 = eq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 715:40] 
      node T_950 = sub(ndresetCtrReg, UInt<1>("h01")) @[Debug.scala 715:77] 
      node T_951 = tail(T_950, 1) @[Debug.scala 715:77] 
      node T_952 = mux(T_947, UInt<1>("h00"), T_951) @[Debug.scala 715:25] 
      ndresetCtrReg <= T_952 @[Debug.scala 715:19] 
      skip @[Debug.scala 714:15] 
    CONTROLRdData <- CONTROLReg @[Debug.scala 721:17] 
    CONTROLRdData.interrupt <= interruptRegs[CONTROLReg.hartid] @[Debug.scala 722:27] 
    CONTROLRdData.haltnot <= haltnotRegs[CONTROLReg.hartid] @[Debug.scala 723:27] 
    node T_954 = neq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 724:44] 
    CONTROLRdData.ndreset <= T_954 @[Debug.scala 724:27] 
    RAMRdData.interrupt <= interruptRegs[CONTROLReg.hartid] @[Debug.scala 726:23] 
    RAMRdData.haltnot <= haltnotRegs[CONTROLReg.hartid] @[Debug.scala 727:23] 
    RAMRdData.data <= dbRamRdData @[Debug.scala 728:23] 
    dbRdData <= UInt<1>("h00") @[Debug.scala 730:12] 
    rdHaltnotStatus <= UInt<1>("h00") @[Debug.scala 734:19] 
    node T_958 = eq(dbReq.addr, UInt<1>("h00")) @[Debug.scala 736:22] 
    when T_958 : @[Debug.scala 736:36] 
      rdHaltnotStatus <= haltnotStatus[0] @[Debug.scala 737:23] 
      skip @[Debug.scala 736:36] 
    dbRamRdEn <= UInt<1>("h00") @[Debug.scala 741:13] 
    node T_960 = shr(dbReq.addr, 4) @[Debug.scala 742:21] 
    node T_962 = eq(T_960, UInt<1>("h00")) @[Debug.scala 742:27] 
    when T_962 : @[Debug.scala 742:40] 
      node T_963 = cat(RAMRdData.interrupt, RAMRdData.haltnot) @[Debug.scala 743:28] 
      node T_964 = cat(T_963, RAMRdData.data) @[Debug.scala 743:28] 
      dbRdData <= T_964 @[Debug.scala 743:15] 
      dbRamRdEn <= dbRdEn @[Debug.scala 744:15] 
      skip @[Debug.scala 742:40] 
    node T_966 = eq(dbReq.addr, UInt<5>("h010")) @[Debug.scala 745:26] 
    node T_968 = eq(T_962, UInt<1>("h00")) @[Debug.scala 742:40] 
    node T_969 = and(T_968, T_966) @[Debug.scala 745:41] 
    when T_969 : @[Debug.scala 745:41] 
      node T_970 = cat(CONTROLRdData.ndreset, CONTROLRdData.fullreset) @[Debug.scala 746:31] 
      node T_971 = cat(CONTROLRdData.autoincrement, CONTROLRdData.access) @[Debug.scala 746:31] 
      node T_972 = cat(T_971, CONTROLRdData.hartid) @[Debug.scala 746:31] 
      node T_973 = cat(T_972, T_970) @[Debug.scala 746:31] 
      node T_974 = cat(CONTROLRdData.buserror, CONTROLRdData.serial) @[Debug.scala 746:31] 
      node T_975 = cat(CONTROLRdData.interrupt, CONTROLRdData.haltnot) @[Debug.scala 746:31] 
      node T_976 = cat(T_975, CONTROLRdData.reserved0) @[Debug.scala 746:31] 
      node T_977 = cat(T_976, T_974) @[Debug.scala 746:31] 
      node T_978 = cat(T_977, T_973) @[Debug.scala 746:31] 
      dbRdData <= T_978 @[Debug.scala 746:14] 
      skip @[Debug.scala 745:41] 
    node T_980 = eq(dbReq.addr, UInt<5>("h011")) @[Debug.scala 747:26] 
    node T_982 = eq(T_962, UInt<1>("h00")) @[Debug.scala 742:40] 
    node T_984 = eq(T_966, UInt<1>("h00")) @[Debug.scala 745:41] 
    node T_985 = and(T_982, T_984) @[Debug.scala 745:41] 
    node T_986 = and(T_985, T_980) @[Debug.scala 747:38] 
    when T_986 : @[Debug.scala 747:38] 
      node T_987 = cat(DMINFORdData.authbusy, DMINFORdData.authtype) @[Debug.scala 748:30] 
      node T_988 = cat(T_987, DMINFORdData.version) @[Debug.scala 748:30] 
      node T_989 = cat(DMINFORdData.reserved1, DMINFORdData.authenticated) @[Debug.scala 748:30] 
      node T_990 = cat(DMINFORdData.dramsize, DMINFORdData.haltsum) @[Debug.scala 748:30] 
      node T_991 = cat(T_990, T_989) @[Debug.scala 748:30] 
      node T_992 = cat(T_991, T_988) @[Debug.scala 748:30] 
      node T_993 = cat(DMINFORdData.access16, DMINFORdData.accesss8) @[Debug.scala 748:30] 
      node T_994 = cat(DMINFORdData.access64, DMINFORdData.access32) @[Debug.scala 748:30] 
      node T_995 = cat(T_994, T_993) @[Debug.scala 748:30] 
      node T_996 = cat(DMINFORdData.serialcount, DMINFORdData.access128) @[Debug.scala 748:30] 
      node T_997 = cat(DMINFORdData.reserved0, DMINFORdData.abussize) @[Debug.scala 748:30] 
      node T_998 = cat(T_997, T_996) @[Debug.scala 748:30] 
      node T_999 = cat(T_998, T_995) @[Debug.scala 748:30] 
      node T_1000 = cat(T_999, T_992) @[Debug.scala 748:30] 
      dbRdData <= T_1000 @[Debug.scala 748:14] 
      skip @[Debug.scala 747:38] 
    node T_1002 = eq(dbReq.addr, UInt<5>("h01b")) @[Debug.scala 749:26] 
    node T_1004 = eq(T_962, UInt<1>("h00")) @[Debug.scala 742:40] 
    node T_1006 = eq(T_966, UInt<1>("h00")) @[Debug.scala 745:41] 
    node T_1007 = and(T_1004, T_1006) @[Debug.scala 745:41] 
    node T_1009 = eq(T_980, UInt<1>("h00")) @[Debug.scala 747:38] 
    node T_1010 = and(T_1007, T_1009) @[Debug.scala 747:38] 
    node T_1011 = and(T_1010, T_1002) @[Debug.scala 749:39] 
    when T_1011 : @[Debug.scala 749:39] 
      dbRdData <= UInt<1>("h00") @[Debug.scala 753:16] 
      skip @[Debug.scala 749:39] 
    node T_1013 = shr(dbReq.addr, 2) @[Debug.scala 755:27] 
    node T_1015 = eq(T_1013, UInt<3>("h07")) @[Debug.scala 755:33] 
    node T_1017 = eq(T_962, UInt<1>("h00")) @[Debug.scala 742:40] 
    node T_1019 = eq(T_966, UInt<1>("h00")) @[Debug.scala 745:41] 
    node T_1020 = and(T_1017, T_1019) @[Debug.scala 745:41] 
    node T_1022 = eq(T_980, UInt<1>("h00")) @[Debug.scala 747:38] 
    node T_1023 = and(T_1020, T_1022) @[Debug.scala 747:38] 
    node T_1025 = eq(T_1002, UInt<1>("h00")) @[Debug.scala 749:39] 
    node T_1026 = and(T_1023, T_1025) @[Debug.scala 749:39] 
    node T_1027 = and(T_1026, T_1015) @[Debug.scala 755:46] 
    when T_1027 : @[Debug.scala 755:46] 
      dbRdData <= rdHaltnotStatus @[Debug.scala 756:14] 
      skip @[Debug.scala 755:46] 
    node T_1029 = eq(T_962, UInt<1>("h00")) @[Debug.scala 742:40] 
    node T_1031 = eq(T_966, UInt<1>("h00")) @[Debug.scala 745:41] 
    node T_1032 = and(T_1029, T_1031) @[Debug.scala 745:41] 
    node T_1034 = eq(T_980, UInt<1>("h00")) @[Debug.scala 747:38] 
    node T_1035 = and(T_1032, T_1034) @[Debug.scala 747:38] 
    node T_1037 = eq(T_1002, UInt<1>("h00")) @[Debug.scala 749:39] 
    node T_1038 = and(T_1035, T_1037) @[Debug.scala 749:39] 
    node T_1040 = eq(T_1015, UInt<1>("h00")) @[Debug.scala 755:46] 
    node T_1041 = and(T_1038, T_1040) @[Debug.scala 755:46] 
    when T_1041 : @[Debug.scala 757:16] 
      dbRdData <= UInt<1>("h00") @[Debug.scala 772:14] 
      skip @[Debug.scala 757:16] 
    node T_1043 = bits(dbRdData, 33, 33) @[Debug.scala 776:30] 
    node T_1045 = eq(dbReq.op, UInt<2>("h03")) @[Debug.scala 777:13] 
    node T_1046 = and(T_1043, T_1045) @[Debug.scala 776:48] 
    rdCondWrFailure <= T_1046 @[Debug.scala 776:19] 
    node T_1048 = eq(dbReq.op, UInt<2>("h02")) @[Debug.scala 779:27] 
    node T_1050 = eq(dbReq.op, UInt<2>("h03")) @[Debug.scala 780:14] 
    node T_1051 = not(rdCondWrFailure) @[Debug.scala 780:44] 
    node T_1052 = and(T_1050, T_1051) @[Debug.scala 780:41] 
    node T_1053 = or(T_1048, T_1052) @[Debug.scala 779:49] 
    dbWrNeeded <= T_1053 @[Debug.scala 779:14] 
    node T_1056 = mux(rdCondWrFailure, UInt<2>("h01"), UInt<2>("h00")) @[Debug.scala 783:23] 
    dbResult.resp <= T_1056 @[Debug.scala 783:17] 
    dbResult.data <= dbRdData @[Debug.scala 786:17] 
    node T_1058 = eq(stallFromSb, UInt<1>("h00")) @[Debug.scala 790:22] 
    node T_1059 = eq(dbStateReg, UInt<1>("h00")) @[Debug.scala 790:51] 
    node T_1060 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 791:17] 
    node T_1061 = and(io.db.resp.ready, io.db.resp.valid) @[Decoupled.scala 16:42] 
    node T_1062 = and(T_1060, T_1061) @[Debug.scala 791:31] 
    node T_1063 = or(T_1059, T_1062) @[Debug.scala 790:67] 
    node T_1064 = and(T_1058, T_1063) @[Debug.scala 790:35] 
    io.db.req.ready <= T_1064 @[Debug.scala 790:19] 
    node T_1065 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 793:35] 
    io.db.resp.valid <= T_1065 @[Debug.scala 793:20] 
    io.db.resp.bits <- dbRespReg @[Debug.scala 794:20] 
    node T_1066 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 16:42] 
    dbRdEn <= T_1066 @[Debug.scala 796:10] 
    node T_1067 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 16:42] 
    node T_1068 = and(dbWrNeeded, T_1067) @[Debug.scala 797:24] 
    dbWrEn <= T_1068 @[Debug.scala 797:10] 
    node T_1069 = eq(dbStateReg, UInt<1>("h00")) @[Debug.scala 802:20] 
    when T_1069 : @[Debug.scala 802:35] 
      node T_1070 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 16:42] 
      when T_1070 : @[Debug.scala 803:28] 
        dbStateReg <= UInt<1>("h01") @[Debug.scala 804:18] 
        dbRespReg <- dbResult @[Debug.scala 805:17] 
        skip @[Debug.scala 803:28] 
      skip @[Debug.scala 802:35] 
    node T_1071 = eq(dbStateReg, UInt<1>("h01")) @[Debug.scala 807:27] 
    node T_1073 = eq(T_1069, UInt<1>("h00")) @[Debug.scala 802:35] 
    node T_1074 = and(T_1073, T_1071) @[Debug.scala 807:41] 
    when T_1074 : @[Debug.scala 807:41] 
      node T_1075 = and(io.db.req.ready, io.db.req.valid) @[Decoupled.scala 16:42] 
      when T_1075 : @[Debug.scala 808:28] 
        dbStateReg <= UInt<1>("h01") @[Debug.scala 809:18] 
        dbRespReg <- dbResult @[Debug.scala 810:17] 
        skip @[Debug.scala 808:28] 
      node T_1076 = and(io.db.resp.ready, io.db.resp.valid) @[Decoupled.scala 16:42] 
      node T_1078 = eq(T_1075, UInt<1>("h00")) @[Debug.scala 808:28] 
      node T_1079 = and(T_1078, T_1076) @[Debug.scala 811:35] 
      when T_1079 : @[Debug.scala 811:35] 
        dbStateReg <= UInt<1>("h00") @[Debug.scala 812:18] 
        skip @[Debug.scala 811:35] 
      skip @[Debug.scala 807:41] 
    sbRomRdData <= UInt<1>("h00") @[Debug.scala 821:15] 
    wire T_1101 : UInt<64>[15] @[Debug.scala 827:40] 
    T_1101 is invalid @[Debug.scala 827:40] 
    T_1101[0] <= UInt<64>("h0c0006f03c0006f") @[Debug.scala 827:40] 
    T_1101[1] <= UInt<64>("h080006ffff00413") @[Debug.scala 827:40] 
    T_1101[2] <= UInt<64>("h0ff0000f00000413") @[Debug.scala 827:40] 
    T_1101[3] <= UInt<64>("h042802e2343803483") @[Debug.scala 827:40] 
    T_1101[4] <= UInt<64>("h010802023f1402473") @[Debug.scala 827:40] 
    T_1101[5] <= UInt<64>("h08474137b002473") @[Debug.scala 827:40] 
    T_1101[6] <= UInt<64>("h07b20247302041a63") @[Debug.scala 827:40] 
    T_1101[7] <= UInt<64>("h07b2410737b200073") @[Debug.scala 827:40] 
    T_1101[8] <= UInt<64>("h01c0474137b002473") @[Debug.scala 827:40] 
    T_1101[9] <= UInt<64>("h041663f4040413") @[Debug.scala 827:40] 
    T_1101[10] <= UInt<64>("h04000006742903c23") @[Debug.scala 827:40] 
    T_1101[11] <= UInt<64>("h010802623f1402473") @[Debug.scala 827:40] 
    T_1101[12] <= UInt<64>("h07b0024737b046073") @[Debug.scala 827:40] 
    T_1101[13] <= UInt<64>("h0fe040ce302047413") @[Debug.scala 827:40] 
    T_1101[14] <= UInt<64>("h0fe1ff06f") @[Debug.scala 827:40] 
    wire T_1104 : UInt @[Debug.scala 832:27] 
    T_1104 is invalid @[Debug.scala 832:27] 
    node T_1105 = bits(sbAddr, 6, 3) @[Debug.scala 837:28] 
    T_1104 <= T_1105 @[Debug.scala 837:19] 
    sbRomRdData <= T_1101[T_1104] @[Debug.scala 839:17] 
    sbRamWrEn <= UInt<1>("h00") @[Debug.scala 850:14] 
    SETHALTNOTWrEn <= UInt<1>("h00") @[Debug.scala 851:18] 
    CLEARDEBINTWrEn <= UInt<1>("h00") @[Debug.scala 852:19] 
    node T_1109 = bits(sbWrData, 31, 0) @[Debug.scala 870:71] 
    node T_1110 = bits(sbWrData, 63, 32) @[Debug.scala 870:71] 
    wire T_1116 : UInt<32>[2] @[Debug.scala 870:56] 
    T_1116 is invalid @[Debug.scala 870:56] 
    T_1116[0] <= T_1109 @[Debug.scala 870:56] 
    T_1116[1] <= T_1110 @[Debug.scala 870:56] 
    node T_1118 = bits(sbWrMask, 31, 0) @[Debug.scala 871:72] 
    node T_1119 = bits(sbWrMask, 63, 32) @[Debug.scala 871:72] 
    wire T_1125 : UInt<32>[2] @[Debug.scala 871:56] 
    T_1125 is invalid @[Debug.scala 871:56] 
    T_1125[0] <= T_1118 @[Debug.scala 871:56] 
    T_1125[1] <= T_1119 @[Debug.scala 871:56] 
    SETHALTNOTWrData <= T_1116[UInt<1>("h01")] @[Debug.scala 876:23] 
    CLEARDEBINTWrData <= T_1116[UInt<1>("h00")] @[Debug.scala 877:23] 
    node T_1131 = bits(sbAddr, 11, 8) @[Debug.scala 879:17] 
    node T_1133 = eq(T_1131, UInt<3>("h04")) @[Debug.scala 879:24] 
    when T_1133 : @[Debug.scala 879:36] 
      sbRamWrEn <= sbWrEn @[Debug.scala 880:17] 
      sbRamRdEn <= sbRdEn @[Debug.scala 881:17] 
      skip @[Debug.scala 879:36] 
    node T_1134 = bits(sbAddr, 11, 3) @[Debug.scala 884:29] 
    node T_1137 = eq(T_1134, UInt<9>("h021")) @[Debug.scala 884:63] 
    node T_1141 = neq(T_1125[UInt<1>("h01")], UInt<1>("h00")) @[Debug.scala 885:60] 
    node T_1142 = and(T_1137, T_1141) @[Debug.scala 884:109] 
    node T_1143 = and(T_1142, sbWrEn) @[Debug.scala 885:64] 
    SETHALTNOTWrEn <= T_1143 @[Debug.scala 884:20] 
    node T_1144 = bits(sbAddr, 11, 3) @[Debug.scala 888:30] 
    node T_1147 = eq(T_1144, UInt<9>("h020")) @[Debug.scala 888:64] 
    node T_1151 = neq(T_1125[UInt<1>("h00")], UInt<1>("h00")) @[Debug.scala 889:61] 
    node T_1152 = and(T_1147, T_1151) @[Debug.scala 888:111] 
    node T_1153 = and(T_1152, sbWrEn) @[Debug.scala 889:65] 
    CLEARDEBINTWrEn <= T_1153 @[Debug.scala 888:21] 
    sbRdData <= UInt<1>("h00") @[Debug.scala 897:12] 
    sbRamRdEn <= UInt<1>("h00") @[Debug.scala 898:13] 
    dbRamRdEn <= UInt<1>("h00") @[Debug.scala 900:13] 
    node T_1157 = bits(sbAddr, 11, 8) @[Debug.scala 901:15] 
    node T_1159 = eq(T_1157, UInt<3>("h04")) @[Debug.scala 901:23] 
    when T_1159 : @[Debug.scala 901:36] 
      sbRdData <= sbRamRdData @[Debug.scala 902:15] 
      sbRamRdEn <= sbRdEn @[Debug.scala 903:15] 
      skip @[Debug.scala 901:36] 
    node T_1160 = bits(sbAddr, 11, 8) @[Debug.scala 904:21] 
    node T_1162 = eq(T_1160, UInt<4>("h08")) @[Debug.scala 904:28] 
    node T_1163 = bits(sbAddr, 11, 8) @[Debug.scala 904:49] 
    node T_1165 = eq(T_1163, UInt<4>("h09")) @[Debug.scala 904:56] 
    node T_1166 = or(T_1162, T_1165) @[Debug.scala 904:40] 
    node T_1168 = eq(T_1159, UInt<1>("h00")) @[Debug.scala 901:36] 
    node T_1169 = and(T_1168, T_1166) @[Debug.scala 904:68] 
    when T_1169 : @[Debug.scala 904:68] 
      sbRdData <= sbRomRdData @[Debug.scala 906:16] 
      skip @[Debug.scala 904:68] 
    node T_1171 = eq(T_1159, UInt<1>("h00")) @[Debug.scala 901:36] 
    node T_1173 = eq(T_1166, UInt<1>("h00")) @[Debug.scala 904:68] 
    node T_1174 = and(T_1171, T_1173) @[Debug.scala 904:68] 
    when T_1174 : @[Debug.scala 910:16] 
      sbRdData <= UInt<1>("h00") @[Debug.scala 912:14] 
      skip @[Debug.scala 910:16] 
    reg sbAcqReg : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}, clk
    reg sbAcqValidReg : UInt<1>, clk with : (reset => (reset, UInt<1>("h00")))
    node T_1203 = eq(sbAcqReg.a_type, UInt<3>("h00")) @[Definitions.scala 212:64] 
    node sbReg_get = and(sbAcqReg.is_builtin_type, T_1203) @[Definitions.scala 212:54] 
    node T_1204 = eq(sbAcqReg.a_type, UInt<3>("h01")) @[Definitions.scala 212:64] 
    node sbReg_getblk = and(sbAcqReg.is_builtin_type, T_1204) @[Definitions.scala 212:54] 
    node T_1205 = eq(sbAcqReg.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node sbReg_put = and(sbAcqReg.is_builtin_type, T_1205) @[Definitions.scala 212:54] 
    node T_1206 = eq(sbAcqReg.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node sbReg_putblk = and(sbAcqReg.is_builtin_type, T_1206) @[Definitions.scala 212:54] 
    node sbMultibeat = and(sbReg_getblk, sbAcqValidReg) @[Debug.scala 925:34] 
    node T_1208 = add(sbAcqReg.addr_beat, UInt<1>("h01")) @[Debug.scala 927:39] 
    node sbBeatInc1 = tail(T_1208, 1) @[Debug.scala 927:39] 
    node sbLast = eq(sbAcqReg.addr_beat, UInt<3>("h07")) @[Debug.scala 929:36] 
    wire T_1217 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_1217 is invalid @[Definitions.scala 357:30] 
    T_1217[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_1217[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_1219 = eq(sbAcqReg.a_type, T_1217[0]) @[Util.scala 7:47] 
    node T_1220 = eq(sbAcqReg.a_type, T_1217[1]) @[Util.scala 7:47] 
    node T_1221 = or(T_1219, T_1220) @[Util.scala 7:62] 
    node T_1222 = and(sbAcqReg.is_builtin_type, T_1221) @[Definitions.scala 300:27] 
    node T_1223 = bits(sbAcqReg.union, 11, 9) @[Definitions.scala 178:40] 
    node T_1225 = mux(T_1222, T_1223, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_1226 = cat(sbAcqReg.addr_block, sbAcqReg.addr_beat) @[Cat.scala 20:58] 
    node T_1227 = cat(T_1226, T_1225) @[Cat.scala 20:58] 
    sbAddr <= T_1227 @[Debug.scala 931:10] 
    node T_1228 = or(sbReg_get, sbReg_getblk) @[Debug.scala 932:42] 
    node T_1229 = and(sbAcqValidReg, T_1228) @[Debug.scala 932:28] 
    sbRdEn <= T_1229 @[Debug.scala 932:10] 
    node T_1230 = or(sbReg_put, sbReg_putblk) @[Debug.scala 933:42] 
    node T_1231 = and(sbAcqValidReg, T_1230) @[Debug.scala 933:28] 
    sbWrEn <= T_1231 @[Debug.scala 933:10] 
    sbWrData <= sbAcqReg.data @[Debug.scala 934:12] 
    node T_1233 = eq(sbAcqReg.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
    node T_1234 = and(sbAcqReg.is_builtin_type, T_1233) @[Definitions.scala 212:54] 
    node T_1251 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
    node T_1253 = eq(sbAcqReg.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
    node T_1254 = and(sbAcqReg.is_builtin_type, T_1253) @[Definitions.scala 212:54] 
    node T_1256 = eq(sbAcqReg.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
    node T_1257 = and(sbAcqReg.is_builtin_type, T_1256) @[Definitions.scala 212:54] 
    node T_1258 = or(T_1254, T_1257) @[Definitions.scala 190:56] 
    node T_1259 = bits(sbAcqReg.union, 8, 1) @[Definitions.scala 191:25] 
    node T_1261 = mux(T_1258, T_1259, UInt<1>("h00")) @[Definitions.scala 192:30] 
    node T_1262 = mux(T_1234, T_1251, T_1261) @[Definitions.scala 192:8] 
    node T_1263 = bits(T_1262, 0, 0) @[Bitwise.scala 13:51] 
    node T_1264 = bits(T_1262, 1, 1) @[Bitwise.scala 13:51] 
    node T_1265 = bits(T_1262, 2, 2) @[Bitwise.scala 13:51] 
    node T_1266 = bits(T_1262, 3, 3) @[Bitwise.scala 13:51] 
    node T_1267 = bits(T_1262, 4, 4) @[Bitwise.scala 13:51] 
    node T_1268 = bits(T_1262, 5, 5) @[Bitwise.scala 13:51] 
    node T_1269 = bits(T_1262, 6, 6) @[Bitwise.scala 13:51] 
    node T_1270 = bits(T_1262, 7, 7) @[Bitwise.scala 13:51] 
    node T_1271 = bits(T_1263, 0, 0) @[Bitwise.scala 33:15] 
    node T_1274 = mux(T_1271, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1275 = bits(T_1264, 0, 0) @[Bitwise.scala 33:15] 
    node T_1278 = mux(T_1275, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1279 = bits(T_1265, 0, 0) @[Bitwise.scala 33:15] 
    node T_1282 = mux(T_1279, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1283 = bits(T_1266, 0, 0) @[Bitwise.scala 33:15] 
    node T_1286 = mux(T_1283, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1287 = bits(T_1267, 0, 0) @[Bitwise.scala 33:15] 
    node T_1290 = mux(T_1287, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1291 = bits(T_1268, 0, 0) @[Bitwise.scala 33:15] 
    node T_1294 = mux(T_1291, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1295 = bits(T_1269, 0, 0) @[Bitwise.scala 33:15] 
    node T_1298 = mux(T_1295, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1299 = bits(T_1270, 0, 0) @[Bitwise.scala 33:15] 
    node T_1302 = mux(T_1299, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
    node T_1303 = cat(T_1278, T_1274) @[Cat.scala 20:58] 
    node T_1304 = cat(T_1286, T_1282) @[Cat.scala 20:58] 
    node T_1305 = cat(T_1304, T_1303) @[Cat.scala 20:58] 
    node T_1306 = cat(T_1294, T_1290) @[Cat.scala 20:58] 
    node T_1307 = cat(T_1302, T_1298) @[Cat.scala 20:58] 
    node T_1308 = cat(T_1307, T_1306) @[Cat.scala 20:58] 
    node T_1309 = cat(T_1308, T_1305) @[Cat.scala 20:58] 
    sbWrMask <= T_1309 @[Debug.scala 935:12] 
    node T_1310 = and(io.tl.acquire.ready, io.tl.acquire.valid) @[Decoupled.scala 16:42] 
    when T_1310 : @[Debug.scala 940:30] 
      sbAcqReg <- io.tl.acquire.bits @[Debug.scala 941:20] 
      sbAcqValidReg <= UInt<1>("h01") @[Debug.scala 942:20] 
      skip @[Debug.scala 940:30] 
    node T_1312 = and(io.tl.grant.ready, io.tl.grant.valid) @[Decoupled.scala 16:42] 
    node T_1314 = eq(T_1310, UInt<1>("h00")) @[Debug.scala 940:30] 
    node T_1315 = and(T_1314, T_1312) @[Debug.scala 943:36] 
    when T_1315 : @[Debug.scala 943:36] 
      when sbMultibeat : @[Debug.scala 944:23] 
        sbAcqReg.addr_beat <= sbBeatInc1 @[Debug.scala 945:26] 
        when sbLast : @[Debug.scala 946:21] 
          sbAcqValidReg <= UInt<1>("h00") @[Debug.scala 947:23] 
          skip @[Debug.scala 946:21] 
        skip @[Debug.scala 944:23] 
      node T_1318 = eq(sbMultibeat, UInt<1>("h00")) @[Debug.scala 944:23] 
      when T_1318 : @[Debug.scala 949:19] 
        sbAcqValidReg <= UInt<1>("h00") @[Debug.scala 950:21] 
        skip @[Debug.scala 949:19] 
      skip @[Debug.scala 943:36] 
    io.tl.grant.valid <= sbAcqValidReg @[Debug.scala 955:21] 
    node T_1336 = eq(UInt<3>("h06"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1337 = mux(T_1336, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_1338 = eq(UInt<3>("h05"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1339 = mux(T_1338, UInt<3>("h01"), T_1337) @[Mux.scala 46:16] 
    node T_1340 = eq(UInt<3>("h04"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1341 = mux(T_1340, UInt<3>("h04"), T_1339) @[Mux.scala 46:16] 
    node T_1342 = eq(UInt<3>("h03"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1343 = mux(T_1342, UInt<3>("h03"), T_1341) @[Mux.scala 46:16] 
    node T_1344 = eq(UInt<3>("h02"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1345 = mux(T_1344, UInt<3>("h03"), T_1343) @[Mux.scala 46:16] 
    node T_1346 = eq(UInt<3>("h01"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1347 = mux(T_1346, UInt<3>("h05"), T_1345) @[Mux.scala 46:16] 
    node T_1348 = eq(UInt<3>("h00"), sbAcqReg.a_type) @[Mux.scala 46:19] 
    node T_1349 = mux(T_1348, UInt<3>("h04"), T_1347) @[Mux.scala 46:16] 
    wire T_1373 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_1373 is invalid @[Definitions.scala 856:19] 
    T_1373.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_1373.g_type <= T_1349 @[Definitions.scala 858:16] 
    T_1373.client_xact_id <= sbAcqReg.client_xact_id @[Definitions.scala 859:24] 
    T_1373.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_1373.addr_beat <= sbAcqReg.addr_beat @[Definitions.scala 861:19] 
    T_1373.data <= sbRdData @[Definitions.scala 862:14] 
    io.tl.grant.bits <- T_1373 @[Debug.scala 956:20] 
    stallFromDb <= UInt<1>("h00") @[Debug.scala 965:15] 
    node T_1396 = or(sbRamRdEn, sbRamWrEn) @[Debug.scala 967:28] 
    stallFromSb <= T_1396 @[Debug.scala 967:15] 
    node T_1398 = eq(sbLast, UInt<1>("h00")) @[Debug.scala 971:32] 
    node T_1399 = and(sbMultibeat, T_1398) @[Debug.scala 971:30] 
    node T_1401 = eq(io.tl.grant.ready, UInt<1>("h00")) @[Debug.scala 971:67] 
    node T_1402 = and(io.tl.grant.valid, T_1401) @[Debug.scala 971:64] 
    node T_1403 = or(T_1399, T_1402) @[Debug.scala 971:41] 
    node sbStall = or(T_1403, stallFromDb) @[Debug.scala 971:87] 
    node T_1405 = eq(sbStall, UInt<1>("h00")) @[Debug.scala 973:26] 
    io.tl.acquire.ready <= T_1405 @[Debug.scala 973:23] 
    node T_1407 = neq(ndresetCtrReg, UInt<1>("h00")) @[Debug.scala 979:33] 
    io.ndreset <= T_1407 @[Debug.scala 979:16] 
    io.fullreset <= CONTROLReg.fullreset @[Debug.scala 980:16] 
    
  module PRCI : 
    input clk : Clock
    input reset : UInt<1>
    output io : {flip interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>}[1], flip tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}, tiles : {reset : UInt<1>, id : UInt<1>, interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>}}[1], flip rtcTick : UInt<1>}
    
    io is invalid
    reg timecmp : UInt<64>[1], clk
    reg time : UInt<64>, clk with : (reset => (reset, UInt<64>("h00")))
    when io.rtcTick : @[Prci.scala 55:21] 
      node T_525 = add(time, UInt<1>("h01")) @[Prci.scala 55:36] 
      node T_526 = tail(T_525, 1) @[Prci.scala 55:36] 
      time <= T_526 @[Prci.scala 55:28] 
      skip @[Prci.scala 55:21] 
    wire T_533 : UInt<32>[1] @[Prci.scala 57:41] 
    T_533 is invalid @[Prci.scala 57:41] 
    T_533[0] <= UInt<32>("h00") @[Prci.scala 57:41] 
    reg ipi : UInt<32>[1], clk with : (reset => (reset, T_533))
    inst acq of Queue_20 @[Decoupled.scala 179:19] 
    acq.io is invalid
    acq.clk <= clk
    acq.reset <= reset
    acq.io.enq.valid <= io.tl.acquire.valid @[Decoupled.scala 180:20] 
    acq.io.enq.bits <- io.tl.acquire.bits @[Decoupled.scala 181:19] 
    io.tl.acquire.ready <= acq.io.enq.ready @[Decoupled.scala 182:15] 
    wire T_568 : UInt<3>[2] @[Definitions.scala 357:30] 
    T_568 is invalid @[Definitions.scala 357:30] 
    T_568[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
    T_568[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
    node T_570 = eq(acq.io.deq.bits.a_type, T_568[0]) @[Util.scala 7:47] 
    node T_571 = eq(acq.io.deq.bits.a_type, T_568[1]) @[Util.scala 7:47] 
    node T_572 = or(T_570, T_571) @[Util.scala 7:62] 
    node T_573 = and(acq.io.deq.bits.is_builtin_type, T_572) @[Definitions.scala 300:27] 
    node T_574 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
    node T_576 = mux(T_573, T_574, UInt<3>("h00")) @[Definitions.scala 300:10] 
    node T_577 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
    node T_578 = cat(T_577, T_576) @[Cat.scala 20:58] 
    node addr = bits(T_578, 15, 0) @[Prci.scala 60:34] 
    node T_580 = eq(acq.io.deq.bits.a_type, UInt<3>("h00")) @[Definitions.scala 212:64] 
    node read = and(acq.io.deq.bits.is_builtin_type, T_580) @[Definitions.scala 212:54] 
    wire rdata : UInt
    rdata is invalid
    rdata <= UInt<1>("h00")
    io.tl.grant.valid <= acq.io.deq.valid @[Prci.scala 63:21] 
    acq.io.deq.ready <= io.tl.grant.ready @[Prci.scala 64:13] 
    node T_598 = eq(UInt<3>("h06"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_599 = mux(T_598, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_600 = eq(UInt<3>("h05"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_601 = mux(T_600, UInt<3>("h01"), T_599) @[Mux.scala 46:16] 
    node T_602 = eq(UInt<3>("h04"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_603 = mux(T_602, UInt<3>("h04"), T_601) @[Mux.scala 46:16] 
    node T_604 = eq(UInt<3>("h03"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_605 = mux(T_604, UInt<3>("h03"), T_603) @[Mux.scala 46:16] 
    node T_606 = eq(UInt<3>("h02"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_607 = mux(T_606, UInt<3>("h03"), T_605) @[Mux.scala 46:16] 
    node T_608 = eq(UInt<3>("h01"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_609 = mux(T_608, UInt<3>("h05"), T_607) @[Mux.scala 46:16] 
    node T_610 = eq(UInt<3>("h00"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_611 = mux(T_610, UInt<3>("h04"), T_609) @[Mux.scala 46:16] 
    wire T_636 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_636 is invalid @[Definitions.scala 856:19] 
    T_636.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_636.g_type <= T_611 @[Definitions.scala 858:16] 
    T_636.client_xact_id <= acq.io.deq.bits.client_xact_id @[Definitions.scala 859:24] 
    T_636.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_636.addr_beat <= UInt<1>("h00") @[Definitions.scala 861:19] 
    T_636.data <= rdata @[Definitions.scala 862:14] 
    io.tl.grant.bits <- T_636 @[Prci.scala 65:20] 
    node T_658 = bits(addr, 15, 15) @[Prci.scala 73:13] 
    when T_658 : @[Prci.scala 73:37] 
      node T_660 = add(time, UInt<1>("h00")) @[Prci.scala 75:28] 
      node T_661 = tail(T_660, 1) @[Prci.scala 75:28] 
      wire T_667 : UInt<64>[1] @[Prci.scala 75:22] 
      T_667 is invalid @[Prci.scala 75:22] 
      T_667[0] <= T_661 @[Prci.scala 75:22] 
      wire T_676 : UInt<3>[2] @[Definitions.scala 357:30] 
      T_676 is invalid @[Definitions.scala 357:30] 
      T_676[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
      T_676[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
      node T_678 = eq(acq.io.deq.bits.a_type, T_676[0]) @[Util.scala 7:47] 
      node T_679 = eq(acq.io.deq.bits.a_type, T_676[1]) @[Util.scala 7:47] 
      node T_680 = or(T_678, T_679) @[Util.scala 7:62] 
      node T_681 = and(acq.io.deq.bits.is_builtin_type, T_680) @[Definitions.scala 300:27] 
      node T_682 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
      node T_684 = mux(T_681, T_682, UInt<3>("h00")) @[Definitions.scala 300:10] 
      node T_685 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
      node T_686 = cat(T_685, T_684) @[Cat.scala 20:58] 
      rdata <= T_667[0] @[Prci.scala 75:11] 
      skip @[Prci.scala 73:37] 
    node T_688 = geq(addr, UInt<15>("h04000")) @[Prci.scala 76:20] 
    node T_690 = eq(T_658, UInt<1>("h00")) @[Prci.scala 73:37] 
    node T_691 = and(T_690, T_688) @[Prci.scala 76:40] 
    when T_691 : @[Prci.scala 76:40] 
      wire T_699 : UInt<3>[2] @[Definitions.scala 357:30] 
      T_699 is invalid @[Definitions.scala 357:30] 
      T_699[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
      T_699[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
      node T_701 = eq(acq.io.deq.bits.a_type, T_699[0]) @[Util.scala 7:47] 
      node T_702 = eq(acq.io.deq.bits.a_type, T_699[1]) @[Util.scala 7:47] 
      node T_703 = or(T_701, T_702) @[Util.scala 7:62] 
      node T_704 = and(acq.io.deq.bits.is_builtin_type, T_703) @[Definitions.scala 300:27] 
      node T_705 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
      node T_707 = mux(T_704, T_705, UInt<3>("h00")) @[Definitions.scala 300:10] 
      node T_708 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
      node T_709 = cat(T_708, T_707) @[Cat.scala 20:58] 
      wire T_717 : UInt<3>[2] @[Definitions.scala 357:30] 
      T_717 is invalid @[Definitions.scala 357:30] 
      T_717[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
      T_717[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
      node T_719 = eq(acq.io.deq.bits.a_type, T_717[0]) @[Util.scala 7:47] 
      node T_720 = eq(acq.io.deq.bits.a_type, T_717[1]) @[Util.scala 7:47] 
      node T_721 = or(T_719, T_720) @[Util.scala 7:62] 
      node T_722 = and(acq.io.deq.bits.is_builtin_type, T_721) @[Definitions.scala 300:27] 
      node T_723 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
      node T_725 = mux(T_722, T_723, UInt<3>("h00")) @[Definitions.scala 300:10] 
      node T_726 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
      node T_727 = cat(T_726, T_725) @[Cat.scala 20:58] 
      node T_729 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_730 = and(acq.io.deq.bits.is_builtin_type, T_729) @[Definitions.scala 212:54] 
      node T_747 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_749 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_750 = and(acq.io.deq.bits.is_builtin_type, T_749) @[Definitions.scala 212:54] 
      node T_752 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_753 = and(acq.io.deq.bits.is_builtin_type, T_752) @[Definitions.scala 212:54] 
      node T_754 = or(T_750, T_753) @[Definitions.scala 190:56] 
      node T_755 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_757 = mux(T_754, T_755, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_758 = mux(T_730, T_747, T_757) @[Definitions.scala 192:8] 
      node T_759 = bits(T_758, 0, 0) @[Bitwise.scala 13:51] 
      node T_760 = bits(T_758, 1, 1) @[Bitwise.scala 13:51] 
      node T_761 = bits(T_758, 2, 2) @[Bitwise.scala 13:51] 
      node T_762 = bits(T_758, 3, 3) @[Bitwise.scala 13:51] 
      node T_763 = bits(T_758, 4, 4) @[Bitwise.scala 13:51] 
      node T_764 = bits(T_758, 5, 5) @[Bitwise.scala 13:51] 
      node T_765 = bits(T_758, 6, 6) @[Bitwise.scala 13:51] 
      node T_766 = bits(T_758, 7, 7) @[Bitwise.scala 13:51] 
      node T_767 = bits(T_759, 0, 0) @[Bitwise.scala 33:15] 
      node T_770 = mux(T_767, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_771 = bits(T_760, 0, 0) @[Bitwise.scala 33:15] 
      node T_774 = mux(T_771, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_775 = bits(T_761, 0, 0) @[Bitwise.scala 33:15] 
      node T_778 = mux(T_775, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_779 = bits(T_762, 0, 0) @[Bitwise.scala 33:15] 
      node T_782 = mux(T_779, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_783 = bits(T_763, 0, 0) @[Bitwise.scala 33:15] 
      node T_786 = mux(T_783, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_787 = bits(T_764, 0, 0) @[Bitwise.scala 33:15] 
      node T_790 = mux(T_787, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_791 = bits(T_765, 0, 0) @[Bitwise.scala 33:15] 
      node T_794 = mux(T_791, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_795 = bits(T_766, 0, 0) @[Bitwise.scala 33:15] 
      node T_798 = mux(T_795, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_799 = cat(T_774, T_770) @[Cat.scala 20:58] 
      node T_800 = cat(T_782, T_778) @[Cat.scala 20:58] 
      node T_801 = cat(T_800, T_799) @[Cat.scala 20:58] 
      node T_802 = cat(T_790, T_786) @[Cat.scala 20:58] 
      node T_803 = cat(T_798, T_794) @[Cat.scala 20:58] 
      node T_804 = cat(T_803, T_802) @[Cat.scala 20:58] 
      node T_805 = cat(T_804, T_801) @[Cat.scala 20:58] 
      node T_806 = and(acq.io.deq.bits.data, T_805) @[Prci.scala 109:27] 
      node T_808 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_809 = and(acq.io.deq.bits.is_builtin_type, T_808) @[Definitions.scala 212:54] 
      node T_826 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_828 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_829 = and(acq.io.deq.bits.is_builtin_type, T_828) @[Definitions.scala 212:54] 
      node T_831 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_832 = and(acq.io.deq.bits.is_builtin_type, T_831) @[Definitions.scala 212:54] 
      node T_833 = or(T_829, T_832) @[Definitions.scala 190:56] 
      node T_834 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_836 = mux(T_833, T_834, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_837 = mux(T_809, T_826, T_836) @[Definitions.scala 192:8] 
      node T_838 = bits(T_837, 0, 0) @[Bitwise.scala 13:51] 
      node T_839 = bits(T_837, 1, 1) @[Bitwise.scala 13:51] 
      node T_840 = bits(T_837, 2, 2) @[Bitwise.scala 13:51] 
      node T_841 = bits(T_837, 3, 3) @[Bitwise.scala 13:51] 
      node T_842 = bits(T_837, 4, 4) @[Bitwise.scala 13:51] 
      node T_843 = bits(T_837, 5, 5) @[Bitwise.scala 13:51] 
      node T_844 = bits(T_837, 6, 6) @[Bitwise.scala 13:51] 
      node T_845 = bits(T_837, 7, 7) @[Bitwise.scala 13:51] 
      node T_846 = bits(T_838, 0, 0) @[Bitwise.scala 33:15] 
      node T_849 = mux(T_846, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_850 = bits(T_839, 0, 0) @[Bitwise.scala 33:15] 
      node T_853 = mux(T_850, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_854 = bits(T_840, 0, 0) @[Bitwise.scala 33:15] 
      node T_857 = mux(T_854, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_858 = bits(T_841, 0, 0) @[Bitwise.scala 33:15] 
      node T_861 = mux(T_858, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_862 = bits(T_842, 0, 0) @[Bitwise.scala 33:15] 
      node T_865 = mux(T_862, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_866 = bits(T_843, 0, 0) @[Bitwise.scala 33:15] 
      node T_869 = mux(T_866, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_870 = bits(T_844, 0, 0) @[Bitwise.scala 33:15] 
      node T_873 = mux(T_870, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_874 = bits(T_845, 0, 0) @[Bitwise.scala 33:15] 
      node T_877 = mux(T_874, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_878 = cat(T_853, T_849) @[Cat.scala 20:58] 
      node T_879 = cat(T_861, T_857) @[Cat.scala 20:58] 
      node T_880 = cat(T_879, T_878) @[Cat.scala 20:58] 
      node T_881 = cat(T_869, T_865) @[Cat.scala 20:58] 
      node T_882 = cat(T_877, T_873) @[Cat.scala 20:58] 
      node T_883 = cat(T_882, T_881) @[Cat.scala 20:58] 
      node T_884 = cat(T_883, T_880) @[Cat.scala 20:58] 
      node T_885 = not(T_884) @[Prci.scala 109:58] 
      node T_886 = and(timecmp[0], T_885) @[Prci.scala 109:56] 
      node T_887 = or(T_806, T_886) @[Prci.scala 109:47] 
      node T_890 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_891 = and(acq.io.deq.bits.is_builtin_type, T_890) @[Definitions.scala 212:54] 
      node T_893 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Prci.scala 115:58] 
      node T_894 = and(T_891, T_893) @[Prci.scala 115:50] 
      when T_894 : @[Prci.scala 115:80] 
        node T_895 = shr(T_887, 0) @[Prci.scala 117:25] 
        timecmp[0] <= T_895 @[Prci.scala 117:16] 
        skip @[Prci.scala 115:80] 
      rdata <= timecmp[0] @[Prci.scala 77:11] 
      skip @[Prci.scala 76:40] 
    node T_897 = eq(T_658, UInt<1>("h00")) @[Prci.scala 73:37] 
    node T_899 = eq(T_688, UInt<1>("h00")) @[Prci.scala 76:40] 
    node T_900 = and(T_897, T_899) @[Prci.scala 76:40] 
    when T_900 : @[Prci.scala 78:15] 
      wire T_908 : UInt<3>[2] @[Definitions.scala 357:30] 
      T_908 is invalid @[Definitions.scala 357:30] 
      T_908[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
      T_908[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
      node T_910 = eq(acq.io.deq.bits.a_type, T_908[0]) @[Util.scala 7:47] 
      node T_911 = eq(acq.io.deq.bits.a_type, T_908[1]) @[Util.scala 7:47] 
      node T_912 = or(T_910, T_911) @[Util.scala 7:62] 
      node T_913 = and(acq.io.deq.bits.is_builtin_type, T_912) @[Definitions.scala 300:27] 
      node T_914 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
      node T_916 = mux(T_913, T_914, UInt<3>("h00")) @[Definitions.scala 300:10] 
      node T_917 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
      node T_918 = cat(T_917, T_916) @[Cat.scala 20:58] 
      wire T_926 : UInt<3>[2] @[Definitions.scala 357:30] 
      T_926 is invalid @[Definitions.scala 357:30] 
      T_926[0] <= UInt<3>("h00") @[Definitions.scala 357:30] 
      T_926[1] <= UInt<3>("h04") @[Definitions.scala 357:30] 
      node T_928 = eq(acq.io.deq.bits.a_type, T_926[0]) @[Util.scala 7:47] 
      node T_929 = eq(acq.io.deq.bits.a_type, T_926[1]) @[Util.scala 7:47] 
      node T_930 = or(T_928, T_929) @[Util.scala 7:62] 
      node T_931 = and(acq.io.deq.bits.is_builtin_type, T_930) @[Definitions.scala 300:27] 
      node T_932 = bits(acq.io.deq.bits.union, 11, 9) @[Definitions.scala 178:40] 
      node T_934 = mux(T_931, T_932, UInt<3>("h00")) @[Definitions.scala 300:10] 
      node T_935 = cat(acq.io.deq.bits.addr_block, acq.io.deq.bits.addr_beat) @[Cat.scala 20:58] 
      node T_936 = cat(T_935, T_934) @[Cat.scala 20:58] 
      node T_938 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_939 = and(acq.io.deq.bits.is_builtin_type, T_938) @[Definitions.scala 212:54] 
      node T_956 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_958 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_959 = and(acq.io.deq.bits.is_builtin_type, T_958) @[Definitions.scala 212:54] 
      node T_961 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_962 = and(acq.io.deq.bits.is_builtin_type, T_961) @[Definitions.scala 212:54] 
      node T_963 = or(T_959, T_962) @[Definitions.scala 190:56] 
      node T_964 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_966 = mux(T_963, T_964, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_967 = mux(T_939, T_956, T_966) @[Definitions.scala 192:8] 
      node T_968 = bits(T_967, 0, 0) @[Bitwise.scala 13:51] 
      node T_969 = bits(T_967, 1, 1) @[Bitwise.scala 13:51] 
      node T_970 = bits(T_967, 2, 2) @[Bitwise.scala 13:51] 
      node T_971 = bits(T_967, 3, 3) @[Bitwise.scala 13:51] 
      node T_972 = bits(T_967, 4, 4) @[Bitwise.scala 13:51] 
      node T_973 = bits(T_967, 5, 5) @[Bitwise.scala 13:51] 
      node T_974 = bits(T_967, 6, 6) @[Bitwise.scala 13:51] 
      node T_975 = bits(T_967, 7, 7) @[Bitwise.scala 13:51] 
      node T_976 = bits(T_968, 0, 0) @[Bitwise.scala 33:15] 
      node T_979 = mux(T_976, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_980 = bits(T_969, 0, 0) @[Bitwise.scala 33:15] 
      node T_983 = mux(T_980, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_984 = bits(T_970, 0, 0) @[Bitwise.scala 33:15] 
      node T_987 = mux(T_984, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_988 = bits(T_971, 0, 0) @[Bitwise.scala 33:15] 
      node T_991 = mux(T_988, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_992 = bits(T_972, 0, 0) @[Bitwise.scala 33:15] 
      node T_995 = mux(T_992, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_996 = bits(T_973, 0, 0) @[Bitwise.scala 33:15] 
      node T_999 = mux(T_996, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1000 = bits(T_974, 0, 0) @[Bitwise.scala 33:15] 
      node T_1003 = mux(T_1000, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1004 = bits(T_975, 0, 0) @[Bitwise.scala 33:15] 
      node T_1007 = mux(T_1004, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1008 = cat(T_983, T_979) @[Cat.scala 20:58] 
      node T_1009 = cat(T_991, T_987) @[Cat.scala 20:58] 
      node T_1010 = cat(T_1009, T_1008) @[Cat.scala 20:58] 
      node T_1011 = cat(T_999, T_995) @[Cat.scala 20:58] 
      node T_1012 = cat(T_1007, T_1003) @[Cat.scala 20:58] 
      node T_1013 = cat(T_1012, T_1011) @[Cat.scala 20:58] 
      node T_1014 = cat(T_1013, T_1010) @[Cat.scala 20:58] 
      node T_1015 = and(acq.io.deq.bits.data, T_1014) @[Prci.scala 109:27] 
      node T_1017 = eq(acq.io.deq.bits.a_type, UInt<3>("h04")) @[Definitions.scala 212:64] 
      node T_1018 = and(acq.io.deq.bits.is_builtin_type, T_1017) @[Definitions.scala 212:54] 
      node T_1035 = asUInt(asSInt(UInt<8>("h0ff"))) @[Definitions.scala 400:97] 
      node T_1037 = eq(acq.io.deq.bits.a_type, UInt<3>("h03")) @[Definitions.scala 212:64] 
      node T_1038 = and(acq.io.deq.bits.is_builtin_type, T_1037) @[Definitions.scala 212:54] 
      node T_1040 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1041 = and(acq.io.deq.bits.is_builtin_type, T_1040) @[Definitions.scala 212:54] 
      node T_1042 = or(T_1038, T_1041) @[Definitions.scala 190:56] 
      node T_1043 = bits(acq.io.deq.bits.union, 8, 1) @[Definitions.scala 191:25] 
      node T_1045 = mux(T_1042, T_1043, UInt<1>("h00")) @[Definitions.scala 192:30] 
      node T_1046 = mux(T_1018, T_1035, T_1045) @[Definitions.scala 192:8] 
      node T_1047 = bits(T_1046, 0, 0) @[Bitwise.scala 13:51] 
      node T_1048 = bits(T_1046, 1, 1) @[Bitwise.scala 13:51] 
      node T_1049 = bits(T_1046, 2, 2) @[Bitwise.scala 13:51] 
      node T_1050 = bits(T_1046, 3, 3) @[Bitwise.scala 13:51] 
      node T_1051 = bits(T_1046, 4, 4) @[Bitwise.scala 13:51] 
      node T_1052 = bits(T_1046, 5, 5) @[Bitwise.scala 13:51] 
      node T_1053 = bits(T_1046, 6, 6) @[Bitwise.scala 13:51] 
      node T_1054 = bits(T_1046, 7, 7) @[Bitwise.scala 13:51] 
      node T_1055 = bits(T_1047, 0, 0) @[Bitwise.scala 33:15] 
      node T_1058 = mux(T_1055, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1059 = bits(T_1048, 0, 0) @[Bitwise.scala 33:15] 
      node T_1062 = mux(T_1059, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1063 = bits(T_1049, 0, 0) @[Bitwise.scala 33:15] 
      node T_1066 = mux(T_1063, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1067 = bits(T_1050, 0, 0) @[Bitwise.scala 33:15] 
      node T_1070 = mux(T_1067, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1071 = bits(T_1051, 0, 0) @[Bitwise.scala 33:15] 
      node T_1074 = mux(T_1071, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1075 = bits(T_1052, 0, 0) @[Bitwise.scala 33:15] 
      node T_1078 = mux(T_1075, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1079 = bits(T_1053, 0, 0) @[Bitwise.scala 33:15] 
      node T_1082 = mux(T_1079, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1083 = bits(T_1054, 0, 0) @[Bitwise.scala 33:15] 
      node T_1086 = mux(T_1083, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 33:12] 
      node T_1087 = cat(T_1062, T_1058) @[Cat.scala 20:58] 
      node T_1088 = cat(T_1070, T_1066) @[Cat.scala 20:58] 
      node T_1089 = cat(T_1088, T_1087) @[Cat.scala 20:58] 
      node T_1090 = cat(T_1078, T_1074) @[Cat.scala 20:58] 
      node T_1091 = cat(T_1086, T_1082) @[Cat.scala 20:58] 
      node T_1092 = cat(T_1091, T_1090) @[Cat.scala 20:58] 
      node T_1093 = cat(T_1092, T_1089) @[Cat.scala 20:58] 
      node T_1094 = not(T_1093) @[Prci.scala 109:58] 
      node T_1095 = and(ipi[0], T_1094) @[Prci.scala 109:56] 
      node T_1096 = or(T_1015, T_1095) @[Prci.scala 109:47] 
      node T_1099 = eq(acq.io.deq.bits.a_type, UInt<3>("h02")) @[Definitions.scala 212:64] 
      node T_1100 = and(acq.io.deq.bits.is_builtin_type, T_1099) @[Definitions.scala 212:54] 
      node T_1102 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Prci.scala 115:58] 
      node T_1103 = and(T_1100, T_1102) @[Prci.scala 115:50] 
      when T_1103 : @[Prci.scala 115:80] 
        node T_1104 = shr(T_1096, 0) @[Prci.scala 117:25] 
        ipi[0] <= T_1104 @[Prci.scala 117:16] 
        skip @[Prci.scala 115:80] 
      node T_1106 = cat(UInt<32>("h01"), UInt<32>("h01")) @[Cat.scala 20:58] 
      node T_1107 = and(ipi[0], T_1106) @[Prci.scala 79:35] 
      rdata <= T_1107 @[Prci.scala 79:11] 
      skip @[Prci.scala 78:15] 
    io.tiles[0].interrupts <- io.interrupts[0] @[Prci.scala 83:21] 
    node T_1108 = bits(ipi[0], 0, 0) @[Prci.scala 84:35] 
    io.tiles[0].interrupts.msip <= T_1108 @[Prci.scala 84:26] 
    node T_1109 = geq(time, timecmp[0]) @[Prci.scala 85:34] 
    io.tiles[0].interrupts.mtip <= T_1109 @[Prci.scala 85:26] 
    io.tiles[0].id <= UInt<1>("h00") @[Prci.scala 86:13] 
    
  module ROMSlave : 
    input clk : Clock
    input reset : UInt<1>
    input io : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}
    
    io is invalid
    inst acq of Queue_20 @[Decoupled.scala 179:19] 
    acq.io is invalid
    acq.clk <= clk
    acq.reset <= reset
    acq.io.enq.valid <= io.acquire.valid @[Decoupled.scala 180:20] 
    acq.io.enq.bits <- io.acquire.bits @[Decoupled.scala 181:19] 
    io.acquire.ready <= acq.io.enq.ready @[Decoupled.scala 182:15] 
    node T_446 = eq(acq.io.deq.bits.a_type, UInt<3>("h00")) @[Definitions.scala 212:64] 
    node single_beat = and(acq.io.deq.bits.is_builtin_type, T_446) @[Definitions.scala 212:54] 
    node T_448 = eq(acq.io.deq.bits.a_type, UInt<3>("h01")) @[Definitions.scala 212:64] 
    node multi_beat = and(acq.io.deq.bits.is_builtin_type, T_448) @[Definitions.scala 212:54] 
    node T_450 = eq(acq.io.deq.valid, UInt<1>("h00")) @[Rom.scala 17:10] 
    node T_451 = or(T_450, single_beat) @[Rom.scala 17:21] 
    node T_452 = or(T_451, multi_beat) @[Rom.scala 17:36] 
    node T_453 = or(T_452, reset) @[Rom.scala 17:9] 
    node T_455 = eq(T_453, UInt<1>("h00")) @[Rom.scala 17:9] 
    when T_455 : @[Rom.scala 17:9] 
      printf(clk, UInt<1>(1), "Assertion failed: unsupported ROMSlave operation\n    at Rom.scala:17 assert(!acq.valid || single_beat || multi_beat, \"unsupported ROMSlave operation\")\n") @[Rom.scala 17:9] 
      stop(clk, UInt<1>(1), 1) @[Rom.scala 17:9] 
      skip @[Rom.scala 17:9] 
    reg addr_beat : UInt, clk
    node T_457 = and(io.grant.ready, io.grant.valid) @[Decoupled.scala 16:42] 
    when T_457 : @[Rom.scala 20:26] 
      node T_459 = add(addr_beat, UInt<1>("h01")) @[Rom.scala 20:51] 
      node T_460 = tail(T_459, 1) @[Rom.scala 20:51] 
      addr_beat <= T_460 @[Rom.scala 20:38] 
      skip @[Rom.scala 20:26] 
    node T_461 = and(io.acquire.ready, io.acquire.valid) @[Decoupled.scala 16:42] 
    when T_461 : @[Rom.scala 21:28] 
      addr_beat <= io.acquire.bits.addr_beat @[Rom.scala 21:40] 
      skip @[Rom.scala 21:28] 
    wire rom : UInt<64>[65] @[Rom.scala 25:32] 
    rom is invalid @[Rom.scala 25:32] 
    rom[0] <= UInt<64>("h06f") @[Rom.scala 25:32] 
    rom[1] <= UInt<64>("h0102000000000") @[Rom.scala 25:32] 
    rom[2] <= UInt<64>("h00") @[Rom.scala 25:32] 
    rom[3] <= UInt<64>("h00") @[Rom.scala 25:32] 
    rom[4] <= UInt<64>("h0200a7b2063696c70") @[Rom.scala 25:32] 
    rom[5] <= UInt<64>("h07469726f69727020") @[Rom.scala 25:32] 
    rom[6] <= UInt<64>("h03030303478302079") @[Rom.scala 25:32] 
    rom[7] <= UInt<64>("h020200a3b30303030") @[Rom.scala 25:32] 
    rom[8] <= UInt<64>("h020676e69646e6570") @[Rom.scala 25:32] 
    rom[9] <= UInt<64>("h03031303030347830") @[Rom.scala 25:32] 
    rom[10] <= UInt<64>("h0646e20200a3b3030") @[Rom.scala 25:32] 
    rom[11] <= UInt<64>("h07d0a3b3220737665") @[Rom.scala 25:32] 
    rom[12] <= UInt<64>("h0a7b206374720a3b") @[Rom.scala 25:32] 
    rom[13] <= UInt<64>("h03020726464612020") @[Rom.scala 25:32] 
    rom[14] <= UInt<64>("h06666623030343478") @[Rom.scala 25:32] 
    rom[15] <= UInt<64>("h061720a3b7d0a3b38") @[Rom.scala 25:32] 
    rom[16] <= UInt<64>("h0203020200a7b206d") @[Rom.scala 25:32] 
    rom[17] <= UInt<64>("h06461202020200a7b") @[Rom.scala 25:32] 
    rom[18] <= UInt<64>("h03030387830207264") @[Rom.scala 25:32] 
    rom[19] <= UInt<64>("h0200a3b3030303030") @[Rom.scala 25:32] 
    rom[20] <= UInt<64>("h020657a6973202020") @[Rom.scala 25:32] 
    rom[21] <= UInt<64>("h03030303030317830") @[Rom.scala 25:32] 
    rom[22] <= UInt<64>("h03b7d20200a3b3030") @[Rom.scala 25:32] 
    rom[23] <= UInt<64>("h065726f630a3b7d0a") @[Rom.scala 25:32] 
    rom[24] <= UInt<64>("h07b203020200a7b20") @[Rom.scala 25:32] 
    rom[25] <= UInt<64>("h07b2030202020200a") @[Rom.scala 25:32] 
    rom[26] <= UInt<64>("h0692020202020200a") @[Rom.scala 25:32] 
    rom[27] <= UInt<64>("h06934367672206173") @[Rom.scala 25:32] 
    rom[28] <= UInt<64>("h020200a3b6466616d") @[Rom.scala 25:32] 
    rom[29] <= UInt<64>("h0656d697420202020") @[Rom.scala 25:32] 
    rom[30] <= UInt<64>("h03434783020706d63") @[Rom.scala 25:32] 
    rom[31] <= UInt<64>("h0a3b303030343030") @[Rom.scala 25:32] 
    rom[32] <= UInt<64>("h07069202020202020") @[Rom.scala 25:32] 
    rom[33] <= UInt<64>("h03030343478302069") @[Rom.scala 25:32] 
    rom[34] <= UInt<64>("h020200a3b30303030") @[Rom.scala 25:32] 
    rom[35] <= UInt<64>("h063696c7020202020") @[Rom.scala 25:32] 
    rom[36] <= UInt<64>("h020202020200a7b20") @[Rom.scala 25:32] 
    rom[37] <= UInt<64>("h0200a7b206d202020") @[Rom.scala 25:32] 
    rom[38] <= UInt<64>("h02020202020202020") @[Rom.scala 25:32] 
    rom[39] <= UInt<64>("h03030347830206569") @[Rom.scala 25:32] 
    rom[40] <= UInt<64>("h0200a3b3030303230") @[Rom.scala 25:32] 
    rom[41] <= UInt<64>("h02020202020202020") @[Rom.scala 25:32] 
    rom[42] <= UInt<64>("h03020687365726874") @[Rom.scala 25:32] 
    rom[43] <= UInt<64>("h03030303032303478") @[Rom.scala 25:32] 
    rom[44] <= UInt<64>("h020202020200a3b30") @[Rom.scala 25:32] 
    rom[45] <= UInt<64>("h069616c6320202020") @[Rom.scala 25:32] 
    rom[46] <= UInt<64>("h0303230347830206d") @[Rom.scala 25:32] 
    rom[47] <= UInt<64>("h020200a3b34303030") @[Rom.scala 25:32] 
    rom[48] <= UInt<64>("h03b7d202020202020") @[Rom.scala 25:32] 
    rom[49] <= UInt<64>("h0202020202020200a") @[Rom.scala 25:32] 
    rom[50] <= UInt<64>("h02020200a7b207320") @[Rom.scala 25:32] 
    rom[51] <= UInt<64>("h06569202020202020") @[Rom.scala 25:32] 
    rom[52] <= UInt<64>("h03230303034783020") @[Rom.scala 25:32] 
    rom[53] <= UInt<64>("h02020200a3b303830") @[Rom.scala 25:32] 
    rom[54] <= UInt<64>("h06874202020202020") @[Rom.scala 25:32] 
    rom[55] <= UInt<64>("h03478302068736572") @[Rom.scala 25:32] 
    rom[56] <= UInt<64>("h03b30303031303230") @[Rom.scala 25:32] 
    rom[57] <= UInt<64>("h0202020202020200a") @[Rom.scala 25:32] 
    rom[58] <= UInt<64>("h0206d69616c632020") @[Rom.scala 25:32] 
    rom[59] <= UInt<64>("h03031303230347830") @[Rom.scala 25:32] 
    rom[60] <= UInt<64>("h0202020200a3b3430") @[Rom.scala 25:32] 
    rom[61] <= UInt<64>("h0200a3b7d20202020") @[Rom.scala 25:32] 
    rom[62] <= UInt<64>("h0a3b7d2020202020") @[Rom.scala 25:32] 
    rom[63] <= UInt<64>("h0200a3b7d20202020") @[Rom.scala 25:32] 
    rom[64] <= UInt<64>("h0a3b7d0a3b7d20") @[Rom.scala 25:32] 
    node raddr = cat(acq.io.deq.bits.addr_block, addr_beat) @[Cat.scala 20:58] 
    node T_533 = bits(raddr, 6, 0) @[Rom.scala 30:52] 
    node T_535 = eq(multi_beat, UInt<1>("h00")) @[Rom.scala 32:14] 
    node T_537 = eq(addr_beat, UInt<3>("h07")) @[Rom.scala 32:39] 
    node last = or(T_535, T_537) @[Rom.scala 32:26] 
    io.grant.valid <= acq.io.deq.valid @[Rom.scala 33:18] 
    node T_538 = and(io.grant.ready, last) @[Rom.scala 34:31] 
    acq.io.deq.ready <= T_538 @[Rom.scala 34:13] 
    node T_555 = eq(UInt<3>("h06"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_556 = mux(T_555, UInt<3>("h01"), UInt<3>("h03")) @[Mux.scala 46:16] 
    node T_557 = eq(UInt<3>("h05"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_558 = mux(T_557, UInt<3>("h01"), T_556) @[Mux.scala 46:16] 
    node T_559 = eq(UInt<3>("h04"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_560 = mux(T_559, UInt<3>("h04"), T_558) @[Mux.scala 46:16] 
    node T_561 = eq(UInt<3>("h03"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_562 = mux(T_561, UInt<3>("h03"), T_560) @[Mux.scala 46:16] 
    node T_563 = eq(UInt<3>("h02"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_564 = mux(T_563, UInt<3>("h03"), T_562) @[Mux.scala 46:16] 
    node T_565 = eq(UInt<3>("h01"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_566 = mux(T_565, UInt<3>("h05"), T_564) @[Mux.scala 46:16] 
    node T_567 = eq(UInt<3>("h00"), acq.io.deq.bits.a_type) @[Mux.scala 46:19] 
    node T_568 = mux(T_567, UInt<3>("h04"), T_566) @[Mux.scala 46:16] 
    wire T_592 : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>} @[Definitions.scala 856:19] 
    T_592 is invalid @[Definitions.scala 856:19] 
    T_592.is_builtin_type <= UInt<1>("h01") @[Definitions.scala 857:25] 
    T_592.g_type <= T_568 @[Definitions.scala 858:16] 
    T_592.client_xact_id <= acq.io.deq.bits.client_xact_id @[Definitions.scala 859:24] 
    T_592.manager_xact_id <= UInt<1>("h00") @[Definitions.scala 860:25] 
    T_592.addr_beat <= addr_beat @[Definitions.scala 861:19] 
    T_592.data <= rom[T_533] @[Definitions.scala 862:14] 
    io.grant.bits <- T_592 @[Rom.scala 35:17] 
    
  module Uncore : 
    input clk : Clock
    input reset : UInt<1>
    output io : {mem_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[1], mem_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mem_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip tiles_cached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip probe : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, p_type : UInt<2>}}, release : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, addr_block : UInt<26>, client_xact_id : UInt<1>, voluntary : UInt<1>, r_type : UInt<3>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>, manager_id : UInt<1>}}, finish : {flip ready : UInt<1>, valid : UInt<1>, bits : {manager_xact_id : UInt<4>, manager_id : UInt<1>}}}[1], flip tiles_uncached : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<1>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<1>, manager_xact_id : UInt<4>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[1], prci : {reset : UInt<1>, id : UInt<1>, interrupts : {meip : UInt<1>, seip : UInt<1>, debug : UInt<1>, mtip : UInt<1>, msip : UInt<1>}}[1], flip bus_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mmio_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip interrupts : UInt<1>[2], flip debugBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, op : UInt<2>, data : UInt<34>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<34>}}}}
    
    io is invalid
    inst outmemsys of OuterMemorySystem @[RocketChip.scala 236:11] 
    outmemsys.io is invalid
    outmemsys.clk <= clk
    outmemsys.reset <= reset
    outmemsys.io.incoherent[0] <= UInt<1>("h00") @[RocketChip.scala 238:38] 
    outmemsys.io.tiles_uncached <= io.tiles_uncached @[RocketChip.scala 239:31] 
    outmemsys.io.tiles_cached <= io.tiles_cached @[RocketChip.scala 240:29] 
    inst TileLinkRecursiveInterconnect_2 of TileLinkRecursiveInterconnect @[RocketChip.scala 299:29] 
    TileLinkRecursiveInterconnect_2.io is invalid
    TileLinkRecursiveInterconnect_2.clk <= clk
    TileLinkRecursiveInterconnect_2.reset <= reset
    TileLinkRecursiveInterconnect_2.io.in[0] <- outmemsys.io.mmio @[RocketChip.scala 300:28] 
    inst PLIC_1 of PLIC @[RocketChip.scala 302:22] 
    PLIC_1.io is invalid
    PLIC_1.clk <= clk
    PLIC_1.reset <= reset
    PLIC_1.io.tl <- TileLinkRecursiveInterconnect_2.io.out[2] @[RocketChip.scala 303:16] 
    inst LevelGateway_2 of LevelGateway @[RocketChip.scala 305:27] 
    LevelGateway_2.io is invalid
    LevelGateway_2.clk <= clk
    LevelGateway_2.reset <= reset
    LevelGateway_2.io.interrupt <= io.interrupts[0] @[RocketChip.scala 306:28] 
    PLIC_1.io.devices[0] <- LevelGateway_2.io.plic @[RocketChip.scala 307:26] 
    inst LevelGateway_1_1 of LevelGateway @[RocketChip.scala 305:27] 
    LevelGateway_1_1.io is invalid
    LevelGateway_1_1.clk <= clk
    LevelGateway_1_1.reset <= reset
    LevelGateway_1_1.io.interrupt <= io.interrupts[1] @[RocketChip.scala 306:28] 
    PLIC_1.io.devices[1] <- LevelGateway_1_1.io.plic @[RocketChip.scala 307:26] 
    inst DebugModule_1 of DebugModule @[RocketChip.scala 310:29] 
    DebugModule_1.io is invalid
    DebugModule_1.clk <= clk
    DebugModule_1.reset <= reset
    DebugModule_1.io.tl <- TileLinkRecursiveInterconnect_2.io.out[0] @[RocketChip.scala 311:23] 
    DebugModule_1.io.db <- io.debugBus @[RocketChip.scala 312:23] 
    inst PRCI_1 of PRCI @[RocketChip.scala 314:22] 
    PRCI_1.io is invalid
    PRCI_1.clk <= clk
    PRCI_1.reset <= reset
    PRCI_1.io.tl <- TileLinkRecursiveInterconnect_2.io.out[3] @[RocketChip.scala 315:16] 
    io.prci <= PRCI_1.io.tiles @[RocketChip.scala 316:13] 
    reg T_10228 : UInt<7>, clk with : (reset => (reset, UInt<7>("h00")))
    node T_10230 = eq(T_10228, UInt<7>("h063")) @[Counter.scala 20:24] 
    node T_10232 = add(T_10228, UInt<1>("h01")) @[Counter.scala 21:22] 
    node T_10233 = tail(T_10232, 1) @[Counter.scala 21:22] 
    T_10228 <= T_10233 @[Counter.scala 21:13] 
    when T_10230 : @[Counter.scala 23:21] 
      T_10228 <= UInt<1>("h00") @[Counter.scala 23:29] 
      skip @[Counter.scala 23:21] 
    PRCI_1.io.rtcTick <= T_10230 @[RocketChip.scala 317:21] 
    PRCI_1.io.interrupts[0].meip <= PLIC_1.io.harts[0] @[RocketChip.scala 320:34] 
    PRCI_1.io.interrupts[0].seip <= PLIC_1.io.harts[1] @[RocketChip.scala 322:36] 
    PRCI_1.io.interrupts[0].debug <= DebugModule_1.io.debugInterrupts[0] @[RocketChip.scala 323:35] 
    io.prci[0].reset <= reset @[RocketChip.scala 325:24] 
    inst ROMSlave_1 of ROMSlave @[RocketChip.scala 328:25] 
    ROMSlave_1.io is invalid
    ROMSlave_1.clk <= clk
    ROMSlave_1.reset <= reset
    ROMSlave_1.io <- TileLinkRecursiveInterconnect_2.io.out[1] @[RocketChip.scala 329:16] 
    io.mem_axi <= outmemsys.io.mem_axi @[RocketChip.scala 244:14] 
    io.mem_ahb <= outmemsys.io.mem_ahb @[RocketChip.scala 245:14] 
    io.mem_tl <= outmemsys.io.mem_tl @[RocketChip.scala 246:14] 
    outmemsys.io.bus_axi <= io.bus_axi @[RocketChip.scala 247:24] 
    
  module Top : 
    input clk : Clock
    input reset : UInt<1>
    output io : {mem_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[1], mem_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mem_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<4>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<4>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip interrupts : UInt<1>[2], flip bus_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}[0], mmio_ahb : {htrans : UInt<2>, hmastlock : UInt<1>, haddr : UInt<32>, hwrite : UInt<1>, hburst : UInt<3>, hsize : UInt<3>, hprot : UInt<4>, hwdata : UInt<64>, flip hrdata : UInt<64>, flip hready : UInt<1>, flip hresp : UInt<1>}[0], mmio_tl : {acquire : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_block : UInt<26>, client_xact_id : UInt<2>, addr_beat : UInt<3>, is_builtin_type : UInt<1>, a_type : UInt<3>, union : UInt<12>, data : UInt<64>}}, flip grant : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr_beat : UInt<3>, client_xact_id : UInt<2>, manager_xact_id : UInt<1>, is_builtin_type : UInt<1>, g_type : UInt<4>, data : UInt<64>}}}[0], flip debug : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<5>, op : UInt<2>, data : UInt<34>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<34>}}}}
    
    io is invalid
    wire tileResets : UInt<1>[1] @[RocketChip.scala 152:24] 
    tileResets is invalid @[RocketChip.scala 152:24] 
    inst tileList_0 of RocketTile @[Configs.scala 178:17] 
    tileList_0.io is invalid
    tileList_0.clk <= clk
    tileList_0.reset <= tileResets[0]
    inst uncore of Uncore @[RocketChip.scala 166:22] 
    uncore.io is invalid
    uncore.clk <= clk
    uncore.reset <= reset
    tileResets[0] <= uncore.io.prci[0].reset @[RocketChip.scala 170:11] 
    tileList_0.io.prci <- uncore.io.prci[0] @[RocketChip.scala 171:20] 
    uncore.io.tiles_cached[0] <- tileList_0.io.cached[0] @[RocketChip.scala 175:26] 
    uncore.io.tiles_uncached[0] <- tileList_0.io.uncached[0] @[RocketChip.scala 176:28] 
    uncore.io.interrupts <= io.interrupts @[RocketChip.scala 177:24] 
    uncore.io.debugBus <- io.debug @[RocketChip.scala 178:22] 
    io.mmio_ahb <= uncore.io.mmio_ahb @[RocketChip.scala 197:15] 
    io.mmio_tl <= uncore.io.mmio_tl @[RocketChip.scala 198:14] 
    io.mem_axi[0] <- uncore.io.mem_axi[0] @[RocketChip.scala 200:14] 
    io.mem_ahb <= uncore.io.mem_ahb @[RocketChip.scala 204:14] 
    io.mem_tl <= uncore.io.mem_tl @[RocketChip.scala 205:13] 